

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon May 23 07:40:48 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0088                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0094                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  0087                     	;# 
   146  0088                     	;# 
   147  0089                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009E                     	;# 
   158  009F                     	;# 
   159  010C                     	;# 
   160  010D                     	;# 
   161  010E                     	;# 
   162  010F                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  000E                     	;# 
   181  000F                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0013                     	;# 
   186  0014                     	;# 
   187  0015                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001D                     	;# 
   198  001E                     	;# 
   199  001F                     	;# 
   200  0081                     	;# 
   201  0085                     	;# 
   202  0086                     	;# 
   203  0087                     	;# 
   204  0088                     	;# 
   205  0089                     	;# 
   206  008C                     	;# 
   207  008D                     	;# 
   208  008E                     	;# 
   209  0091                     	;# 
   210  0092                     	;# 
   211  0093                     	;# 
   212  0094                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0008                     	;# 
   232  0009                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000D                     	;# 
   237  000E                     	;# 
   238  000E                     	;# 
   239  000F                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0014                     	;# 
   245  0015                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  001D                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  0081                     	;# 
   259  0085                     	;# 
   260  0086                     	;# 
   261  0087                     	;# 
   262  0088                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0094                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281                           
   282                           	psect	idataBANK0
   283  0985                     __pidataBANK0:	
   284                           
   285                           ;initializer for LCDWriteInt@F1142
   286  0985  342D               	retlw	45
   287  0986  342D               	retlw	45
   288  0987  342D               	retlw	45
   289  0988  342D               	retlw	45
   290  0989  342D               	retlw	45
   291  098A  3400               	retlw	0
   292                           
   293                           ;initializer for _date
   294  098B  3408               	retlw	8
   295  098C  3400               	retlw	0
   296                           
   297                           ;initializer for _day
   298  098D  3401               	retlw	1
   299  098E  3400               	retlw	0
   300                           
   301                           ;initializer for _hour
   302  098F  3406               	retlw	6
   303  0990  3400               	retlw	0
   304                           
   305                           ;initializer for _minute
   306  0991  3405               	retlw	5
   307  0992  3400               	retlw	0
   308                           
   309                           ;initializer for _month
   310  0993  3405               	retlw	5
   311  0994  3400               	retlw	0
   312                           
   313                           ;initializer for _runningMinute
   314  0995  34FF               	retlw	255
   315  0996  34FF               	retlw	255
   316                           
   317                           ;initializer for _seconds
   318  0997  3404               	retlw	4
   319  0998  3400               	retlw	0
   320                           
   321                           ;initializer for _year
   322  0999  3410               	retlw	16
   323  099A  3400               	retlw	0
   324                           
   325                           ;initializer for _last_hour
   326  099B  34EE               	retlw	238
   327                           
   328                           ;initializer for _menuFunction
   329  099C  3401               	retlw	1
   330                           
   331                           	psect	strings
   332  0800                     __pstrings:	
   333  0800                     stringtab:	
   334  0800                     __stringtab:	
   335                           
   336                           ;	String table - string pointers are 1 byte each
   337  0800  1BFF               	btfsc	btemp+1,7
   338  0801  280A               	ljmp	stringcode
   339  0802  1383               	bcf	3,7
   340  0803  187F               	btfsc	btemp+1,0
   341  0804  1783               	bsf	3,7
   342  0805  0800               	movf	0,w
   343  0806  0A84               	incf	4,f
   344  0807  1903               	skipnz
   345  0808  0AFF               	incf	btemp+1,f
   346  0809  0008               	return
   347  080A                     stringcode:	
   348  080A                     stringdir:	
   349  080A  3008               	movlw	high stringdir
   350  080B  008A               	movwf	10
   351  080C  0804               	movf	4,w
   352  080D  0A84               	incf	4,f
   353  080E  0782               	addwf	2,f
   354  080F                     __stringbase:	
   355  080F  3400               	retlw	0
   356  0810                     __end_of__stringtab:	
   357  0810                     _ttable:	
   358  0810  3400               	retlw	0
   359  0811  3402               	retlw	2
   360  0812  3404               	retlw	4
   361  0813  3400               	retlw	0
   362  0814  3403               	retlw	3
   363  0815  3400               	retlw	0
   364  0816  3401               	retlw	1
   365  0817  3410               	retlw	16
   366  0818  3403               	retlw	3
   367  0819  3402               	retlw	2
   368  081A  3400               	retlw	0
   369  081B  3400               	retlw	0
   370  081C  3403               	retlw	3
   371  081D  3402               	retlw	2
   372  081E  3401               	retlw	1
   373  081F  3400               	retlw	0
   374  0820  3406               	retlw	6
   375  0821  3400               	retlw	0
   376  0822  3404               	retlw	4
   377  0823  3400               	retlw	0
   378  0824  3406               	retlw	6
   379  0825  3405               	retlw	5
   380  0826  3400               	retlw	0
   381  0827  3420               	retlw	32
   382  0828  3406               	retlw	6
   383  0829  3405               	retlw	5
   384  082A  3404               	retlw	4
   385  082B  3400               	retlw	0
   386  082C                     __end_of_ttable:	
   387  082C                     _daysOfTheWeek:	
   388  082C  344D               	retlw	77
   389  082D  346F               	retlw	111
   390  082E  346E               	retlw	110
   391  082F  3454               	retlw	84
   392  0830  3475               	retlw	117
   393  0831  3465               	retlw	101
   394  0832  3457               	retlw	87
   395  0833  3465               	retlw	101
   396  0834  3464               	retlw	100
   397  0835  3454               	retlw	84
   398  0836  3468               	retlw	104
   399  0837  3475               	retlw	117
   400  0838  3446               	retlw	70
   401  0839  3472               	retlw	114
   402  083A  3469               	retlw	105
   403  083B  3453               	retlw	83
   404  083C  3461               	retlw	97
   405  083D  3474               	retlw	116
   406  083E  3453               	retlw	83
   407  083F  3475               	retlw	117
   408  0840  346E               	retlw	110
   409  0841  3400               	retlw	0
   410  0842                     __end_of_daysOfTheWeek:	
   411  0842                     _monthDays:	
   412  0842  341F               	retlw	31
   413  0843  341D               	retlw	29
   414  0844  341F               	retlw	31
   415  0845  341E               	retlw	30
   416  0846  341F               	retlw	31
   417  0847  341E               	retlw	30
   418  0848  341F               	retlw	31
   419  0849  341F               	retlw	31
   420  084A  341E               	retlw	30
   421  084B  341F               	retlw	31
   422  084C  341E               	retlw	30
   423  084D  341F               	retlw	31
   424  084E                     __end_of_monthDays:	
   425  084E                     _setText:	
   426  084E  3453               	retlw	83
   427  084F  3465               	retlw	101
   428  0850  3474               	retlw	116
   429  0851  3420               	retlw	32
   430  0852  3400               	retlw	0
   431  0853                     __end_of_setText:	
   432  0008                     _PORTD	set	8
   433  0013                     _SSPBUF	set	19
   434  0014                     _SSPCON	set	20
   435  0031                     _RB1	set	49
   436  0032                     _RB2	set	50
   437  0034                     _RB4	set	52
   438  0035                     _RB5	set	53
   439  0042                     _RD2	set	66
   440  0043                     _RD3	set	67
   441  0093                     _SSPADD	set	147
   442  0091                     _SSPCON2	set	145
   443  0094                     _SSPSTAT	set	148
   444  0086                     _TRISBbits	set	134
   445  0088                     _TRISD	set	136
   446  0088                     _TRISDbits	set	136
   447  048D                     _ACKDT	set	1165
   448  048C                     _ACKEN	set	1164
   449  04A0                     _BF	set	1184
   450  048A                     _PEN	set	1162
   451  048B                     _RCEN	set	1163
   452  0489                     _RSEN	set	1161
   453  0488                     _SEN	set	1160
   454  043B                     _TRISC3	set	1083
   455  043C                     _TRISC4	set	1084
   456  0853                     STR_1:	
   457  0853  3453               	retlw	83	;'S'
   458  0854  3474               	retlw	116	;'t'
   459  0855  3461               	retlw	97	;'a'
   460  0856  3472               	retlw	114	;'r'
   461  0857  3474               	retlw	116	;'t'
   462  0858  3469               	retlw	105	;'i'
   463  0859  346E               	retlw	110	;'n'
   464  085A  3467               	retlw	103	;'g'
   465  085B  3420               	retlw	32	;' '
   466  085C  3463               	retlw	99	;'c'
   467  085D  346F               	retlw	111	;'o'
   468  085E  3475               	retlw	117	;'u'
   469  085F  346E               	retlw	110	;'n'
   470  0860  3474               	retlw	116	;'t'
   471  0861  3465               	retlw	101	;'e'
   472  0862  3472               	retlw	114	;'r'
   473  0863  3400               	retlw	0
   474  0864                     STR_3:	
   475  0864  3420               	retlw	32	;' '
   476  0865  346D               	retlw	109	;'m'
   477  0866  3469               	retlw	105	;'i'
   478  0867  346E               	retlw	110	;'n'
   479  0868  3475               	retlw	117	;'u'
   480  0869  3474               	retlw	116	;'t'
   481  086A  3465               	retlw	101	;'e'
   482  086B  3473               	retlw	115	;'s'
   483  086C  3400               	retlw	0
   484  086D                     STR_6:	
   485  086D  3420               	retlw	32	;' '
   486  086E  3420               	retlw	32	;' '
   487  086F  3420               	retlw	32	;' '
   488  0870  3420               	retlw	32	;' '
   489  0871  3420               	retlw	32	;' '
   490  0872  3420               	retlw	32	;' '
   491  0873  3420               	retlw	32	;' '
   492  0874  3400               	retlw	0
   493  0875                     STR_9:	
   494  0875  3453               	retlw	83	;'S'
   495  0876  3465               	retlw	101	;'e'
   496  0877  3463               	retlw	99	;'c'
   497  0878  346F               	retlw	111	;'o'
   498  0879  346E               	retlw	110	;'n'
   499  087A  3464               	retlw	100	;'d'
   500  087B  3473               	retlw	115	;'s'
   501  087C  3400               	retlw	0
   502  087D                     STR_8:	
   503  087D  344D               	retlw	77	;'M'
   504  087E  3469               	retlw	105	;'i'
   505  087F  346E               	retlw	110	;'n'
   506  0880  3475               	retlw	117	;'u'
   507  0881  3474               	retlw	116	;'t'
   508  0882  3465               	retlw	101	;'e'
   509  0883  3473               	retlw	115	;'s'
   510  0884  3400               	retlw	0
   511  0885                     STR_4:	
   512  0885  3454               	retlw	84	;'T'
   513  0886  3469               	retlw	105	;'i'
   514  0887  346D               	retlw	109	;'m'
   515  0888  3465               	retlw	101	;'e'
   516  0889  3420               	retlw	32	;' '
   517  088A  343F               	retlw	63	;'?'
   518  088B  3400               	retlw	0
   519  088C                     STR_5:	
   520  088C  3444               	retlw	68	;'D'
   521  088D  3461               	retlw	97	;'a'
   522  088E  3474               	retlw	116	;'t'
   523  088F  3465               	retlw	101	;'e'
   524  0890  3420               	retlw	32	;' '
   525  0891  343F               	retlw	63	;'?'
   526  0892  3400               	retlw	0
   527  0893                     STR_13:	
   528  0893  3444               	retlw	68	;'D'
   529  0894  3461               	retlw	97	;'a'
   530  0895  3479               	retlw	121	;'y'
   531  0896  3420               	retlw	32	;' '
   532  0897  3420               	retlw	32	;' '
   533  0898  3400               	retlw	0
   534  0899                     STR_12:	
   535  0899  3444               	retlw	68	;'D'
   536  089A  3461               	retlw	97	;'a'
   537  089B  3474               	retlw	116	;'t'
   538  089C  3465               	retlw	101	;'e'
   539  089D  3420               	retlw	32	;' '
   540  089E  3400               	retlw	0
   541  089F                     STR_11:	
   542  089F  344D               	retlw	77	;'M'
   543  08A0  346F               	retlw	111	;'o'
   544  08A1  346E               	retlw	110	;'n'
   545  08A2  3474               	retlw	116	;'t'
   546  08A3  3468               	retlw	104	;'h'
   547  08A4  3400               	retlw	0
   548  08A5                     STR_7:	
   549  08A5  3448               	retlw	72	;'H'
   550  08A6  346F               	retlw	111	;'o'
   551  08A7  3475               	retlw	117	;'u'
   552  08A8  3472               	retlw	114	;'r'
   553  08A9  3473               	retlw	115	;'s'
   554  08AA  3400               	retlw	0
   555  08AB                     STR_10:	
   556  08AB  3459               	retlw	89	;'Y'
   557  08AC  3465               	retlw	101	;'e'
   558  08AD  3461               	retlw	97	;'a'
   559  08AE  3472               	retlw	114	;'r'
   560  08AF  3400               	retlw	0
   561  08B0                     STR_2:	
   562  08B0  3461               	retlw	97	;'a'
   563  08B1  3474               	retlw	116	;'t'
   564  08B2  3420               	retlw	32	;' '
   565  08B3  3400               	retlw	0
   566                           
   567                           ; #config settings
   568  0000                     
   569                           	psect	cinit
   570  07EA                     start_initialization:	
   571  07EA                     __initialization:	
   572                           
   573                           ; Clear objects allocated to BANK0
   574  07EA  01E2               	clrf	__pbssBANK0& (0+127)
   575  07EB  01E3               	clrf	(__pbssBANK0+1)& (0+127)
   576  07EC  01E4               	clrf	(__pbssBANK0+2)& (0+127)
   577  07ED  01E5               	clrf	(__pbssBANK0+3)& (0+127)
   578  07EE  01E6               	clrf	(__pbssBANK0+4)& (0+127)
   579  07EF  01E7               	clrf	(__pbssBANK0+5)& (0+127)
   580                           
   581                           ; Initialize objects allocated to BANK0
   582  07F0  1383               	bcf	3,7	;select IRP bank0
   583  07F1  3062               	movlw	low (__pdataBANK0+24)
   584  07F2  00FD               	movwf	btemp+-1
   585  07F3  3009               	movlw	high __pidataBANK0
   586  07F4  00FE               	movwf	btemp
   587  07F5  3085               	movlw	low __pidataBANK0
   588  07F6  00FF               	movwf	btemp+1
   589  07F7  304A               	movlw	low __pdataBANK0
   590  07F8  0084               	movwf	4
   591  07F9  120A  158A  2161   	fcall	init_ram0
   592  07FC                     end_of_initialization:	
   593                           ;End of C runtime variable initialization code
   594                           
   595  07FC                     __end_of__initialization:	
   596  07FC  0183               	clrf	3
   597  07FD  120A  118A  2997   	ljmp	_main	;jump to C main() function
   598                           
   599                           	psect	bssBANK0
   600  0062                     __pbssBANK0:	
   601  0062                     _next_menu_clear:	
   602  0062                     	ds	2
   603  0064                     _bButton:	
   604  0064                     	ds	1
   605  0065                     _state:	
   606  0065                     	ds	1
   607  0066                     _runningTime:	
   608  0066                     	ds	2
   609                           
   610                           	psect	dataBANK0
   611  004A                     __pdataBANK0:	
   612  004A                     LCDWriteInt@F1142:	
   613  004A                     	ds	6
   614  0050                     _date:	
   615  0050                     	ds	2
   616  0052                     _day:	
   617  0052                     	ds	2
   618  0054                     _hour:	
   619  0054                     	ds	2
   620  0056                     _minute:	
   621  0056                     	ds	2
   622  0058                     _month:	
   623  0058                     	ds	2
   624  005A                     _runningMinute:	
   625  005A                     	ds	2
   626  005C                     _seconds:	
   627  005C                     	ds	2
   628  005E                     _year:	
   629  005E                     	ds	2
   630  0060                     _last_hour:	
   631  0060                     	ds	1
   632  0061                     _menuFunction:	
   633  0061                     	ds	1
   634                           
   635                           	psect	inittext
   636  095D                     init_fetch0:	
   637                           ;	Called with low address in FSR and high address in W
   638                           
   639  095D  087E               	movf	126,w
   640  095E  008A               	movwf	10
   641  095F  087F               	movf	127,w
   642  0960  0082               	movwf	2
   643  0961                     init_ram0:	
   644                           ;Called with:
   645                           ;	high address of idata address in btemp 
   646                           ;	low address of idata address in btemp+1 
   647                           ;	low address of data in FSR
   648                           ;	high address + 1 of data in btemp-1
   649                           
   650  0961  215D  120A  158A   	fcall	init_fetch0
   651  0964  0080               	movwf	0
   652  0965  0A84               	incf	4,f
   653  0966  0804               	movf	4,w
   654  0967  067D               	xorwf	125,w
   655  0968  1903               	btfsc	3,2
   656  0969  3400               	retlw	0
   657  096A  0AFF               	incf	127,f
   658  096B  1903               	btfsc	3,2
   659  096C  0AFE               	incf	126,f
   660  096D  2961               	goto	init_ram0
   661                           
   662                           	psect	cstackCOMMON
   663  0071                     __pcstackCOMMON:	
   664  0071                     ?_I2C_Start:	
   665  0071                     ??_I2C_Start:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0071                     ?_DS1307_Write:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0071                     ??_I2C_Restart:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0071                     ?_DS1307_Read:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0071                     ?_I2C_NoAck:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0071                     ??_I2C_NoAck:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0071                     ?_I2C_Stop:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0071                     ??_I2C_Stop:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0071                     ?_I2C_Write:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0071                     ??_I2C_Write:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0071                     ?_I2C_Read:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0071                     ??_I2C_Read:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0071                     ?_I2C_Ack:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0071                     ??_I2C_Ack:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0071                     ?_I2C_Wait:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0071                     ??_I2C_Wait:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0071                     ?_LCDBusyLoop:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0071                     ??_LCDBusyLoop:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0071                     ?_readClock:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0071                     ?_showClock:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0071                     ?_readInputs:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0071                     ??_readInputs:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0071                     ?_doMenu:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0071                     ?_clearPrompt:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0071                     ?_showTime:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0071                     ?_showDate:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0071                     ?_showRunningTime:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0071                     ?_I2C_Init:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0071                     ??_I2C_Init:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0071                     ?_LCDInit:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  0071                     ?_main:	
   756                           ; 1 bytes @ 0x0
   757                           
   758  0071                     ?_I2C_Restart:	
   759                           ; 1 bytes @ 0x0
   760                           
   761  0071                     ?_DS1307_Init:	
   762                           ; 2 bytes @ 0x0
   763                           
   764  0071                     ?___awdiv:	
   765                           ; 2 bytes @ 0x0
   766                           
   767  0071                     ?___awmod:	
   768                           ; 2 bytes @ 0x0
   769                           
   770  0071                     I2C_Write@dat:	
   771                           ; 2 bytes @ 0x0
   772                           
   773  0071                     ___awdiv@divisor:	
   774                           ; 1 bytes @ 0x0
   775                           
   776  0071                     ___awmod@divisor:	
   777                           ; 2 bytes @ 0x0
   778                           
   779                           
   780                           ; 2 bytes @ 0x0
   781  0071                     	ds	1
   782  0072                     ??_DS1307_Write:	
   783  0072                     DS1307_Write@dat:	
   784                           ; 1 bytes @ 0x1
   785                           
   786  0072                     I2C_Read@temp:	
   787                           ; 1 bytes @ 0x1
   788                           
   789                           
   790                           ; 1 bytes @ 0x1
   791  0072                     	ds	1
   792  0073                     ??_DS1307_Read:	
   793  0073                     ??_DS1307_Init:	
   794                           ; 1 bytes @ 0x2
   795                           
   796  0073                     ?_DS1307_SetTime:	
   797                           ; 1 bytes @ 0x2
   798                           
   799  0073                     ?_DS1307_SetDate:	
   800                           ; 1 bytes @ 0x2
   801                           
   802  0073                     ?_DS1307_GetTime:	
   803                           ; 1 bytes @ 0x2
   804                           
   805  0073                     ?_DS1307_GetDate:	
   806                           ; 1 bytes @ 0x2
   807                           
   808  0073                     ?_DS1307_readRam:	
   809                           ; 1 bytes @ 0x2
   810                           
   811  0073                     ?_DS1307_writeRam:	
   812                           ; 1 bytes @ 0x2
   813                           
   814  0073                     DS1307_SetTime@mm:	
   815                           ; 1 bytes @ 0x2
   816                           
   817  0073                     DS1307_SetDate@dd:	
   818                           ; 1 bytes @ 0x2
   819                           
   820  0073                     DS1307_GetTime@m_ptr:	
   821                           ; 1 bytes @ 0x2
   822                           
   823  0073                     DS1307_GetDate@d_ptr:	
   824                           ; 1 bytes @ 0x2
   825                           
   826  0073                     LCDBusyLoop@busy:	
   827                           ; 1 bytes @ 0x2
   828                           
   829  0073                     DS1307_readRam@offset:	
   830                           ; 1 bytes @ 0x2
   831                           
   832  0073                     DS1307_writeRam@offset:	
   833                           ; 2 bytes @ 0x2
   834                           
   835  0073                     ___awdiv@dividend:	
   836                           ; 2 bytes @ 0x2
   837                           
   838  0073                     ___awmod@dividend:	
   839                           ; 2 bytes @ 0x2
   840                           
   841                           
   842                           ; 2 bytes @ 0x2
   843  0073                     	ds	1
   844  0074                     DS1307_Init@s:	
   845  0074                     DS1307_SetTime@ss:	
   846                           ; 1 bytes @ 0x3
   847                           
   848  0074                     DS1307_SetDate@mm:	
   849                           ; 1 bytes @ 0x3
   850                           
   851  0074                     DS1307_GetTime@s_ptr:	
   852                           ; 1 bytes @ 0x3
   853                           
   854  0074                     DS1307_GetDate@m_ptr:	
   855                           ; 1 bytes @ 0x3
   856                           
   857  0074                     LCDBusyLoop@temp:	
   858                           ; 1 bytes @ 0x3
   859                           
   860  0074                     readInputs@pinstate:	
   861                           ; 1 bytes @ 0x3
   862                           
   863                           
   864                           ; 1 bytes @ 0x3
   865  0074                     	ds	1
   866  0075                     ??_DS1307_SetTime:	
   867  0075                     ??_DS1307_GetTime:	
   868                           ; 1 bytes @ 0x4
   869                           
   870  0075                     ??___awdiv:	
   871                           ; 1 bytes @ 0x4
   872                           
   873  0075                     ??___awmod:	
   874                           ; 1 bytes @ 0x4
   875                           
   876  0075                     DS1307_SetTime@hh:	
   877                           ; 1 bytes @ 0x4
   878                           
   879  0075                     DS1307_SetDate@yy:	
   880                           ; 1 bytes @ 0x4
   881                           
   882  0075                     DS1307_GetDate@y_ptr:	
   883                           ; 1 bytes @ 0x4
   884                           
   885  0075                     LCDBusyLoop@status:	
   886                           ; 1 bytes @ 0x4
   887                           
   888  0075                     DS1307_readRam@length:	
   889                           ; 1 bytes @ 0x4
   890                           
   891  0075                     DS1307_writeRam@length:	
   892                           ; 2 bytes @ 0x4
   893                           
   894                           
   895                           ; 2 bytes @ 0x4
   896  0075                     	ds	1
   897  0076                     ??_DS1307_SetDate:	
   898  0076                     ??_DS1307_GetDate:	
   899                           ; 1 bytes @ 0x5
   900                           
   901  0076                     ?_LCDByte:	
   902                           ; 1 bytes @ 0x5
   903                           
   904  0076                     DS1307_SetDate@nn:	
   905                           ; 1 bytes @ 0x5
   906                           
   907  0076                     DS1307_GetTime@h_ptr:	
   908                           ; 1 bytes @ 0x5
   909                           
   910  0076                     LCDByte@isdata:	
   911                           ; 1 bytes @ 0x5
   912                           
   913  0076                     ___awdiv@counter:	
   914                           ; 1 bytes @ 0x5
   915                           
   916  0076                     ___awmod@counter:	
   917                           ; 1 bytes @ 0x5
   918                           
   919                           
   920                           ; 1 bytes @ 0x5
   921  0076                     	ds	1
   922  0077                     ??_DS1307_readRam:	
   923  0077                     ??_DS1307_writeRam:	
   924                           ; 1 bytes @ 0x6
   925                           
   926  0077                     ??_LCDByte:	
   927                           ; 1 bytes @ 0x6
   928                           
   929  0077                     DS1307_GetDate@n_ptr:	
   930                           ; 1 bytes @ 0x6
   931                           
   932  0077                     ___awdiv@sign:	
   933                           ; 1 bytes @ 0x6
   934                           
   935  0077                     ___awmod@sign:	
   936                           ; 1 bytes @ 0x6
   937                           
   938                           
   939                           ; 1 bytes @ 0x6
   940  0077                     	ds	1
   941  0078                     ___awdiv@quotient:	
   942                           
   943                           ; 2 bytes @ 0x7
   944  0078                     	ds	1
   945  0079                     DS1307_readRam@ptr:	
   946  0079                     DS1307_writeRam@ptr:	
   947                           ; 1 bytes @ 0x8
   948                           
   949  0079                     LCDByte@hn:	
   950                           ; 1 bytes @ 0x8
   951                           
   952                           
   953                           ; 1 bytes @ 0x8
   954  0079                     	ds	1
   955  007A                     ?___wmul:	
   956  007A                     LCDByte@ln:	
   957                           ; 2 bytes @ 0x9
   958                           
   959  007A                     ___wmul@multiplier:	
   960                           ; 1 bytes @ 0x9
   961                           
   962                           
   963                           ; 2 bytes @ 0x9
   964  007A                     	ds	1
   965  007B                     LCDByte@c:	
   966                           
   967                           ; 1 bytes @ 0xA
   968  007B                     	ds	1
   969  007C                     LCDByte@temp:	
   970  007C                     ___wmul@multiplicand:	
   971                           ; 1 bytes @ 0xB
   972                           
   973                           
   974                           ; 2 bytes @ 0xB
   975  007C                     	ds	1
   976  007D                     ??_LCDWriteString:	
   977  007D                     ?_LCDGotoXY:	
   978                           ; 1 bytes @ 0xC
   979                           
   980  007D                     LCDInit@style:	
   981                           ; 1 bytes @ 0xC
   982                           
   983  007D                     LCDGotoXY@y:	
   984                           ; 1 bytes @ 0xC
   985                           
   986                           
   987                           ; 1 bytes @ 0xC
   988  007D                     	ds	1
   989  007E                     ??_showClock:	
   990  007E                     ??_clearPrompt:	
   991                           ; 1 bytes @ 0xD
   992                           
   993  007E                     ??___wmul:	
   994                           ; 1 bytes @ 0xD
   995                           
   996                           
   997                           	psect	cstackBANK0
   998  0020                     __pcstackBANK0:	
   999                           ; 1 bytes @ 0xD
  1000                           
  1001  0020                     ??_LCDInit:	
  1002  0020                     ?_LCDWriteString:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0020                     ??_LCDGotoXY:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0020                     LCDWriteString@msg:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011  0020                     ___wmul@product:	
  1012                           ; 2 bytes @ 0x0
  1013                           
  1014                           
  1015                           ; 2 bytes @ 0x0
  1016  0020                     	ds	1
  1017  0021                     LCDGotoXY@x:	
  1018                           
  1019                           ; 1 bytes @ 0x1
  1020  0021                     	ds	1
  1021  0022                     ??_readClock:	
  1022  0022                     ?_LCDWriteInt:	
  1023                           ; 1 bytes @ 0x2
  1024                           
  1025  0022                     LCDWriteInt@val:	
  1026                           ; 1 bytes @ 0x2
  1027                           
  1028                           
  1029                           ; 2 bytes @ 0x2
  1030  0022                     	ds	2
  1031  0024                     LCDWriteInt@field_length:	
  1032                           
  1033                           ; 1 bytes @ 0x4
  1034  0024                     	ds	1
  1035  0025                     ??_LCDWriteInt:	
  1036  0025                     readClock@n:	
  1037                           ; 1 bytes @ 0x5
  1038                           
  1039                           
  1040                           ; 1 bytes @ 0x5
  1041  0025                     	ds	1
  1042  0026                     readClock@a:	
  1043                           
  1044                           ; 1 bytes @ 0x6
  1045  0026                     	ds	1
  1046  0027                     readClock@b:	
  1047                           
  1048                           ; 1 bytes @ 0x7
  1049  0027                     	ds	1
  1050  0028                     readClock@c:	
  1051  0028                     LCDWriteInt@characters:	
  1052                           ; 1 bytes @ 0x8
  1053                           
  1054                           
  1055                           ; 2 bytes @ 0x8
  1056  0028                     	ds	2
  1057  002A                     LCDWriteInt@str:	
  1058                           
  1059                           ; 6 bytes @ 0xA
  1060  002A                     	ds	6
  1061  0030                     LCDWriteInt@from:	
  1062                           
  1063                           ; 2 bytes @ 0x10
  1064  0030                     	ds	2
  1065  0032                     LCDWriteInt@c:	
  1066                           
  1067                           ; 1 bytes @ 0x12
  1068  0032                     	ds	1
  1069  0033                     ??_showTime:	
  1070  0033                     ??_showDate:	
  1071                           ; 1 bytes @ 0x13
  1072                           
  1073  0033                     ??_showRunningTime:	
  1074                           ; 1 bytes @ 0x13
  1075                           
  1076                           
  1077                           ; 1 bytes @ 0x13
  1078  0033                     	ds	1
  1079  0034                     showDate@d:	
  1080  0034                     _showRunningTime$738:	
  1081                           ; 2 bytes @ 0x14
  1082                           
  1083                           
  1084                           ; 2 bytes @ 0x14
  1085  0034                     	ds	2
  1086  0036                     ??_doMenu:	
  1087                           
  1088                           ; 1 bytes @ 0x16
  1089  0036                     	ds	3
  1090  0039                     doMenu@h:	
  1091                           
  1092                           ; 2 bytes @ 0x19
  1093  0039                     	ds	2
  1094  003B                     doMenu@m:	
  1095                           
  1096                           ; 2 bytes @ 0x1B
  1097  003B                     	ds	2
  1098  003D                     doMenu@s:	
  1099                           
  1100                           ; 2 bytes @ 0x1D
  1101  003D                     	ds	2
  1102  003F                     doMenu@n:	
  1103                           
  1104                           ; 2 bytes @ 0x1F
  1105  003F                     	ds	2
  1106  0041                     doMenu@d:	
  1107                           
  1108                           ; 2 bytes @ 0x21
  1109  0041                     	ds	2
  1110  0043                     doMenu@m_310:	
  1111                           
  1112                           ; 2 bytes @ 0x23
  1113  0043                     	ds	2
  1114  0045                     doMenu@y:	
  1115                           
  1116                           ; 2 bytes @ 0x25
  1117  0045                     	ds	2
  1118  0047                     ??_main:	
  1119                           
  1120                           ; 1 bytes @ 0x27
  1121  0047                     	ds	3
  1122                           
  1123                           	psect	maintext
  1124  0197                     __pmaintext:	
  1125 ;;
  1126 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1127 ;;
  1128 ;; *************** function _main *****************
  1129 ;; Defined at:
  1130 ;;		line 60 in file "LCDTime.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;		None
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;		None
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : B00/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1144 ;;      Params:         0       0       0       0       0
  1145 ;;      Locals:         0       0       0       0       0
  1146 ;;      Temps:          0       3       0       0       0
  1147 ;;      Totals:         0       3       0       0       0
  1148 ;;Total ram usage:        3 bytes
  1149 ;; Hardware stack levels required when called:    6
  1150 ;; This function calls:
  1151 ;;		_DS1307_Init
  1152 ;;		_DS1307_readRam
  1153 ;;		_I2C_Init
  1154 ;;		_LCDByte
  1155 ;;		_LCDGotoXY
  1156 ;;		_LCDInit
  1157 ;;		_LCDWriteInt
  1158 ;;		_LCDWriteString
  1159 ;;		___wmul
  1160 ;;		_clearPrompt
  1161 ;;		_doMenu
  1162 ;;		_readClock
  1163 ;;		_readInputs
  1164 ;;		_showClock
  1165 ;; This function is called by:
  1166 ;;		Startup code after reset
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           
  1171                           ;psect for function _main
  1172  0197                     _main:	
  1173                           
  1174                           ;LCDTime.c: 63: I2C_Init() ;
  1175                           
  1176                           ;incstack = 0
  1177                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1178  0197  120A  158A  213F  120A  118A  	fcall	_I2C_Init
  1179                           
  1180                           ;LCDTime.c: 65: LCDInit(0B00000000);
  1181  019C  3000               	movlw	0
  1182  019D  120A  158A  22EF  120A  118A  	fcall	_LCDInit
  1183                           
  1184                           ;LCDTime.c: 67: DS1307_Init() ;
  1185  01A2  120A  158A  2401  120A  118A  	fcall	_DS1307_Init
  1186                           
  1187                           ;LCDTime.c: 70: (LCDByte(0b00000001,0));
  1188  01A7  01F6               	clrf	LCDByte@isdata
  1189  01A8  3001               	movlw	1
  1190  01A9  120A  158A  23B1  120A  118A  	fcall	_LCDByte
  1191                           
  1192                           ;LCDTime.c: 73: DS1307_readRam(&runningTime,0,2) ;
  1193  01AE  3000               	movlw	0
  1194  01AF  00F3               	movwf	DS1307_readRam@offset
  1195  01B0  00F4               	movwf	DS1307_readRam@offset+1
  1196  01B1  3002               	movlw	2
  1197  01B2  00F5               	movwf	DS1307_readRam@length
  1198  01B3  3000               	movlw	0
  1199  01B4  00F6               	movwf	DS1307_readRam@length+1
  1200  01B5  3066               	movlw	(low (_runningTime| 0))& (0+255)
  1201  01B6  120A  158A  24A3  120A  118A  	fcall	_DS1307_readRam
  1202                           
  1203                           ;LCDTime.c: 75: LCDWriteString("Starting counter");
  1204  01BB  3044               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1205  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1206  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1207  01BE  00A0               	movwf	LCDWriteString@msg
  1208  01BF  3080               	movlw	128
  1209  01C0  00A1               	movwf	LCDWriteString@msg+1
  1210  01C1  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  1211                           
  1212                           ;LCDTime.c: 76: LCDGotoXY(0,1) ;
  1213  01C6  01FD               	clrf	LCDGotoXY@y
  1214  01C7  0AFD               	incf	LCDGotoXY@y,f
  1215  01C8  3000               	movlw	0
  1216  01C9  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  1217                           
  1218                           ;LCDTime.c: 77: LCDWriteString("at ");
  1219  01CE  30A1               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1220  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1221  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  1222  01D1  00A0               	movwf	LCDWriteString@msg
  1223  01D2  3080               	movlw	128
  1224  01D3  00A1               	movwf	LCDWriteString@msg+1
  1225  01D4  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  1226                           
  1227                           ;LCDTime.c: 78: LCDWriteInt(runningTime,5);
  1228  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1229  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1230  01DB  0867               	movf	_runningTime+1,w
  1231  01DC  00A3               	movwf	LCDWriteInt@val+1
  1232  01DD  0866               	movf	_runningTime,w
  1233  01DE  00A2               	movwf	LCDWriteInt@val
  1234  01DF  3005               	movlw	5
  1235  01E0  00C7               	movwf	??_main
  1236  01E1  0847               	movf	??_main,w
  1237  01E2  00A4               	movwf	LCDWriteInt@field_length
  1238  01E3  120A  158A  26C5  120A  118A  	fcall	_LCDWriteInt
  1239                           
  1240                           ;LCDTime.c: 79: LCDWriteString(" minutes");
  1241  01E8  3055               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1242  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1243  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  1244  01EB  00A0               	movwf	LCDWriteString@msg
  1245  01EC  3080               	movlw	128
  1246  01ED  00A1               	movwf	LCDWriteString@msg+1
  1247  01EE  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  1248                           
  1249                           ;LCDTime.c: 80: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1250  01F3  3004               	movlw	4
  1251  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1252  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1253  01F6  00C9               	movwf	??_main+2
  1254  01F7  30CF               	movlw	207
  1255  01F8  00C8               	movwf	??_main+1
  1256  01F9  3003               	movlw	3
  1257  01FA  00C7               	movwf	??_main
  1258  01FB                     u2657:	
  1259  01FB  0BC7               	decfsz	??_main,f
  1260  01FC  29FB               	goto	u2657
  1261  01FD  0BC8               	decfsz	??_main+1,f
  1262  01FE  29FB               	goto	u2657
  1263  01FF  0BC9               	decfsz	??_main+2,f
  1264  0200  29FB               	goto	u2657
  1265  0201  2A02               	nop2
  1266                           
  1267                           ;LCDTime.c: 81: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1268  0202  3004               	movlw	4
  1269  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1270  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1271  0205  00C9               	movwf	??_main+2
  1272  0206  30CF               	movlw	207
  1273  0207  00C8               	movwf	??_main+1
  1274  0208  3003               	movlw	3
  1275  0209  00C7               	movwf	??_main
  1276  020A                     u2667:	
  1277  020A  0BC7               	decfsz	??_main,f
  1278  020B  2A0A               	goto	u2667
  1279  020C  0BC8               	decfsz	??_main+1,f
  1280  020D  2A0A               	goto	u2667
  1281  020E  0BC9               	decfsz	??_main+2,f
  1282  020F  2A0A               	goto	u2667
  1283  0210  2A11               	nop2
  1284                           
  1285                           ;LCDTime.c: 82: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1286  0211  3004               	movlw	4
  1287  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1288  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1289  0214  00C9               	movwf	??_main+2
  1290  0215  30CF               	movlw	207
  1291  0216  00C8               	movwf	??_main+1
  1292  0217  3003               	movlw	3
  1293  0218  00C7               	movwf	??_main
  1294  0219                     u2677:	
  1295  0219  0BC7               	decfsz	??_main,f
  1296  021A  2A19               	goto	u2677
  1297  021B  0BC8               	decfsz	??_main+1,f
  1298  021C  2A19               	goto	u2677
  1299  021D  0BC9               	decfsz	??_main+2,f
  1300  021E  2A19               	goto	u2677
  1301  021F  2A20               	nop2
  1302                           
  1303                           ;LCDTime.c: 83: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1304  0220  3004               	movlw	4
  1305  0221  1283               	bcf	3,5	;RP0=0, select bank0
  1306  0222  1303               	bcf	3,6	;RP1=0, select bank0
  1307  0223  00C9               	movwf	??_main+2
  1308  0224  30CF               	movlw	207
  1309  0225  00C8               	movwf	??_main+1
  1310  0226  3003               	movlw	3
  1311  0227  00C7               	movwf	??_main
  1312  0228                     u2687:	
  1313  0228  0BC7               	decfsz	??_main,f
  1314  0229  2A28               	goto	u2687
  1315  022A  0BC8               	decfsz	??_main+1,f
  1316  022B  2A28               	goto	u2687
  1317  022C  0BC9               	decfsz	??_main+2,f
  1318  022D  2A28               	goto	u2687
  1319  022E  2A2F               	nop2
  1320                           
  1321                           ;LCDTime.c: 86: runningTime-- ;
  1322  022F  30FF               	movlw	255
  1323  0230  1283               	bcf	3,5	;RP0=0, select bank0
  1324  0231  1303               	bcf	3,6	;RP1=0, select bank0
  1325  0232  07E6               	addwf	_runningTime,f
  1326  0233  1803               	skipnc
  1327  0234  0AE7               	incf	_runningTime+1,f
  1328  0235  30FF               	movlw	255
  1329  0236  07E7               	addwf	_runningTime+1,f
  1330                           
  1331                           ;LCDTime.c: 88: (LCDByte(0b00000001,0));
  1332  0237  01F6               	clrf	LCDByte@isdata
  1333  0238  3001               	movlw	1
  1334  0239  120A  158A  23B1  120A  118A  	fcall	_LCDByte
  1335  023E  2AA4               	goto	l2720
  1336  023F                     l2728:	
  1337                           
  1338                           ;LCDTime.c: 99: doMenu();
  1339  023F  120A  118A  22ED  120A  118A  	fcall	_doMenu
  1340  0244  2AA4               	goto	l2720
  1341  0245                     l2732:	
  1342                           
  1343                           ;LCDTime.c: 101: {
  1344                           ;LCDTime.c: 107: if (state & 0x10)
  1345  0245  1E65               	btfss	_state,4
  1346  0246  2A52               	goto	l287
  1347                           
  1348                           ;LCDTime.c: 108: {
  1349                           ;LCDTime.c: 109: menuFunction++ ;
  1350  0247  3001               	movlw	1
  1351  0248  00C7               	movwf	??_main
  1352  0249  0847               	movf	??_main,w
  1353  024A  07E1               	addwf	_menuFunction,f
  1354                           
  1355                           ;LCDTime.c: 110: if (menuFunction == 4)
  1356  024B  3004               	movlw	4
  1357  024C  0661               	xorwf	_menuFunction,w
  1358  024D  1D03               	btfss	3,2
  1359  024E  2A5D               	goto	l2742
  1360                           
  1361                           ;LCDTime.c: 111: menuFunction = 1 ;
  1362  024F  01E1               	clrf	_menuFunction
  1363  0250  0AE1               	incf	_menuFunction,f
  1364                           
  1365                           ;LCDTime.c: 112: }
  1366  0251  2A5D               	goto	l2742
  1367  0252                     l287:	
  1368                           
  1369                           ;LCDTime.c: 113: else if (state & 0x20)
  1370  0252  1EE5               	btfss	_state,5
  1371  0253  2A5D               	goto	l2742
  1372                           
  1373                           ;LCDTime.c: 114: {
  1374                           ;LCDTime.c: 115: menuFunction-- ;
  1375  0254  3001               	movlw	1
  1376  0255  02E1               	subwf	_menuFunction,f
  1377                           
  1378                           ;LCDTime.c: 116: if (menuFunction < 1)
  1379  0256  0861               	movf	_menuFunction,w
  1380  0257  1D03               	btfss	3,2
  1381  0258  2A5D               	goto	l2742
  1382                           
  1383                           ;LCDTime.c: 117: menuFunction = 4-1 ;
  1384  0259  3003               	movlw	3
  1385  025A  00C7               	movwf	??_main
  1386  025B  0847               	movf	??_main,w
  1387  025C  00E1               	movwf	_menuFunction
  1388  025D                     l2742:	
  1389                           
  1390                           ;LCDTime.c: 118: }
  1391                           ;LCDTime.c: 120: if (menuFunction != 1)
  1392  025D  0361               	decf	_menuFunction,w
  1393  025E  1903               	btfsc	3,2
  1394  025F  2AE7               	goto	l2756
  1395                           
  1396                           ;LCDTime.c: 121: {
  1397                           ;LCDTime.c: 122: next_menu_clear = minute * 60 + seconds + 20 ;
  1398  0260  0857               	movf	_minute+1,w
  1399  0261  00FB               	movwf	___wmul@multiplier+1
  1400  0262  0856               	movf	_minute,w
  1401  0263  00FA               	movwf	___wmul@multiplier
  1402  0264  303C               	movlw	60
  1403  0265  00FC               	movwf	___wmul@multiplicand
  1404  0266  3000               	movlw	0
  1405  0267  00FD               	movwf	___wmul@multiplicand+1
  1406  0268  120A  158A  220C  120A  118A  	fcall	___wmul
  1407  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1408  026E  1303               	bcf	3,6	;RP1=0, select bank0
  1409  026F  085C               	movf	_seconds,w
  1410  0270  077A               	addwf	?___wmul,w
  1411  0271  00C7               	movwf	??_main
  1412  0272  085D               	movf	_seconds+1,w
  1413  0273  1803               	skipnc
  1414  0274  0A5D               	incf	_seconds+1,w
  1415  0275  077B               	addwf	?___wmul+1,w
  1416  0276  00C8               	movwf	??_main+1
  1417  0277  0847               	movf	??_main,w
  1418  0278  3E14               	addlw	20
  1419  0279  00E2               	movwf	_next_menu_clear
  1420  027A  0848               	movf	??_main+1,w
  1421  027B  1803               	skipnc
  1422  027C  3E01               	addlw	1
  1423  027D  3E00               	addlw	0
  1424  027E  00E3               	movwf	_next_menu_clear+1
  1425                           
  1426                           ;LCDTime.c: 123: LCDGotoXY(9,0);
  1427  027F  01FD               	clrf	LCDGotoXY@y
  1428  0280  3009               	movlw	9
  1429  0281  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  1430                           
  1431                           ;LCDTime.c: 124: if (menuFunction == 2)
  1432  0286  3002               	movlw	2
  1433  0287  1283               	bcf	3,5	;RP0=0, select bank0
  1434  0288  1303               	bcf	3,6	;RP1=0, select bank0
  1435  0289  0661               	xorwf	_menuFunction,w
  1436  028A  1D03               	btfss	3,2
  1437  028B  2A95               	goto	l2752
  1438                           
  1439                           ;LCDTime.c: 125: LCDWriteString("Time ?");
  1440  028C  3076               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1441  028D  00A0               	movwf	LCDWriteString@msg
  1442  028E  3080               	movlw	128
  1443  028F  00A1               	movwf	LCDWriteString@msg+1
  1444  0290  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  1445  0295                     l2752:	
  1446                           
  1447                           ;LCDTime.c: 126: if (menuFunction == 3)
  1448  0295  3003               	movlw	3
  1449  0296  1283               	bcf	3,5	;RP0=0, select bank0
  1450  0297  1303               	bcf	3,6	;RP1=0, select bank0
  1451  0298  0661               	xorwf	_menuFunction,w
  1452  0299  1D03               	btfss	3,2
  1453  029A  2AA4               	goto	l2720
  1454                           
  1455                           ;LCDTime.c: 127: LCDWriteString("Date ?");
  1456  029B  307D               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1457  029C  00A0               	movwf	LCDWriteString@msg
  1458  029D  3080               	movlw	128
  1459  029E  00A1               	movwf	LCDWriteString@msg+1
  1460  029F  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  1461  02A4                     l2720:	
  1462                           ;LCDTime.c: 90: while(1)
  1463                           
  1464                           ;LCDTime.c: 131: }
  1465                           
  1466                           ;LCDTime.c: 128: }
  1467                           
  1468                           
  1469                           ;LCDTime.c: 91: {
  1470                           ;LCDTime.c: 92: readClock();
  1471  02A4  120A  118A  2052  120A  118A  	fcall	_readClock
  1472                           
  1473                           ;LCDTime.c: 94: showClock() ;
  1474  02A9  120A  158A  219D  120A  118A  	fcall	_showClock
  1475                           
  1476                           ;LCDTime.c: 96: readInputs() ;
  1477  02AE  120A  158A  2289  120A  118A  	fcall	_readInputs
  1478                           
  1479                           ;LCDTime.c: 98: if (bButton)
  1480  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1481  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  1482  02B5  0864               	movf	_bButton,w
  1483  02B6  1D03               	btfss	3,2
  1484  02B7  2A3F               	goto	l2728
  1485                           
  1486                           ;LCDTime.c: 100: else if (state & 0x30)
  1487  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  1488  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  1489  02BA  0865               	movf	_state,w
  1490  02BB  3930               	andlw	48
  1491  02BC  1D03               	btfss	3,2
  1492  02BD  2A45               	goto	l2732
  1493                           
  1494                           ;LCDTime.c: 132: else if (next_menu_clear && ((minute * 60 + seconds) > next_menu_clear)
      +                          )
  1495  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  1496  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  1497  02C0  0862               	movf	_next_menu_clear,w
  1498  02C1  0463               	iorwf	_next_menu_clear+1,w
  1499  02C2  1903               	btfsc	3,2
  1500  02C3  2AA4               	goto	l2720
  1501  02C4  0857               	movf	_minute+1,w
  1502  02C5  00FB               	movwf	___wmul@multiplier+1
  1503  02C6  0856               	movf	_minute,w
  1504  02C7  00FA               	movwf	___wmul@multiplier
  1505  02C8  303C               	movlw	60
  1506  02C9  00FC               	movwf	___wmul@multiplicand
  1507  02CA  3000               	movlw	0
  1508  02CB  00FD               	movwf	___wmul@multiplicand+1
  1509  02CC  120A  158A  220C  120A  118A  	fcall	___wmul
  1510  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  1511  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  1512  02D3  085C               	movf	_seconds,w
  1513  02D4  077A               	addwf	?___wmul,w
  1514  02D5  00C7               	movwf	??_main
  1515  02D6  085D               	movf	_seconds+1,w
  1516  02D7  1803               	skipnc
  1517  02D8  0A5D               	incf	_seconds+1,w
  1518  02D9  077B               	addwf	?___wmul+1,w
  1519  02DA  00C8               	movwf	??_main+1
  1520  02DB  0863               	movf	_next_menu_clear+1,w
  1521  02DC  3A80               	xorlw	128
  1522  02DD  00C9               	movwf	??_main+2
  1523  02DE  0848               	movf	??_main+1,w
  1524  02DF  3A80               	xorlw	128
  1525  02E0  0249               	subwf	??_main+2,w
  1526  02E1  1D03               	skipz
  1527  02E2  2AE5               	goto	u2645
  1528  02E3  0847               	movf	??_main,w
  1529  02E4  0262               	subwf	_next_menu_clear,w
  1530  02E5                     u2645:	
  1531  02E5  1803               	skipnc
  1532  02E6  2AA4               	goto	l2720
  1533  02E7                     l2756:	
  1534                           
  1535                           ;LCDTime.c: 129: else
  1536                           ;LCDTime.c: 130: clearPrompt();
  1537  02E7  120A  158A  216E  120A  118A  	fcall	_clearPrompt
  1538  02EC  2AA4               	goto	l2720
  1539  02ED                     __end_of_main:	
  1540                           ;LCDTime.c: 133: {
  1541                           ;LCDTime.c: 134: clearPrompt();
  1542                           
  1543                           
  1544                           	psect	text1
  1545  099D                     __ptext1:	
  1546 ;; *************** function _showClock *****************
  1547 ;; Defined at:
  1548 ;;		line 473 in file "LCDTime.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1562 ;;      Params:         0       0       0       0       0
  1563 ;;      Locals:         0       0       0       0       0
  1564 ;;      Temps:          0       0       0       0       0
  1565 ;;      Totals:         0       0       0       0       0
  1566 ;;Total ram usage:        0 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    5
  1569 ;; This function calls:
  1570 ;;		_LCDGotoXY
  1571 ;;		_showDate
  1572 ;;		_showRunningTime
  1573 ;;		_showTime
  1574 ;; This function is called by:
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           
  1580                           ;psect for function _showClock
  1581  099D                     _showClock:	
  1582                           
  1583                           ;LCDTime.c: 475: LCDGotoXY(0,0) ;
  1584                           
  1585                           ;incstack = 0
  1586                           ; Regs used in _showClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1587  099D  01FD               	clrf	LCDGotoXY@y
  1588  099E  3000               	movlw	0
  1589  099F  120A  158A  21BF  120A  158A  	fcall	_LCDGotoXY
  1590                           
  1591                           ;LCDTime.c: 476: showTime() ;
  1592  09A4  120A  158A  232A  120A  158A  	fcall	_showTime
  1593                           
  1594                           ;LCDTime.c: 478: LCDGotoXY(0,1) ;
  1595  09A9  01FD               	clrf	LCDGotoXY@y
  1596  09AA  0AFD               	incf	LCDGotoXY@y,f
  1597  09AB  3000               	movlw	0
  1598  09AC  120A  158A  21BF  120A  158A  	fcall	_LCDGotoXY
  1599                           
  1600                           ;LCDTime.c: 479: showDate() ;
  1601  09B1  120A  158A  2613  120A  158A  	fcall	_showDate
  1602                           
  1603                           ;LCDTime.c: 482: if (menuFunction == 1)
  1604  09B6  1283               	bcf	3,5	;RP0=0, select bank0
  1605  09B7  1303               	bcf	3,6	;RP1=0, select bank0
  1606  09B8  0361               	decf	_menuFunction,w
  1607  09B9  1D03               	btfss	3,2
  1608  09BA  0008               	return
  1609                           
  1610                           ;LCDTime.c: 483: showRunningTime();
  1611  09BB  120A  118A  2006   	fcall	_showRunningTime
  1612  09BE  0008               	return
  1613  09BF                     __end_of_showClock:	
  1614                           
  1615                           	psect	text2
  1616  0006                     __ptext2:	
  1617 ;; *************** function _showRunningTime *****************
  1618 ;; Defined at:
  1619 ;;		line 519 in file "LCDTime.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;		None
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      void 
  1626 ;; Registers used:
  1627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1633 ;;      Params:         0       0       0       0       0
  1634 ;;      Locals:         0       2       0       0       0
  1635 ;;      Temps:          0       1       0       0       0
  1636 ;;      Totals:         0       3       0       0       0
  1637 ;;Total ram usage:        3 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; Hardware stack levels required when called:    4
  1640 ;; This function calls:
  1641 ;;		_LCDByte
  1642 ;;		_LCDGotoXY
  1643 ;;		_LCDWriteInt
  1644 ;;		___awdiv
  1645 ;;		___awmod
  1646 ;; This function is called by:
  1647 ;;		_showClock
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           
  1652                           ;psect for function _showRunningTime
  1653  0006                     _showRunningTime:	
  1654                           
  1655                           ;LCDTime.c: 521: LCDGotoXY(10,0) ;
  1656                           
  1657                           ;incstack = 0
  1658                           ; Regs used in _showRunningTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1659  0006  01FD               	clrf	LCDGotoXY@y
  1660  0007  300A               	movlw	10
  1661  0008  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  1662                           
  1663                           ;LCDTime.c: 522: LCDWriteInt(runningTime / 60,1);
  1664  000D  303C               	movlw	60
  1665  000E  00F1               	movwf	___awdiv@divisor
  1666  000F  3000               	movlw	0
  1667  0010  00F2               	movwf	___awdiv@divisor+1
  1668  0011  1283               	bcf	3,5	;RP0=0, select bank0
  1669  0012  1303               	bcf	3,6	;RP1=0, select bank0
  1670  0013  0867               	movf	_runningTime+1,w
  1671  0014  00F4               	movwf	___awdiv@dividend+1
  1672  0015  0866               	movf	_runningTime,w
  1673  0016  00F3               	movwf	___awdiv@dividend
  1674  0017  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1675  001C  0872               	movf	?___awdiv+1,w
  1676  001D  1283               	bcf	3,5	;RP0=0, select bank0
  1677  001E  1303               	bcf	3,6	;RP1=0, select bank0
  1678  001F  00B5               	movwf	_showRunningTime$738+1
  1679  0020  0871               	movf	?___awdiv,w
  1680  0021  00B4               	movwf	_showRunningTime$738
  1681                           
  1682                           ;LCDTime.c: 522: LCDWriteInt(runningTime / 60,1);
  1683  0022  0835               	movf	_showRunningTime$738+1,w
  1684  0023  00A3               	movwf	LCDWriteInt@val+1
  1685  0024  0834               	movf	_showRunningTime$738,w
  1686  0025  00A2               	movwf	LCDWriteInt@val
  1687  0026  01A4               	clrf	LCDWriteInt@field_length
  1688  0027  0AA4               	incf	LCDWriteInt@field_length,f
  1689  0028  120A  158A  26C5  120A  118A  	fcall	_LCDWriteInt
  1690                           
  1691                           ;LCDTime.c: 523: (LCDByte(':',1)) ;
  1692  002D  01F6               	clrf	LCDByte@isdata
  1693  002E  0AF6               	incf	LCDByte@isdata,f
  1694  002F  303A               	movlw	58
  1695  0030  120A  158A  23B1  120A  118A  	fcall	_LCDByte
  1696                           
  1697                           ;LCDTime.c: 524: LCDWriteInt(runningTime % 60,2);
  1698  0035  303C               	movlw	60
  1699  0036  00F1               	movwf	___awmod@divisor
  1700  0037  3000               	movlw	0
  1701  0038  00F2               	movwf	___awmod@divisor+1
  1702  0039  1283               	bcf	3,5	;RP0=0, select bank0
  1703  003A  1303               	bcf	3,6	;RP1=0, select bank0
  1704  003B  0867               	movf	_runningTime+1,w
  1705  003C  00F4               	movwf	___awmod@dividend+1
  1706  003D  0866               	movf	_runningTime,w
  1707  003E  00F3               	movwf	___awmod@dividend
  1708  003F  120A  158A  2366  120A  118A  	fcall	___awmod
  1709  0044  0872               	movf	?___awmod+1,w
  1710  0045  1283               	bcf	3,5	;RP0=0, select bank0
  1711  0046  1303               	bcf	3,6	;RP1=0, select bank0
  1712  0047  00A3               	movwf	LCDWriteInt@val+1
  1713  0048  0871               	movf	?___awmod,w
  1714  0049  00A2               	movwf	LCDWriteInt@val
  1715  004A  3002               	movlw	2
  1716  004B  00B3               	movwf	??_showRunningTime
  1717  004C  0833               	movf	??_showRunningTime,w
  1718  004D  00A4               	movwf	LCDWriteInt@field_length
  1719  004E  120A  158A  26C5   	fcall	_LCDWriteInt
  1720  0051  0008               	return
  1721  0052                     __end_of_showRunningTime:	
  1722                           
  1723                           	psect	text3
  1724  0052                     __ptext3:	
  1725 ;; *************** function _readClock *****************
  1726 ;; Defined at:
  1727 ;;		line 440 in file "LCDTime.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;		None
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  c               1    8[BANK0 ] unsigned char 
  1732 ;;  b               1    7[BANK0 ] unsigned char 
  1733 ;;  a               1    6[BANK0 ] unsigned char 
  1734 ;;  n               1    5[BANK0 ] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1744 ;;      Params:         0       0       0       0       0
  1745 ;;      Locals:         0       4       0       0       0
  1746 ;;      Temps:          0       3       0       0       0
  1747 ;;      Totals:         0       7       0       0       0
  1748 ;;Total ram usage:        7 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    4
  1751 ;; This function calls:
  1752 ;;		_DS1307_GetDate
  1753 ;;		_DS1307_GetTime
  1754 ;;		_DS1307_writeRam
  1755 ;;		___awdiv
  1756 ;;		___wmul
  1757 ;; This function is called by:
  1758 ;;		_main
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           
  1763                           ;psect for function _readClock
  1764  0052                     _readClock:	
  1765                           
  1766                           ;LCDTime.c: 442: unsigned char a,b,c,n ;
  1767                           ;LCDTime.c: 444: DS1307_GetTime(&a,&b,&c);
  1768                           
  1769                           ;incstack = 0
  1770                           ; Regs used in _readClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1771  0052  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1772  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1773  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1774  0055  00A2               	movwf	??_readClock
  1775  0056  0822               	movf	??_readClock,w
  1776  0057  00F3               	movwf	DS1307_GetTime@m_ptr
  1777  0058  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1778  0059  00A3               	movwf	??_readClock+1
  1779  005A  0823               	movf	??_readClock+1,w
  1780  005B  00F4               	movwf	DS1307_GetTime@s_ptr
  1781  005C  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1782  005D  120A  158A  2452  120A  118A  	fcall	_DS1307_GetTime
  1783                           
  1784                           ;LCDTime.c: 447: hour = (a % 16) + ((a / 16 ) * 10) ;
  1785  0062  3010               	movlw	16
  1786  0063  00F1               	movwf	___awdiv@divisor
  1787  0064  3000               	movlw	0
  1788  0065  00F2               	movwf	___awdiv@divisor+1
  1789  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1790  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1791  0068  0826               	movf	readClock@a,w
  1792  0069  00A2               	movwf	??_readClock
  1793  006A  01A3               	clrf	??_readClock+1
  1794  006B  0822               	movf	??_readClock,w
  1795  006C  00F3               	movwf	___awdiv@dividend
  1796  006D  0823               	movf	??_readClock+1,w
  1797  006E  00F4               	movwf	___awdiv@dividend+1
  1798  006F  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1799  0074  0872               	movf	?___awdiv+1,w
  1800  0075  00FB               	movwf	___wmul@multiplier+1
  1801  0076  0871               	movf	?___awdiv,w
  1802  0077  00FA               	movwf	___wmul@multiplier
  1803  0078  300A               	movlw	10
  1804  0079  00FC               	movwf	___wmul@multiplicand
  1805  007A  3000               	movlw	0
  1806  007B  00FD               	movwf	___wmul@multiplicand+1
  1807  007C  120A  158A  220C  120A  118A  	fcall	___wmul
  1808  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1809  0082  1303               	bcf	3,6	;RP1=0, select bank0
  1810  0083  0826               	movf	readClock@a,w
  1811  0084  390F               	andlw	15
  1812  0085  077A               	addwf	?___wmul,w
  1813  0086  00D4               	movwf	_hour
  1814  0087  087B               	movf	?___wmul+1,w
  1815  0088  1803               	skipnc
  1816  0089  0A7B               	incf	?___wmul+1,w
  1817  008A  00D5               	movwf	_hour+1
  1818                           
  1819                           ;LCDTime.c: 448: minute = (b % 16) + ((b / 16 ) * 10) ;
  1820  008B  3010               	movlw	16
  1821  008C  00F1               	movwf	___awdiv@divisor
  1822  008D  3000               	movlw	0
  1823  008E  00F2               	movwf	___awdiv@divisor+1
  1824  008F  0827               	movf	readClock@b,w
  1825  0090  00A2               	movwf	??_readClock
  1826  0091  01A3               	clrf	??_readClock+1
  1827  0092  0822               	movf	??_readClock,w
  1828  0093  00F3               	movwf	___awdiv@dividend
  1829  0094  0823               	movf	??_readClock+1,w
  1830  0095  00F4               	movwf	___awdiv@dividend+1
  1831  0096  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1832  009B  0872               	movf	?___awdiv+1,w
  1833  009C  00FB               	movwf	___wmul@multiplier+1
  1834  009D  0871               	movf	?___awdiv,w
  1835  009E  00FA               	movwf	___wmul@multiplier
  1836  009F  300A               	movlw	10
  1837  00A0  00FC               	movwf	___wmul@multiplicand
  1838  00A1  3000               	movlw	0
  1839  00A2  00FD               	movwf	___wmul@multiplicand+1
  1840  00A3  120A  158A  220C  120A  118A  	fcall	___wmul
  1841  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1842  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  1843  00AA  0827               	movf	readClock@b,w
  1844  00AB  390F               	andlw	15
  1845  00AC  077A               	addwf	?___wmul,w
  1846  00AD  00D6               	movwf	_minute
  1847  00AE  087B               	movf	?___wmul+1,w
  1848  00AF  1803               	skipnc
  1849  00B0  0A7B               	incf	?___wmul+1,w
  1850  00B1  00D7               	movwf	_minute+1
  1851                           
  1852                           ;LCDTime.c: 449: seconds = (c % 16) + ((c / 16 ) * 10) ;
  1853  00B2  3010               	movlw	16
  1854  00B3  00F1               	movwf	___awdiv@divisor
  1855  00B4  3000               	movlw	0
  1856  00B5  00F2               	movwf	___awdiv@divisor+1
  1857  00B6  0828               	movf	readClock@c,w
  1858  00B7  00A2               	movwf	??_readClock
  1859  00B8  01A3               	clrf	??_readClock+1
  1860  00B9  0822               	movf	??_readClock,w
  1861  00BA  00F3               	movwf	___awdiv@dividend
  1862  00BB  0823               	movf	??_readClock+1,w
  1863  00BC  00F4               	movwf	___awdiv@dividend+1
  1864  00BD  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1865  00C2  0872               	movf	?___awdiv+1,w
  1866  00C3  00FB               	movwf	___wmul@multiplier+1
  1867  00C4  0871               	movf	?___awdiv,w
  1868  00C5  00FA               	movwf	___wmul@multiplier
  1869  00C6  300A               	movlw	10
  1870  00C7  00FC               	movwf	___wmul@multiplicand
  1871  00C8  3000               	movlw	0
  1872  00C9  00FD               	movwf	___wmul@multiplicand+1
  1873  00CA  120A  158A  220C  120A  118A  	fcall	___wmul
  1874  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1875  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1876  00D1  0828               	movf	readClock@c,w
  1877  00D2  390F               	andlw	15
  1878  00D3  077A               	addwf	?___wmul,w
  1879  00D4  00DC               	movwf	_seconds
  1880  00D5  087B               	movf	?___wmul+1,w
  1881  00D6  1803               	skipnc
  1882  00D7  0A7B               	incf	?___wmul+1,w
  1883  00D8  00DD               	movwf	_seconds+1
  1884                           
  1885                           ;LCDTime.c: 451: if (hour != last_hour)
  1886  00D9  0860               	movf	_last_hour,w
  1887  00DA  00A2               	movwf	??_readClock
  1888  00DB  01A3               	clrf	??_readClock+1
  1889  00DC  0855               	movf	_hour+1,w
  1890  00DD  0623               	xorwf	??_readClock+1,w
  1891  00DE  1D03               	skipz
  1892  00DF  28E2               	goto	u1905
  1893  00E0  0854               	movf	_hour,w
  1894  00E1  0622               	xorwf	??_readClock,w
  1895  00E2                     u1905:	
  1896  00E2  1903               	skipnz
  1897  00E3  2979               	goto	l2386
  1898                           
  1899                           ;LCDTime.c: 452: {
  1900                           ;LCDTime.c: 453: last_hour = hour ;
  1901  00E4  0854               	movf	_hour,w
  1902  00E5  00A2               	movwf	??_readClock
  1903  00E6  0822               	movf	??_readClock,w
  1904  00E7  00E0               	movwf	_last_hour
  1905                           
  1906                           ;LCDTime.c: 455: DS1307_GetDate(&n,&a,&b,&c) ;
  1907  00E8  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1908  00E9  00A2               	movwf	??_readClock
  1909  00EA  0822               	movf	??_readClock,w
  1910  00EB  00F3               	movwf	DS1307_GetDate@d_ptr
  1911  00EC  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1912  00ED  00A3               	movwf	??_readClock+1
  1913  00EE  0823               	movf	??_readClock+1,w
  1914  00EF  00F4               	movwf	DS1307_GetDate@m_ptr
  1915  00F0  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1916  00F1  00A4               	movwf	??_readClock+2
  1917  00F2  0824               	movf	??_readClock+2,w
  1918  00F3  00F5               	movwf	DS1307_GetDate@y_ptr
  1919  00F4  3025               	movlw	(low (readClock@n| 0))& (0+255)
  1920  00F5  120A  158A  25B2  120A  118A  	fcall	_DS1307_GetDate
  1921                           
  1922                           ;LCDTime.c: 457: day = (n % 16) ;
  1923  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1924  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1925  00FC  0825               	movf	readClock@n,w
  1926  00FD  390F               	andlw	15
  1927  00FE  00A2               	movwf	??_readClock
  1928  00FF  01A3               	clrf	??_readClock+1
  1929  0100  0822               	movf	??_readClock,w
  1930  0101  00D2               	movwf	_day
  1931  0102  0823               	movf	??_readClock+1,w
  1932  0103  00D3               	movwf	_day+1
  1933                           
  1934                           ;LCDTime.c: 458: date = (a % 16) + ((a / 16 ) * 10) ;
  1935  0104  3010               	movlw	16
  1936  0105  00F1               	movwf	___awdiv@divisor
  1937  0106  3000               	movlw	0
  1938  0107  00F2               	movwf	___awdiv@divisor+1
  1939  0108  0826               	movf	readClock@a,w
  1940  0109  00A2               	movwf	??_readClock
  1941  010A  01A3               	clrf	??_readClock+1
  1942  010B  0822               	movf	??_readClock,w
  1943  010C  00F3               	movwf	___awdiv@dividend
  1944  010D  0823               	movf	??_readClock+1,w
  1945  010E  00F4               	movwf	___awdiv@dividend+1
  1946  010F  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1947  0114  0872               	movf	?___awdiv+1,w
  1948  0115  00FB               	movwf	___wmul@multiplier+1
  1949  0116  0871               	movf	?___awdiv,w
  1950  0117  00FA               	movwf	___wmul@multiplier
  1951  0118  300A               	movlw	10
  1952  0119  00FC               	movwf	___wmul@multiplicand
  1953  011A  3000               	movlw	0
  1954  011B  00FD               	movwf	___wmul@multiplicand+1
  1955  011C  120A  158A  220C  120A  118A  	fcall	___wmul
  1956  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1957  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1958  0123  0826               	movf	readClock@a,w
  1959  0124  390F               	andlw	15
  1960  0125  077A               	addwf	?___wmul,w
  1961  0126  00D0               	movwf	_date
  1962  0127  087B               	movf	?___wmul+1,w
  1963  0128  1803               	skipnc
  1964  0129  0A7B               	incf	?___wmul+1,w
  1965  012A  00D1               	movwf	_date+1
  1966                           
  1967                           ;LCDTime.c: 459: month = (b % 16) + ((b / 16 ) * 10) ;
  1968  012B  3010               	movlw	16
  1969  012C  00F1               	movwf	___awdiv@divisor
  1970  012D  3000               	movlw	0
  1971  012E  00F2               	movwf	___awdiv@divisor+1
  1972  012F  0827               	movf	readClock@b,w
  1973  0130  00A2               	movwf	??_readClock
  1974  0131  01A3               	clrf	??_readClock+1
  1975  0132  0822               	movf	??_readClock,w
  1976  0133  00F3               	movwf	___awdiv@dividend
  1977  0134  0823               	movf	??_readClock+1,w
  1978  0135  00F4               	movwf	___awdiv@dividend+1
  1979  0136  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1980  013B  0872               	movf	?___awdiv+1,w
  1981  013C  00FB               	movwf	___wmul@multiplier+1
  1982  013D  0871               	movf	?___awdiv,w
  1983  013E  00FA               	movwf	___wmul@multiplier
  1984  013F  300A               	movlw	10
  1985  0140  00FC               	movwf	___wmul@multiplicand
  1986  0141  3000               	movlw	0
  1987  0142  00FD               	movwf	___wmul@multiplicand+1
  1988  0143  120A  158A  220C  120A  118A  	fcall	___wmul
  1989  0148  1283               	bcf	3,5	;RP0=0, select bank0
  1990  0149  1303               	bcf	3,6	;RP1=0, select bank0
  1991  014A  0827               	movf	readClock@b,w
  1992  014B  390F               	andlw	15
  1993  014C  077A               	addwf	?___wmul,w
  1994  014D  00D8               	movwf	_month
  1995  014E  087B               	movf	?___wmul+1,w
  1996  014F  1803               	skipnc
  1997  0150  0A7B               	incf	?___wmul+1,w
  1998  0151  00D9               	movwf	_month+1
  1999                           
  2000                           ;LCDTime.c: 460: year = (c % 16) + ((c / 16 ) * 10) ;
  2001  0152  3010               	movlw	16
  2002  0153  00F1               	movwf	___awdiv@divisor
  2003  0154  3000               	movlw	0
  2004  0155  00F2               	movwf	___awdiv@divisor+1
  2005  0156  0828               	movf	readClock@c,w
  2006  0157  00A2               	movwf	??_readClock
  2007  0158  01A3               	clrf	??_readClock+1
  2008  0159  0822               	movf	??_readClock,w
  2009  015A  00F3               	movwf	___awdiv@dividend
  2010  015B  0823               	movf	??_readClock+1,w
  2011  015C  00F4               	movwf	___awdiv@dividend+1
  2012  015D  120A  158A  24FC  120A  118A  	fcall	___awdiv
  2013  0162  0872               	movf	?___awdiv+1,w
  2014  0163  00FB               	movwf	___wmul@multiplier+1
  2015  0164  0871               	movf	?___awdiv,w
  2016  0165  00FA               	movwf	___wmul@multiplier
  2017  0166  300A               	movlw	10
  2018  0167  00FC               	movwf	___wmul@multiplicand
  2019  0168  3000               	movlw	0
  2020  0169  00FD               	movwf	___wmul@multiplicand+1
  2021  016A  120A  158A  220C  120A  118A  	fcall	___wmul
  2022  016F  1283               	bcf	3,5	;RP0=0, select bank0
  2023  0170  1303               	bcf	3,6	;RP1=0, select bank0
  2024  0171  0828               	movf	readClock@c,w
  2025  0172  390F               	andlw	15
  2026  0173  077A               	addwf	?___wmul,w
  2027  0174  00DE               	movwf	_year
  2028  0175  087B               	movf	?___wmul+1,w
  2029  0176  1803               	skipnc
  2030  0177  0A7B               	incf	?___wmul+1,w
  2031  0178  00DF               	movwf	_year+1
  2032  0179                     l2386:	
  2033                           
  2034                           ;LCDTime.c: 461: }
  2035                           ;LCDTime.c: 463: if (minute != runningMinute)
  2036  0179  085B               	movf	_runningMinute+1,w
  2037  017A  0657               	xorwf	_minute+1,w
  2038  017B  1D03               	skipz
  2039  017C  297F               	goto	u1915
  2040  017D  085A               	movf	_runningMinute,w
  2041  017E  0656               	xorwf	_minute,w
  2042  017F                     u1915:	
  2043  017F  1903               	skipnz
  2044  0180  0008               	return
  2045                           
  2046                           ;LCDTime.c: 464: {
  2047                           ;LCDTime.c: 465: runningMinute = minute ;
  2048  0181  0857               	movf	_minute+1,w
  2049  0182  00DB               	movwf	_runningMinute+1
  2050  0183  0856               	movf	_minute,w
  2051  0184  00DA               	movwf	_runningMinute
  2052                           
  2053                           ;LCDTime.c: 466: runningTime++ ;
  2054  0185  3001               	movlw	1
  2055  0186  07E6               	addwf	_runningTime,f
  2056  0187  1803               	skipnc
  2057  0188  0AE7               	incf	_runningTime+1,f
  2058  0189  3000               	movlw	0
  2059  018A  07E7               	addwf	_runningTime+1,f
  2060                           
  2061                           ;LCDTime.c: 469: DS1307_writeRam(&runningTime,0,2) ;
  2062  018B  3000               	movlw	0
  2063  018C  00F3               	movwf	DS1307_writeRam@offset
  2064  018D  00F4               	movwf	DS1307_writeRam@offset+1
  2065  018E  3002               	movlw	2
  2066  018F  00F5               	movwf	DS1307_writeRam@length
  2067  0190  3000               	movlw	0
  2068  0191  00F6               	movwf	DS1307_writeRam@length+1
  2069  0192  3066               	movlw	(low (_runningTime| 0))& (0+255)
  2070  0193  120A  158A  22B8   	fcall	_DS1307_writeRam
  2071  0196  0008               	return
  2072  0197                     __end_of_readClock:	
  2073                           
  2074                           	psect	text4
  2075  0AB8                     __ptext4:	
  2076 ;; *************** function _DS1307_writeRam *****************
  2077 ;; Defined at:
  2078 ;;		line 104 in file "DS1307.c"
  2079 ;; Parameters:    Size  Location     Type
  2080 ;;  ptr             1    wreg     PTR unsigned char 
  2081 ;;		 -> runningTime(2), 
  2082 ;;  offset          2    2[COMMON] int 
  2083 ;;  length          2    4[COMMON] int 
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;  ptr             1    8[COMMON] PTR unsigned char 
  2086 ;;		 -> runningTime(2), 
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  1    wreg      void 
  2089 ;; Registers used:
  2090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2096 ;;      Params:         4       0       0       0       0
  2097 ;;      Locals:         1       0       0       0       0
  2098 ;;      Temps:          2       0       0       0       0
  2099 ;;      Totals:         7       0       0       0       0
  2100 ;;Total ram usage:        7 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    3
  2103 ;; This function calls:
  2104 ;;		_DS1307_Write
  2105 ;;		_I2C_Start
  2106 ;;		_I2C_Stop
  2107 ;; This function is called by:
  2108 ;;		_readClock
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           
  2113                           ;psect for function _DS1307_writeRam
  2114  0AB8                     _DS1307_writeRam:	
  2115                           
  2116                           ;incstack = 0
  2117                           ; Regs used in _DS1307_writeRam: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2118                           ;DS1307_writeRam@ptr stored from wreg
  2119  0AB8  00F9               	movwf	DS1307_writeRam@ptr
  2120                           
  2121                           ;DS1307.c: 106: I2C_Start();
  2122  0AB9  120A  158A  210F  120A  158A  	fcall	_I2C_Start
  2123                           
  2124                           ;DS1307.c: 107: DS1307_Write(0xD0);
  2125  0ABE  30D0               	movlw	208
  2126  0ABF  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  2127                           
  2128                           ;DS1307.c: 108: DS1307_Write(0x08 + offset);
  2129  0AC4  0873               	movf	DS1307_writeRam@offset,w
  2130  0AC5  3E08               	addlw	8
  2131  0AC6  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  2132  0ACB                     l2208:	
  2133                           ;DS1307.c: 110: while(length-- > 0)
  2134                           
  2135  0ACB  0876               	movf	DS1307_writeRam@length+1,w
  2136  0ACC  00F8               	movwf	??_DS1307_writeRam+1
  2137  0ACD  03F5               	decf	DS1307_writeRam@length,f
  2138  0ACE  0A75               	incf	DS1307_writeRam@length,w
  2139  0ACF  00F7               	movwf	??_DS1307_writeRam
  2140  0AD0  1903               	skipnz
  2141  0AD1  03F6               	decf	DS1307_writeRam@length+1,f
  2142  0AD2  0878               	movf	??_DS1307_writeRam+1,w
  2143  0AD3  3A80               	xorlw	128
  2144  0AD4  00FF               	movwf	127
  2145  0AD5  3080               	movlw	128
  2146  0AD6  027F               	subwf	127,w
  2147  0AD7  1D03               	skipz
  2148  0AD8  2ADB               	goto	u1845
  2149  0AD9  3001               	movlw	1
  2150  0ADA  0277               	subwf	??_DS1307_writeRam,w
  2151  0ADB                     u1845:	
  2152  0ADB  1C03               	btfss	3,0
  2153  0ADC  2AEB               	goto	l2210
  2154                           
  2155                           ;DS1307.c: 111: DS1307_Write(*ptr++);
  2156  0ADD  0879               	movf	DS1307_writeRam@ptr,w
  2157  0ADE  0084               	movwf	4
  2158  0ADF  1383               	bcf	3,7	;select IRP bank0
  2159  0AE0  0800               	movf	0,w
  2160  0AE1  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  2161  0AE6  3001               	movlw	1
  2162  0AE7  00F7               	movwf	??_DS1307_writeRam
  2163  0AE8  0877               	movf	??_DS1307_writeRam,w
  2164  0AE9  07F9               	addwf	DS1307_writeRam@ptr,f
  2165  0AEA  2ACB               	goto	l2208
  2166  0AEB                     l2210:	
  2167                           
  2168                           ;DS1307.c: 113: I2C_Stop();
  2169  0AEB  120A  158A  2115   	fcall	_I2C_Stop
  2170  0AEE  0008               	return
  2171  0AEF                     __end_of_DS1307_writeRam:	
  2172                           
  2173                           	psect	text5
  2174  0C52                     __ptext5:	
  2175 ;; *************** function _DS1307_GetTime *****************
  2176 ;; Defined at:
  2177 ;;		line 64 in file "DS1307.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  h_ptr           1    wreg     PTR unsigned char 
  2180 ;;		 -> readClock@a(1), 
  2181 ;;  m_ptr           1    2[COMMON] PTR unsigned char 
  2182 ;;		 -> readClock@b(1), 
  2183 ;;  s_ptr           1    3[COMMON] PTR unsigned char 
  2184 ;;		 -> readClock@c(1), 
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;  h_ptr           1    5[COMMON] PTR unsigned char 
  2187 ;;		 -> readClock@a(1), 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2197 ;;      Params:         2       0       0       0       0
  2198 ;;      Locals:         1       0       0       0       0
  2199 ;;      Temps:          1       0       0       0       0
  2200 ;;      Totals:         4       0       0       0       0
  2201 ;;Total ram usage:        4 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    3
  2204 ;; This function calls:
  2205 ;;		_DS1307_Read
  2206 ;;		_DS1307_Write
  2207 ;;		_I2C_Ack
  2208 ;;		_I2C_NoAck
  2209 ;;		_I2C_Restart
  2210 ;;		_I2C_Start
  2211 ;;		_I2C_Stop
  2212 ;; This function is called by:
  2213 ;;		_readClock
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           
  2218                           ;psect for function _DS1307_GetTime
  2219  0C52                     _DS1307_GetTime:	
  2220                           
  2221                           ;incstack = 0
  2222                           ; Regs used in _DS1307_GetTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2223                           ;DS1307_GetTime@h_ptr stored from wreg
  2224  0C52  00F6               	movwf	DS1307_GetTime@h_ptr
  2225                           
  2226                           ;DS1307.c: 66: I2C_Start();
  2227  0C53  120A  158A  210F  120A  158A  	fcall	_I2C_Start
  2228                           
  2229                           ;DS1307.c: 67: DS1307_Write(0xD0);
  2230  0C58  30D0               	movlw	208
  2231  0C59  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  2232                           
  2233                           ;DS1307.c: 68: DS1307_Write(0x00);
  2234  0C5E  3000               	movlw	0
  2235  0C5F  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  2236                           
  2237                           ;DS1307.c: 69: I2C_Restart();
  2238  0C64  120A  158A  2109  120A  158A  	fcall	_I2C_Restart
  2239                           
  2240                           ;DS1307.c: 70: DS1307_Write(0xD1);
  2241  0C69  30D1               	movlw	209
  2242  0C6A  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  2243                           
  2244                           ;DS1307.c: 71: *s_ptr = DS1307_Read(); I2C_Ack();
  2245  0C6F  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  2246  0C74  00F5               	movwf	??_DS1307_GetTime
  2247  0C75  0874               	movf	DS1307_GetTime@s_ptr,w
  2248  0C76  0084               	movwf	4
  2249  0C77  0875               	movf	??_DS1307_GetTime,w
  2250  0C78  1383               	bcf	3,7	;select IRP bank0
  2251  0C79  0080               	movwf	0
  2252  0C7A  120A  158A  2122  120A  158A  	fcall	_I2C_Ack
  2253                           
  2254                           ;DS1307.c: 72: *m_ptr = DS1307_Read(); I2C_Ack();
  2255  0C7F  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  2256  0C84  00F5               	movwf	??_DS1307_GetTime
  2257  0C85  0873               	movf	DS1307_GetTime@m_ptr,w
  2258  0C86  0084               	movwf	4
  2259  0C87  0875               	movf	??_DS1307_GetTime,w
  2260  0C88  1383               	bcf	3,7	;select IRP bank0
  2261  0C89  0080               	movwf	0
  2262  0C8A  120A  158A  2122  120A  158A  	fcall	_I2C_Ack
  2263                           
  2264                           ;DS1307.c: 73: *h_ptr = DS1307_Read(); I2C_NoAck();
  2265  0C8F  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  2266  0C94  00F5               	movwf	??_DS1307_GetTime
  2267  0C95  0876               	movf	DS1307_GetTime@h_ptr,w
  2268  0C96  0084               	movwf	4
  2269  0C97  0875               	movf	??_DS1307_GetTime,w
  2270  0C98  1383               	bcf	3,7	;select IRP bank0
  2271  0C99  0080               	movwf	0
  2272  0C9A  120A  158A  211B  120A  158A  	fcall	_I2C_NoAck
  2273                           
  2274                           ;DS1307.c: 74: I2C_Stop();
  2275  0C9F  120A  158A  2115   	fcall	_I2C_Stop
  2276  0CA2  0008               	return
  2277  0CA3                     __end_of_DS1307_GetTime:	
  2278                           
  2279                           	psect	text6
  2280  0DB2                     __ptext6:	
  2281 ;; *************** function _DS1307_GetDate *****************
  2282 ;; Defined at:
  2283 ;;		line 77 in file "DS1307.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  n_ptr           1    wreg     PTR unsigned char 
  2286 ;;		 -> readClock@n(1), 
  2287 ;;  d_ptr           1    2[COMMON] PTR unsigned char 
  2288 ;;		 -> readClock@a(1), 
  2289 ;;  m_ptr           1    3[COMMON] PTR unsigned char 
  2290 ;;		 -> readClock@b(1), 
  2291 ;;  y_ptr           1    4[COMMON] PTR unsigned char 
  2292 ;;		 -> readClock@c(1), 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  n_ptr           1    6[COMMON] PTR unsigned char 
  2295 ;;		 -> readClock@n(1), 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2305 ;;      Params:         3       0       0       0       0
  2306 ;;      Locals:         1       0       0       0       0
  2307 ;;      Temps:          1       0       0       0       0
  2308 ;;      Totals:         5       0       0       0       0
  2309 ;;Total ram usage:        5 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    3
  2312 ;; This function calls:
  2313 ;;		_DS1307_Read
  2314 ;;		_DS1307_Write
  2315 ;;		_I2C_Ack
  2316 ;;		_I2C_NoAck
  2317 ;;		_I2C_Restart
  2318 ;;		_I2C_Start
  2319 ;;		_I2C_Stop
  2320 ;; This function is called by:
  2321 ;;		_readClock
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function _DS1307_GetDate
  2327  0DB2                     _DS1307_GetDate:	
  2328                           
  2329                           ;incstack = 0
  2330                           ; Regs used in _DS1307_GetDate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2331                           ;DS1307_GetDate@n_ptr stored from wreg
  2332  0DB2  00F7               	movwf	DS1307_GetDate@n_ptr
  2333                           
  2334                           ;DS1307.c: 79: I2C_Start();
  2335  0DB3  120A  158A  210F  120A  158A  	fcall	_I2C_Start
  2336                           
  2337                           ;DS1307.c: 80: DS1307_Write(0xD0);
  2338  0DB8  30D0               	movlw	208
  2339  0DB9  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  2340                           
  2341                           ;DS1307.c: 81: DS1307_Write(0x03);
  2342  0DBE  3003               	movlw	3
  2343  0DBF  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  2344                           
  2345                           ;DS1307.c: 82: I2C_Restart();
  2346  0DC4  120A  158A  2109  120A  158A  	fcall	_I2C_Restart
  2347                           
  2348                           ;DS1307.c: 83: DS1307_Write(0xD1);
  2349  0DC9  30D1               	movlw	209
  2350  0DCA  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  2351                           
  2352                           ;DS1307.c: 84: *n_ptr = DS1307_Read(); I2C_Ack();
  2353  0DCF  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  2354  0DD4  00F6               	movwf	??_DS1307_GetDate
  2355  0DD5  0877               	movf	DS1307_GetDate@n_ptr,w
  2356  0DD6  0084               	movwf	4
  2357  0DD7  0876               	movf	??_DS1307_GetDate,w
  2358  0DD8  1383               	bcf	3,7	;select IRP bank0
  2359  0DD9  0080               	movwf	0
  2360  0DDA  120A  158A  2122  120A  158A  	fcall	_I2C_Ack
  2361                           
  2362                           ;DS1307.c: 85: *d_ptr = DS1307_Read(); I2C_Ack();
  2363  0DDF  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  2364  0DE4  00F6               	movwf	??_DS1307_GetDate
  2365  0DE5  0873               	movf	DS1307_GetDate@d_ptr,w
  2366  0DE6  0084               	movwf	4
  2367  0DE7  0876               	movf	??_DS1307_GetDate,w
  2368  0DE8  1383               	bcf	3,7	;select IRP bank0
  2369  0DE9  0080               	movwf	0
  2370  0DEA  120A  158A  2122  120A  158A  	fcall	_I2C_Ack
  2371                           
  2372                           ;DS1307.c: 86: *m_ptr = DS1307_Read(); I2C_Ack();
  2373  0DEF  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  2374  0DF4  00F6               	movwf	??_DS1307_GetDate
  2375  0DF5  0874               	movf	DS1307_GetDate@m_ptr,w
  2376  0DF6  0084               	movwf	4
  2377  0DF7  0876               	movf	??_DS1307_GetDate,w
  2378  0DF8  1383               	bcf	3,7	;select IRP bank0
  2379  0DF9  0080               	movwf	0
  2380  0DFA  120A  158A  2122  120A  158A  	fcall	_I2C_Ack
  2381                           
  2382                           ;DS1307.c: 87: *y_ptr = DS1307_Read(); I2C_NoAck();
  2383  0DFF  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  2384  0E04  00F6               	movwf	??_DS1307_GetDate
  2385  0E05  0875               	movf	DS1307_GetDate@y_ptr,w
  2386  0E06  0084               	movwf	4
  2387  0E07  0876               	movf	??_DS1307_GetDate,w
  2388  0E08  1383               	bcf	3,7	;select IRP bank0
  2389  0E09  0080               	movwf	0
  2390  0E0A  120A  158A  211B  120A  158A  	fcall	_I2C_NoAck
  2391                           
  2392                           ;DS1307.c: 88: I2C_Stop();
  2393  0E0F  120A  158A  2115   	fcall	_I2C_Stop
  2394  0E12  0008               	return
  2395  0E13                     __end_of_DS1307_GetDate:	
  2396                           
  2397                           	psect	text7
  2398  02ED                     __ptext7:	
  2399 ;; *************** function _doMenu *****************
  2400 ;; Defined at:
  2401 ;;		line 147 in file "LCDTime.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;		None
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  y               2   37[BANK0 ] int 
  2406 ;;  m               2   35[BANK0 ] int 
  2407 ;;  d               2   33[BANK0 ] int 
  2408 ;;  n               2   31[BANK0 ] int 
  2409 ;;  s               2   29[BANK0 ] int 
  2410 ;;  m               2   27[BANK0 ] int 
  2411 ;;  h               2   25[BANK0 ] int 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  1    wreg      void 
  2414 ;; Registers used:
  2415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2421 ;;      Params:         0       0       0       0       0
  2422 ;;      Locals:         0      14       0       0       0
  2423 ;;      Temps:          0       3       0       0       0
  2424 ;;      Totals:         0      17       0       0       0
  2425 ;;Total ram usage:       17 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    5
  2428 ;; This function calls:
  2429 ;;		_DS1307_SetDate
  2430 ;;		_DS1307_SetTime
  2431 ;;		_LCDByte
  2432 ;;		_LCDGotoXY
  2433 ;;		_LCDWriteString
  2434 ;;		___awdiv
  2435 ;;		___awmod
  2436 ;;		_readInputs
  2437 ;;		_showDate
  2438 ;;		_showTime
  2439 ;; This function is called by:
  2440 ;;		_main
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           
  2445                           ;psect for function _doMenu
  2446  02ED                     _doMenu:	
  2447  02ED                     l2406:	
  2448                           ;LCDTime.c: 149: while(bButton)
  2449                           
  2450                           ;incstack = 0
  2451                           ; Regs used in _doMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2452                           
  2453  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2454  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  2455  02EF  0864               	movf	_bButton,w
  2456  02F0  1903               	btfsc	3,2
  2457  02F1  2AF8               	goto	l2408
  2458                           
  2459                           ;LCDTime.c: 150: readInputs();
  2460  02F2  120A  158A  2289  120A  118A  	fcall	_readInputs
  2461  02F7  2AED               	goto	l2406
  2462  02F8                     l2408:	
  2463                           
  2464                           ;LCDTime.c: 153: if (menuFunction == 1 | menuFunction == 2)
  2465  02F8  0361               	decf	_menuFunction,w
  2466  02F9  1903               	btfsc	3,2
  2467  02FA  2AFF               	goto	l2412
  2468  02FB  3002               	movlw	2
  2469  02FC  0661               	xorwf	_menuFunction,w
  2470  02FD  1D03               	btfss	3,2
  2471  02FE  2D0C               	goto	l2530
  2472  02FF                     l2412:	
  2473                           
  2474                           ;LCDTime.c: 154: {
  2475                           ;LCDTime.c: 155: int h,m,s ;
  2476                           ;LCDTime.c: 157: h = hour ;
  2477  02FF  0855               	movf	_hour+1,w
  2478  0300  00BA               	movwf	doMenu@h+1
  2479  0301  0854               	movf	_hour,w
  2480  0302  00B9               	movwf	doMenu@h
  2481                           
  2482                           ;LCDTime.c: 158: m = minute ;
  2483  0303  0857               	movf	_minute+1,w
  2484  0304  00BC               	movwf	doMenu@m+1
  2485  0305  0856               	movf	_minute,w
  2486  0306  00BB               	movwf	doMenu@m
  2487                           
  2488                           ;LCDTime.c: 159: s = seconds ;
  2489  0307  085D               	movf	_seconds+1,w
  2490  0308  00BE               	movwf	doMenu@s+1
  2491  0309  085C               	movf	_seconds,w
  2492  030A  00BD               	movwf	doMenu@s
  2493                           
  2494                           ;LCDTime.c: 161: (LCDByte(0b00000001,0));
  2495  030B  01F6               	clrf	LCDByte@isdata
  2496  030C  3001               	movlw	1
  2497  030D  120A  158A  23B1  120A  118A  	fcall	_LCDByte
  2498                           
  2499                           ;LCDTime.c: 162: LCDWriteString(setText);
  2500  0312  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2501  0313  1283               	bcf	3,5	;RP0=0, select bank0
  2502  0314  1303               	bcf	3,6	;RP1=0, select bank0
  2503  0315  00A0               	movwf	LCDWriteString@msg
  2504  0316  3080               	movlw	128
  2505  0317  00A1               	movwf	LCDWriteString@msg+1
  2506  0318  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  2507                           
  2508                           ;LCDTime.c: 163: LCDWriteString("Hours");
  2509  031D  3096               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2510  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2511  031F  1303               	bcf	3,6	;RP1=0, select bank0
  2512  0320  00A0               	movwf	LCDWriteString@msg
  2513  0321  3080               	movlw	128
  2514  0322  00A1               	movwf	LCDWriteString@msg+1
  2515  0323  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  2516  0328                     L4:	
  2517                           
  2518                           ;LCDTime.c: 165: LCDGotoXY(0,1) ;
  2519  0328  01FD               	clrf	LCDGotoXY@y
  2520  0329  0AFD               	incf	LCDGotoXY@y,f
  2521  032A  3000               	movlw	0
  2522  032B  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  2523                           
  2524                           ;LCDTime.c: 166: showTime();
  2525  0330  120A  158A  232A  120A  118A  	fcall	_showTime
  2526  0335                     l2446:	
  2527                           ;LCDTime.c: 168: while(!bButton)
  2528                           
  2529  0335  1283               	bcf	3,5	;RP0=0, select bank0
  2530  0336  1303               	bcf	3,6	;RP1=0, select bank0
  2531  0337  0864               	movf	_bButton,w
  2532  0338  1D03               	btfss	3,2
  2533  0339  2B6F               	goto	l2450
  2534                           
  2535                           ;LCDTime.c: 169: {
  2536                           ;LCDTime.c: 170: readInputs();
  2537  033A  120A  158A  2289  120A  118A  	fcall	_readInputs
  2538                           
  2539                           ;LCDTime.c: 172: if (state & 0x10)
  2540  033F  1283               	bcf	3,5	;RP0=0, select bank0
  2541  0340  1303               	bcf	3,6	;RP1=0, select bank0
  2542  0341  1E65               	btfss	_state,4
  2543  0342  2B57               	goto	l314
  2544                           
  2545                           ;LCDTime.c: 173: {
  2546                           ;LCDTime.c: 174: hour++;
  2547  0343  3001               	movlw	1
  2548  0344  07D4               	addwf	_hour,f
  2549  0345  1803               	skipnc
  2550  0346  0AD5               	incf	_hour+1,f
  2551  0347  3000               	movlw	0
  2552  0348  07D5               	addwf	_hour+1,f
  2553                           
  2554                           ;LCDTime.c: 175: if (hour > 23)
  2555  0349  0855               	movf	_hour+1,w
  2556  034A  3A80               	xorlw	128
  2557  034B  00FF               	movwf	127
  2558  034C  3080               	movlw	128
  2559  034D  027F               	subwf	127,w
  2560  034E  1D03               	skipz
  2561  034F  2B52               	goto	u1975
  2562  0350  3018               	movlw	24
  2563  0351  0254               	subwf	_hour,w
  2564  0352                     u1975:	
  2565  0352  1C03               	skipc
  2566  0353  2B63               	goto	l2440
  2567                           
  2568                           ;LCDTime.c: 176: hour = 0 ;
  2569  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2570  0355  1303               	bcf	3,6	;RP1=0, select bank0
  2571  0356  2B61               	goto	l2438
  2572  0357                     l314:	
  2573                           ;LCDTime.c: 177: }
  2574                           
  2575                           
  2576                           ;LCDTime.c: 178: else if (state & 0x20)
  2577  0357  1EE5               	btfss	_state,5
  2578  0358  2B63               	goto	l2440
  2579                           
  2580                           ;LCDTime.c: 179: {
  2581                           ;LCDTime.c: 180: hour--;
  2582  0359  30FF               	movlw	255
  2583  035A  07D4               	addwf	_hour,f
  2584  035B  1803               	skipnc
  2585  035C  0AD5               	incf	_hour+1,f
  2586  035D  30FF               	movlw	255
  2587  035E  07D5               	addwf	_hour+1,f
  2588                           
  2589                           ;LCDTime.c: 181: if (hour < 0)
  2590  035F  1FD5               	btfss	_hour+1,7
  2591  0360  2B63               	goto	l2440
  2592  0361                     l2438:	
  2593                           
  2594                           ;LCDTime.c: 182: hour = 0 ;
  2595  0361  01D4               	clrf	_hour
  2596  0362  01D5               	clrf	_hour+1
  2597  0363                     l2440:	
  2598                           
  2599                           ;LCDTime.c: 183: }
  2600                           ;LCDTime.c: 185: if (state & 0x30)
  2601  0363  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0364  1303               	bcf	3,6	;RP1=0, select bank0
  2603  0365  0865               	movf	_state,w
  2604  0366  3930               	andlw	48
  2605  0367  1903               	btfsc	3,2
  2606  0368  2B35               	goto	l2446
  2607  0369  2B28               	goto	L4
  2608  036A                     l2448:	
  2609                           ;LCDTime.c: 189: }
  2610                           ;LCDTime.c: 190: }
  2611                           ;LCDTime.c: 192: while(bButton)
  2612                           
  2613                           ;LCDTime.c: 188: showTime();
  2614                           
  2615                           ;LCDTime.c: 186: {
  2616                           ;LCDTime.c: 187: LCDGotoXY(0,1) ;
  2617                           
  2618                           
  2619                           ;LCDTime.c: 193: readInputs();
  2620  036A  120A  158A  2289  120A  118A  	fcall	_readInputs
  2621  036F                     l2450:	
  2622  036F  1283               	bcf	3,5	;RP0=0, select bank0
  2623  0370  1303               	bcf	3,6	;RP1=0, select bank0
  2624  0371  0864               	movf	_bButton,w
  2625  0372  1D03               	btfss	3,2
  2626  0373  2B6A               	goto	l2448
  2627                           
  2628                           ;LCDTime.c: 195: LCDGotoXY(0,0) ;
  2629  0374  01FD               	clrf	LCDGotoXY@y
  2630  0375  3000               	movlw	0
  2631  0376  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  2632                           
  2633                           ;LCDTime.c: 196: LCDWriteString(setText);
  2634  037B  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2635  037C  1283               	bcf	3,5	;RP0=0, select bank0
  2636  037D  1303               	bcf	3,6	;RP1=0, select bank0
  2637  037E  00A0               	movwf	LCDWriteString@msg
  2638  037F  3080               	movlw	128
  2639  0380  00A1               	movwf	LCDWriteString@msg+1
  2640  0381  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  2641                           
  2642                           ;LCDTime.c: 197: LCDWriteString("Minutes");
  2643  0386  306E               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2644  0387  1283               	bcf	3,5	;RP0=0, select bank0
  2645  0388  1303               	bcf	3,6	;RP1=0, select bank0
  2646  0389  00A0               	movwf	LCDWriteString@msg
  2647  038A  3080               	movlw	128
  2648  038B  00A1               	movwf	LCDWriteString@msg+1
  2649  038C  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  2650  0391                     l2480:	
  2651                           ;LCDTime.c: 199: while(!bButton)
  2652                           
  2653  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0392  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0393  0864               	movf	_bButton,w
  2656  0394  1D03               	btfss	3,2
  2657  0395  2BD8               	goto	l2484
  2658                           
  2659                           ;LCDTime.c: 200: {
  2660                           ;LCDTime.c: 201: readInputs();
  2661  0396  120A  158A  2289  120A  118A  	fcall	_readInputs
  2662                           
  2663                           ;LCDTime.c: 203: if (state & 0x10)
  2664  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2665  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2666  039D  1E65               	btfss	_state,4
  2667  039E  2BB3               	goto	l326
  2668                           
  2669                           ;LCDTime.c: 204: {
  2670                           ;LCDTime.c: 205: minute++;
  2671  039F  3001               	movlw	1
  2672  03A0  07D6               	addwf	_minute,f
  2673  03A1  1803               	skipnc
  2674  03A2  0AD7               	incf	_minute+1,f
  2675  03A3  3000               	movlw	0
  2676  03A4  07D7               	addwf	_minute+1,f
  2677                           
  2678                           ;LCDTime.c: 206: if (minute > 59)
  2679  03A5  0857               	movf	_minute+1,w
  2680  03A6  3A80               	xorlw	128
  2681  03A7  00FF               	movwf	127
  2682  03A8  3080               	movlw	128
  2683  03A9  027F               	subwf	127,w
  2684  03AA  1D03               	skipz
  2685  03AB  2BAE               	goto	u2045
  2686  03AC  303C               	movlw	60
  2687  03AD  0256               	subwf	_minute,w
  2688  03AE                     u2045:	
  2689  03AE  1C03               	skipc
  2690  03AF  2BBF               	goto	l2474
  2691                           
  2692                           ;LCDTime.c: 207: minute = 0 ;
  2693  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  2694  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  2695  03B2  2BBD               	goto	l2472
  2696  03B3                     l326:	
  2697                           ;LCDTime.c: 208: }
  2698                           
  2699                           
  2700                           ;LCDTime.c: 209: else if (state & 0x20)
  2701  03B3  1EE5               	btfss	_state,5
  2702  03B4  2BBF               	goto	l2474
  2703                           
  2704                           ;LCDTime.c: 210: {
  2705                           ;LCDTime.c: 211: minute--;
  2706  03B5  30FF               	movlw	255
  2707  03B6  07D6               	addwf	_minute,f
  2708  03B7  1803               	skipnc
  2709  03B8  0AD7               	incf	_minute+1,f
  2710  03B9  30FF               	movlw	255
  2711  03BA  07D7               	addwf	_minute+1,f
  2712                           
  2713                           ;LCDTime.c: 212: if (minute < 0)
  2714  03BB  1FD7               	btfss	_minute+1,7
  2715  03BC  2BBF               	goto	l2474
  2716  03BD                     l2472:	
  2717                           
  2718                           ;LCDTime.c: 213: minute = 0 ;
  2719  03BD  01D6               	clrf	_minute
  2720  03BE  01D7               	clrf	_minute+1
  2721  03BF                     l2474:	
  2722                           
  2723                           ;LCDTime.c: 214: }
  2724                           ;LCDTime.c: 216: if (state & 0x30)
  2725  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2726  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2727  03C1  0865               	movf	_state,w
  2728  03C2  3930               	andlw	48
  2729  03C3  1903               	btfsc	3,2
  2730  03C4  2B91               	goto	l2480
  2731                           
  2732                           ;LCDTime.c: 217: {
  2733                           ;LCDTime.c: 218: LCDGotoXY(0,1) ;
  2734  03C5  01FD               	clrf	LCDGotoXY@y
  2735  03C6  0AFD               	incf	LCDGotoXY@y,f
  2736  03C7  3000               	movlw	0
  2737  03C8  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  2738                           
  2739                           ;LCDTime.c: 219: showTime();
  2740  03CD  120A  158A  232A  120A  118A  	fcall	_showTime
  2741  03D2  2B91               	goto	l2480
  2742  03D3                     l2482:	
  2743                           ;LCDTime.c: 220: }
  2744                           ;LCDTime.c: 221: }
  2745                           ;LCDTime.c: 223: while(bButton)
  2746                           
  2747                           
  2748                           ;LCDTime.c: 224: readInputs();
  2749  03D3  120A  158A  2289  120A  118A  	fcall	_readInputs
  2750  03D8                     l2484:	
  2751  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2752  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2753  03DA  0864               	movf	_bButton,w
  2754  03DB  1D03               	btfss	3,2
  2755  03DC  2BD3               	goto	l2482
  2756                           
  2757                           ;LCDTime.c: 226: LCDGotoXY(0,0) ;
  2758  03DD  01FD               	clrf	LCDGotoXY@y
  2759  03DE  3000               	movlw	0
  2760  03DF  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  2761                           
  2762                           ;LCDTime.c: 227: LCDWriteString(setText);
  2763  03E4  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2764  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  2765  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  2766  03E7  00A0               	movwf	LCDWriteString@msg
  2767  03E8  3080               	movlw	128
  2768  03E9  00A1               	movwf	LCDWriteString@msg+1
  2769  03EA  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  2770                           
  2771                           ;LCDTime.c: 228: LCDWriteString("Seconds");
  2772  03EF  3066               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2773  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2774  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  2775  03F2  00A0               	movwf	LCDWriteString@msg
  2776  03F3  3080               	movlw	128
  2777  03F4  00A1               	movwf	LCDWriteString@msg+1
  2778  03F5  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  2779  03FA                     l2514:	
  2780                           ;LCDTime.c: 230: while(!bButton)
  2781                           
  2782  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2783  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2784  03FC  0864               	movf	_bButton,w
  2785  03FD  1D03               	btfss	3,2
  2786  03FE  2C3C               	goto	l2516
  2787                           
  2788                           ;LCDTime.c: 231: {
  2789                           ;LCDTime.c: 232: readInputs();
  2790  03FF  120A  158A  2289  120A  118A  	fcall	_readInputs
  2791                           
  2792                           ;LCDTime.c: 234: if (state & 0x10)
  2793  0404  1283               	bcf	3,5	;RP0=0, select bank0
  2794  0405  1303               	bcf	3,6	;RP1=0, select bank0
  2795  0406  1E65               	btfss	_state,4
  2796  0407  2C1C               	goto	l338
  2797                           
  2798                           ;LCDTime.c: 235: {
  2799                           ;LCDTime.c: 236: seconds++;
  2800  0408  3001               	movlw	1
  2801  0409  07DC               	addwf	_seconds,f
  2802  040A  1803               	skipnc
  2803  040B  0ADD               	incf	_seconds+1,f
  2804  040C  3000               	movlw	0
  2805  040D  07DD               	addwf	_seconds+1,f
  2806                           
  2807                           ;LCDTime.c: 237: if (seconds > 59)
  2808  040E  085D               	movf	_seconds+1,w
  2809  040F  3A80               	xorlw	128
  2810  0410  00FF               	movwf	127
  2811  0411  3080               	movlw	128
  2812  0412  027F               	subwf	127,w
  2813  0413  1D03               	skipz
  2814  0414  2C17               	goto	u2115
  2815  0415  303C               	movlw	60
  2816  0416  025C               	subwf	_seconds,w
  2817  0417                     u2115:	
  2818  0417  1C03               	skipc
  2819  0418  2C28               	goto	l2508
  2820                           
  2821                           ;LCDTime.c: 238: seconds = 0 ;
  2822  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2823  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2824  041B  2C26               	goto	l2506
  2825  041C                     l338:	
  2826                           ;LCDTime.c: 239: }
  2827                           
  2828                           
  2829                           ;LCDTime.c: 240: else if (state & 0x20)
  2830  041C  1EE5               	btfss	_state,5
  2831  041D  2C28               	goto	l2508
  2832                           
  2833                           ;LCDTime.c: 241: {
  2834                           ;LCDTime.c: 242: seconds--;
  2835  041E  30FF               	movlw	255
  2836  041F  07DC               	addwf	_seconds,f
  2837  0420  1803               	skipnc
  2838  0421  0ADD               	incf	_seconds+1,f
  2839  0422  30FF               	movlw	255
  2840  0423  07DD               	addwf	_seconds+1,f
  2841                           
  2842                           ;LCDTime.c: 243: if (seconds < 0)
  2843  0424  1FDD               	btfss	_seconds+1,7
  2844  0425  2C28               	goto	l2508
  2845  0426                     l2506:	
  2846                           
  2847                           ;LCDTime.c: 244: seconds = 0 ;
  2848  0426  01DC               	clrf	_seconds
  2849  0427  01DD               	clrf	_seconds+1
  2850  0428                     l2508:	
  2851                           
  2852                           ;LCDTime.c: 245: }
  2853                           ;LCDTime.c: 247: if (state & 0x30)
  2854  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2855  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2856  042A  0865               	movf	_state,w
  2857  042B  3930               	andlw	48
  2858  042C  1903               	btfsc	3,2
  2859  042D  2BFA               	goto	l2514
  2860                           
  2861                           ;LCDTime.c: 248: {
  2862                           ;LCDTime.c: 249: LCDGotoXY(0,1) ;
  2863  042E  01FD               	clrf	LCDGotoXY@y
  2864  042F  0AFD               	incf	LCDGotoXY@y,f
  2865  0430  3000               	movlw	0
  2866  0431  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  2867                           
  2868                           ;LCDTime.c: 250: showTime();
  2869  0436  120A  158A  232A  120A  118A  	fcall	_showTime
  2870  043B  2BFA               	goto	l2514
  2871  043C                     l2516:	
  2872                           
  2873                           ;LCDTime.c: 251: }
  2874                           ;LCDTime.c: 252: }
  2875                           ;LCDTime.c: 255: if (h != hour || m != minute || s != seconds)
  2876  043C  0855               	movf	_hour+1,w
  2877  043D  063A               	xorwf	doMenu@h+1,w
  2878  043E  1D03               	skipz
  2879  043F  2C42               	goto	u2165
  2880  0440  0854               	movf	_hour,w
  2881  0441  0639               	xorwf	doMenu@h,w
  2882  0442                     u2165:	
  2883  0442  1D03               	skipz
  2884  0443  2C54               	goto	l2522
  2885  0444  0857               	movf	_minute+1,w
  2886  0445  063C               	xorwf	doMenu@m+1,w
  2887  0446  1D03               	skipz
  2888  0447  2C4A               	goto	u2175
  2889  0448  0856               	movf	_minute,w
  2890  0449  063B               	xorwf	doMenu@m,w
  2891  044A                     u2175:	
  2892  044A  1D03               	skipz
  2893  044B  2C54               	goto	l2522
  2894  044C  085D               	movf	_seconds+1,w
  2895  044D  063E               	xorwf	doMenu@s+1,w
  2896  044E  1D03               	skipz
  2897  044F  2C52               	goto	u2185
  2898  0450  085C               	movf	_seconds,w
  2899  0451  063D               	xorwf	doMenu@s,w
  2900  0452                     u2185:	
  2901  0452  1903               	skipnz
  2902  0453  2D01               	goto	l2528
  2903  0454                     l2522:	
  2904                           
  2905                           ;LCDTime.c: 256: {
  2906                           ;LCDTime.c: 257: h = ((hour / 10) << 4) + hour % 10 ;
  2907  0454  300A               	movlw	10
  2908  0455  00F1               	movwf	___awdiv@divisor
  2909  0456  3000               	movlw	0
  2910  0457  00F2               	movwf	___awdiv@divisor+1
  2911  0458  0855               	movf	_hour+1,w
  2912  0459  00F4               	movwf	___awdiv@dividend+1
  2913  045A  0854               	movf	_hour,w
  2914  045B  00F3               	movwf	___awdiv@dividend
  2915  045C  120A  158A  24FC  120A  118A  	fcall	___awdiv
  2916  0461  0871               	movf	?___awdiv,w
  2917  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2918  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2919  0464  00B6               	movwf	??_doMenu
  2920  0465  0872               	movf	?___awdiv+1,w
  2921  0466  00B7               	movwf	??_doMenu+1
  2922  0467  0EB6               	swapf	??_doMenu,f
  2923  0468  0EB7               	swapf	??_doMenu+1,f
  2924  0469  30F0               	movlw	240
  2925  046A  05B7               	andwf	??_doMenu+1,f
  2926  046B  0836               	movf	??_doMenu,w
  2927  046C  390F               	andlw	15
  2928  046D  04B7               	iorwf	??_doMenu+1,f
  2929  046E  30F0               	movlw	240
  2930  046F  05B6               	andwf	??_doMenu,f
  2931  0470  300A               	movlw	10
  2932  0471  00F1               	movwf	___awmod@divisor
  2933  0472  3000               	movlw	0
  2934  0473  00F2               	movwf	___awmod@divisor+1
  2935  0474  0855               	movf	_hour+1,w
  2936  0475  00F4               	movwf	___awmod@dividend+1
  2937  0476  0854               	movf	_hour,w
  2938  0477  00F3               	movwf	___awmod@dividend
  2939  0478  120A  158A  2366  120A  118A  	fcall	___awmod
  2940  047D  0871               	movf	?___awmod,w
  2941  047E  1283               	bcf	3,5	;RP0=0, select bank0
  2942  047F  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0480  0736               	addwf	??_doMenu,w
  2944  0481  00B9               	movwf	doMenu@h
  2945  0482  0872               	movf	?___awmod+1,w
  2946  0483  1803               	skipnc
  2947  0484  0A72               	incf	?___awmod+1,w
  2948  0485  0737               	addwf	??_doMenu+1,w
  2949  0486  00BA               	movwf	doMenu@h+1
  2950                           
  2951                           ;LCDTime.c: 258: m = ((minute / 10) << 4) + minute % 10 ;
  2952  0487  300A               	movlw	10
  2953  0488  00F1               	movwf	___awdiv@divisor
  2954  0489  3000               	movlw	0
  2955  048A  00F2               	movwf	___awdiv@divisor+1
  2956  048B  0857               	movf	_minute+1,w
  2957  048C  00F4               	movwf	___awdiv@dividend+1
  2958  048D  0856               	movf	_minute,w
  2959  048E  00F3               	movwf	___awdiv@dividend
  2960  048F  120A  158A  24FC  120A  118A  	fcall	___awdiv
  2961  0494  0871               	movf	?___awdiv,w
  2962  0495  1283               	bcf	3,5	;RP0=0, select bank0
  2963  0496  1303               	bcf	3,6	;RP1=0, select bank0
  2964  0497  00B6               	movwf	??_doMenu
  2965  0498  0872               	movf	?___awdiv+1,w
  2966  0499  00B7               	movwf	??_doMenu+1
  2967  049A  0EB6               	swapf	??_doMenu,f
  2968  049B  0EB7               	swapf	??_doMenu+1,f
  2969  049C  30F0               	movlw	240
  2970  049D  05B7               	andwf	??_doMenu+1,f
  2971  049E  0836               	movf	??_doMenu,w
  2972  049F  390F               	andlw	15
  2973  04A0  04B7               	iorwf	??_doMenu+1,f
  2974  04A1  30F0               	movlw	240
  2975  04A2  05B6               	andwf	??_doMenu,f
  2976  04A3  300A               	movlw	10
  2977  04A4  00F1               	movwf	___awmod@divisor
  2978  04A5  3000               	movlw	0
  2979  04A6  00F2               	movwf	___awmod@divisor+1
  2980  04A7  0857               	movf	_minute+1,w
  2981  04A8  00F4               	movwf	___awmod@dividend+1
  2982  04A9  0856               	movf	_minute,w
  2983  04AA  00F3               	movwf	___awmod@dividend
  2984  04AB  120A  158A  2366  120A  118A  	fcall	___awmod
  2985  04B0  0871               	movf	?___awmod,w
  2986  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2987  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2988  04B3  0736               	addwf	??_doMenu,w
  2989  04B4  00BB               	movwf	doMenu@m
  2990  04B5  0872               	movf	?___awmod+1,w
  2991  04B6  1803               	skipnc
  2992  04B7  0A72               	incf	?___awmod+1,w
  2993  04B8  0737               	addwf	??_doMenu+1,w
  2994  04B9  00BC               	movwf	doMenu@m+1
  2995                           
  2996                           ;LCDTime.c: 259: s = ((seconds / 10) << 4) + seconds % 10 ;
  2997  04BA  300A               	movlw	10
  2998  04BB  00F1               	movwf	___awdiv@divisor
  2999  04BC  3000               	movlw	0
  3000  04BD  00F2               	movwf	___awdiv@divisor+1
  3001  04BE  085D               	movf	_seconds+1,w
  3002  04BF  00F4               	movwf	___awdiv@dividend+1
  3003  04C0  085C               	movf	_seconds,w
  3004  04C1  00F3               	movwf	___awdiv@dividend
  3005  04C2  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3006  04C7  0871               	movf	?___awdiv,w
  3007  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  3008  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  3009  04CA  00B6               	movwf	??_doMenu
  3010  04CB  0872               	movf	?___awdiv+1,w
  3011  04CC  00B7               	movwf	??_doMenu+1
  3012  04CD  0EB6               	swapf	??_doMenu,f
  3013  04CE  0EB7               	swapf	??_doMenu+1,f
  3014  04CF  30F0               	movlw	240
  3015  04D0  05B7               	andwf	??_doMenu+1,f
  3016  04D1  0836               	movf	??_doMenu,w
  3017  04D2  390F               	andlw	15
  3018  04D3  04B7               	iorwf	??_doMenu+1,f
  3019  04D4  30F0               	movlw	240
  3020  04D5  05B6               	andwf	??_doMenu,f
  3021  04D6  300A               	movlw	10
  3022  04D7  00F1               	movwf	___awmod@divisor
  3023  04D8  3000               	movlw	0
  3024  04D9  00F2               	movwf	___awmod@divisor+1
  3025  04DA  085D               	movf	_seconds+1,w
  3026  04DB  00F4               	movwf	___awmod@dividend+1
  3027  04DC  085C               	movf	_seconds,w
  3028  04DD  00F3               	movwf	___awmod@dividend
  3029  04DE  120A  158A  2366  120A  118A  	fcall	___awmod
  3030  04E3  0871               	movf	?___awmod,w
  3031  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  3032  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  3033  04E6  0736               	addwf	??_doMenu,w
  3034  04E7  00BD               	movwf	doMenu@s
  3035  04E8  0872               	movf	?___awmod+1,w
  3036  04E9  1803               	skipnc
  3037  04EA  0A72               	incf	?___awmod+1,w
  3038  04EB  0737               	addwf	??_doMenu+1,w
  3039  04EC  00BE               	movwf	doMenu@s+1
  3040                           
  3041                           ;LCDTime.c: 261: DS1307_SetTime(h,m,s) ;
  3042  04ED  083B               	movf	doMenu@m,w
  3043  04EE  00B6               	movwf	??_doMenu
  3044  04EF  0836               	movf	??_doMenu,w
  3045  04F0  00F3               	movwf	DS1307_SetTime@mm
  3046  04F1  083D               	movf	doMenu@s,w
  3047  04F2  00B7               	movwf	??_doMenu+1
  3048  04F3  0837               	movf	??_doMenu+1,w
  3049  04F4  00F4               	movwf	DS1307_SetTime@ss
  3050  04F5  0839               	movf	doMenu@h,w
  3051  04F6  120A  158A  2233  120A  118A  	fcall	_DS1307_SetTime
  3052                           
  3053                           ;LCDTime.c: 263: runningMinute = minute ;
  3054  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  3055  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  3056  04FD  0857               	movf	_minute+1,w
  3057  04FE  00DB               	movwf	_runningMinute+1
  3058  04FF  0856               	movf	_minute,w
  3059  0500  00DA               	movwf	_runningMinute
  3060  0501                     l2528:	
  3061                           ;LCDTime.c: 264: }
  3062                           ;LCDTime.c: 266: while(bButton)
  3063                           
  3064  0501  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0502  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0503  0864               	movf	_bButton,w
  3067  0504  1903               	btfsc	3,2
  3068  0505  2D0C               	goto	l2530
  3069                           
  3070                           ;LCDTime.c: 267: readInputs();
  3071  0506  120A  158A  2289  120A  118A  	fcall	_readInputs
  3072  050B  2D01               	goto	l2528
  3073  050C                     l2530:	
  3074                           
  3075                           ;LCDTime.c: 268: }
  3076                           ;LCDTime.c: 271: if (menuFunction == 1 | menuFunction == 3)
  3077  050C  0361               	decf	_menuFunction,w
  3078  050D  1903               	btfsc	3,2
  3079  050E  2D13               	goto	l2534
  3080  050F  3003               	movlw	3
  3081  0510  0661               	xorwf	_menuFunction,w
  3082  0511  1D03               	btfss	3,2
  3083  0512  0008               	return
  3084  0513                     l2534:	
  3085                           
  3086                           ;LCDTime.c: 272: {
  3087                           ;LCDTime.c: 273: int n,d,m,y ;
  3088                           ;LCDTime.c: 275: n = day ;
  3089  0513  0853               	movf	_day+1,w
  3090  0514  00C0               	movwf	doMenu@n+1
  3091  0515  0852               	movf	_day,w
  3092  0516  00BF               	movwf	doMenu@n
  3093                           
  3094                           ;LCDTime.c: 276: d = date ;
  3095  0517  0851               	movf	_date+1,w
  3096  0518  00C2               	movwf	doMenu@d+1
  3097  0519  0850               	movf	_date,w
  3098  051A  00C1               	movwf	doMenu@d
  3099                           
  3100                           ;LCDTime.c: 277: m = month ;
  3101  051B  0859               	movf	_month+1,w
  3102  051C  00C4               	movwf	doMenu@m_310+1
  3103  051D  0858               	movf	_month,w
  3104  051E  00C3               	movwf	doMenu@m_310
  3105                           
  3106                           ;LCDTime.c: 278: y = year ;
  3107  051F  085F               	movf	_year+1,w
  3108  0520  00C6               	movwf	doMenu@y+1
  3109  0521  085E               	movf	_year,w
  3110  0522  00C5               	movwf	doMenu@y
  3111                           
  3112                           ;LCDTime.c: 280: (LCDByte(0b00000001,0));
  3113  0523  01F6               	clrf	LCDByte@isdata
  3114  0524  3001               	movlw	1
  3115  0525  120A  158A  23B1  120A  118A  	fcall	_LCDByte
  3116                           
  3117                           ;LCDTime.c: 281: LCDWriteString(setText);
  3118  052A  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3119  052B  1283               	bcf	3,5	;RP0=0, select bank0
  3120  052C  1303               	bcf	3,6	;RP1=0, select bank0
  3121  052D  00A0               	movwf	LCDWriteString@msg
  3122  052E  3080               	movlw	128
  3123  052F  00A1               	movwf	LCDWriteString@msg+1
  3124  0530  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  3125                           
  3126                           ;LCDTime.c: 282: LCDWriteString("Year");
  3127  0535  309C               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3128  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0537  1303               	bcf	3,6	;RP1=0, select bank0
  3130  0538  00A0               	movwf	LCDWriteString@msg
  3131  0539  3080               	movlw	128
  3132  053A  00A1               	movwf	LCDWriteString@msg+1
  3133  053B  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  3134  0540                     L5:	
  3135                           
  3136                           ;LCDTime.c: 284: LCDGotoXY(0,1) ;
  3137  0540  01FD               	clrf	LCDGotoXY@y
  3138  0541  0AFD               	incf	LCDGotoXY@y,f
  3139  0542  3000               	movlw	0
  3140  0543  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  3141                           
  3142                           ;LCDTime.c: 285: showDate();
  3143  0548  120A  158A  2613  120A  118A  	fcall	_showDate
  3144  054D                     l2568:	
  3145                           ;LCDTime.c: 287: while(!bButton)
  3146                           
  3147  054D  1283               	bcf	3,5	;RP0=0, select bank0
  3148  054E  1303               	bcf	3,6	;RP1=0, select bank0
  3149  054F  0864               	movf	_bButton,w
  3150  0550  1D03               	btfss	3,2
  3151  0551  2D8B               	goto	l2572
  3152                           
  3153                           ;LCDTime.c: 288: {
  3154                           ;LCDTime.c: 289: readInputs();
  3155  0552  120A  158A  2289  120A  118A  	fcall	_readInputs
  3156                           
  3157                           ;LCDTime.c: 291: if (state & 0x10)
  3158  0557  1283               	bcf	3,5	;RP0=0, select bank0
  3159  0558  1303               	bcf	3,6	;RP1=0, select bank0
  3160  0559  1E65               	btfss	_state,4
  3161  055A  2D71               	goto	l356
  3162                           
  3163                           ;LCDTime.c: 292: {
  3164                           ;LCDTime.c: 293: year++;
  3165  055B  3001               	movlw	1
  3166  055C  07DE               	addwf	_year,f
  3167  055D  1803               	skipnc
  3168  055E  0ADF               	incf	_year+1,f
  3169  055F  3000               	movlw	0
  3170  0560  07DF               	addwf	_year+1,f
  3171                           
  3172                           ;LCDTime.c: 294: if (year > 99)
  3173  0561  085F               	movf	_year+1,w
  3174  0562  3A80               	xorlw	128
  3175  0563  00FF               	movwf	127
  3176  0564  3080               	movlw	128
  3177  0565  027F               	subwf	127,w
  3178  0566  1D03               	skipz
  3179  0567  2D6A               	goto	u2235
  3180  0568  3064               	movlw	100
  3181  0569  025E               	subwf	_year,w
  3182  056A                     u2235:	
  3183  056A  1C03               	skipc
  3184  056B  2D7F               	goto	l2562
  3185                           
  3186                           ;LCDTime.c: 295: year = 0 ;
  3187  056C  1283               	bcf	3,5	;RP0=0, select bank0
  3188  056D  1303               	bcf	3,6	;RP1=0, select bank0
  3189  056E  01DE               	clrf	_year
  3190  056F  01DF               	clrf	_year+1
  3191                           
  3192                           ;LCDTime.c: 296: }
  3193  0570  2D7F               	goto	l2562
  3194  0571                     l356:	
  3195                           
  3196                           ;LCDTime.c: 297: else if (state & 0x20)
  3197  0571  1EE5               	btfss	_state,5
  3198  0572  2D7F               	goto	l2562
  3199                           
  3200                           ;LCDTime.c: 298: {
  3201                           ;LCDTime.c: 299: year--;
  3202  0573  30FF               	movlw	255
  3203  0574  07DE               	addwf	_year,f
  3204  0575  1803               	skipnc
  3205  0576  0ADF               	incf	_year+1,f
  3206  0577  30FF               	movlw	255
  3207  0578  07DF               	addwf	_year+1,f
  3208                           
  3209                           ;LCDTime.c: 300: if (year < 0)
  3210  0579  1FDF               	btfss	_year+1,7
  3211  057A  2D7F               	goto	l2562
  3212                           
  3213                           ;LCDTime.c: 301: date = 99 ;
  3214  057B  3063               	movlw	99
  3215  057C  00D0               	movwf	_date
  3216  057D  3000               	movlw	0
  3217  057E  00D1               	movwf	_date+1
  3218  057F                     l2562:	
  3219                           
  3220                           ;LCDTime.c: 302: }
  3221                           ;LCDTime.c: 304: if (state & 0x30)
  3222  057F  1283               	bcf	3,5	;RP0=0, select bank0
  3223  0580  1303               	bcf	3,6	;RP1=0, select bank0
  3224  0581  0865               	movf	_state,w
  3225  0582  3930               	andlw	48
  3226  0583  1903               	btfsc	3,2
  3227  0584  2D4D               	goto	l2568
  3228  0585  2D40               	goto	L5
  3229  0586                     l2570:	
  3230                           ;LCDTime.c: 308: }
  3231                           ;LCDTime.c: 309: }
  3232                           ;LCDTime.c: 311: while(bButton)
  3233                           
  3234                           ;LCDTime.c: 307: showDate();
  3235                           
  3236                           ;LCDTime.c: 305: {
  3237                           ;LCDTime.c: 306: LCDGotoXY(0,1) ;
  3238                           
  3239                           
  3240                           ;LCDTime.c: 312: readInputs();
  3241  0586  120A  158A  2289  120A  118A  	fcall	_readInputs
  3242  058B                     l2572:	
  3243  058B  1283               	bcf	3,5	;RP0=0, select bank0
  3244  058C  1303               	bcf	3,6	;RP1=0, select bank0
  3245  058D  0864               	movf	_bButton,w
  3246  058E  1D03               	btfss	3,2
  3247  058F  2D86               	goto	l2570
  3248                           
  3249                           ;LCDTime.c: 314: LCDGotoXY(0,0) ;
  3250  0590  01FD               	clrf	LCDGotoXY@y
  3251  0591  3000               	movlw	0
  3252  0592  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  3253                           
  3254                           ;LCDTime.c: 315: LCDWriteString(setText);
  3255  0597  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3256  0598  1283               	bcf	3,5	;RP0=0, select bank0
  3257  0599  1303               	bcf	3,6	;RP1=0, select bank0
  3258  059A  00A0               	movwf	LCDWriteString@msg
  3259  059B  3080               	movlw	128
  3260  059C  00A1               	movwf	LCDWriteString@msg+1
  3261  059D  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  3262                           
  3263                           ;LCDTime.c: 316: LCDWriteString("Month");
  3264  05A2  3090               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3265  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  3266  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  3267  05A5  00A0               	movwf	LCDWriteString@msg
  3268  05A6  3080               	movlw	128
  3269  05A7  00A1               	movwf	LCDWriteString@msg+1
  3270  05A8  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  3271  05AD                     l2602:	
  3272                           ;LCDTime.c: 318: while(!bButton)
  3273                           
  3274  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  3275  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  3276  05AF  0864               	movf	_bButton,w
  3277  05B0  1D03               	btfss	3,2
  3278  05B1  2DF9               	goto	l2606
  3279                           
  3280                           ;LCDTime.c: 319: {
  3281                           ;LCDTime.c: 320: readInputs();
  3282  05B2  120A  158A  2289  120A  118A  	fcall	_readInputs
  3283                           
  3284                           ;LCDTime.c: 322: if (state & 0x10)
  3285  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  3286  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  3287  05B9  1E65               	btfss	_state,4
  3288  05BA  2DD0               	goto	l368
  3289                           
  3290                           ;LCDTime.c: 323: {
  3291                           ;LCDTime.c: 324: month++;
  3292  05BB  3001               	movlw	1
  3293  05BC  07D8               	addwf	_month,f
  3294  05BD  1803               	skipnc
  3295  05BE  0AD9               	incf	_month+1,f
  3296  05BF  3000               	movlw	0
  3297  05C0  07D9               	addwf	_month+1,f
  3298                           
  3299                           ;LCDTime.c: 325: if (month > 12)
  3300  05C1  0859               	movf	_month+1,w
  3301  05C2  3A80               	xorlw	128
  3302  05C3  00FF               	movwf	127
  3303  05C4  3080               	movlw	128
  3304  05C5  027F               	subwf	127,w
  3305  05C6  1D03               	skipz
  3306  05C7  2DCA               	goto	u2305
  3307  05C8  300D               	movlw	13
  3308  05C9  0258               	subwf	_month,w
  3309  05CA                     u2305:	
  3310  05CA  1C03               	skipc
  3311  05CB  2DE0               	goto	l2596
  3312                           
  3313                           ;LCDTime.c: 326: month = 1 ;
  3314  05CC  3001               	movlw	1
  3315  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  3316  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  3317  05CF  2DDD               	goto	L1
  3318  05D0                     l368:	
  3319                           ;LCDTime.c: 327: }
  3320                           
  3321                           
  3322                           ;LCDTime.c: 328: else if (state & 0x20)
  3323  05D0  1EE5               	btfss	_state,5
  3324  05D1  2DE0               	goto	l2596
  3325                           
  3326                           ;LCDTime.c: 329: {
  3327                           ;LCDTime.c: 330: month--;
  3328  05D2  30FF               	movlw	255
  3329  05D3  07D8               	addwf	_month,f
  3330  05D4  1803               	skipnc
  3331  05D5  0AD9               	incf	_month+1,f
  3332  05D6  30FF               	movlw	255
  3333  05D7  07D9               	addwf	_month+1,f
  3334                           
  3335                           ;LCDTime.c: 331: if (!month)
  3336  05D8  0858               	movf	_month,w
  3337  05D9  0459               	iorwf	_month+1,w
  3338  05DA  1D03               	btfss	3,2
  3339  05DB  2DE0               	goto	l2596
  3340                           
  3341                           ;LCDTime.c: 332: month = 12 ;
  3342  05DC  300C               	movlw	12
  3343  05DD                     L1:	
  3344  05DD  00D8               	movwf	_month
  3345  05DE  3000               	movlw	0
  3346  05DF  00D9               	movwf	_month+1
  3347  05E0                     l2596:	
  3348                           
  3349                           ;LCDTime.c: 333: }
  3350                           ;LCDTime.c: 335: if (state & 0x30)
  3351  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  3352  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  3353  05E2  0865               	movf	_state,w
  3354  05E3  3930               	andlw	48
  3355  05E4  1903               	btfsc	3,2
  3356  05E5  2DAD               	goto	l2602
  3357                           
  3358                           ;LCDTime.c: 336: {
  3359                           ;LCDTime.c: 337: LCDGotoXY(0,1) ;
  3360  05E6  01FD               	clrf	LCDGotoXY@y
  3361  05E7  0AFD               	incf	LCDGotoXY@y,f
  3362  05E8  3000               	movlw	0
  3363  05E9  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  3364                           
  3365                           ;LCDTime.c: 338: showDate();
  3366  05EE  120A  158A  2613  120A  118A  	fcall	_showDate
  3367  05F3  2DAD               	goto	l2602
  3368  05F4                     l2604:	
  3369                           ;LCDTime.c: 339: }
  3370                           ;LCDTime.c: 340: }
  3371                           ;LCDTime.c: 342: while(bButton)
  3372                           
  3373                           
  3374                           ;LCDTime.c: 343: readInputs();
  3375  05F4  120A  158A  2289  120A  118A  	fcall	_readInputs
  3376  05F9                     l2606:	
  3377  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  3378  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  3379  05FB  0864               	movf	_bButton,w
  3380  05FC  1D03               	btfss	3,2
  3381  05FD  2DF4               	goto	l2604
  3382                           
  3383                           ;LCDTime.c: 345: LCDGotoXY(0,0) ;
  3384  05FE  01FD               	clrf	LCDGotoXY@y
  3385  05FF  3000               	movlw	0
  3386  0600  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  3387                           
  3388                           ;LCDTime.c: 346: LCDWriteString(setText);
  3389  0605  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3390  0606  1283               	bcf	3,5	;RP0=0, select bank0
  3391  0607  1303               	bcf	3,6	;RP1=0, select bank0
  3392  0608  00A0               	movwf	LCDWriteString@msg
  3393  0609  3080               	movlw	128
  3394  060A  00A1               	movwf	LCDWriteString@msg+1
  3395  060B  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  3396                           
  3397                           ;LCDTime.c: 347: LCDWriteString("Date ");
  3398  0610  308A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  3399  0611  1283               	bcf	3,5	;RP0=0, select bank0
  3400  0612  1303               	bcf	3,6	;RP1=0, select bank0
  3401  0613  00A0               	movwf	LCDWriteString@msg
  3402  0614  3080               	movlw	128
  3403  0615  00A1               	movwf	LCDWriteString@msg+1
  3404  0616  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  3405  061B                     l2636:	
  3406                           ;LCDTime.c: 349: while(!bButton)
  3407                           
  3408  061B  1283               	bcf	3,5	;RP0=0, select bank0
  3409  061C  1303               	bcf	3,6	;RP1=0, select bank0
  3410  061D  0864               	movf	_bButton,w
  3411  061E  1D03               	btfss	3,2
  3412  061F  2E7A               	goto	l2640
  3413                           
  3414                           ;LCDTime.c: 350: {
  3415                           ;LCDTime.c: 351: readInputs();
  3416  0620  120A  158A  2289  120A  118A  	fcall	_readInputs
  3417                           
  3418                           ;LCDTime.c: 353: if (state & 0x10)
  3419  0625  1283               	bcf	3,5	;RP0=0, select bank0
  3420  0626  1303               	bcf	3,6	;RP1=0, select bank0
  3421  0627  1E65               	btfss	_state,4
  3422  0628  2E48               	goto	l380
  3423                           
  3424                           ;LCDTime.c: 354: {
  3425                           ;LCDTime.c: 355: date++;
  3426  0629  3001               	movlw	1
  3427  062A  07D0               	addwf	_date,f
  3428  062B  1803               	skipnc
  3429  062C  0AD1               	incf	_date+1,f
  3430  062D  3000               	movlw	0
  3431  062E  07D1               	addwf	_date+1,f
  3432                           
  3433                           ;LCDTime.c: 356: if (date > monthDays[month-1])
  3434  062F  0858               	movf	_month,w
  3435  0630  3EFF               	addlw	255
  3436  0631  3E33               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3437  0632  0084               	movwf	4
  3438  0633  120A  158A  200A  120A  118A  	fcall	stringdir
  3439  0638  00B6               	movwf	??_doMenu
  3440  0639  0851               	movf	_date+1,w
  3441  063A  3A80               	xorlw	128
  3442  063B  3C80               	sublw	128
  3443  063C  1D03               	skipz
  3444  063D  2E40               	goto	u2375
  3445  063E  0850               	movf	_date,w
  3446  063F  0236               	subwf	??_doMenu,w
  3447  0640                     u2375:	
  3448  0640  1803               	skipnc
  3449  0641  2E61               	goto	l2630
  3450                           
  3451                           ;LCDTime.c: 357: date = 1 ;
  3452  0642  3001               	movlw	1
  3453  0643  1283               	bcf	3,5	;RP0=0, select bank0
  3454  0644  1303               	bcf	3,6	;RP1=0, select bank0
  3455  0645  00D0               	movwf	_date
  3456  0646  3000               	movlw	0
  3457  0647  2E60               	goto	L2
  3458  0648                     l380:	
  3459                           ;LCDTime.c: 358: }
  3460                           
  3461                           
  3462                           ;LCDTime.c: 359: else if (state & 0x20)
  3463  0648  1EE5               	btfss	_state,5
  3464  0649  2E61               	goto	l2630
  3465                           
  3466                           ;LCDTime.c: 360: {
  3467                           ;LCDTime.c: 361: date--;
  3468  064A  30FF               	movlw	255
  3469  064B  07D0               	addwf	_date,f
  3470  064C  1803               	skipnc
  3471  064D  0AD1               	incf	_date+1,f
  3472  064E  30FF               	movlw	255
  3473  064F  07D1               	addwf	_date+1,f
  3474                           
  3475                           ;LCDTime.c: 362: if (date < 0)
  3476  0650  1FD1               	btfss	_date+1,7
  3477  0651  2E61               	goto	l2630
  3478                           
  3479                           ;LCDTime.c: 363: date = monthDays[month-1] ;
  3480  0652  0858               	movf	_month,w
  3481  0653  3EFF               	addlw	255
  3482  0654  3E33               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3483  0655  0084               	movwf	4
  3484  0656  120A  158A  200A  120A  118A  	fcall	stringdir
  3485  065B  00B6               	movwf	??_doMenu
  3486  065C  01B7               	clrf	??_doMenu+1
  3487  065D  0836               	movf	??_doMenu,w
  3488  065E  00D0               	movwf	_date
  3489  065F  0837               	movf	??_doMenu+1,w
  3490  0660                     L2:	
  3491  0660  00D1               	movwf	_date+1
  3492  0661                     l2630:	
  3493                           
  3494                           ;LCDTime.c: 364: }
  3495                           ;LCDTime.c: 366: if (state & 0x30)
  3496  0661  1283               	bcf	3,5	;RP0=0, select bank0
  3497  0662  1303               	bcf	3,6	;RP1=0, select bank0
  3498  0663  0865               	movf	_state,w
  3499  0664  3930               	andlw	48
  3500  0665  1903               	btfsc	3,2
  3501  0666  2E1B               	goto	l2636
  3502                           
  3503                           ;LCDTime.c: 367: {
  3504                           ;LCDTime.c: 368: LCDGotoXY(0,1) ;
  3505  0667  01FD               	clrf	LCDGotoXY@y
  3506  0668  0AFD               	incf	LCDGotoXY@y,f
  3507  0669  3000               	movlw	0
  3508  066A  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  3509                           
  3510                           ;LCDTime.c: 369: showDate();
  3511  066F  120A  158A  2613  120A  118A  	fcall	_showDate
  3512  0674  2E1B               	goto	l2636
  3513  0675                     l2638:	
  3514                           ;LCDTime.c: 370: }
  3515                           ;LCDTime.c: 371: }
  3516                           ;LCDTime.c: 373: while(bButton)
  3517                           
  3518                           
  3519                           ;LCDTime.c: 374: readInputs();
  3520  0675  120A  158A  2289  120A  118A  	fcall	_readInputs
  3521  067A                     l2640:	
  3522  067A  1283               	bcf	3,5	;RP0=0, select bank0
  3523  067B  1303               	bcf	3,6	;RP1=0, select bank0
  3524  067C  0864               	movf	_bButton,w
  3525  067D  1D03               	btfss	3,2
  3526  067E  2E75               	goto	l2638
  3527                           
  3528                           ;LCDTime.c: 376: LCDGotoXY(0,0) ;
  3529  067F  01FD               	clrf	LCDGotoXY@y
  3530  0680  3000               	movlw	0
  3531  0681  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  3532                           
  3533                           ;LCDTime.c: 377: LCDWriteString(setText);
  3534  0686  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3535  0687  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0688  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0689  00A0               	movwf	LCDWriteString@msg
  3538  068A  3080               	movlw	128
  3539  068B  00A1               	movwf	LCDWriteString@msg+1
  3540  068C  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  3541                           
  3542                           ;LCDTime.c: 378: LCDWriteString("Day  ");
  3543  0691  3084               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  3544  0692  1283               	bcf	3,5	;RP0=0, select bank0
  3545  0693  1303               	bcf	3,6	;RP1=0, select bank0
  3546  0694  00A0               	movwf	LCDWriteString@msg
  3547  0695  3080               	movlw	128
  3548  0696  00A1               	movwf	LCDWriteString@msg+1
  3549  0697  120A  158A  21E5  120A  118A  	fcall	_LCDWriteString
  3550  069C                     l2670:	
  3551                           ;LCDTime.c: 380: while(!bButton)
  3552                           
  3553  069C  1283               	bcf	3,5	;RP0=0, select bank0
  3554  069D  1303               	bcf	3,6	;RP1=0, select bank0
  3555  069E  0864               	movf	_bButton,w
  3556  069F  1D03               	btfss	3,2
  3557  06A0  2EE1               	goto	l2672
  3558                           
  3559                           ;LCDTime.c: 381: {
  3560                           ;LCDTime.c: 382: readInputs();
  3561  06A1  120A  158A  2289  120A  118A  	fcall	_readInputs
  3562                           
  3563                           ;LCDTime.c: 384: if (state & 0x10)
  3564  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  3565  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  3566  06A8  1E65               	btfss	_state,4
  3567  06A9  2EBF               	goto	l392
  3568                           
  3569                           ;LCDTime.c: 385: {
  3570                           ;LCDTime.c: 386: day++;
  3571  06AA  3001               	movlw	1
  3572  06AB  07D2               	addwf	_day,f
  3573  06AC  1803               	skipnc
  3574  06AD  0AD3               	incf	_day+1,f
  3575  06AE  3000               	movlw	0
  3576  06AF  07D3               	addwf	_day+1,f
  3577                           
  3578                           ;LCDTime.c: 387: if (day > 7)
  3579  06B0  0853               	movf	_day+1,w
  3580  06B1  3A80               	xorlw	128
  3581  06B2  00FF               	movwf	127
  3582  06B3  3080               	movlw	128
  3583  06B4  027F               	subwf	127,w
  3584  06B5  1D03               	skipz
  3585  06B6  2EB9               	goto	u2445
  3586  06B7  3008               	movlw	8
  3587  06B8  0252               	subwf	_day,w
  3588  06B9                     u2445:	
  3589  06B9  1C03               	skipc
  3590  06BA  2ECD               	goto	l2664
  3591                           
  3592                           ;LCDTime.c: 388: day = 1 ;
  3593  06BB  3001               	movlw	1
  3594  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  3595  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  3596  06BE  2ECA               	goto	L3
  3597  06BF                     l392:	
  3598                           ;LCDTime.c: 389: }
  3599                           
  3600                           
  3601                           ;LCDTime.c: 390: else if (state & 0x20)
  3602  06BF  1EE5               	btfss	_state,5
  3603  06C0  2ECD               	goto	l2664
  3604                           
  3605                           ;LCDTime.c: 391: {
  3606                           ;LCDTime.c: 392: day--;
  3607  06C1  30FF               	movlw	255
  3608  06C2  07D2               	addwf	_day,f
  3609  06C3  1803               	skipnc
  3610  06C4  0AD3               	incf	_day+1,f
  3611  06C5  30FF               	movlw	255
  3612  06C6  07D3               	addwf	_day+1,f
  3613                           
  3614                           ;LCDTime.c: 393: if (day < 0)
  3615  06C7  1FD3               	btfss	_day+1,7
  3616  06C8  2ECD               	goto	l2664
  3617                           
  3618                           ;LCDTime.c: 394: day = 7 ;
  3619  06C9  3007               	movlw	7
  3620  06CA                     L3:	
  3621  06CA  00D2               	movwf	_day
  3622  06CB  3000               	movlw	0
  3623  06CC  00D3               	movwf	_day+1
  3624  06CD                     l2664:	
  3625                           
  3626                           ;LCDTime.c: 395: }
  3627                           ;LCDTime.c: 397: if (state & 0x30)
  3628  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  3629  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  3630  06CF  0865               	movf	_state,w
  3631  06D0  3930               	andlw	48
  3632  06D1  1903               	btfsc	3,2
  3633  06D2  2E9C               	goto	l2670
  3634                           
  3635                           ;LCDTime.c: 398: {
  3636                           ;LCDTime.c: 399: LCDGotoXY(0,1) ;
  3637  06D3  01FD               	clrf	LCDGotoXY@y
  3638  06D4  0AFD               	incf	LCDGotoXY@y,f
  3639  06D5  3000               	movlw	0
  3640  06D6  120A  158A  21BF  120A  118A  	fcall	_LCDGotoXY
  3641                           
  3642                           ;LCDTime.c: 400: showDate();
  3643  06DB  120A  158A  2613  120A  118A  	fcall	_showDate
  3644  06E0  2E9C               	goto	l2670
  3645  06E1                     l2672:	
  3646                           
  3647                           ;LCDTime.c: 401: }
  3648                           ;LCDTime.c: 402: }
  3649                           ;LCDTime.c: 404: if (n != day || d != date || m != month || y != year)
  3650  06E1  0853               	movf	_day+1,w
  3651  06E2  0640               	xorwf	doMenu@n+1,w
  3652  06E3  1D03               	skipz
  3653  06E4  2EE7               	goto	u2495
  3654  06E5  0852               	movf	_day,w
  3655  06E6  063F               	xorwf	doMenu@n,w
  3656  06E7                     u2495:	
  3657  06E7  1D03               	skipz
  3658  06E8  2F01               	goto	l2680
  3659  06E9  0851               	movf	_date+1,w
  3660  06EA  0642               	xorwf	doMenu@d+1,w
  3661  06EB  1D03               	skipz
  3662  06EC  2EEF               	goto	u2505
  3663  06ED  0850               	movf	_date,w
  3664  06EE  0641               	xorwf	doMenu@d,w
  3665  06EF                     u2505:	
  3666  06EF  1D03               	skipz
  3667  06F0  2F01               	goto	l2680
  3668  06F1  0859               	movf	_month+1,w
  3669  06F2  0644               	xorwf	doMenu@m_310+1,w
  3670  06F3  1D03               	skipz
  3671  06F4  2EF7               	goto	u2515
  3672  06F5  0858               	movf	_month,w
  3673  06F6  0643               	xorwf	doMenu@m_310,w
  3674  06F7                     u2515:	
  3675  06F7  1D03               	skipz
  3676  06F8  2F01               	goto	l2680
  3677  06F9  085F               	movf	_year+1,w
  3678  06FA  0646               	xorwf	doMenu@y+1,w
  3679  06FB  1D03               	skipz
  3680  06FC  2EFF               	goto	u2525
  3681  06FD  085E               	movf	_year,w
  3682  06FE  0645               	xorwf	doMenu@y,w
  3683  06FF                     u2525:	
  3684  06FF  1903               	skipnz
  3685  0700  2FDF               	goto	l2684
  3686  0701                     l2680:	
  3687                           
  3688                           ;LCDTime.c: 405: {
  3689                           ;LCDTime.c: 406: n = ((day / 10) << 4) + day % 10 ;
  3690  0701  300A               	movlw	10
  3691  0702  00F1               	movwf	___awdiv@divisor
  3692  0703  3000               	movlw	0
  3693  0704  00F2               	movwf	___awdiv@divisor+1
  3694  0705  0853               	movf	_day+1,w
  3695  0706  00F4               	movwf	___awdiv@dividend+1
  3696  0707  0852               	movf	_day,w
  3697  0708  00F3               	movwf	___awdiv@dividend
  3698  0709  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3699  070E  0871               	movf	?___awdiv,w
  3700  070F  1283               	bcf	3,5	;RP0=0, select bank0
  3701  0710  1303               	bcf	3,6	;RP1=0, select bank0
  3702  0711  00B6               	movwf	??_doMenu
  3703  0712  0872               	movf	?___awdiv+1,w
  3704  0713  00B7               	movwf	??_doMenu+1
  3705  0714  0EB6               	swapf	??_doMenu,f
  3706  0715  0EB7               	swapf	??_doMenu+1,f
  3707  0716  30F0               	movlw	240
  3708  0717  05B7               	andwf	??_doMenu+1,f
  3709  0718  0836               	movf	??_doMenu,w
  3710  0719  390F               	andlw	15
  3711  071A  04B7               	iorwf	??_doMenu+1,f
  3712  071B  30F0               	movlw	240
  3713  071C  05B6               	andwf	??_doMenu,f
  3714  071D  300A               	movlw	10
  3715  071E  00F1               	movwf	___awmod@divisor
  3716  071F  3000               	movlw	0
  3717  0720  00F2               	movwf	___awmod@divisor+1
  3718  0721  0853               	movf	_day+1,w
  3719  0722  00F4               	movwf	___awmod@dividend+1
  3720  0723  0852               	movf	_day,w
  3721  0724  00F3               	movwf	___awmod@dividend
  3722  0725  120A  158A  2366  120A  118A  	fcall	___awmod
  3723  072A  0871               	movf	?___awmod,w
  3724  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3725  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3726  072D  0736               	addwf	??_doMenu,w
  3727  072E  00BF               	movwf	doMenu@n
  3728  072F  0872               	movf	?___awmod+1,w
  3729  0730  1803               	skipnc
  3730  0731  0A72               	incf	?___awmod+1,w
  3731  0732  0737               	addwf	??_doMenu+1,w
  3732  0733  00C0               	movwf	doMenu@n+1
  3733                           
  3734                           ;LCDTime.c: 407: d = ((date / 10) << 4) + date % 10 ;
  3735  0734  300A               	movlw	10
  3736  0735  00F1               	movwf	___awdiv@divisor
  3737  0736  3000               	movlw	0
  3738  0737  00F2               	movwf	___awdiv@divisor+1
  3739  0738  0851               	movf	_date+1,w
  3740  0739  00F4               	movwf	___awdiv@dividend+1
  3741  073A  0850               	movf	_date,w
  3742  073B  00F3               	movwf	___awdiv@dividend
  3743  073C  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3744  0741  0871               	movf	?___awdiv,w
  3745  0742  1283               	bcf	3,5	;RP0=0, select bank0
  3746  0743  1303               	bcf	3,6	;RP1=0, select bank0
  3747  0744  00B6               	movwf	??_doMenu
  3748  0745  0872               	movf	?___awdiv+1,w
  3749  0746  00B7               	movwf	??_doMenu+1
  3750  0747  0EB6               	swapf	??_doMenu,f
  3751  0748  0EB7               	swapf	??_doMenu+1,f
  3752  0749  30F0               	movlw	240
  3753  074A  05B7               	andwf	??_doMenu+1,f
  3754  074B  0836               	movf	??_doMenu,w
  3755  074C  390F               	andlw	15
  3756  074D  04B7               	iorwf	??_doMenu+1,f
  3757  074E  30F0               	movlw	240
  3758  074F  05B6               	andwf	??_doMenu,f
  3759  0750  300A               	movlw	10
  3760  0751  00F1               	movwf	___awmod@divisor
  3761  0752  3000               	movlw	0
  3762  0753  00F2               	movwf	___awmod@divisor+1
  3763  0754  0851               	movf	_date+1,w
  3764  0755  00F4               	movwf	___awmod@dividend+1
  3765  0756  0850               	movf	_date,w
  3766  0757  00F3               	movwf	___awmod@dividend
  3767  0758  120A  158A  2366  120A  118A  	fcall	___awmod
  3768  075D  0871               	movf	?___awmod,w
  3769  075E  1283               	bcf	3,5	;RP0=0, select bank0
  3770  075F  1303               	bcf	3,6	;RP1=0, select bank0
  3771  0760  0736               	addwf	??_doMenu,w
  3772  0761  00C1               	movwf	doMenu@d
  3773  0762  0872               	movf	?___awmod+1,w
  3774  0763  1803               	skipnc
  3775  0764  0A72               	incf	?___awmod+1,w
  3776  0765  0737               	addwf	??_doMenu+1,w
  3777  0766  00C2               	movwf	doMenu@d+1
  3778                           
  3779                           ;LCDTime.c: 408: m = ((month / 10) << 4) + month % 10 ;
  3780  0767  300A               	movlw	10
  3781  0768  00F1               	movwf	___awdiv@divisor
  3782  0769  3000               	movlw	0
  3783  076A  00F2               	movwf	___awdiv@divisor+1
  3784  076B  0859               	movf	_month+1,w
  3785  076C  00F4               	movwf	___awdiv@dividend+1
  3786  076D  0858               	movf	_month,w
  3787  076E  00F3               	movwf	___awdiv@dividend
  3788  076F  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3789  0774  0871               	movf	?___awdiv,w
  3790  0775  1283               	bcf	3,5	;RP0=0, select bank0
  3791  0776  1303               	bcf	3,6	;RP1=0, select bank0
  3792  0777  00B6               	movwf	??_doMenu
  3793  0778  0872               	movf	?___awdiv+1,w
  3794  0779  00B7               	movwf	??_doMenu+1
  3795  077A  0EB6               	swapf	??_doMenu,f
  3796  077B  0EB7               	swapf	??_doMenu+1,f
  3797  077C  30F0               	movlw	240
  3798  077D  05B7               	andwf	??_doMenu+1,f
  3799  077E  0836               	movf	??_doMenu,w
  3800  077F  390F               	andlw	15
  3801  0780  04B7               	iorwf	??_doMenu+1,f
  3802  0781  30F0               	movlw	240
  3803  0782  05B6               	andwf	??_doMenu,f
  3804  0783  300A               	movlw	10
  3805  0784  00F1               	movwf	___awmod@divisor
  3806  0785  3000               	movlw	0
  3807  0786  00F2               	movwf	___awmod@divisor+1
  3808  0787  0859               	movf	_month+1,w
  3809  0788  00F4               	movwf	___awmod@dividend+1
  3810  0789  0858               	movf	_month,w
  3811  078A  00F3               	movwf	___awmod@dividend
  3812  078B  120A  158A  2366  120A  118A  	fcall	___awmod
  3813  0790  0871               	movf	?___awmod,w
  3814  0791  1283               	bcf	3,5	;RP0=0, select bank0
  3815  0792  1303               	bcf	3,6	;RP1=0, select bank0
  3816  0793  0736               	addwf	??_doMenu,w
  3817  0794  00C3               	movwf	doMenu@m_310
  3818  0795  0872               	movf	?___awmod+1,w
  3819  0796  1803               	skipnc
  3820  0797  0A72               	incf	?___awmod+1,w
  3821  0798  0737               	addwf	??_doMenu+1,w
  3822  0799  00C4               	movwf	doMenu@m_310+1
  3823                           
  3824                           ;LCDTime.c: 409: y = ((year / 10) << 4) + year % 10 ;
  3825  079A  300A               	movlw	10
  3826  079B  00F1               	movwf	___awdiv@divisor
  3827  079C  3000               	movlw	0
  3828  079D  00F2               	movwf	___awdiv@divisor+1
  3829  079E  085F               	movf	_year+1,w
  3830  079F  00F4               	movwf	___awdiv@dividend+1
  3831  07A0  085E               	movf	_year,w
  3832  07A1  00F3               	movwf	___awdiv@dividend
  3833  07A2  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3834  07A7  0871               	movf	?___awdiv,w
  3835  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  3836  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  3837  07AA  00B6               	movwf	??_doMenu
  3838  07AB  0872               	movf	?___awdiv+1,w
  3839  07AC  00B7               	movwf	??_doMenu+1
  3840  07AD  0EB6               	swapf	??_doMenu,f
  3841  07AE  0EB7               	swapf	??_doMenu+1,f
  3842  07AF  30F0               	movlw	240
  3843  07B0  05B7               	andwf	??_doMenu+1,f
  3844  07B1  0836               	movf	??_doMenu,w
  3845  07B2  390F               	andlw	15
  3846  07B3  04B7               	iorwf	??_doMenu+1,f
  3847  07B4  30F0               	movlw	240
  3848  07B5  05B6               	andwf	??_doMenu,f
  3849  07B6  300A               	movlw	10
  3850  07B7  00F1               	movwf	___awmod@divisor
  3851  07B8  3000               	movlw	0
  3852  07B9  00F2               	movwf	___awmod@divisor+1
  3853  07BA  085F               	movf	_year+1,w
  3854  07BB  00F4               	movwf	___awmod@dividend+1
  3855  07BC  085E               	movf	_year,w
  3856  07BD  00F3               	movwf	___awmod@dividend
  3857  07BE  120A  158A  2366  120A  118A  	fcall	___awmod
  3858  07C3  0871               	movf	?___awmod,w
  3859  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  3860  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  3861  07C6  0736               	addwf	??_doMenu,w
  3862  07C7  00C5               	movwf	doMenu@y
  3863  07C8  0872               	movf	?___awmod+1,w
  3864  07C9  1803               	skipnc
  3865  07CA  0A72               	incf	?___awmod+1,w
  3866  07CB  0737               	addwf	??_doMenu+1,w
  3867  07CC  00C6               	movwf	doMenu@y+1
  3868                           
  3869                           ;LCDTime.c: 411: DS1307_SetDate(n,d,m,y) ;
  3870  07CD  0841               	movf	doMenu@d,w
  3871  07CE  00B6               	movwf	??_doMenu
  3872  07CF  0836               	movf	??_doMenu,w
  3873  07D0  00F3               	movwf	DS1307_SetDate@dd
  3874  07D1  0843               	movf	doMenu@m_310,w
  3875  07D2  00B7               	movwf	??_doMenu+1
  3876  07D3  0837               	movf	??_doMenu+1,w
  3877  07D4  00F4               	movwf	DS1307_SetDate@mm
  3878  07D5  0845               	movf	doMenu@y,w
  3879  07D6  00B8               	movwf	??_doMenu+2
  3880  07D7  0838               	movf	??_doMenu+2,w
  3881  07D8  00F5               	movwf	DS1307_SetDate@yy
  3882  07D9  083F               	movf	doMenu@n,w
  3883  07DA  120A  158A  225B  120A  118A  	fcall	_DS1307_SetDate
  3884  07DF                     l2684:	
  3885                           ;LCDTime.c: 412: }
  3886                           ;LCDTime.c: 415: while(bButton)
  3887                           
  3888  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  3889  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  3890  07E1  0864               	movf	_bButton,w
  3891  07E2  1903               	btfsc	3,2
  3892  07E3  0008               	return
  3893                           
  3894                           ;LCDTime.c: 416: readInputs();
  3895  07E4  120A  158A  2289  120A  118A  	fcall	_readInputs
  3896  07E9  2FDF               	goto	l2684
  3897  07EA                     __end_of_doMenu:	
  3898                           
  3899                           	psect	text8
  3900  0B2A                     __ptext8:	
  3901 ;; *************** function _showTime *****************
  3902 ;; Defined at:
  3903 ;;		line 487 in file "LCDTime.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;		None
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;		None
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      void 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3917 ;;      Params:         0       0       0       0       0
  3918 ;;      Locals:         0       0       0       0       0
  3919 ;;      Temps:          0       1       0       0       0
  3920 ;;      Totals:         0       1       0       0       0
  3921 ;;Total ram usage:        1 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    4
  3924 ;; This function calls:
  3925 ;;		_LCDByte
  3926 ;;		_LCDWriteInt
  3927 ;; This function is called by:
  3928 ;;		_doMenu
  3929 ;;		_showClock
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           
  3934                           ;psect for function _showTime
  3935  0B2A                     _showTime:	
  3936                           
  3937                           ;LCDTime.c: 489: LCDWriteInt(hour,2);
  3938                           
  3939                           ;incstack = 0
  3940                           ; Regs used in _showTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3941  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  3942  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  3943  0B2C  0855               	movf	_hour+1,w
  3944  0B2D  00A3               	movwf	LCDWriteInt@val+1
  3945  0B2E  0854               	movf	_hour,w
  3946  0B2F  00A2               	movwf	LCDWriteInt@val
  3947  0B30  3002               	movlw	2
  3948  0B31  00B3               	movwf	??_showTime
  3949  0B32  0833               	movf	??_showTime,w
  3950  0B33  00A4               	movwf	LCDWriteInt@field_length
  3951  0B34  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  3952                           
  3953                           ;LCDTime.c: 490: (LCDByte(':',1)) ;
  3954  0B39  01F6               	clrf	LCDByte@isdata
  3955  0B3A  0AF6               	incf	LCDByte@isdata,f
  3956  0B3B  303A               	movlw	58
  3957  0B3C  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  3958                           
  3959                           ;LCDTime.c: 491: LCDWriteInt(minute,2);
  3960  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  3961  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  3962  0B43  0857               	movf	_minute+1,w
  3963  0B44  00A3               	movwf	LCDWriteInt@val+1
  3964  0B45  0856               	movf	_minute,w
  3965  0B46  00A2               	movwf	LCDWriteInt@val
  3966  0B47  3002               	movlw	2
  3967  0B48  00B3               	movwf	??_showTime
  3968  0B49  0833               	movf	??_showTime,w
  3969  0B4A  00A4               	movwf	LCDWriteInt@field_length
  3970  0B4B  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  3971                           
  3972                           ;LCDTime.c: 492: (LCDByte(':',1)) ;
  3973  0B50  01F6               	clrf	LCDByte@isdata
  3974  0B51  0AF6               	incf	LCDByte@isdata,f
  3975  0B52  303A               	movlw	58
  3976  0B53  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  3977                           
  3978                           ;LCDTime.c: 493: LCDWriteInt(seconds,2);
  3979  0B58  1283               	bcf	3,5	;RP0=0, select bank0
  3980  0B59  1303               	bcf	3,6	;RP1=0, select bank0
  3981  0B5A  085D               	movf	_seconds+1,w
  3982  0B5B  00A3               	movwf	LCDWriteInt@val+1
  3983  0B5C  085C               	movf	_seconds,w
  3984  0B5D  00A2               	movwf	LCDWriteInt@val
  3985  0B5E  3002               	movlw	2
  3986  0B5F  00B3               	movwf	??_showTime
  3987  0B60  0833               	movf	??_showTime,w
  3988  0B61  00A4               	movwf	LCDWriteInt@field_length
  3989  0B62  120A  158A  26C5   	fcall	_LCDWriteInt
  3990  0B65  0008               	return
  3991  0B66                     __end_of_showTime:	
  3992                           
  3993                           	psect	text9
  3994  0E13                     __ptext9:	
  3995 ;; *************** function _showDate *****************
  3996 ;; Defined at:
  3997 ;;		line 501 in file "LCDTime.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;		None
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  d               2   20[BANK0 ] int 
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      void 
  4004 ;; Registers used:
  4005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4011 ;;      Params:         0       0       0       0       0
  4012 ;;      Locals:         0       2       0       0       0
  4013 ;;      Temps:          0       1       0       0       0
  4014 ;;      Totals:         0       3       0       0       0
  4015 ;;Total ram usage:        3 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    4
  4018 ;; This function calls:
  4019 ;;		_LCDByte
  4020 ;;		_LCDWriteInt
  4021 ;;		___wmul
  4022 ;; This function is called by:
  4023 ;;		_doMenu
  4024 ;;		_showClock
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _showDate
  4030  0E13                     _showDate:	
  4031                           
  4032                           ;LCDTime.c: 503: int d = (day-1) * 3 ;
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _showDate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4036  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0E15  0852               	movf	_day,w
  4039  0E16  3EFF               	addlw	255
  4040  0E17  00FA               	movwf	___wmul@multiplier
  4041  0E18  0853               	movf	_day+1,w
  4042  0E19  1803               	skipnc
  4043  0E1A  3E01               	addlw	1
  4044  0E1B  3EFF               	addlw	255
  4045  0E1C  00FB               	movwf	___wmul@multiplier+1
  4046  0E1D  3003               	movlw	3
  4047  0E1E  00FC               	movwf	___wmul@multiplicand
  4048  0E1F  3000               	movlw	0
  4049  0E20  00FD               	movwf	___wmul@multiplicand+1
  4050  0E21  120A  158A  220C  120A  158A  	fcall	___wmul
  4051  0E26  087B               	movf	?___wmul+1,w
  4052  0E27  1283               	bcf	3,5	;RP0=0, select bank0
  4053  0E28  1303               	bcf	3,6	;RP1=0, select bank0
  4054  0E29  00B5               	movwf	showDate@d+1
  4055  0E2A  087A               	movf	?___wmul,w
  4056  0E2B  00B4               	movwf	showDate@d
  4057                           
  4058                           ;LCDTime.c: 505: LCDWriteInt(date,2);
  4059  0E2C  0851               	movf	_date+1,w
  4060  0E2D  00A3               	movwf	LCDWriteInt@val+1
  4061  0E2E  0850               	movf	_date,w
  4062  0E2F  00A2               	movwf	LCDWriteInt@val
  4063  0E30  3002               	movlw	2
  4064  0E31  00B3               	movwf	??_showDate
  4065  0E32  0833               	movf	??_showDate,w
  4066  0E33  00A4               	movwf	LCDWriteInt@field_length
  4067  0E34  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4068                           
  4069                           ;LCDTime.c: 506: (LCDByte('/',1)) ;
  4070  0E39  01F6               	clrf	LCDByte@isdata
  4071  0E3A  0AF6               	incf	LCDByte@isdata,f
  4072  0E3B  302F               	movlw	47
  4073  0E3C  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  4074                           
  4075                           ;LCDTime.c: 507: LCDWriteInt(month,2);
  4076  0E41  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0E42  1303               	bcf	3,6	;RP1=0, select bank0
  4078  0E43  0859               	movf	_month+1,w
  4079  0E44  00A3               	movwf	LCDWriteInt@val+1
  4080  0E45  0858               	movf	_month,w
  4081  0E46  00A2               	movwf	LCDWriteInt@val
  4082  0E47  3002               	movlw	2
  4083  0E48  00B3               	movwf	??_showDate
  4084  0E49  0833               	movf	??_showDate,w
  4085  0E4A  00A4               	movwf	LCDWriteInt@field_length
  4086  0E4B  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4087                           
  4088                           ;LCDTime.c: 508: (LCDByte('/',1)) ;
  4089  0E50  01F6               	clrf	LCDByte@isdata
  4090  0E51  0AF6               	incf	LCDByte@isdata,f
  4091  0E52  302F               	movlw	47
  4092  0E53  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  4093                           
  4094                           ;LCDTime.c: 509: (LCDByte('2',1)) ;
  4095  0E58  01F6               	clrf	LCDByte@isdata
  4096  0E59  0AF6               	incf	LCDByte@isdata,f
  4097  0E5A  3032               	movlw	50
  4098  0E5B  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  4099                           
  4100                           ;LCDTime.c: 510: (LCDByte('0',1)) ;
  4101  0E60  01F6               	clrf	LCDByte@isdata
  4102  0E61  0AF6               	incf	LCDByte@isdata,f
  4103  0E62  3030               	movlw	48
  4104  0E63  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  4105                           
  4106                           ;LCDTime.c: 511: LCDWriteInt(year,2);
  4107  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  4108  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  4109  0E6A  085F               	movf	_year+1,w
  4110  0E6B  00A3               	movwf	LCDWriteInt@val+1
  4111  0E6C  085E               	movf	_year,w
  4112  0E6D  00A2               	movwf	LCDWriteInt@val
  4113  0E6E  3002               	movlw	2
  4114  0E6F  00B3               	movwf	??_showDate
  4115  0E70  0833               	movf	??_showDate,w
  4116  0E71  00A4               	movwf	LCDWriteInt@field_length
  4117  0E72  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4118                           
  4119                           ;LCDTime.c: 512: (LCDByte(32,1)) ;
  4120  0E77  01F6               	clrf	LCDByte@isdata
  4121  0E78  0AF6               	incf	LCDByte@isdata,f
  4122  0E79  3020               	movlw	32
  4123  0E7A  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  4124                           
  4125                           ;LCDTime.c: 513: (LCDByte(32,1)) ;
  4126  0E7F  01F6               	clrf	LCDByte@isdata
  4127  0E80  0AF6               	incf	LCDByte@isdata,f
  4128  0E81  3020               	movlw	32
  4129  0E82  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  4130                           
  4131                           ;LCDTime.c: 514: (LCDByte(daysOfTheWeek[d++],1)) ;
  4132  0E87  01F6               	clrf	LCDByte@isdata
  4133  0E88  0AF6               	incf	LCDByte@isdata,f
  4134  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  4135  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  4136  0E8B  0834               	movf	showDate@d,w
  4137  0E8C  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4138  0E8D  0084               	movwf	4
  4139  0E8E  120A  158A  200A  120A  158A  	fcall	stringdir
  4140  0E93  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  4141  0E98  3001               	movlw	1
  4142  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  4143  0E9A  1303               	bcf	3,6	;RP1=0, select bank0
  4144  0E9B  07B4               	addwf	showDate@d,f
  4145  0E9C  1803               	skipnc
  4146  0E9D  0AB5               	incf	showDate@d+1,f
  4147  0E9E  3000               	movlw	0
  4148  0E9F  07B5               	addwf	showDate@d+1,f
  4149                           
  4150                           ;LCDTime.c: 515: (LCDByte(daysOfTheWeek[d++],1)) ;
  4151  0EA0  01F6               	clrf	LCDByte@isdata
  4152  0EA1  0AF6               	incf	LCDByte@isdata,f
  4153  0EA2  0834               	movf	showDate@d,w
  4154  0EA3  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4155  0EA4  0084               	movwf	4
  4156  0EA5  120A  158A  200A  120A  158A  	fcall	stringdir
  4157  0EAA  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  4158  0EAF  3001               	movlw	1
  4159  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  4160  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  4161  0EB2  07B4               	addwf	showDate@d,f
  4162  0EB3  1803               	skipnc
  4163  0EB4  0AB5               	incf	showDate@d+1,f
  4164  0EB5  3000               	movlw	0
  4165  0EB6  07B5               	addwf	showDate@d+1,f
  4166                           
  4167                           ;LCDTime.c: 516: (LCDByte(daysOfTheWeek[d],1)) ;
  4168  0EB7  01F6               	clrf	LCDByte@isdata
  4169  0EB8  0AF6               	incf	LCDByte@isdata,f
  4170  0EB9  0834               	movf	showDate@d,w
  4171  0EBA  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4172  0EBB  0084               	movwf	4
  4173  0EBC  120A  158A  200A  120A  158A  	fcall	stringdir
  4174  0EC1  120A  158A  23B1   	fcall	_LCDByte
  4175  0EC4  0008               	return
  4176  0EC5                     __end_of_showDate:	
  4177                           
  4178                           	psect	text10
  4179  0EC5                     __ptext10:	
  4180 ;; *************** function _LCDWriteInt *****************
  4181 ;; Defined at:
  4182 ;;		line 235 in file "lcd_hd44780_pic16.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;  val             2    2[BANK0 ] int 
  4185 ;;  field_length    1    4[BANK0 ] char 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  str             6   10[BANK0 ] unsigned char [6]
  4188 ;;  from            2   16[BANK0 ] int 
  4189 ;;  characters      2    8[BANK0 ] int 
  4190 ;;  c               1   18[BANK0 ] unsigned char 
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  1    wreg      void 
  4193 ;; Registers used:
  4194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4200 ;;      Params:         0       3       0       0       0
  4201 ;;      Locals:         0      11       0       0       0
  4202 ;;      Temps:          0       3       0       0       0
  4203 ;;      Totals:         0      17       0       0       0
  4204 ;;Total ram usage:       17 bytes
  4205 ;; Hardware stack levels used:    1
  4206 ;; Hardware stack levels required when called:    3
  4207 ;; This function calls:
  4208 ;;		_LCDWriteString
  4209 ;;		___awdiv
  4210 ;;		___wmul
  4211 ;; This function is called by:
  4212 ;;		_main
  4213 ;;		_showTime
  4214 ;;		_showDate
  4215 ;;		_showRunningTime
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function _LCDWriteInt
  4221  0EC5                     _LCDWriteInt:	
  4222                           
  4223                           ;lcd_hd44780_pic16.c: 237: char str[6] = { "-----\0" } ;
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in _LCDWriteInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4227  0EC5  302A               	movlw	LCDWriteInt@str& (0+255)
  4228  0EC6  0084               	movwf	4
  4229  0EC7  1283               	bcf	3,5	;RP0=0, select bank0
  4230  0EC8  1303               	bcf	3,6	;RP1=0, select bank0
  4231  0EC9  084A               	movf	LCDWriteInt@F1142,w
  4232  0ECA  1383               	bcf	3,7	;select IRP bank0
  4233  0ECB  0080               	movwf	0
  4234  0ECC  0A84               	incf	4,f
  4235  0ECD  084B               	movf	LCDWriteInt@F1142+1,w
  4236  0ECE  0080               	movwf	0
  4237  0ECF  0A84               	incf	4,f
  4238  0ED0  084C               	movf	LCDWriteInt@F1142+2,w
  4239  0ED1  0080               	movwf	0
  4240  0ED2  0A84               	incf	4,f
  4241  0ED3  084D               	movf	LCDWriteInt@F1142+3,w
  4242  0ED4  0080               	movwf	0
  4243  0ED5  0A84               	incf	4,f
  4244  0ED6  084E               	movf	LCDWriteInt@F1142+4,w
  4245  0ED7  0080               	movwf	0
  4246  0ED8  0A84               	incf	4,f
  4247  0ED9  084F               	movf	LCDWriteInt@F1142+5,w
  4248  0EDA  0080               	movwf	0
  4249                           
  4250                           ;lcd_hd44780_pic16.c: 238: int characters = 0 ;
  4251  0EDB  01A8               	clrf	LCDWriteInt@characters
  4252  0EDC  01A9               	clrf	LCDWriteInt@characters+1
  4253                           
  4254                           ;lcd_hd44780_pic16.c: 239: int from = 5 ;
  4255  0EDD  3005               	movlw	5
  4256  0EDE  00B0               	movwf	LCDWriteInt@from
  4257  0EDF  3000               	movlw	0
  4258  0EE0  00B1               	movwf	LCDWriteInt@from+1
  4259                           
  4260                           ;lcd_hd44780_pic16.c: 240: char c ;
  4261                           ;lcd_hd44780_pic16.c: 242: field_length = 5 - field_length ;
  4262  0EE1  0324               	decf	LCDWriteInt@field_length,w
  4263  0EE2  3AFF               	xorlw	255
  4264  0EE3  3E05               	addlw	5
  4265  0EE4  00A5               	movwf	??_LCDWriteInt
  4266  0EE5  0825               	movf	??_LCDWriteInt,w
  4267  0EE6  00A4               	movwf	LCDWriteInt@field_length
  4268                           
  4269                           ;lcd_hd44780_pic16.c: 244: c = val / 10000 ;
  4270  0EE7  3010               	movlw	16
  4271  0EE8  00F1               	movwf	___awdiv@divisor
  4272  0EE9  3027               	movlw	39
  4273  0EEA  00F2               	movwf	___awdiv@divisor+1
  4274  0EEB  0823               	movf	LCDWriteInt@val+1,w
  4275  0EEC  00F4               	movwf	___awdiv@dividend+1
  4276  0EED  0822               	movf	LCDWriteInt@val,w
  4277  0EEE  00F3               	movwf	___awdiv@dividend
  4278  0EEF  120A  158A  24FC  120A  158A  	fcall	___awdiv
  4279  0EF4  0871               	movf	?___awdiv,w
  4280  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  4281  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  4282  0EF7  00A5               	movwf	??_LCDWriteInt
  4283  0EF8  0825               	movf	??_LCDWriteInt,w
  4284  0EF9  00B2               	movwf	LCDWriteInt@c
  4285                           
  4286                           ;lcd_hd44780_pic16.c: 245: if (c)
  4287  0EFA  0832               	movf	LCDWriteInt@c,w
  4288  0EFB  1903               	btfsc	3,2
  4289  0EFC  2F17               	goto	l2020
  4290                           
  4291                           ;lcd_hd44780_pic16.c: 246: {
  4292                           ;lcd_hd44780_pic16.c: 247: val -= c * 10000 ;
  4293  0EFD  0832               	movf	LCDWriteInt@c,w
  4294  0EFE  00A5               	movwf	??_LCDWriteInt
  4295  0EFF  01A6               	clrf	??_LCDWriteInt+1
  4296  0F00  0825               	movf	??_LCDWriteInt,w
  4297  0F01  00FA               	movwf	___wmul@multiplier
  4298  0F02  0826               	movf	??_LCDWriteInt+1,w
  4299  0F03  00FB               	movwf	___wmul@multiplier+1
  4300  0F04  3010               	movlw	16
  4301  0F05  00FC               	movwf	___wmul@multiplicand
  4302  0F06  3027               	movlw	39
  4303  0F07  00FD               	movwf	___wmul@multiplicand+1
  4304  0F08  120A  158A  220C  120A  158A  	fcall	___wmul
  4305  0F0D  087A               	movf	?___wmul,w
  4306  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  4307  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  4308  0F10  02A2               	subwf	LCDWriteInt@val,f
  4309  0F11  087B               	movf	?___wmul+1,w
  4310  0F12  1C03               	skipc
  4311  0F13  03A3               	decf	LCDWriteInt@val+1,f
  4312  0F14  02A3               	subwf	LCDWriteInt@val+1,f
  4313                           
  4314                           ;lcd_hd44780_pic16.c: 248: from = 0 ;
  4315  0F15  01B0               	clrf	LCDWriteInt@from
  4316  0F16  01B1               	clrf	LCDWriteInt@from+1
  4317  0F17                     l2020:	
  4318                           
  4319                           ;lcd_hd44780_pic16.c: 249: }
  4320                           ;lcd_hd44780_pic16.c: 250: str[0] = c + 0x30 ;
  4321  0F17  0832               	movf	LCDWriteInt@c,w
  4322  0F18  3E30               	addlw	48
  4323  0F19  00A5               	movwf	??_LCDWriteInt
  4324  0F1A  0825               	movf	??_LCDWriteInt,w
  4325  0F1B  00AA               	movwf	LCDWriteInt@str
  4326                           
  4327                           ;lcd_hd44780_pic16.c: 251: c = val / 1000 ;
  4328  0F1C  30E8               	movlw	232
  4329  0F1D  00F1               	movwf	___awdiv@divisor
  4330  0F1E  3003               	movlw	3
  4331  0F1F  00F2               	movwf	___awdiv@divisor+1
  4332  0F20  0823               	movf	LCDWriteInt@val+1,w
  4333  0F21  00F4               	movwf	___awdiv@dividend+1
  4334  0F22  0822               	movf	LCDWriteInt@val,w
  4335  0F23  00F3               	movwf	___awdiv@dividend
  4336  0F24  120A  158A  24FC  120A  158A  	fcall	___awdiv
  4337  0F29  0871               	movf	?___awdiv,w
  4338  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  4339  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  4340  0F2C  00A5               	movwf	??_LCDWriteInt
  4341  0F2D  0825               	movf	??_LCDWriteInt,w
  4342  0F2E  00B2               	movwf	LCDWriteInt@c
  4343                           
  4344                           ;lcd_hd44780_pic16.c: 252: if (c)
  4345  0F2F  0832               	movf	LCDWriteInt@c,w
  4346  0F30  1903               	btfsc	3,2
  4347  0F31  2F53               	goto	l2032
  4348                           
  4349                           ;lcd_hd44780_pic16.c: 253: {
  4350                           ;lcd_hd44780_pic16.c: 254: val -= c * 1000 ;
  4351  0F32  0832               	movf	LCDWriteInt@c,w
  4352  0F33  00A5               	movwf	??_LCDWriteInt
  4353  0F34  01A6               	clrf	??_LCDWriteInt+1
  4354  0F35  0825               	movf	??_LCDWriteInt,w
  4355  0F36  00FA               	movwf	___wmul@multiplier
  4356  0F37  0826               	movf	??_LCDWriteInt+1,w
  4357  0F38  00FB               	movwf	___wmul@multiplier+1
  4358  0F39  30E8               	movlw	232
  4359  0F3A  00FC               	movwf	___wmul@multiplicand
  4360  0F3B  3003               	movlw	3
  4361  0F3C  00FD               	movwf	___wmul@multiplicand+1
  4362  0F3D  120A  158A  220C  120A  158A  	fcall	___wmul
  4363  0F42  087A               	movf	?___wmul,w
  4364  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  4365  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  4366  0F45  02A2               	subwf	LCDWriteInt@val,f
  4367  0F46  087B               	movf	?___wmul+1,w
  4368  0F47  1C03               	skipc
  4369  0F48  03A3               	decf	LCDWriteInt@val+1,f
  4370  0F49  02A3               	subwf	LCDWriteInt@val+1,f
  4371                           
  4372                           ;lcd_hd44780_pic16.c: 255: if (from == 5)
  4373  0F4A  3005               	movlw	5
  4374  0F4B  0630               	xorwf	LCDWriteInt@from,w
  4375  0F4C  0431               	iorwf	LCDWriteInt@from+1,w
  4376  0F4D  1D03               	btfss	3,2
  4377  0F4E  2F53               	goto	l2032
  4378                           
  4379                           ;lcd_hd44780_pic16.c: 256: from = 1 ;
  4380  0F4F  3001               	movlw	1
  4381  0F50  00B0               	movwf	LCDWriteInt@from
  4382  0F51  3000               	movlw	0
  4383  0F52  00B1               	movwf	LCDWriteInt@from+1
  4384  0F53                     l2032:	
  4385                           
  4386                           ;lcd_hd44780_pic16.c: 257: }
  4387                           ;lcd_hd44780_pic16.c: 258: str[1] = c + 0x30 ;
  4388  0F53  0832               	movf	LCDWriteInt@c,w
  4389  0F54  3E30               	addlw	48
  4390  0F55  00A5               	movwf	??_LCDWriteInt
  4391  0F56  0825               	movf	??_LCDWriteInt,w
  4392  0F57  00AB               	movwf	LCDWriteInt@str+1
  4393                           
  4394                           ;lcd_hd44780_pic16.c: 259: c = val / 100 ;
  4395  0F58  3064               	movlw	100
  4396  0F59  00F1               	movwf	___awdiv@divisor
  4397  0F5A  3000               	movlw	0
  4398  0F5B  00F2               	movwf	___awdiv@divisor+1
  4399  0F5C  0823               	movf	LCDWriteInt@val+1,w
  4400  0F5D  00F4               	movwf	___awdiv@dividend+1
  4401  0F5E  0822               	movf	LCDWriteInt@val,w
  4402  0F5F  00F3               	movwf	___awdiv@dividend
  4403  0F60  120A  158A  24FC  120A  158A  	fcall	___awdiv
  4404  0F65  0871               	movf	?___awdiv,w
  4405  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  4406  0F67  1303               	bcf	3,6	;RP1=0, select bank0
  4407  0F68  00A5               	movwf	??_LCDWriteInt
  4408  0F69  0825               	movf	??_LCDWriteInt,w
  4409  0F6A  00B2               	movwf	LCDWriteInt@c
  4410                           
  4411                           ;lcd_hd44780_pic16.c: 260: if (c)
  4412  0F6B  0832               	movf	LCDWriteInt@c,w
  4413  0F6C  1903               	btfsc	3,2
  4414  0F6D  2F8F               	goto	l2044
  4415                           
  4416                           ;lcd_hd44780_pic16.c: 261: {
  4417                           ;lcd_hd44780_pic16.c: 262: val -= c * 100 ;
  4418  0F6E  0832               	movf	LCDWriteInt@c,w
  4419  0F6F  00A5               	movwf	??_LCDWriteInt
  4420  0F70  01A6               	clrf	??_LCDWriteInt+1
  4421  0F71  0825               	movf	??_LCDWriteInt,w
  4422  0F72  00FA               	movwf	___wmul@multiplier
  4423  0F73  0826               	movf	??_LCDWriteInt+1,w
  4424  0F74  00FB               	movwf	___wmul@multiplier+1
  4425  0F75  3064               	movlw	100
  4426  0F76  00FC               	movwf	___wmul@multiplicand
  4427  0F77  3000               	movlw	0
  4428  0F78  00FD               	movwf	___wmul@multiplicand+1
  4429  0F79  120A  158A  220C  120A  158A  	fcall	___wmul
  4430  0F7E  087A               	movf	?___wmul,w
  4431  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4432  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4433  0F81  02A2               	subwf	LCDWriteInt@val,f
  4434  0F82  087B               	movf	?___wmul+1,w
  4435  0F83  1C03               	skipc
  4436  0F84  03A3               	decf	LCDWriteInt@val+1,f
  4437  0F85  02A3               	subwf	LCDWriteInt@val+1,f
  4438                           
  4439                           ;lcd_hd44780_pic16.c: 263: if (from == 5)
  4440  0F86  3005               	movlw	5
  4441  0F87  0630               	xorwf	LCDWriteInt@from,w
  4442  0F88  0431               	iorwf	LCDWriteInt@from+1,w
  4443  0F89  1D03               	btfss	3,2
  4444  0F8A  2F8F               	goto	l2044
  4445                           
  4446                           ;lcd_hd44780_pic16.c: 264: from = 2 ;
  4447  0F8B  3002               	movlw	2
  4448  0F8C  00B0               	movwf	LCDWriteInt@from
  4449  0F8D  3000               	movlw	0
  4450  0F8E  00B1               	movwf	LCDWriteInt@from+1
  4451  0F8F                     l2044:	
  4452                           
  4453                           ;lcd_hd44780_pic16.c: 265: }
  4454                           ;lcd_hd44780_pic16.c: 266: str[2] = c + 0x30 ;
  4455  0F8F  0832               	movf	LCDWriteInt@c,w
  4456  0F90  3E30               	addlw	48
  4457  0F91  00A5               	movwf	??_LCDWriteInt
  4458  0F92  0825               	movf	??_LCDWriteInt,w
  4459  0F93  00AC               	movwf	LCDWriteInt@str+2
  4460                           
  4461                           ;lcd_hd44780_pic16.c: 267: c = val / 10 ;
  4462  0F94  300A               	movlw	10
  4463  0F95  00F1               	movwf	___awdiv@divisor
  4464  0F96  3000               	movlw	0
  4465  0F97  00F2               	movwf	___awdiv@divisor+1
  4466  0F98  0823               	movf	LCDWriteInt@val+1,w
  4467  0F99  00F4               	movwf	___awdiv@dividend+1
  4468  0F9A  0822               	movf	LCDWriteInt@val,w
  4469  0F9B  00F3               	movwf	___awdiv@dividend
  4470  0F9C  120A  158A  24FC  120A  158A  	fcall	___awdiv
  4471  0FA1  0871               	movf	?___awdiv,w
  4472  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  4473  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  4474  0FA4  00A5               	movwf	??_LCDWriteInt
  4475  0FA5  0825               	movf	??_LCDWriteInt,w
  4476  0FA6  00B2               	movwf	LCDWriteInt@c
  4477                           
  4478                           ;lcd_hd44780_pic16.c: 268: if (c)
  4479  0FA7  0832               	movf	LCDWriteInt@c,w
  4480  0FA8  1903               	btfsc	3,2
  4481  0FA9  2FCB               	goto	l2056
  4482                           
  4483                           ;lcd_hd44780_pic16.c: 269: {
  4484                           ;lcd_hd44780_pic16.c: 270: val -= c * 10 ;
  4485  0FAA  0832               	movf	LCDWriteInt@c,w
  4486  0FAB  00A5               	movwf	??_LCDWriteInt
  4487  0FAC  01A6               	clrf	??_LCDWriteInt+1
  4488  0FAD  0825               	movf	??_LCDWriteInt,w
  4489  0FAE  00FA               	movwf	___wmul@multiplier
  4490  0FAF  0826               	movf	??_LCDWriteInt+1,w
  4491  0FB0  00FB               	movwf	___wmul@multiplier+1
  4492  0FB1  300A               	movlw	10
  4493  0FB2  00FC               	movwf	___wmul@multiplicand
  4494  0FB3  3000               	movlw	0
  4495  0FB4  00FD               	movwf	___wmul@multiplicand+1
  4496  0FB5  120A  158A  220C  120A  158A  	fcall	___wmul
  4497  0FBA  087A               	movf	?___wmul,w
  4498  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  4499  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  4500  0FBD  02A2               	subwf	LCDWriteInt@val,f
  4501  0FBE  087B               	movf	?___wmul+1,w
  4502  0FBF  1C03               	skipc
  4503  0FC0  03A3               	decf	LCDWriteInt@val+1,f
  4504  0FC1  02A3               	subwf	LCDWriteInt@val+1,f
  4505                           
  4506                           ;lcd_hd44780_pic16.c: 271: if (from == 5)
  4507  0FC2  3005               	movlw	5
  4508  0FC3  0630               	xorwf	LCDWriteInt@from,w
  4509  0FC4  0431               	iorwf	LCDWriteInt@from+1,w
  4510  0FC5  1D03               	btfss	3,2
  4511  0FC6  2FCB               	goto	l2056
  4512                           
  4513                           ;lcd_hd44780_pic16.c: 272: from = 3 ;
  4514  0FC7  3003               	movlw	3
  4515  0FC8  00B0               	movwf	LCDWriteInt@from
  4516  0FC9  3000               	movlw	0
  4517  0FCA  00B1               	movwf	LCDWriteInt@from+1
  4518  0FCB                     l2056:	
  4519                           
  4520                           ;lcd_hd44780_pic16.c: 273: }
  4521                           ;lcd_hd44780_pic16.c: 274: str[3] = c + 0x30 ;
  4522  0FCB  0832               	movf	LCDWriteInt@c,w
  4523  0FCC  3E30               	addlw	48
  4524  0FCD  00A5               	movwf	??_LCDWriteInt
  4525  0FCE  0825               	movf	??_LCDWriteInt,w
  4526  0FCF  00AD               	movwf	LCDWriteInt@str+3
  4527                           
  4528                           ;lcd_hd44780_pic16.c: 275: if (from == 5)
  4529  0FD0  3005               	movlw	5
  4530  0FD1  0630               	xorwf	LCDWriteInt@from,w
  4531  0FD2  0431               	iorwf	LCDWriteInt@from+1,w
  4532  0FD3  1D03               	btfss	3,2
  4533  0FD4  2FD9               	goto	l2062
  4534                           
  4535                           ;lcd_hd44780_pic16.c: 276: from = 4 ;
  4536  0FD5  3004               	movlw	4
  4537  0FD6  00B0               	movwf	LCDWriteInt@from
  4538  0FD7  3000               	movlw	0
  4539  0FD8  00B1               	movwf	LCDWriteInt@from+1
  4540  0FD9                     l2062:	
  4541                           
  4542                           ;lcd_hd44780_pic16.c: 277: str[4] = (char)(val + 0x30) ;
  4543  0FD9  0822               	movf	LCDWriteInt@val,w
  4544  0FDA  3E30               	addlw	48
  4545  0FDB  00A5               	movwf	??_LCDWriteInt
  4546  0FDC  0825               	movf	??_LCDWriteInt,w
  4547  0FDD  00AE               	movwf	LCDWriteInt@str+4
  4548                           
  4549                           ;lcd_hd44780_pic16.c: 279: if (from < field_length)
  4550  0FDE  0824               	movf	LCDWriteInt@field_length,w
  4551  0FDF  00A5               	movwf	??_LCDWriteInt
  4552  0FE0  01A6               	clrf	??_LCDWriteInt+1
  4553  0FE1  1BA5               	btfsc	??_LCDWriteInt,7
  4554  0FE2  03A6               	decf	??_LCDWriteInt+1,f
  4555  0FE3  0831               	movf	LCDWriteInt@from+1,w
  4556  0FE4  3A80               	xorlw	128
  4557  0FE5  00A7               	movwf	??_LCDWriteInt+2
  4558  0FE6  0826               	movf	??_LCDWriteInt+1,w
  4559  0FE7  3A80               	xorlw	128
  4560  0FE8  0227               	subwf	??_LCDWriteInt+2,w
  4561  0FE9  1D03               	skipz
  4562  0FEA  2FED               	goto	u1735
  4563  0FEB  0825               	movf	??_LCDWriteInt,w
  4564  0FEC  0230               	subwf	LCDWriteInt@from,w
  4565  0FED                     u1735:	
  4566  0FED  1803               	skipnc
  4567  0FEE  2FF5               	goto	l2068
  4568                           
  4569                           ;lcd_hd44780_pic16.c: 280: field_length = from ;
  4570  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  4571  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  4572  0FF1  0830               	movf	LCDWriteInt@from,w
  4573  0FF2  00A5               	movwf	??_LCDWriteInt
  4574  0FF3  0825               	movf	??_LCDWriteInt,w
  4575  0FF4  00A4               	movwf	LCDWriteInt@field_length
  4576  0FF5                     l2068:	
  4577                           
  4578                           ;lcd_hd44780_pic16.c: 282: LCDWriteString(&str[field_length]) ;
  4579  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  4580  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  4581  0FF7  0824               	movf	LCDWriteInt@field_length,w
  4582  0FF8  3E2A               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4583  0FF9  00A0               	movwf	LCDWriteString@msg
  4584  0FFA  3000               	movlw	0
  4585  0FFB  00A1               	movwf	LCDWriteString@msg+1
  4586  0FFC  120A  158A  21E5   	fcall	_LCDWriteString
  4587  0FFF  0008               	return
  4588  1000                     __end_of_LCDWriteInt:	
  4589                           
  4590                           	psect	text11
  4591  0A0C                     __ptext11:	
  4592 ;; *************** function ___wmul *****************
  4593 ;; Defined at:
  4594 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  multiplier      2    9[COMMON] unsigned int 
  4597 ;;  multiplicand    2   11[COMMON] unsigned int 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  product         2    0[BANK0 ] unsigned int 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  2    9[COMMON] unsigned int 
  4602 ;; Registers used:
  4603 ;;		wreg, status,2, status,0
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4609 ;;      Params:         4       0       0       0       0
  4610 ;;      Locals:         0       2       0       0       0
  4611 ;;      Temps:          0       0       0       0       0
  4612 ;;      Totals:         4       2       0       0       0
  4613 ;;Total ram usage:        6 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_LCDWriteInt
  4619 ;;		_main
  4620 ;;		_readClock
  4621 ;;		_showDate
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           
  4626                           ;psect for function ___wmul
  4627  0A0C                     ___wmul:	
  4628                           
  4629                           ;incstack = 0
  4630                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4631  0A0C  1283               	bcf	3,5	;RP0=0, select bank0
  4632  0A0D  1303               	bcf	3,6	;RP1=0, select bank0
  4633  0A0E  01A0               	clrf	___wmul@product
  4634  0A0F  01A1               	clrf	___wmul@product+1
  4635  0A10                     l1932:	
  4636  0A10  1C7A               	btfss	___wmul@multiplier,0
  4637  0A11  2A1A               	goto	l512
  4638  0A12  087C               	movf	___wmul@multiplicand,w
  4639  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0A14  1303               	bcf	3,6	;RP1=0, select bank0
  4641  0A15  07A0               	addwf	___wmul@product,f
  4642  0A16  1803               	skipnc
  4643  0A17  0AA1               	incf	___wmul@product+1,f
  4644  0A18  087D               	movf	___wmul@multiplicand+1,w
  4645  0A19  07A1               	addwf	___wmul@product+1,f
  4646  0A1A                     l512:	
  4647  0A1A  3001               	movlw	1
  4648  0A1B                     u1475:	
  4649  0A1B  1003               	clrc
  4650  0A1C  0DFC               	rlf	___wmul@multiplicand,f
  4651  0A1D  0DFD               	rlf	___wmul@multiplicand+1,f
  4652  0A1E  3EFF               	addlw	-1
  4653  0A1F  1D03               	skipz
  4654  0A20  2A1B               	goto	u1475
  4655  0A21  3001               	movlw	1
  4656  0A22                     u1485:	
  4657  0A22  1003               	clrc
  4658  0A23  0CFB               	rrf	___wmul@multiplier+1,f
  4659  0A24  0CFA               	rrf	___wmul@multiplier,f
  4660  0A25  3EFF               	addlw	-1
  4661  0A26  1D03               	skipz
  4662  0A27  2A22               	goto	u1485
  4663  0A28  087A               	movf	___wmul@multiplier,w
  4664  0A29  047B               	iorwf	___wmul@multiplier+1,w
  4665  0A2A  1D03               	btfss	3,2
  4666  0A2B  2A10               	goto	l1932
  4667  0A2C  1283               	bcf	3,5	;RP0=0, select bank0
  4668  0A2D  1303               	bcf	3,6	;RP1=0, select bank0
  4669  0A2E  0821               	movf	___wmul@product+1,w
  4670  0A2F  00FB               	movwf	?___wmul+1
  4671  0A30  0820               	movf	___wmul@product,w
  4672  0A31  00FA               	movwf	?___wmul
  4673  0A32  0008               	return
  4674  0A33                     __end_of___wmul:	
  4675                           
  4676                           	psect	text12
  4677  0CFC                     __ptext12:	
  4678 ;; *************** function ___awdiv *****************
  4679 ;; Defined at:
  4680 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;  divisor         2    0[COMMON] int 
  4683 ;;  dividend        2    2[COMMON] int 
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;  quotient        2    7[COMMON] int 
  4686 ;;  sign            1    6[COMMON] unsigned char 
  4687 ;;  counter         1    5[COMMON] unsigned char 
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  2    0[COMMON] int 
  4690 ;; Registers used:
  4691 ;;		wreg, status,2, status,0
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4697 ;;      Params:         4       0       0       0       0
  4698 ;;      Locals:         4       0       0       0       0
  4699 ;;      Temps:          1       0       0       0       0
  4700 ;;      Totals:         9       0       0       0       0
  4701 ;;Total ram usage:        9 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_LCDWriteInt
  4707 ;;		_doMenu
  4708 ;;		_readClock
  4709 ;;		_showRunningTime
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           
  4714                           ;psect for function ___awdiv
  4715  0CFC                     ___awdiv:	
  4716                           
  4717                           ;incstack = 0
  4718                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4719  0CFC  01F7               	clrf	___awdiv@sign
  4720  0CFD  1FF2               	btfss	___awdiv@divisor+1,7
  4721  0CFE  2D06               	goto	l1952
  4722  0CFF  09F1               	comf	___awdiv@divisor,f
  4723  0D00  09F2               	comf	___awdiv@divisor+1,f
  4724  0D01  0AF1               	incf	___awdiv@divisor,f
  4725  0D02  1903               	skipnz
  4726  0D03  0AF2               	incf	___awdiv@divisor+1,f
  4727  0D04  01F7               	clrf	___awdiv@sign
  4728  0D05  0AF7               	incf	___awdiv@sign,f
  4729  0D06                     l1952:	
  4730  0D06  1FF4               	btfss	___awdiv@dividend+1,7
  4731  0D07  2D11               	goto	l1958
  4732  0D08  09F3               	comf	___awdiv@dividend,f
  4733  0D09  09F4               	comf	___awdiv@dividend+1,f
  4734  0D0A  0AF3               	incf	___awdiv@dividend,f
  4735  0D0B  1903               	skipnz
  4736  0D0C  0AF4               	incf	___awdiv@dividend+1,f
  4737  0D0D  3001               	movlw	1
  4738  0D0E  00F5               	movwf	??___awdiv
  4739  0D0F  0875               	movf	??___awdiv,w
  4740  0D10  06F7               	xorwf	___awdiv@sign,f
  4741  0D11                     l1958:	
  4742  0D11  01F8               	clrf	___awdiv@quotient
  4743  0D12  01F9               	clrf	___awdiv@quotient+1
  4744  0D13  0871               	movf	___awdiv@divisor,w
  4745  0D14  0472               	iorwf	___awdiv@divisor+1,w
  4746  0D15  1903               	btfsc	3,2
  4747  0D16  2D48               	goto	l1980
  4748  0D17  01F6               	clrf	___awdiv@counter
  4749  0D18  0AF6               	incf	___awdiv@counter,f
  4750  0D19                     l1968:	
  4751  0D19  1BF2               	btfsc	___awdiv@divisor+1,7
  4752  0D1A  2D27               	goto	l1970
  4753  0D1B  3001               	movlw	1
  4754  0D1C                     u1535:	
  4755  0D1C  1003               	clrc
  4756  0D1D  0DF1               	rlf	___awdiv@divisor,f
  4757  0D1E  0DF2               	rlf	___awdiv@divisor+1,f
  4758  0D1F  3EFF               	addlw	-1
  4759  0D20  1D03               	skipz
  4760  0D21  2D1C               	goto	u1535
  4761  0D22  3001               	movlw	1
  4762  0D23  00F5               	movwf	??___awdiv
  4763  0D24  0875               	movf	??___awdiv,w
  4764  0D25  07F6               	addwf	___awdiv@counter,f
  4765  0D26  2D19               	goto	l1968
  4766  0D27                     l1970:	
  4767  0D27  3001               	movlw	1
  4768  0D28                     u1555:	
  4769  0D28  1003               	clrc
  4770  0D29  0DF8               	rlf	___awdiv@quotient,f
  4771  0D2A  0DF9               	rlf	___awdiv@quotient+1,f
  4772  0D2B  3EFF               	addlw	-1
  4773  0D2C  1D03               	skipz
  4774  0D2D  2D28               	goto	u1555
  4775  0D2E  0872               	movf	___awdiv@divisor+1,w
  4776  0D2F  0274               	subwf	___awdiv@dividend+1,w
  4777  0D30  1D03               	skipz
  4778  0D31  2D34               	goto	u1565
  4779  0D32  0871               	movf	___awdiv@divisor,w
  4780  0D33  0273               	subwf	___awdiv@dividend,w
  4781  0D34                     u1565:	
  4782  0D34  1C03               	skipc
  4783  0D35  2D3D               	goto	l1976
  4784  0D36  0871               	movf	___awdiv@divisor,w
  4785  0D37  02F3               	subwf	___awdiv@dividend,f
  4786  0D38  0872               	movf	___awdiv@divisor+1,w
  4787  0D39  1C03               	skipc
  4788  0D3A  03F4               	decf	___awdiv@dividend+1,f
  4789  0D3B  02F4               	subwf	___awdiv@dividend+1,f
  4790  0D3C  1478               	bsf	___awdiv@quotient,0
  4791  0D3D                     l1976:	
  4792  0D3D  3001               	movlw	1
  4793  0D3E                     u1575:	
  4794  0D3E  1003               	clrc
  4795  0D3F  0CF2               	rrf	___awdiv@divisor+1,f
  4796  0D40  0CF1               	rrf	___awdiv@divisor,f
  4797  0D41  3EFF               	addlw	-1
  4798  0D42  1D03               	skipz
  4799  0D43  2D3E               	goto	u1575
  4800  0D44  3001               	movlw	1
  4801  0D45  02F6               	subwf	___awdiv@counter,f
  4802  0D46  1D03               	btfss	3,2
  4803  0D47  2D27               	goto	l1970
  4804  0D48                     l1980:	
  4805  0D48  0877               	movf	___awdiv@sign,w
  4806  0D49  1903               	btfsc	3,2
  4807  0D4A  2D50               	goto	l1984
  4808  0D4B  09F8               	comf	___awdiv@quotient,f
  4809  0D4C  09F9               	comf	___awdiv@quotient+1,f
  4810  0D4D  0AF8               	incf	___awdiv@quotient,f
  4811  0D4E  1903               	skipnz
  4812  0D4F  0AF9               	incf	___awdiv@quotient+1,f
  4813  0D50                     l1984:	
  4814  0D50  0879               	movf	___awdiv@quotient+1,w
  4815  0D51  00F2               	movwf	?___awdiv+1
  4816  0D52  0878               	movf	___awdiv@quotient,w
  4817  0D53  00F1               	movwf	?___awdiv
  4818  0D54  0008               	return
  4819  0D55                     __end_of___awdiv:	
  4820                           
  4821                           	psect	text13
  4822  0A89                     __ptext13:	
  4823 ;; *************** function _readInputs *****************
  4824 ;; Defined at:
  4825 ;;		line 420 in file "LCDTime.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  pinstate        1    3[COMMON] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      void 
  4832 ;; Registers used:
  4833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4839 ;;      Params:         0       0       0       0       0
  4840 ;;      Locals:         1       0       0       0       0
  4841 ;;      Temps:          3       0       0       0       0
  4842 ;;      Totals:         4       0       0       0       0
  4843 ;;Total ram usage:        4 bytes
  4844 ;; Hardware stack levels used:    2
  4845 ;; This function calls:
  4846 ;;		Nothing
  4847 ;; This function is called by:
  4848 ;;		_main
  4849 ;;		_doMenu
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           
  4854                           ;psect for function _readInputs
  4855  0A89                     _readInputs:	
  4856                           
  4857                           ;LCDTime.c: 422: bButton = 0 ;
  4858                           
  4859                           ;incstack = 0
  4860                           ; Regs used in _readInputs: [wreg-fsr0h+status,2+status,0+pclath]
  4861  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  4862  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0A8B  01E4               	clrf	_bButton
  4864                           
  4865                           ;LCDTime.c: 424: if (RB4 == 1)
  4866  0A8C  1E06               	btfss	6,4	;volatile
  4867  0A8D  2A9A               	goto	l2222
  4868                           
  4869                           ;LCDTime.c: 425: {
  4870                           ;LCDTime.c: 426: _delay((unsigned long)((15)*(4000000/4000000.0))) ;
  4871  0A8E  3004               	movlw	4
  4872  0A8F  00F1               	movwf	??_readInputs
  4873  0A90                     u2697:	
  4874  0A90  0BF1               	decfsz	??_readInputs,f
  4875  0A91  2A90               	goto	u2697
  4876  0A92  2A93               	nop2	;nop
  4877                           
  4878                           ;LCDTime.c: 427: if (RB4 == 1)
  4879  0A93  1283               	bcf	3,5	;RP0=0, select bank0
  4880  0A94  1303               	bcf	3,6	;RP1=0, select bank0
  4881  0A95  1E06               	btfss	6,4	;volatile
  4882  0A96  2A9A               	goto	l2222
  4883                           
  4884                           ;LCDTime.c: 428: {
  4885                           ;LCDTime.c: 429: bButton = 1 ;
  4886  0A97  01E4               	clrf	_bButton
  4887  0A98  0AE4               	incf	_bButton,f
  4888                           
  4889                           ;LCDTime.c: 430: return ;
  4890  0A99  0008               	return
  4891  0A9A                     l2222:	
  4892                           
  4893                           ;LCDTime.c: 431: }
  4894                           ;LCDTime.c: 432: }
  4895                           ;LCDTime.c: 435: unsigned char pinstate = (RB1 << 1) | RB2 ;
  4896  0A9A  3000               	movlw	0
  4897  0A9B  1886               	btfsc	6,1	;volatile
  4898  0A9C  3002               	movlw	2
  4899  0A9D  1906               	btfsc	6,2	;volatile
  4900  0A9E  3801               	iorlw	1
  4901  0A9F  00F1               	movwf	??_readInputs
  4902  0AA0  0871               	movf	??_readInputs,w
  4903  0AA1  00F4               	movwf	readInputs@pinstate
  4904                           
  4905                           ;LCDTime.c: 437: state = ttable[state & 0xf][pinstate];
  4906  0AA2  0865               	movf	_state,w
  4907  0AA3  390F               	andlw	15
  4908  0AA4  00F1               	movwf	??_readInputs
  4909  0AA5  3002               	movlw	2
  4910  0AA6                     u1875:	
  4911  0AA6  1003               	clrc
  4912  0AA7  0DF1               	rlf	??_readInputs,f
  4913  0AA8  3EFF               	addlw	-1
  4914  0AA9  1D03               	skipz
  4915  0AAA  2AA6               	goto	u1875
  4916  0AAB  3001               	movlw	(low ((_ttable-__stringbase)| (0+32768)))& (0+255)
  4917  0AAC  0771               	addwf	??_readInputs,w
  4918  0AAD  00F2               	movwf	??_readInputs+1
  4919  0AAE  0874               	movf	readInputs@pinstate,w
  4920  0AAF  0772               	addwf	??_readInputs+1,w
  4921  0AB0  0084               	movwf	4
  4922  0AB1  120A  158A  200A   	fcall	stringdir
  4923  0AB4  00F3               	movwf	??_readInputs+2
  4924  0AB5  0873               	movf	??_readInputs+2,w
  4925  0AB6  00E5               	movwf	_state
  4926  0AB7  0008               	return
  4927  0AB8                     __end_of_readInputs:	
  4928                           
  4929                           	psect	text14
  4930  0B66                     __ptext14:	
  4931 ;; *************** function ___awmod *****************
  4932 ;; Defined at:
  4933 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  divisor         2    0[COMMON] int 
  4936 ;;  dividend        2    2[COMMON] int 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  sign            1    6[COMMON] unsigned char 
  4939 ;;  counter         1    5[COMMON] unsigned char 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  2    0[COMMON] int 
  4942 ;; Registers used:
  4943 ;;		wreg, status,2, status,0
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4949 ;;      Params:         4       0       0       0       0
  4950 ;;      Locals:         2       0       0       0       0
  4951 ;;      Temps:          1       0       0       0       0
  4952 ;;      Totals:         7       0       0       0       0
  4953 ;;Total ram usage:        7 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; This function calls:
  4956 ;;		Nothing
  4957 ;; This function is called by:
  4958 ;;		_doMenu
  4959 ;;		_showRunningTime
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function ___awmod
  4965  0B66                     ___awmod:	
  4966                           
  4967                           ;incstack = 0
  4968                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4969  0B66  01F7               	clrf	___awmod@sign
  4970  0B67  1FF4               	btfss	___awmod@dividend+1,7
  4971  0B68  2B70               	goto	l2092
  4972  0B69  09F3               	comf	___awmod@dividend,f
  4973  0B6A  09F4               	comf	___awmod@dividend+1,f
  4974  0B6B  0AF3               	incf	___awmod@dividend,f
  4975  0B6C  1903               	skipnz
  4976  0B6D  0AF4               	incf	___awmod@dividend+1,f
  4977  0B6E  01F7               	clrf	___awmod@sign
  4978  0B6F  0AF7               	incf	___awmod@sign,f
  4979  0B70                     l2092:	
  4980  0B70  1FF2               	btfss	___awmod@divisor+1,7
  4981  0B71  2B77               	goto	l2096
  4982  0B72  09F1               	comf	___awmod@divisor,f
  4983  0B73  09F2               	comf	___awmod@divisor+1,f
  4984  0B74  0AF1               	incf	___awmod@divisor,f
  4985  0B75  1903               	skipnz
  4986  0B76  0AF2               	incf	___awmod@divisor+1,f
  4987  0B77                     l2096:	
  4988  0B77  0871               	movf	___awmod@divisor,w
  4989  0B78  0472               	iorwf	___awmod@divisor+1,w
  4990  0B79  1903               	btfsc	3,2
  4991  0B7A  2BA4               	goto	l2114
  4992  0B7B  01F6               	clrf	___awmod@counter
  4993  0B7C  0AF6               	incf	___awmod@counter,f
  4994  0B7D                     l2104:	
  4995  0B7D  1BF2               	btfsc	___awmod@divisor+1,7
  4996  0B7E  2B8B               	goto	l2106
  4997  0B7F  3001               	movlw	1
  4998  0B80                     u1785:	
  4999  0B80  1003               	clrc
  5000  0B81  0DF1               	rlf	___awmod@divisor,f
  5001  0B82  0DF2               	rlf	___awmod@divisor+1,f
  5002  0B83  3EFF               	addlw	-1
  5003  0B84  1D03               	skipz
  5004  0B85  2B80               	goto	u1785
  5005  0B86  3001               	movlw	1
  5006  0B87  00F5               	movwf	??___awmod
  5007  0B88  0875               	movf	??___awmod,w
  5008  0B89  07F6               	addwf	___awmod@counter,f
  5009  0B8A  2B7D               	goto	l2104
  5010  0B8B                     l2106:	
  5011  0B8B  0872               	movf	___awmod@divisor+1,w
  5012  0B8C  0274               	subwf	___awmod@dividend+1,w
  5013  0B8D  1D03               	skipz
  5014  0B8E  2B91               	goto	u1805
  5015  0B8F  0871               	movf	___awmod@divisor,w
  5016  0B90  0273               	subwf	___awmod@dividend,w
  5017  0B91                     u1805:	
  5018  0B91  1C03               	skipc
  5019  0B92  2B99               	goto	l2110
  5020  0B93  0871               	movf	___awmod@divisor,w
  5021  0B94  02F3               	subwf	___awmod@dividend,f
  5022  0B95  0872               	movf	___awmod@divisor+1,w
  5023  0B96  1C03               	skipc
  5024  0B97  03F4               	decf	___awmod@dividend+1,f
  5025  0B98  02F4               	subwf	___awmod@dividend+1,f
  5026  0B99                     l2110:	
  5027  0B99  3001               	movlw	1
  5028  0B9A                     u1815:	
  5029  0B9A  1003               	clrc
  5030  0B9B  0CF2               	rrf	___awmod@divisor+1,f
  5031  0B9C  0CF1               	rrf	___awmod@divisor,f
  5032  0B9D  3EFF               	addlw	-1
  5033  0B9E  1D03               	skipz
  5034  0B9F  2B9A               	goto	u1815
  5035  0BA0  3001               	movlw	1
  5036  0BA1  02F6               	subwf	___awmod@counter,f
  5037  0BA2  1D03               	btfss	3,2
  5038  0BA3  2B8B               	goto	l2106
  5039  0BA4                     l2114:	
  5040  0BA4  0877               	movf	___awmod@sign,w
  5041  0BA5  1903               	btfsc	3,2
  5042  0BA6  2BAC               	goto	l2118
  5043  0BA7  09F3               	comf	___awmod@dividend,f
  5044  0BA8  09F4               	comf	___awmod@dividend+1,f
  5045  0BA9  0AF3               	incf	___awmod@dividend,f
  5046  0BAA  1903               	skipnz
  5047  0BAB  0AF4               	incf	___awmod@dividend+1,f
  5048  0BAC                     l2118:	
  5049  0BAC  0874               	movf	___awmod@dividend+1,w
  5050  0BAD  00F2               	movwf	?___awmod+1
  5051  0BAE  0873               	movf	___awmod@dividend,w
  5052  0BAF  00F1               	movwf	?___awmod
  5053  0BB0  0008               	return
  5054  0BB1                     __end_of___awmod:	
  5055                           
  5056                           	psect	text15
  5057  0A33                     __ptext15:	
  5058 ;; *************** function _DS1307_SetTime *****************
  5059 ;; Defined at:
  5060 ;;		line 41 in file "DS1307.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;  hh              1    wreg     unsigned char 
  5063 ;;  mm              1    2[COMMON] unsigned char 
  5064 ;;  ss              1    3[COMMON] unsigned char 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  hh              1    4[COMMON] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      void 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0, pclath, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5076 ;;      Params:         2       0       0       0       0
  5077 ;;      Locals:         1       0       0       0       0
  5078 ;;      Temps:          0       0       0       0       0
  5079 ;;      Totals:         3       0       0       0       0
  5080 ;;Total ram usage:        3 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    3
  5083 ;; This function calls:
  5084 ;;		_DS1307_Write
  5085 ;;		_I2C_Start
  5086 ;;		_I2C_Stop
  5087 ;; This function is called by:
  5088 ;;		_doMenu
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function _DS1307_SetTime
  5094  0A33                     _DS1307_SetTime:	
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _DS1307_SetTime: [wreg+status,2+status,0+pclath+cstack]
  5098                           ;DS1307_SetTime@hh stored from wreg
  5099  0A33  00F5               	movwf	DS1307_SetTime@hh
  5100                           
  5101                           ;DS1307.c: 43: I2C_Start();
  5102  0A34  120A  158A  210F  120A  158A  	fcall	_I2C_Start
  5103                           
  5104                           ;DS1307.c: 44: DS1307_Write(0xD0);
  5105  0A39  30D0               	movlw	208
  5106  0A3A  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5107                           
  5108                           ;DS1307.c: 45: DS1307_Write(0x00);
  5109  0A3F  3000               	movlw	0
  5110  0A40  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5111                           
  5112                           ;DS1307.c: 46: DS1307_Write(ss);
  5113  0A45  0874               	movf	DS1307_SetTime@ss,w
  5114  0A46  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5115                           
  5116                           ;DS1307.c: 47: DS1307_Write(mm);
  5117  0A4B  0873               	movf	DS1307_SetTime@mm,w
  5118  0A4C  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5119                           
  5120                           ;DS1307.c: 48: DS1307_Write(hh);
  5121  0A51  0875               	movf	DS1307_SetTime@hh,w
  5122  0A52  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5123                           
  5124                           ;DS1307.c: 49: I2C_Stop();
  5125  0A57  120A  158A  2115   	fcall	_I2C_Stop
  5126  0A5A  0008               	return
  5127  0A5B                     __end_of_DS1307_SetTime:	
  5128                           
  5129                           	psect	text16
  5130  0A5B                     __ptext16:	
  5131 ;; *************** function _DS1307_SetDate *****************
  5132 ;; Defined at:
  5133 ;;		line 52 in file "DS1307.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;  nn              1    wreg     unsigned char 
  5136 ;;  dd              1    2[COMMON] unsigned char 
  5137 ;;  mm              1    3[COMMON] unsigned char 
  5138 ;;  yy              1    4[COMMON] unsigned char 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  nn              1    5[COMMON] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0, pclath, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5150 ;;      Params:         3       0       0       0       0
  5151 ;;      Locals:         1       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0
  5153 ;;      Totals:         4       0       0       0       0
  5154 ;;Total ram usage:        4 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    3
  5157 ;; This function calls:
  5158 ;;		_DS1307_Write
  5159 ;;		_I2C_Start
  5160 ;;		_I2C_Stop
  5161 ;; This function is called by:
  5162 ;;		_doMenu
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function _DS1307_SetDate
  5168  0A5B                     _DS1307_SetDate:	
  5169                           
  5170                           ;incstack = 0
  5171                           ; Regs used in _DS1307_SetDate: [wreg+status,2+status,0+pclath+cstack]
  5172                           ;DS1307_SetDate@nn stored from wreg
  5173  0A5B  00F6               	movwf	DS1307_SetDate@nn
  5174                           
  5175                           ;DS1307.c: 54: I2C_Start();
  5176  0A5C  120A  158A  210F  120A  158A  	fcall	_I2C_Start
  5177                           
  5178                           ;DS1307.c: 55: DS1307_Write(0xD0);
  5179  0A61  30D0               	movlw	208
  5180  0A62  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5181                           
  5182                           ;DS1307.c: 56: DS1307_Write(0x03);
  5183  0A67  3003               	movlw	3
  5184  0A68  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5185                           
  5186                           ;DS1307.c: 57: DS1307_Write(nn);
  5187  0A6D  0876               	movf	DS1307_SetDate@nn,w
  5188  0A6E  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5189                           
  5190                           ;DS1307.c: 58: DS1307_Write(dd);
  5191  0A73  0873               	movf	DS1307_SetDate@dd,w
  5192  0A74  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5193                           
  5194                           ;DS1307.c: 59: DS1307_Write(mm);
  5195  0A79  0874               	movf	DS1307_SetDate@mm,w
  5196  0A7A  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5197                           
  5198                           ;DS1307.c: 60: DS1307_Write(yy);
  5199  0A7F  0875               	movf	DS1307_SetDate@yy,w
  5200  0A80  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  5201                           
  5202                           ;DS1307.c: 61: I2C_Stop();
  5203  0A85  120A  158A  2115   	fcall	_I2C_Stop
  5204  0A88  0008               	return
  5205  0A89                     __end_of_DS1307_SetDate:	
  5206                           
  5207                           	psect	text17
  5208  096E                     __ptext17:	
  5209 ;; *************** function _clearPrompt *****************
  5210 ;; Defined at:
  5211 ;;		line 139 in file "LCDTime.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;		None
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      void 
  5218 ;; Registers used:
  5219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5225 ;;      Params:         0       0       0       0       0
  5226 ;;      Locals:         0       0       0       0       0
  5227 ;;      Temps:          0       0       0       0       0
  5228 ;;      Totals:         0       0       0       0       0
  5229 ;;Total ram usage:        0 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    3
  5232 ;; This function calls:
  5233 ;;		_LCDGotoXY
  5234 ;;		_LCDWriteString
  5235 ;; This function is called by:
  5236 ;;		_main
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           
  5241                           ;psect for function _clearPrompt
  5242  096E                     _clearPrompt:	
  5243                           
  5244                           ;LCDTime.c: 141: next_menu_clear = 0 ;
  5245                           
  5246                           ;incstack = 0
  5247                           ; Regs used in _clearPrompt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5248  096E  1283               	bcf	3,5	;RP0=0, select bank0
  5249  096F  1303               	bcf	3,6	;RP1=0, select bank0
  5250  0970  01E2               	clrf	_next_menu_clear
  5251  0971  01E3               	clrf	_next_menu_clear+1
  5252                           
  5253                           ;LCDTime.c: 142: menuFunction = 1 ;
  5254  0972  01E1               	clrf	_menuFunction
  5255  0973  0AE1               	incf	_menuFunction,f
  5256                           
  5257                           ;LCDTime.c: 143: LCDGotoXY(9,0);
  5258  0974  01FD               	clrf	LCDGotoXY@y
  5259  0975  3009               	movlw	9
  5260  0976  120A  158A  21BF  120A  158A  	fcall	_LCDGotoXY
  5261                           
  5262                           ;LCDTime.c: 144: LCDWriteString("       ");
  5263  097B  305E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  5264  097C  1283               	bcf	3,5	;RP0=0, select bank0
  5265  097D  1303               	bcf	3,6	;RP1=0, select bank0
  5266  097E  00A0               	movwf	LCDWriteString@msg
  5267  097F  3080               	movlw	128
  5268  0980  00A1               	movwf	LCDWriteString@msg+1
  5269  0981  120A  158A  21E5   	fcall	_LCDWriteString
  5270  0984  0008               	return
  5271  0985                     __end_of_clearPrompt:	
  5272                           
  5273                           	psect	text18
  5274  09E5                     __ptext18:	
  5275 ;; *************** function _LCDWriteString *****************
  5276 ;; Defined at:
  5277 ;;		line 183 in file "lcd_hd44780_pic16.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  msg             2    0[BANK0 ] PTR const unsigned char 
  5280 ;;		 -> STR_13(6), STR_12(6), STR_11(6), STR_10(5), 
  5281 ;;		 -> STR_9(8), STR_8(8), STR_7(6), setText(5), 
  5282 ;;		 -> STR_6(8), STR_5(7), STR_4(7), STR_3(9), 
  5283 ;;		 -> STR_2(4), STR_1(17), LCDWriteInt@str(6), 
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      void 
  5288 ;; Registers used:
  5289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5295 ;;      Params:         0       2       0       0       0
  5296 ;;      Locals:         0       0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0
  5298 ;;      Totals:         0       2       0       0       0
  5299 ;;Total ram usage:        2 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    2
  5302 ;; This function calls:
  5303 ;;		_LCDByte
  5304 ;; This function is called by:
  5305 ;;		_LCDWriteInt
  5306 ;;		_main
  5307 ;;		_clearPrompt
  5308 ;;		_doMenu
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           
  5313                           ;psect for function _LCDWriteString
  5314  09E5                     _LCDWriteString:	
  5315  09E5                     l1928:	
  5316                           ;lcd_hd44780_pic16.c: 185: while(*msg!='\0')
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5320                           
  5321  09E5  1283               	bcf	3,5	;RP0=0, select bank0
  5322  09E6  1303               	bcf	3,6	;RP1=0, select bank0
  5323  09E7  0821               	movf	LCDWriteString@msg+1,w
  5324  09E8  00FF               	movwf	127
  5325  09E9  0820               	movf	LCDWriteString@msg,w
  5326  09EA  0084               	movwf	4
  5327  09EB  120A  158A  2000  120A  158A  	fcall	stringtab
  5328  09F0  3A00               	xorlw	0
  5329  09F1  1903               	btfsc	3,2
  5330  09F2  0008               	return
  5331                           
  5332                           ;lcd_hd44780_pic16.c: 186: {
  5333                           ;lcd_hd44780_pic16.c: 187: (LCDByte(*msg,1));
  5334  09F3  01F6               	clrf	LCDByte@isdata
  5335  09F4  0AF6               	incf	LCDByte@isdata,f
  5336  09F5  1283               	bcf	3,5	;RP0=0, select bank0
  5337  09F6  1303               	bcf	3,6	;RP1=0, select bank0
  5338  09F7  0821               	movf	LCDWriteString@msg+1,w
  5339  09F8  00FF               	movwf	127
  5340  09F9  0820               	movf	LCDWriteString@msg,w
  5341  09FA  0084               	movwf	4
  5342  09FB  120A  158A  2000  120A  158A  	fcall	stringtab
  5343  0A00  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  5344                           
  5345                           ;lcd_hd44780_pic16.c: 188: msg++;
  5346  0A05  3001               	movlw	1
  5347  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  5348  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  5349  0A08  07A0               	addwf	LCDWriteString@msg,f
  5350  0A09  1803               	skipnc
  5351  0A0A  0AA1               	incf	LCDWriteString@msg+1,f
  5352  0A0B  29E5               	goto	l1928
  5353  0A0C                     __end_of_LCDWriteString:	
  5354                           
  5355                           	psect	text19
  5356  09BF                     __ptext19:	
  5357 ;; *************** function _LCDGotoXY *****************
  5358 ;; Defined at:
  5359 ;;		line 290 in file "lcd_hd44780_pic16.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  x               1    wreg     unsigned char 
  5362 ;;  y               1   12[COMMON] unsigned char 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  x               1    1[BANK0 ] unsigned char 
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  1    wreg      void 
  5367 ;; Registers used:
  5368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5374 ;;      Params:         1       0       0       0       0
  5375 ;;      Locals:         0       1       0       0       0
  5376 ;;      Temps:          0       1       0       0       0
  5377 ;;      Totals:         1       2       0       0       0
  5378 ;;Total ram usage:        3 bytes
  5379 ;; Hardware stack levels used:    1
  5380 ;; Hardware stack levels required when called:    2
  5381 ;; This function calls:
  5382 ;;		_LCDByte
  5383 ;; This function is called by:
  5384 ;;		_main
  5385 ;;		_clearPrompt
  5386 ;;		_doMenu
  5387 ;;		_showClock
  5388 ;;		_showRunningTime
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function _LCDGotoXY
  5394  09BF                     _LCDGotoXY:	
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5398                           ;LCDGotoXY@x stored from wreg
  5399  09BF  1283               	bcf	3,5	;RP0=0, select bank0
  5400  09C0  1303               	bcf	3,6	;RP1=0, select bank0
  5401  09C1  00A1               	movwf	LCDGotoXY@x
  5402                           
  5403                           ;lcd_hd44780_pic16.c: 292: if(x>=20) return;
  5404  09C2  3014               	movlw	20
  5405  09C3  0221               	subwf	LCDGotoXY@x,w
  5406  09C4  1803               	btfsc	3,0
  5407  09C5  0008               	return
  5408  09C6  29D0               	goto	l2080
  5409  09C7                     l192:	
  5410                           ;lcd_hd44780_pic16.c: 300: case 1:
  5411                           
  5412                           ;lcd_hd44780_pic16.c: 299: break;
  5413                           
  5414                           ;lcd_hd44780_pic16.c: 297: {
  5415                           ;lcd_hd44780_pic16.c: 298: case 0:
  5416                           
  5417                           ;lcd_hd44780_pic16.c: 296: switch(y)
  5418                           
  5419                           
  5420                           ;lcd_hd44780_pic16.c: 301: x|=0b01000000;
  5421  09C7  1721               	bsf	LCDGotoXY@x,6
  5422                           
  5423                           ;lcd_hd44780_pic16.c: 302: break;
  5424  09C8  29DE               	goto	l191
  5425  09C9                     l2074:	
  5426                           ;lcd_hd44780_pic16.c: 303: case 2:
  5427                           
  5428                           
  5429                           ;lcd_hd44780_pic16.c: 304: x+=0x14;
  5430  09C9  3014               	movlw	20
  5431  09CA  29CC               	goto	L6
  5432  09CB                     l2076:	
  5433                           ;lcd_hd44780_pic16.c: 306: case 3:
  5434                           
  5435                           ;lcd_hd44780_pic16.c: 305: break;
  5436                           
  5437                           
  5438                           ;lcd_hd44780_pic16.c: 307: x+=0x54;
  5439  09CB  3054               	movlw	84
  5440  09CC                     L6:	
  5441  09CC  00A0               	movwf	??_LCDGotoXY
  5442  09CD  0820               	movf	??_LCDGotoXY,w
  5443  09CE  07A1               	addwf	LCDGotoXY@x,f
  5444                           
  5445                           ;lcd_hd44780_pic16.c: 309: }
  5446                           
  5447                           ;lcd_hd44780_pic16.c: 308: break;
  5448  09CF  29DE               	goto	l191
  5449  09D0                     l2080:	
  5450  09D0  087D               	movf	LCDGotoXY@y,w
  5451                           
  5452                           ; Switch size 1, requested type "space"
  5453                           ; Number of cases is 4, Range of values is 0 to 3
  5454                           ; switch strategies available:
  5455                           ; Name         Instructions Cycles
  5456                           ; simple_byte           13     7 (average)
  5457                           ; direct_byte           20     8 (fixed)
  5458                           ; jumptable            260     6 (fixed)
  5459                           ;	Chosen strategy is simple_byte
  5460  09D1  3A00               	xorlw	0	; case 0
  5461  09D2  1903               	skipnz
  5462  09D3  29DE               	goto	l191
  5463  09D4  3A01               	xorlw	1	; case 1
  5464  09D5  1903               	skipnz
  5465  09D6  29C7               	goto	l192
  5466  09D7  3A03               	xorlw	3	; case 2
  5467  09D8  1903               	skipnz
  5468  09D9  29C9               	goto	l2074
  5469  09DA  3A01               	xorlw	1	; case 3
  5470  09DB  1903               	skipnz
  5471  09DC  29CB               	goto	l2076
  5472  09DD  29DE               	goto	l191
  5473  09DE                     l191:	
  5474                           
  5475                           ;lcd_hd44780_pic16.c: 331: x|=0b10000000;
  5476  09DE  17A1               	bsf	LCDGotoXY@x,7
  5477                           
  5478                           ;lcd_hd44780_pic16.c: 332: (LCDByte(x,0));
  5479  09DF  01F6               	clrf	LCDByte@isdata
  5480  09E0  0821               	movf	LCDGotoXY@x,w
  5481  09E1  120A  158A  23B1   	fcall	_LCDByte
  5482  09E4  0008               	return
  5483  09E5                     __end_of_LCDGotoXY:	
  5484                           
  5485                           	psect	text20
  5486  0AEF                     __ptext20:	
  5487 ;; *************** function _LCDInit *****************
  5488 ;; Defined at:
  5489 ;;		line 125 in file "lcd_hd44780_pic16.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;  style           1    wreg     unsigned char 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  style           1   12[COMMON] unsigned char 
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  1    wreg      void 
  5496 ;; Registers used:
  5497 ;;		wreg, status,2, status,0, pclath, cstack
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5503 ;;      Params:         0       0       0       0       0
  5504 ;;      Locals:         1       0       0       0       0
  5505 ;;      Temps:          0       2       0       0       0
  5506 ;;      Totals:         1       2       0       0       0
  5507 ;;Total ram usage:        3 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    2
  5510 ;; This function calls:
  5511 ;;		_LCDBusyLoop
  5512 ;;		_LCDByte
  5513 ;; This function is called by:
  5514 ;;		_main
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           
  5519                           ;psect for function _LCDInit
  5520  0AEF                     _LCDInit:	
  5521                           
  5522                           ;incstack = 0
  5523                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  5524                           ;LCDInit@style stored from wreg
  5525  0AEF  00FD               	movwf	LCDInit@style
  5526                           
  5527                           ;lcd_hd44780_pic16.c: 141: _delay((unsigned long)((30)*(4000000/4000.0)));
  5528  0AF0  3027               	movlw	39
  5529  0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  5530  0AF2  1303               	bcf	3,6	;RP1=0, select bank0
  5531  0AF3  00A1               	movwf	??_LCDInit+1
  5532  0AF4  30F5               	movlw	245
  5533  0AF5  00A0               	movwf	??_LCDInit
  5534  0AF6                     u2707:	
  5535  0AF6  0BA0               	decfsz	??_LCDInit,f
  5536  0AF7  2AF6               	goto	u2707
  5537  0AF8  0BA1               	decfsz	??_LCDInit+1,f
  5538  0AF9  2AF6               	goto	u2707
  5539                           
  5540                           ;lcd_hd44780_pic16.c: 144: TRISD&=(~(0x0F<<4));
  5541  0AFA  300F               	movlw	15
  5542  0AFB  1283               	bcf	3,5	;RP0=0, select bank0
  5543  0AFC  1303               	bcf	3,6	;RP1=0, select bank0
  5544  0AFD  00A0               	movwf	??_LCDInit
  5545  0AFE  0820               	movf	??_LCDInit,w
  5546  0AFF  1683               	bsf	3,5	;RP0=1, select bank1
  5547  0B00  1303               	bcf	3,6	;RP1=0, select bank1
  5548  0B01  0588               	andwf	8,f	;volatile
  5549                           
  5550                           ;lcd_hd44780_pic16.c: 146: TRISBbits.TRISB5=0;
  5551  0B02  1286               	bcf	6,5	;volatile
  5552                           
  5553                           ;lcd_hd44780_pic16.c: 147: TRISDbits.TRISD3=0;
  5554  0B03  1188               	bcf	8,3	;volatile
  5555                           
  5556                           ;lcd_hd44780_pic16.c: 148: TRISDbits.TRISD2=0;
  5557  0B04  1108               	bcf	8,2	;volatile
  5558                           
  5559                           ;lcd_hd44780_pic16.c: 150: PORTD&=(~(0x0F<<4));
  5560  0B05  300F               	movlw	15
  5561  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  5562  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  5563  0B08  00A0               	movwf	??_LCDInit
  5564  0B09  0820               	movf	??_LCDInit,w
  5565  0B0A  0588               	andwf	8,f	;volatile
  5566                           
  5567                           ;lcd_hd44780_pic16.c: 152: (RB5=0);
  5568  0B0B  1286               	bcf	6,5	;volatile
  5569                           
  5570                           ;lcd_hd44780_pic16.c: 153: (RD2=0);
  5571  0B0C  1108               	bcf	8,2	;volatile
  5572                           
  5573                           ;lcd_hd44780_pic16.c: 154: (RD3=0);
  5574  0B0D  1188               	bcf	8,3	;volatile
  5575                           
  5576                           ;lcd_hd44780_pic16.c: 159: (RB5=1);
  5577                           
  5578                           ;lcd_hd44780_pic16.c: 157: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5579  0B0E  1283               	bcf	3,5	;RP0=0, select bank0
  5580  0B0F  1303               	bcf	3,6	;RP1=0, select bank0
  5581  0B10  1686               	bsf	6,5	;volatile
  5582                           
  5583                           ;lcd_hd44780_pic16.c: 160: PORTD|=((0b00000010)<<4);
  5584  0B11  1688               	bsf	8,5	;volatile
  5585                           
  5586                           ;lcd_hd44780_pic16.c: 161: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5587  0B12  0000               	nop
  5588                           
  5589                           ;lcd_hd44780_pic16.c: 162: (RB5=0);
  5590  0B13  1283               	bcf	3,5	;RP0=0, select bank0
  5591  0B14  1303               	bcf	3,6	;RP1=0, select bank0
  5592  0B15  1286               	bcf	6,5	;volatile
  5593                           
  5594                           ;lcd_hd44780_pic16.c: 163: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5595  0B16  0000               	nop
  5596                           
  5597                           ;lcd_hd44780_pic16.c: 166: LCDBusyLoop();
  5598  0B17  120A  158A  2555  120A  158A  	fcall	_LCDBusyLoop
  5599                           
  5600                           ;lcd_hd44780_pic16.c: 171: (LCDByte(0b00101000,0));
  5601  0B1C  01F6               	clrf	LCDByte@isdata
  5602  0B1D  3028               	movlw	40
  5603  0B1E  120A  158A  23B1  120A  158A  	fcall	_LCDByte
  5604                           
  5605                           ;lcd_hd44780_pic16.c: 172: (LCDByte(0b00001100|style,0));
  5606  0B23  01F6               	clrf	LCDByte@isdata
  5607  0B24  087D               	movf	LCDInit@style,w
  5608  0B25  380C               	iorlw	12
  5609  0B26  120A  158A  23B1   	fcall	_LCDByte
  5610  0B29  0008               	return
  5611  0B2A                     __end_of_LCDInit:	
  5612                           
  5613                           	psect	text21
  5614  0BB1                     __ptext21:	
  5615 ;; *************** function _LCDByte *****************
  5616 ;; Defined at:
  5617 ;;		line 12 in file "lcd_hd44780_pic16.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  c               1    wreg     unsigned char 
  5620 ;;  isdata          1    5[COMMON] unsigned char 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  c               1   10[COMMON] unsigned char 
  5623 ;;  temp            1   11[COMMON] unsigned char 
  5624 ;;  ln              1    9[COMMON] unsigned char 
  5625 ;;  hn              1    8[COMMON] unsigned char 
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      void 
  5628 ;; Registers used:
  5629 ;;		wreg, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5635 ;;      Params:         1       0       0       0       0
  5636 ;;      Locals:         4       0       0       0       0
  5637 ;;      Temps:          2       0       0       0       0
  5638 ;;      Totals:         7       0       0       0       0
  5639 ;;Total ram usage:        7 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    1
  5642 ;; This function calls:
  5643 ;;		_LCDBusyLoop
  5644 ;; This function is called by:
  5645 ;;		_LCDInit
  5646 ;;		_LCDWriteString
  5647 ;;		_LCDGotoXY
  5648 ;;		_main
  5649 ;;		_doMenu
  5650 ;;		_showTime
  5651 ;;		_showDate
  5652 ;;		_showRunningTime
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           
  5657                           ;psect for function _LCDByte
  5658  0BB1                     _LCDByte:	
  5659                           
  5660                           ;incstack = 0
  5661                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  5662                           ;LCDByte@c stored from wreg
  5663  0BB1  00FB               	movwf	LCDByte@c
  5664                           
  5665                           ;lcd_hd44780_pic16.c: 21: uint8_t hn,ln;
  5666                           ;lcd_hd44780_pic16.c: 22: uint8_t temp;
  5667                           ;lcd_hd44780_pic16.c: 24: hn=c>>4;
  5668  0BB2  087B               	movf	LCDByte@c,w
  5669  0BB3  00F7               	movwf	??_LCDByte
  5670  0BB4  3004               	movlw	4
  5671  0BB5                     u1395:	
  5672  0BB5  1003               	clrc
  5673  0BB6  0CF7               	rrf	??_LCDByte,f
  5674  0BB7  3EFF               	addlw	-1
  5675  0BB8  1D03               	skipz
  5676  0BB9  2BB5               	goto	u1395
  5677  0BBA  0877               	movf	??_LCDByte,w
  5678  0BBB  00F8               	movwf	??_LCDByte+1
  5679  0BBC  0878               	movf	??_LCDByte+1,w
  5680  0BBD  00F9               	movwf	LCDByte@hn
  5681                           
  5682                           ;lcd_hd44780_pic16.c: 25: ln=(c & 0x0F);
  5683  0BBE  087B               	movf	LCDByte@c,w
  5684  0BBF  390F               	andlw	15
  5685  0BC0  00F7               	movwf	??_LCDByte
  5686  0BC1  0877               	movf	??_LCDByte,w
  5687  0BC2  00FA               	movwf	LCDByte@ln
  5688                           
  5689                           ;lcd_hd44780_pic16.c: 27: if(isdata==0)
  5690  0BC3  0876               	movf	LCDByte@isdata,w
  5691  0BC4  1D03               	btfss	3,2
  5692  0BC5  2BCA               	goto	l154
  5693                           
  5694                           ;lcd_hd44780_pic16.c: 28: (RD3=0);
  5695  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
  5696  0BC7  1303               	bcf	3,6	;RP1=0, select bank0
  5697  0BC8  1188               	bcf	8,3	;volatile
  5698  0BC9  2BCD               	goto	l155
  5699  0BCA                     l154:	
  5700                           
  5701                           ;lcd_hd44780_pic16.c: 29: else
  5702                           ;lcd_hd44780_pic16.c: 30: (RD3=1);
  5703  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  5704  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  5705  0BCC  1588               	bsf	8,3	;volatile
  5706  0BCD                     l155:	
  5707                           
  5708                           ;lcd_hd44780_pic16.c: 32: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5709                           ;lcd_hd44780_pic16.c: 34: (RB5=1);
  5710  0BCD  1283               	bcf	3,5	;RP0=0, select bank0
  5711  0BCE  1303               	bcf	3,6	;RP1=0, select bank0
  5712  0BCF  1686               	bsf	6,5	;volatile
  5713                           
  5714                           ;lcd_hd44780_pic16.c: 38: temp=(PORTD & (~(0X0F<<4)))|((hn<<4));
  5715  0BD0  0879               	movf	LCDByte@hn,w
  5716  0BD1  00F7               	movwf	??_LCDByte
  5717  0BD2  3004               	movlw	4
  5718  0BD3                     u1415:	
  5719  0BD3  1003               	clrc
  5720  0BD4  0DF7               	rlf	??_LCDByte,f
  5721  0BD5  3EFF               	addlw	-1
  5722  0BD6  1D03               	skipz
  5723  0BD7  2BD3               	goto	u1415
  5724  0BD8  0808               	movf	8,w	;volatile
  5725  0BD9  390F               	andlw	15
  5726  0BDA  0477               	iorwf	??_LCDByte,w
  5727  0BDB  00F8               	movwf	??_LCDByte+1
  5728  0BDC  0878               	movf	??_LCDByte+1,w
  5729  0BDD  00FC               	movwf	LCDByte@temp
  5730                           
  5731                           ;lcd_hd44780_pic16.c: 39: PORTD=temp;
  5732  0BDE  087C               	movf	LCDByte@temp,w
  5733  0BDF  0088               	movwf	8	;volatile
  5734                           
  5735                           ;lcd_hd44780_pic16.c: 41: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5736  0BE0  0000               	nop
  5737                           
  5738                           ;lcd_hd44780_pic16.c: 45: (RB5=0);
  5739  0BE1  1283               	bcf	3,5	;RP0=0, select bank0
  5740  0BE2  1303               	bcf	3,6	;RP1=0, select bank0
  5741  0BE3  1286               	bcf	6,5	;volatile
  5742                           
  5743                           ;lcd_hd44780_pic16.c: 47: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5744  0BE4  0000               	nop
  5745                           
  5746                           ;lcd_hd44780_pic16.c: 50: (RB5=1);
  5747  0BE5  1283               	bcf	3,5	;RP0=0, select bank0
  5748  0BE6  1303               	bcf	3,6	;RP1=0, select bank0
  5749  0BE7  1686               	bsf	6,5	;volatile
  5750                           
  5751                           ;lcd_hd44780_pic16.c: 52: temp=(PORTD & (~(0X0F<<4)))|((ln<<4));
  5752  0BE8  087A               	movf	LCDByte@ln,w
  5753  0BE9  00F7               	movwf	??_LCDByte
  5754  0BEA  3004               	movlw	4
  5755  0BEB                     u1425:	
  5756  0BEB  1003               	clrc
  5757  0BEC  0DF7               	rlf	??_LCDByte,f
  5758  0BED  3EFF               	addlw	-1
  5759  0BEE  1D03               	skipz
  5760  0BEF  2BEB               	goto	u1425
  5761  0BF0  0808               	movf	8,w	;volatile
  5762  0BF1  390F               	andlw	15
  5763  0BF2  0477               	iorwf	??_LCDByte,w
  5764  0BF3  00F8               	movwf	??_LCDByte+1
  5765  0BF4  0878               	movf	??_LCDByte+1,w
  5766  0BF5  00FC               	movwf	LCDByte@temp
  5767                           
  5768                           ;lcd_hd44780_pic16.c: 54: PORTD=temp;
  5769  0BF6  087C               	movf	LCDByte@temp,w
  5770  0BF7  0088               	movwf	8	;volatile
  5771                           
  5772                           ;lcd_hd44780_pic16.c: 56: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5773  0BF8  0000               	nop
  5774                           
  5775                           ;lcd_hd44780_pic16.c: 60: (RB5=0);
  5776  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  5777  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  5778  0BFB  1286               	bcf	6,5	;volatile
  5779                           
  5780                           ;lcd_hd44780_pic16.c: 62: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5781  0BFC  0000               	nop
  5782                           
  5783                           ;lcd_hd44780_pic16.c: 64: LCDBusyLoop();
  5784  0BFD  120A  158A  2555   	fcall	_LCDBusyLoop
  5785  0C00  0008               	return
  5786  0C01                     __end_of_LCDByte:	
  5787                           
  5788                           	psect	text22
  5789  0D55                     __ptext22:	
  5790 ;; *************** function _LCDBusyLoop *****************
  5791 ;; Defined at:
  5792 ;;		line 67 in file "lcd_hd44780_pic16.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;		None
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  status          1    4[COMMON] unsigned char 
  5797 ;;  temp            1    3[COMMON] unsigned char 
  5798 ;;  busy            1    2[COMMON] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      void 
  5801 ;; Registers used:
  5802 ;;		wreg, status,2, status,0
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5808 ;;      Params:         0       0       0       0       0
  5809 ;;      Locals:         3       0       0       0       0
  5810 ;;      Temps:          2       0       0       0       0
  5811 ;;      Totals:         5       0       0       0       0
  5812 ;;Total ram usage:        5 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; This function calls:
  5815 ;;		Nothing
  5816 ;; This function is called by:
  5817 ;;		_LCDByte
  5818 ;;		_LCDInit
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           
  5823                           ;psect for function _LCDBusyLoop
  5824  0D55                     _LCDBusyLoop:	
  5825                           
  5826                           ;lcd_hd44780_pic16.c: 71: uint8_t busy,status=0x00,temp;
  5827                           
  5828                           ;incstack = 0
  5829                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  5830  0D55  01F5               	clrf	LCDBusyLoop@status
  5831                           
  5832                           ;lcd_hd44780_pic16.c: 74: TRISD|=(0x0f<<4);
  5833  0D56  30F0               	movlw	240
  5834  0D57  00F1               	movwf	??_LCDBusyLoop
  5835  0D58  0871               	movf	??_LCDBusyLoop,w
  5836  0D59  1683               	bsf	3,5	;RP0=1, select bank1
  5837  0D5A  1303               	bcf	3,6	;RP1=0, select bank1
  5838  0D5B  0488               	iorwf	8,f	;volatile
  5839                           
  5840                           ;lcd_hd44780_pic16.c: 77: (RD2=1);
  5841  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  5842  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  5843  0D5E  1508               	bsf	8,2	;volatile
  5844                           
  5845                           ;lcd_hd44780_pic16.c: 78: (RD3=0);
  5846  0D5F  1188               	bcf	8,3	;volatile
  5847  0D60                     l1836:	
  5848                           ;lcd_hd44780_pic16.c: 85: do
  5849                           
  5850                           ;lcd_hd44780_pic16.c: 82: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5851                           
  5852                           
  5853                           ;lcd_hd44780_pic16.c: 86: {
  5854                           ;lcd_hd44780_pic16.c: 88: (RB5=1);
  5855  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  5856  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  5857  0D62  1686               	bsf	6,5	;volatile
  5858                           
  5859                           ;lcd_hd44780_pic16.c: 93: status=(PORTD>>4);
  5860                           
  5861                           ;lcd_hd44780_pic16.c: 91: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5862  0D63  1283               	bcf	3,5	;RP0=0, select bank0
  5863  0D64  1303               	bcf	3,6	;RP1=0, select bank0
  5864  0D65  0808               	movf	8,w	;volatile
  5865  0D66  00F1               	movwf	??_LCDBusyLoop
  5866  0D67  3004               	movlw	4
  5867  0D68                     u1335:	
  5868  0D68  1003               	clrc
  5869  0D69  0CF1               	rrf	??_LCDBusyLoop,f
  5870  0D6A  3EFF               	addlw	-1
  5871  0D6B  1D03               	skipz
  5872  0D6C  2D68               	goto	u1335
  5873  0D6D  0871               	movf	??_LCDBusyLoop,w
  5874  0D6E  00F2               	movwf	??_LCDBusyLoop+1
  5875  0D6F  0872               	movf	??_LCDBusyLoop+1,w
  5876  0D70  00F5               	movwf	LCDBusyLoop@status
  5877                           
  5878                           ;lcd_hd44780_pic16.c: 94: status=status<<4;
  5879  0D71  0875               	movf	LCDBusyLoop@status,w
  5880  0D72  00F1               	movwf	??_LCDBusyLoop
  5881  0D73  3003               	movlw	3
  5882  0D74                     u1345:	
  5883  0D74  1003               	clrc
  5884  0D75  0DF1               	rlf	??_LCDBusyLoop,f
  5885  0D76  3EFF               	addlw	-1
  5886  0D77  1D03               	skipz
  5887  0D78  2D74               	goto	u1345
  5888  0D79  1003               	clrc
  5889  0D7A  0D71               	rlf	??_LCDBusyLoop,w
  5890  0D7B  00F2               	movwf	??_LCDBusyLoop+1
  5891  0D7C  0872               	movf	??_LCDBusyLoop+1,w
  5892  0D7D  00F5               	movwf	LCDBusyLoop@status
  5893                           
  5894                           ;lcd_hd44780_pic16.c: 99: (RB5=0);
  5895                           
  5896                           ;lcd_hd44780_pic16.c: 96: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5897  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  5898  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  5899  0D80  1286               	bcf	6,5	;volatile
  5900                           
  5901                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5902  0D81  0000               	nop
  5903                           
  5904                           ;lcd_hd44780_pic16.c: 102: (RB5=1);
  5905  0D82  1283               	bcf	3,5	;RP0=0, select bank0
  5906  0D83  1303               	bcf	3,6	;RP1=0, select bank0
  5907  0D84  1686               	bsf	6,5	;volatile
  5908                           
  5909                           ;lcd_hd44780_pic16.c: 105: temp=(PORTD>>4);
  5910                           
  5911                           ;lcd_hd44780_pic16.c: 103: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5912  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  5913  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  5914  0D87  0808               	movf	8,w	;volatile
  5915  0D88  00F1               	movwf	??_LCDBusyLoop
  5916  0D89  3004               	movlw	4
  5917  0D8A                     u1355:	
  5918  0D8A  1003               	clrc
  5919  0D8B  0CF1               	rrf	??_LCDBusyLoop,f
  5920  0D8C  3EFF               	addlw	-1
  5921  0D8D  1D03               	skipz
  5922  0D8E  2D8A               	goto	u1355
  5923  0D8F  0871               	movf	??_LCDBusyLoop,w
  5924  0D90  00F2               	movwf	??_LCDBusyLoop+1
  5925  0D91  0872               	movf	??_LCDBusyLoop+1,w
  5926  0D92  00F4               	movwf	LCDBusyLoop@temp
  5927                           
  5928                           ;lcd_hd44780_pic16.c: 106: temp&=0x0F;
  5929  0D93  300F               	movlw	15
  5930  0D94  00F1               	movwf	??_LCDBusyLoop
  5931  0D95  0871               	movf	??_LCDBusyLoop,w
  5932  0D96  05F4               	andwf	LCDBusyLoop@temp,f
  5933                           
  5934                           ;lcd_hd44780_pic16.c: 108: status=status|temp;
  5935  0D97  0875               	movf	LCDBusyLoop@status,w
  5936  0D98  0474               	iorwf	LCDBusyLoop@temp,w
  5937  0D99  00F1               	movwf	??_LCDBusyLoop
  5938  0D9A  0871               	movf	??_LCDBusyLoop,w
  5939  0D9B  00F5               	movwf	LCDBusyLoop@status
  5940                           
  5941                           ;lcd_hd44780_pic16.c: 110: busy=status & 0b10000000;
  5942  0D9C  0875               	movf	LCDBusyLoop@status,w
  5943  0D9D  3980               	andlw	128
  5944  0D9E  00F1               	movwf	??_LCDBusyLoop
  5945  0D9F  0871               	movf	??_LCDBusyLoop,w
  5946  0DA0  00F3               	movwf	LCDBusyLoop@busy
  5947                           
  5948                           ;lcd_hd44780_pic16.c: 114: (RB5=0);
  5949                           
  5950                           ;lcd_hd44780_pic16.c: 112: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5951  0DA1  1283               	bcf	3,5	;RP0=0, select bank0
  5952  0DA2  1303               	bcf	3,6	;RP1=0, select bank0
  5953  0DA3  1286               	bcf	6,5	;volatile
  5954                           
  5955                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5956  0DA4  0000               	nop
  5957                           
  5958                           ;lcd_hd44780_pic16.c: 116: }while(busy);
  5959  0DA5  0873               	movf	LCDBusyLoop@busy,w
  5960  0DA6  1D03               	btfss	3,2
  5961  0DA7  2D60               	goto	l1836
  5962                           
  5963                           ;lcd_hd44780_pic16.c: 118: (RD2=0);
  5964  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  5965  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  5966  0DAA  1108               	bcf	8,2	;volatile
  5967                           
  5968                           ;lcd_hd44780_pic16.c: 121: TRISD&=(~(0x0F<<4));
  5969  0DAB  300F               	movlw	15
  5970  0DAC  00F1               	movwf	??_LCDBusyLoop
  5971  0DAD  0871               	movf	??_LCDBusyLoop,w
  5972  0DAE  1683               	bsf	3,5	;RP0=1, select bank1
  5973  0DAF  1303               	bcf	3,6	;RP1=0, select bank1
  5974  0DB0  0588               	andwf	8,f	;volatile
  5975  0DB1  0008               	return
  5976  0DB2                     __end_of_LCDBusyLoop:	
  5977                           
  5978                           	psect	text23
  5979  093F                     __ptext23:	
  5980 ;; *************** function _I2C_Init *****************
  5981 ;; Defined at:
  5982 ;;		line 96 in file "i2c.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		wreg
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5996 ;;      Params:         0       0       0       0       0
  5997 ;;      Locals:         0       0       0       0       0
  5998 ;;      Temps:          0       0       0       0       0
  5999 ;;      Totals:         0       0       0       0       0
  6000 ;;Total ram usage:        0 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; This function calls:
  6003 ;;		Nothing
  6004 ;; This function is called by:
  6005 ;;		_main
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function _I2C_Init
  6011  093F                     _I2C_Init:	
  6012                           
  6013                           ;i2c.c: 98: TRISC3 = 1;
  6014                           
  6015                           ;incstack = 0
  6016                           ; Regs used in _I2C_Init: [wreg]
  6017  093F  1683               	bsf	3,5	;RP0=1, select bank1
  6018  0940  1303               	bcf	3,6	;RP1=0, select bank1
  6019  0941  1587               	bsf	7,3	;volatile
  6020                           
  6021                           ;i2c.c: 99: TRISC4 = 1;
  6022  0942  1607               	bsf	7,4	;volatile
  6023                           
  6024                           ;i2c.c: 100: SSPSTAT |= 0x80;
  6025  0943  1794               	bsf	20,7	;volatile
  6026                           
  6027                           ;i2c.c: 101: SSPCON = 0x28;
  6028  0944  3028               	movlw	40
  6029  0945  1283               	bcf	3,5	;RP0=0, select bank0
  6030  0946  1303               	bcf	3,6	;RP1=0, select bank0
  6031  0947  0094               	movwf	20	;volatile
  6032                           
  6033                           ;i2c.c: 102: SSPADD = 0x28;
  6034  0948  3028               	movlw	40
  6035  0949  1683               	bsf	3,5	;RP0=1, select bank1
  6036  094A  1303               	bcf	3,6	;RP1=0, select bank1
  6037  094B  0093               	movwf	19	;volatile
  6038  094C  0008               	return
  6039  094D                     __end_of_I2C_Init:	
  6040                           
  6041                           	psect	text24
  6042  0CA3                     __ptext24:	
  6043 ;; *************** function _DS1307_readRam *****************
  6044 ;; Defined at:
  6045 ;;		line 91 in file "DS1307.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  ptr             1    wreg     PTR unsigned char 
  6048 ;;		 -> runningTime(2), 
  6049 ;;  offset          2    2[COMMON] int 
  6050 ;;  length          2    4[COMMON] int 
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  ptr             1    8[COMMON] PTR unsigned char 
  6053 ;;		 -> runningTime(2), 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6063 ;;      Params:         4       0       0       0       0
  6064 ;;      Locals:         1       0       0       0       0
  6065 ;;      Temps:          2       0       0       0       0
  6066 ;;      Totals:         7       0       0       0       0
  6067 ;;Total ram usage:        7 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    3
  6070 ;; This function calls:
  6071 ;;		_DS1307_Read
  6072 ;;		_DS1307_Write
  6073 ;;		_I2C_Ack
  6074 ;;		_I2C_NoAck
  6075 ;;		_I2C_Restart
  6076 ;;		_I2C_Start
  6077 ;;		_I2C_Stop
  6078 ;; This function is called by:
  6079 ;;		_main
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function _DS1307_readRam
  6085  0CA3                     _DS1307_readRam:	
  6086                           
  6087                           ;incstack = 0
  6088                           ; Regs used in _DS1307_readRam: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6089                           ;DS1307_readRam@ptr stored from wreg
  6090  0CA3  00F9               	movwf	DS1307_readRam@ptr
  6091                           
  6092                           ;DS1307.c: 93: I2C_Start();
  6093  0CA4  120A  158A  210F  120A  158A  	fcall	_I2C_Start
  6094                           
  6095                           ;DS1307.c: 94: DS1307_Write(0xD0);
  6096  0CA9  30D0               	movlw	208
  6097  0CAA  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  6098                           
  6099                           ;DS1307.c: 95: DS1307_Write(0x08 + offset);
  6100  0CAF  0873               	movf	DS1307_readRam@offset,w
  6101  0CB0  3E08               	addlw	8
  6102  0CB1  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  6103                           
  6104                           ;DS1307.c: 96: I2C_Restart();
  6105  0CB6  120A  158A  2109  120A  158A  	fcall	_I2C_Restart
  6106                           
  6107                           ;DS1307.c: 97: DS1307_Write(0xD1);
  6108  0CBB  30D1               	movlw	209
  6109  0CBC  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  6110  0CC1                     l2314:	
  6111                           ;DS1307.c: 98: while(length-- > 1)
  6112                           
  6113  0CC1  0876               	movf	DS1307_readRam@length+1,w
  6114  0CC2  00F8               	movwf	??_DS1307_readRam+1
  6115  0CC3  03F5               	decf	DS1307_readRam@length,f
  6116  0CC4  0A75               	incf	DS1307_readRam@length,w
  6117  0CC5  00F7               	movwf	??_DS1307_readRam
  6118  0CC6  1903               	skipnz
  6119  0CC7  03F6               	decf	DS1307_readRam@length+1,f
  6120  0CC8  0878               	movf	??_DS1307_readRam+1,w
  6121  0CC9  3A80               	xorlw	128
  6122  0CCA  00FF               	movwf	127
  6123  0CCB  3080               	movlw	128
  6124  0CCC  027F               	subwf	127,w
  6125  0CCD  1D03               	skipz
  6126  0CCE  2CD1               	goto	u1895
  6127  0CCF  3002               	movlw	2
  6128  0CD0  0277               	subwf	??_DS1307_readRam,w
  6129  0CD1                     u1895:	
  6130  0CD1  1C03               	btfss	3,0
  6131  0CD2  2CE3               	goto	l2316
  6132                           
  6133                           ;DS1307.c: 99: *ptr++ = DS1307_Read(); I2C_Ack();
  6134  0CD3  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  6135  0CD8  00F7               	movwf	??_DS1307_readRam
  6136  0CD9  0879               	movf	DS1307_readRam@ptr,w
  6137  0CDA  0084               	movwf	4
  6138  0CDB  0877               	movf	??_DS1307_readRam,w
  6139  0CDC  1383               	bcf	3,7	;select IRP bank0
  6140  0CDD  0080               	movwf	0
  6141  0CDE  3001               	movlw	1
  6142  0CDF  00F7               	movwf	??_DS1307_readRam
  6143  0CE0  0877               	movf	??_DS1307_readRam,w
  6144  0CE1  07F9               	addwf	DS1307_readRam@ptr,f
  6145  0CE2  2CC1               	goto	l2314
  6146  0CE3                     l2316:	
  6147  0CE3  120A  158A  2122  120A  158A  	fcall	_I2C_Ack
  6148                           
  6149                           ;DS1307.c: 100: *ptr = DS1307_Read(); I2C_NoAck();
  6150  0CE8  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  6151  0CED  00F7               	movwf	??_DS1307_readRam
  6152  0CEE  0879               	movf	DS1307_readRam@ptr,w
  6153  0CEF  0084               	movwf	4
  6154  0CF0  0877               	movf	??_DS1307_readRam,w
  6155  0CF1  1383               	bcf	3,7	;select IRP bank0
  6156  0CF2  0080               	movwf	0
  6157  0CF3  120A  158A  211B  120A  158A  	fcall	_I2C_NoAck
  6158                           
  6159                           ;DS1307.c: 101: I2C_Stop();
  6160  0CF8  120A  158A  2115   	fcall	_I2C_Stop
  6161  0CFB  0008               	return
  6162  0CFC                     __end_of_DS1307_readRam:	
  6163                           
  6164                           	psect	text25
  6165  0922                     __ptext25:	
  6166 ;; *************** function _I2C_Ack *****************
  6167 ;; Defined at:
  6168 ;;		line 141 in file "i2c.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;		None
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;		None
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  1    wreg      void 
  6175 ;; Registers used:
  6176 ;;		None
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6182 ;;      Params:         0       0       0       0       0
  6183 ;;      Locals:         0       0       0       0       0
  6184 ;;      Temps:          0       0       0       0       0
  6185 ;;      Totals:         0       0       0       0       0
  6186 ;;Total ram usage:        0 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_DS1307_GetTime
  6192 ;;		_DS1307_GetDate
  6193 ;;		_DS1307_readRam
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           
  6198                           ;psect for function _I2C_Ack
  6199  0922                     _I2C_Ack:	
  6200                           
  6201                           ;i2c.c: 143: ACKDT = 0;
  6202                           
  6203                           ;incstack = 0
  6204                           ; Regs used in _I2C_Ack: []
  6205  0922  1683               	bsf	3,5	;RP0=1, select bank1
  6206  0923  1303               	bcf	3,6	;RP1=0, select bank1
  6207  0924  1291               	bcf	17,5	;volatile
  6208                           
  6209                           ;i2c.c: 144: ACKEN = 1;
  6210  0925  1611               	bsf	17,4	;volatile
  6211  0926                     l112:	
  6212                           ;i2c.c: 146: ;
  6213                           
  6214                           ;i2c.c: 145: while(ACKEN)
  6215                           
  6216  0926  1E11               	btfss	17,4	;volatile
  6217  0927  0008               	return
  6218  0928  2926               	goto	l112
  6219  0929                     __end_of_I2C_Ack:	
  6220                           
  6221                           	psect	text26
  6222  0C01                     __ptext26:	
  6223 ;; *************** function _DS1307_Init *****************
  6224 ;; Defined at:
  6225 ;;		line 4 in file "DS1307.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  s               1    3[COMMON] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  2   20[None  ] int 
  6232 ;; Registers used:
  6233 ;;		wreg, status,2, status,0, pclath, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6239 ;;      Params:         0       0       0       0       0
  6240 ;;      Locals:         1       0       0       0       0
  6241 ;;      Temps:          1       0       0       0       0
  6242 ;;      Totals:         2       0       0       0       0
  6243 ;;Total ram usage:        2 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    3
  6246 ;; This function calls:
  6247 ;;		_DS1307_Read
  6248 ;;		_DS1307_Write
  6249 ;;		_I2C_NoAck
  6250 ;;		_I2C_Restart
  6251 ;;		_I2C_Start
  6252 ;;		_I2C_Stop
  6253 ;; This function is called by:
  6254 ;;		_main
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           
  6259                           ;psect for function _DS1307_Init
  6260  0C01                     _DS1307_Init:	
  6261                           
  6262                           ;DS1307.c: 6: unsigned char s = 0 ;
  6263                           
  6264                           ;incstack = 0
  6265                           ; Regs used in _DS1307_Init: [wreg+status,2+status,0+pclath+cstack]
  6266  0C01  01F4               	clrf	DS1307_Init@s
  6267                           
  6268                           ;DS1307.c: 8: I2C_Start();
  6269  0C02  120A  158A  210F  120A  158A  	fcall	_I2C_Start
  6270                           
  6271                           ;DS1307.c: 9: DS1307_Write(0xd0);
  6272  0C07  30D0               	movlw	208
  6273  0C08  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  6274                           
  6275                           ;DS1307.c: 10: DS1307_Write(0x00);
  6276  0C0D  3000               	movlw	0
  6277  0C0E  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  6278                           
  6279                           ;DS1307.c: 11: I2C_Restart();
  6280  0C13  120A  158A  2109  120A  158A  	fcall	_I2C_Restart
  6281                           
  6282                           ;DS1307.c: 12: DS1307_Write(0xd1);
  6283  0C18  30D1               	movlw	209
  6284  0C19  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  6285                           
  6286                           ;DS1307.c: 13: s = DS1307_Read();
  6287  0C1E  120A  158A  20FF  120A  158A  	fcall	_DS1307_Read
  6288  0C23  00F3               	movwf	??_DS1307_Init
  6289  0C24  0873               	movf	??_DS1307_Init,w
  6290  0C25  00F4               	movwf	DS1307_Init@s
  6291                           
  6292                           ;DS1307.c: 14: I2C_NoAck();
  6293  0C26  120A  158A  211B  120A  158A  	fcall	_I2C_NoAck
  6294                           
  6295                           ;DS1307.c: 15: I2C_Stop();
  6296  0C2B  120A  158A  2115  120A  158A  	fcall	_I2C_Stop
  6297                           
  6298                           ;DS1307.c: 17: if (s & 0x80)
  6299  0C30  1FF4               	btfss	DS1307_Init@s,7
  6300  0C31  0008               	return
  6301                           
  6302                           ;DS1307.c: 18: {
  6303                           ;DS1307.c: 19: s = s & 0x7f ;
  6304  0C32  0874               	movf	DS1307_Init@s,w
  6305  0C33  397F               	andlw	127
  6306  0C34  00F3               	movwf	??_DS1307_Init
  6307  0C35  0873               	movf	??_DS1307_Init,w
  6308  0C36  00F4               	movwf	DS1307_Init@s
  6309                           
  6310                           ;DS1307.c: 20: I2C_Start();
  6311  0C37  120A  158A  210F  120A  158A  	fcall	_I2C_Start
  6312                           
  6313                           ;DS1307.c: 21: DS1307_Write(0xD0);
  6314  0C3C  30D0               	movlw	208
  6315  0C3D  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  6316                           
  6317                           ;DS1307.c: 22: DS1307_Write(0x00);
  6318  0C42  3000               	movlw	0
  6319  0C43  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  6320                           
  6321                           ;DS1307.c: 23: DS1307_Write(s);
  6322  0C48  0874               	movf	DS1307_Init@s,w
  6323  0C49  120A  158A  2103  120A  158A  	fcall	_DS1307_Write
  6324                           
  6325                           ;DS1307.c: 24: I2C_Stop();
  6326  0C4E  120A  158A  2115   	fcall	_I2C_Stop
  6327                           
  6328                           ;DS1307.c: 25: return 1 ;
  6329                           ;	Return value of _DS1307_Init is never used
  6330  0C51  0008               	return
  6331  0C52                     __end_of_DS1307_Init:	
  6332                           ;DS1307.c: 26: }
  6333                           ;DS1307.c: 27: return 0 ;
  6334                           ;	Return value of _DS1307_Init is never used
  6335                           
  6336                           
  6337                           	psect	text27
  6338  0915                     __ptext27:	
  6339 ;; *************** function _I2C_Stop *****************
  6340 ;; Defined at:
  6341 ;;		line 113 in file "i2c.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;		None
  6344 ;; Auto vars:     Size  Location     Type
  6345 ;;		None
  6346 ;; Return value:  Size  Location     Type
  6347 ;;                  1    wreg      void 
  6348 ;; Registers used:
  6349 ;;		None
  6350 ;; Tracked objects:
  6351 ;;		On entry : 0/0
  6352 ;;		On exit  : 0/0
  6353 ;;		Unchanged: 0/0
  6354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6355 ;;      Params:         0       0       0       0       0
  6356 ;;      Locals:         0       0       0       0       0
  6357 ;;      Temps:          0       0       0       0       0
  6358 ;;      Totals:         0       0       0       0       0
  6359 ;;Total ram usage:        0 bytes
  6360 ;; Hardware stack levels used:    1
  6361 ;; This function calls:
  6362 ;;		Nothing
  6363 ;; This function is called by:
  6364 ;;		_DS1307_Init
  6365 ;;		_DS1307_SetTime
  6366 ;;		_DS1307_SetDate
  6367 ;;		_DS1307_GetTime
  6368 ;;		_DS1307_GetDate
  6369 ;;		_DS1307_readRam
  6370 ;;		_DS1307_writeRam
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _I2C_Stop
  6376  0915                     _I2C_Stop:	
  6377                           
  6378                           ;i2c.c: 115: PEN = 1;
  6379                           
  6380                           ;incstack = 0
  6381                           ; Regs used in _I2C_Stop: []
  6382  0915  1683               	bsf	3,5	;RP0=1, select bank1
  6383  0916  1303               	bcf	3,6	;RP1=0, select bank1
  6384  0917  1511               	bsf	17,2	;volatile
  6385  0918                     l94:	
  6386                           ;i2c.c: 117: ;
  6387                           
  6388                           ;i2c.c: 116: while(PEN)
  6389                           
  6390  0918  1D11               	btfss	17,2	;volatile
  6391  0919  0008               	return
  6392  091A  2918               	goto	l94
  6393  091B                     __end_of_I2C_Stop:	
  6394                           
  6395                           	psect	text28
  6396  090F                     __ptext28:	
  6397 ;; *************** function _I2C_Start *****************
  6398 ;; Defined at:
  6399 ;;		line 105 in file "i2c.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;		None
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;		None
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  1    wreg      void 
  6406 ;; Registers used:
  6407 ;;		None
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6413 ;;      Params:         0       0       0       0       0
  6414 ;;      Locals:         0       0       0       0       0
  6415 ;;      Temps:          0       0       0       0       0
  6416 ;;      Totals:         0       0       0       0       0
  6417 ;;Total ram usage:        0 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; This function calls:
  6420 ;;		Nothing
  6421 ;; This function is called by:
  6422 ;;		_DS1307_Init
  6423 ;;		_DS1307_SetTime
  6424 ;;		_DS1307_SetDate
  6425 ;;		_DS1307_GetTime
  6426 ;;		_DS1307_GetDate
  6427 ;;		_DS1307_readRam
  6428 ;;		_DS1307_writeRam
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           
  6433                           ;psect for function _I2C_Start
  6434  090F                     _I2C_Start:	
  6435                           
  6436                           ;i2c.c: 107: SEN = 1;
  6437                           
  6438                           ;incstack = 0
  6439                           ; Regs used in _I2C_Start: []
  6440  090F  1683               	bsf	3,5	;RP0=1, select bank1
  6441  0910  1303               	bcf	3,6	;RP1=0, select bank1
  6442  0911  1411               	bsf	17,0	;volatile
  6443  0912                     l88:	
  6444                           ;i2c.c: 109: ;
  6445                           
  6446                           ;i2c.c: 108: while(SEN)
  6447                           
  6448  0912  1C11               	btfss	17,0	;volatile
  6449  0913  0008               	return
  6450  0914  2912               	goto	l88
  6451  0915                     __end_of_I2C_Start:	
  6452                           
  6453                           	psect	text29
  6454  0909                     __ptext29:	
  6455 ;; *************** function _I2C_Restart *****************
  6456 ;; Defined at:
  6457 ;;		line 157 in file "i2c.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  2    6[None  ] int 
  6464 ;; Registers used:
  6465 ;;		None
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6471 ;;      Params:         0       0       0       0       0
  6472 ;;      Locals:         0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0
  6474 ;;      Totals:         0       0       0       0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_DS1307_Init
  6481 ;;		_DS1307_GetTime
  6482 ;;		_DS1307_GetDate
  6483 ;;		_DS1307_readRam
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _I2C_Restart
  6489  0909                     _I2C_Restart:	
  6490                           
  6491                           ;i2c.c: 159: RSEN = 1;
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in _I2C_Restart: []
  6495  0909  1683               	bsf	3,5	;RP0=1, select bank1
  6496  090A  1303               	bcf	3,6	;RP1=0, select bank1
  6497  090B  1491               	bsf	17,1	;volatile
  6498  090C                     l124:	
  6499                           ;i2c.c: 161: ;
  6500                           
  6501                           ;i2c.c: 160: while(RSEN)
  6502                           
  6503  090C  1C91               	btfss	17,1	;volatile
  6504  090D  0008               	return
  6505  090E  290C               	goto	l124
  6506  090F                     __end_of_I2C_Restart:	
  6507                           
  6508                           	psect	text30
  6509  091B                     __ptext30:	
  6510 ;; *************** function _I2C_NoAck *****************
  6511 ;; Defined at:
  6512 ;;		line 149 in file "i2c.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;		None
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;		None
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  1    wreg      void 
  6519 ;; Registers used:
  6520 ;;		None
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6526 ;;      Params:         0       0       0       0       0
  6527 ;;      Locals:         0       0       0       0       0
  6528 ;;      Temps:          0       0       0       0       0
  6529 ;;      Totals:         0       0       0       0       0
  6530 ;;Total ram usage:        0 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; This function calls:
  6533 ;;		Nothing
  6534 ;; This function is called by:
  6535 ;;		_DS1307_Init
  6536 ;;		_DS1307_GetTime
  6537 ;;		_DS1307_GetDate
  6538 ;;		_DS1307_readRam
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           
  6543                           ;psect for function _I2C_NoAck
  6544  091B                     _I2C_NoAck:	
  6545                           
  6546                           ;i2c.c: 151: ACKDT = 1;
  6547                           
  6548                           ;incstack = 0
  6549                           ; Regs used in _I2C_NoAck: []
  6550  091B  1683               	bsf	3,5	;RP0=1, select bank1
  6551  091C  1303               	bcf	3,6	;RP1=0, select bank1
  6552  091D  1691               	bsf	17,5	;volatile
  6553                           
  6554                           ;i2c.c: 152: ACKEN = 1;
  6555  091E  1611               	bsf	17,4	;volatile
  6556  091F                     l118:	
  6557                           ;i2c.c: 154: ;
  6558                           
  6559                           ;i2c.c: 153: while(ACKEN)
  6560                           
  6561  091F  1E11               	btfss	17,4	;volatile
  6562  0920  0008               	return
  6563  0921  291F               	goto	l118
  6564  0922                     __end_of_I2C_NoAck:	
  6565                           
  6566                           	psect	text31
  6567  0903                     __ptext31:	
  6568 ;; *************** function _DS1307_Write *****************
  6569 ;; Defined at:
  6570 ;;		line 30 in file "DS1307.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  dat             1    wreg     unsigned char 
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;  dat             1    1[COMMON] unsigned char 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      void 
  6577 ;; Registers used:
  6578 ;;		wreg, status,2, status,0, pclath, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6584 ;;      Params:         0       0       0       0       0
  6585 ;;      Locals:         1       0       0       0       0
  6586 ;;      Temps:          0       0       0       0       0
  6587 ;;      Totals:         1       0       0       0       0
  6588 ;;Total ram usage:        1 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    2
  6591 ;; This function calls:
  6592 ;;		_I2C_Write
  6593 ;; This function is called by:
  6594 ;;		_DS1307_Init
  6595 ;;		_DS1307_SetTime
  6596 ;;		_DS1307_SetDate
  6597 ;;		_DS1307_GetTime
  6598 ;;		_DS1307_GetDate
  6599 ;;		_DS1307_readRam
  6600 ;;		_DS1307_writeRam
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           
  6605                           ;psect for function _DS1307_Write
  6606  0903                     _DS1307_Write:	
  6607                           
  6608                           ;incstack = 0
  6609                           ; Regs used in _DS1307_Write: [wreg+status,2+status,0+pclath+cstack]
  6610                           ;DS1307_Write@dat stored from wreg
  6611  0903  00F2               	movwf	DS1307_Write@dat
  6612                           
  6613                           ;DS1307.c: 32: I2C_Write(dat);
  6614  0904  0872               	movf	DS1307_Write@dat,w
  6615  0905  120A  158A  2132   	fcall	_I2C_Write
  6616  0908  0008               	return
  6617  0909                     __end_of_DS1307_Write:	
  6618                           
  6619                           	psect	text32
  6620  0932                     __ptext32:	
  6621 ;; *************** function _I2C_Write *****************
  6622 ;; Defined at:
  6623 ;;		line 121 in file "i2c.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;  dat             1    wreg     unsigned char 
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  dat             1    0[COMMON] unsigned char 
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  1    wreg      void 
  6630 ;; Registers used:
  6631 ;;		wreg, status,2, status,0, pclath, cstack
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6637 ;;      Params:         0       0       0       0       0
  6638 ;;      Locals:         1       0       0       0       0
  6639 ;;      Temps:          0       0       0       0       0
  6640 ;;      Totals:         1       0       0       0       0
  6641 ;;Total ram usage:        1 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; Hardware stack levels required when called:    1
  6644 ;; This function calls:
  6645 ;;		_I2C_Wait
  6646 ;; This function is called by:
  6647 ;;		_DS1307_Write
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           
  6652                           ;psect for function _I2C_Write
  6653  0932                     _I2C_Write:	
  6654                           
  6655                           ;incstack = 0
  6656                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  6657                           ;I2C_Write@dat stored from wreg
  6658  0932  00F1               	movwf	I2C_Write@dat
  6659                           
  6660                           ;i2c.c: 123: SSPBUF = dat;
  6661  0933  0871               	movf	I2C_Write@dat,w
  6662  0934  1283               	bcf	3,5	;RP0=0, select bank0
  6663  0935  1303               	bcf	3,6	;RP1=0, select bank0
  6664  0936  0093               	movwf	19	;volatile
  6665  0937                     l100:	
  6666                           ;i2c.c: 125: ;
  6667                           
  6668                           ;i2c.c: 124: while(BF)
  6669                           
  6670  0937  1683               	bsf	3,5	;RP0=1, select bank1
  6671  0938  1303               	bcf	3,6	;RP1=0, select bank1
  6672  0939  1814               	btfsc	20,0	;volatile
  6673  093A  2937               	goto	l100
  6674                           
  6675                           ;i2c.c: 126: I2C_Wait();
  6676  093B  120A  158A  2129   	fcall	_I2C_Wait
  6677  093E  0008               	return
  6678  093F                     __end_of_I2C_Write:	
  6679                           
  6680                           	psect	text33
  6681  08FF                     __ptext33:	
  6682 ;; *************** function _DS1307_Read *****************
  6683 ;; Defined at:
  6684 ;;		line 36 in file "DS1307.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;		None
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      unsigned char 
  6691 ;; Registers used:
  6692 ;;		wreg, status,2, status,0, pclath, cstack
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6698 ;;      Params:         0       0       0       0       0
  6699 ;;      Locals:         0       0       0       0       0
  6700 ;;      Temps:          0       0       0       0       0
  6701 ;;      Totals:         0       0       0       0       0
  6702 ;;Total ram usage:        0 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    2
  6705 ;; This function calls:
  6706 ;;		_I2C_Read
  6707 ;; This function is called by:
  6708 ;;		_DS1307_Init
  6709 ;;		_DS1307_GetTime
  6710 ;;		_DS1307_GetDate
  6711 ;;		_DS1307_readRam
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           
  6716                           ;psect for function _DS1307_Read
  6717  08FF                     _DS1307_Read:	
  6718                           
  6719                           ;DS1307.c: 38: return I2C_Read();
  6720                           
  6721                           ;incstack = 0
  6722                           ; Regs used in _DS1307_Read: [wreg+status,2+status,0+pclath+cstack]
  6723  08FF  120A  158A  214D   	fcall	_I2C_Read
  6724  0902  0008               	return
  6725  0903                     __end_of_DS1307_Read:	
  6726                           
  6727                           	psect	text34
  6728  094D                     __ptext34:	
  6729 ;; *************** function _I2C_Read *****************
  6730 ;; Defined at:
  6731 ;;		line 129 in file "i2c.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;		None
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;  temp            1    1[COMMON] unsigned char 
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  1    wreg      unsigned char 
  6738 ;; Registers used:
  6739 ;;		wreg, status,2, status,0, pclath, cstack
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6745 ;;      Params:         0       0       0       0       0
  6746 ;;      Locals:         1       0       0       0       0
  6747 ;;      Temps:          1       0       0       0       0
  6748 ;;      Totals:         2       0       0       0       0
  6749 ;;Total ram usage:        2 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    1
  6752 ;; This function calls:
  6753 ;;		_I2C_Wait
  6754 ;; This function is called by:
  6755 ;;		_DS1307_Read
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           
  6760                           ;psect for function _I2C_Read
  6761  094D                     _I2C_Read:	
  6762                           
  6763                           ;i2c.c: 131: unsigned char temp;
  6764                           ;i2c.c: 133: RCEN = 1;
  6765                           
  6766                           ;incstack = 0
  6767                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
  6768  094D  1683               	bsf	3,5	;RP0=1, select bank1
  6769  094E  1303               	bcf	3,6	;RP1=0, select bank1
  6770  094F  1591               	bsf	17,3	;volatile
  6771  0950                     l106:	
  6772                           ;i2c.c: 135: ;
  6773                           
  6774                           ;i2c.c: 134: while(!BF)
  6775                           
  6776  0950  1C14               	btfss	20,0	;volatile
  6777  0951  2950               	goto	l106
  6778                           
  6779                           ;i2c.c: 136: temp = SSPBUF;
  6780  0952  1283               	bcf	3,5	;RP0=0, select bank0
  6781  0953  1303               	bcf	3,6	;RP1=0, select bank0
  6782  0954  0813               	movf	19,w	;volatile
  6783  0955  00F1               	movwf	??_I2C_Read
  6784  0956  0871               	movf	??_I2C_Read,w
  6785  0957  00F2               	movwf	I2C_Read@temp
  6786                           
  6787                           ;i2c.c: 137: I2C_Wait();
  6788  0958  120A  158A  2129   	fcall	_I2C_Wait
  6789                           
  6790                           ;i2c.c: 138: return temp;
  6791  095B  0872               	movf	I2C_Read@temp,w
  6792  095C  0008               	return
  6793  095D                     __end_of_I2C_Read:	
  6794                           
  6795                           	psect	text35
  6796  0929                     __ptext35:	
  6797 ;; *************** function _I2C_Wait *****************
  6798 ;; Defined at:
  6799 ;;		line 164 in file "i2c.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;		None
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6813 ;;      Params:         0       0       0       0       0
  6814 ;;      Locals:         0       0       0       0       0
  6815 ;;      Temps:          0       0       0       0       0
  6816 ;;      Totals:         0       0       0       0       0
  6817 ;;Total ram usage:        0 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; This function calls:
  6820 ;;		Nothing
  6821 ;; This function is called by:
  6822 ;;		_I2C_Write
  6823 ;;		_I2C_Read
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           
  6828                           ;psect for function _I2C_Wait
  6829  0929                     _I2C_Wait:	
  6830  0929                     l1874:	
  6831                           ;i2c.c: 167: ;
  6832                           
  6833                           ;i2c.c: 166: while ((SSPCON2 & 0x1F ) || ( SSPSTAT & 0x04 ))
  6834                           
  6835                           ;incstack = 0
  6836                           ; Regs used in _I2C_Wait: [wreg+status,2]
  6837                           
  6838  0929  1683               	bsf	3,5	;RP0=1, select bank1
  6839  092A  1303               	bcf	3,6	;RP1=0, select bank1
  6840  092B  0811               	movf	17,w	;volatile
  6841  092C  391F               	andlw	31
  6842  092D  1D03               	btfss	3,2
  6843  092E  2929               	goto	l1874
  6844  092F  1D14               	btfss	20,2	;volatile
  6845  0930  0008               	return
  6846  0931  2929               	goto	l1874
  6847  0932                     __end_of_I2C_Wait:	
  6848  007E                     btemp	set	126	;btemp
  6849  007E                     wtemp	set	126
  6850  007E                     wtemp0	set	126
  6851  0080                     wtemp1	set	128
  6852  0082                     wtemp2	set	130
  6853  0084                     wtemp3	set	132
  6854  0086                     wtemp4	set	134
  6855  0088                     wtemp5	set	136
  6856  007F                     wtemp6	set	127
  6857  007E                     ttemp	set	126
  6858  007E                     ttemp0	set	126
  6859  0081                     ttemp1	set	129
  6860  0084                     ttemp2	set	132
  6861  0087                     ttemp3	set	135
  6862  007F                     ttemp4	set	127
  6863  007E                     ltemp	set	126
  6864  007E                     ltemp0	set	126
  6865  0082                     ltemp1	set	130
  6866  0086                     ltemp2	set	134
  6867  0080                     ltemp3	set	128


Data Sizes:
    Strings     97
    Constant    67
    Data        24
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     42      72
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[5]), 
		 -> STR_9(CODE[8]), STR_8(CODE[8]), STR_7(CODE[6]), setText(CODE[5]), 
		 -> STR_6(CODE[8]), STR_5(CODE[7]), STR_4(CODE[7]), STR_3(CODE[9]), 
		 -> STR_2(CODE[4]), STR_1(CODE[17]), LCDWriteInt@str(BANK0[6]), 

    DS1307_writeRam@ptr	PTR unsigned char  size(1) Largest target is 2
		 -> runningTime(BANK0[2]), 

    DS1307_readRam@ptr	PTR unsigned char  size(1) Largest target is 2
		 -> runningTime(BANK0[2]), 

    DS1307_GetDate@y_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 

    DS1307_GetDate@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetDate@d_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetDate@n_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@n(BANK0[1]), 

    DS1307_GetTime@h_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetTime@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetTime@s_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_LCDGotoXY
    _main->_LCDInit
    _main->___wmul
    _showClock->_LCDGotoXY
    _showRunningTime->_LCDGotoXY
    _readClock->___wmul
    _DS1307_writeRam->_DS1307_Write
    _DS1307_GetTime->_DS1307_Write
    _DS1307_GetDate->_DS1307_Write
    _doMenu->_LCDGotoXY
    _showDate->___wmul
    _LCDWriteInt->___wmul
    ___wmul->___awdiv
    _DS1307_SetTime->_DS1307_Write
    _DS1307_SetDate->_DS1307_Write
    _clearPrompt->_LCDGotoXY
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _DS1307_readRam->_DS1307_Write
    _DS1307_Init->_DS1307_Write
    _DS1307_Write->_I2C_Write
    _DS1307_Read->_I2C_Read

Critical Paths under _main in BANK0

    _main->_doMenu
    _showClock->_showDate
    _showClock->_showRunningTime
    _showRunningTime->_LCDWriteInt
    _readClock->___wmul
    _doMenu->_showDate
    _showTime->_LCDWriteInt
    _showDate->_LCDWriteInt
    _LCDWriteInt->_LCDWriteString
    _LCDWriteInt->___wmul
    _clearPrompt->_LCDGotoXY
    _clearPrompt->_LCDWriteString

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   95197
                                             39 BANK0      3     3      0
                        _DS1307_Init
                     _DS1307_readRam
                           _I2C_Init
                            _LCDByte
                          _LCDGotoXY
                            _LCDInit
                        _LCDWriteInt
                     _LCDWriteString
                             ___wmul
                        _clearPrompt
                             _doMenu
                          _readClock
                         _readInputs
                          _showClock
 ---------------------------------------------------------------------------------
 (1) _showClock                                            0     0      0   37357
                          _LCDGotoXY
                           _showDate
                    _showRunningTime
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showRunningTime                                      3     3      0   15011
                                             19 BANK0      3     3      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _readClock                                            7     7      0    4983
                                              2 BANK0      7     7      0
                     _DS1307_GetDate
                     _DS1307_GetTime
                    _DS1307_writeRam
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _DS1307_writeRam                                      7     3      4     244
                                              2 COMMON     7     3      4
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetTime                                       4     2      2     266
                                              2 COMMON     4     2      2
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetDate                                       5     2      3     341
                                              2 COMMON     5     2      3
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _doMenu                                              17    17      0   30378
                                             22 BANK0     17    17      0
                     _DS1307_SetDate
                     _DS1307_SetTime
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            ___awdiv
                            ___awmod
                         _readInputs
                           _showDate
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showTime                                             1     1      0    9171
                                             19 BANK0      1     1      0
                            _LCDByte
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (2) _showDate                                             3     3      0   10710
                                             19 BANK0      3     3      0
                            _LCDByte
                        _LCDWriteInt
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _LCDWriteInt                                         17    14      3    7836
                                              2 BANK0     17    14      3
                     _LCDWriteString
                            ___awdiv
                            ___awmod (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1470
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    2208
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _readInputs                                           4     4      0      23
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1144
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetTime                                       3     1      2     216
                                              2 COMMON     3     1      2
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetDate                                       4     1      3     291
                                              2 COMMON     4     1      3
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _clearPrompt                                          0     0      0    4958
                          _LCDGotoXY
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (4) _LCDWriteString                                       2     0      2    2493
                                              0 BANK0      2     0      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDGotoXY                                            3     2      1    2465
                                             12 COMMON     1     0      1
                                              0 BANK0      2     2      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1474
                                             12 COMMON     1     1      0
                                              0 BANK0      2     2      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDByte                                              7     6      1    1335
                                              5 COMMON     7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (6) _LCDBusyLoop                                          5     5      0     117
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS1307_readRam                                       7     3      4     289
                                              2 COMMON     7     3      4
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS1307_Init                                          2     2      0     136
                                              2 COMMON     2     2      0
                        _DS1307_Read
                       _DS1307_Write
                          _I2C_NoAck
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DS1307_Write                                         1     1      0      44
                                              1 COMMON     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            1     1      0      22
                                              0 COMMON     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _DS1307_Read                                          0     0      0      23
                           _I2C_Read
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             2     2      0      23
                                              0 COMMON     2     2      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1307_Init
     _DS1307_Read
       _I2C_Read
         _I2C_Wait
     _DS1307_Write
       _I2C_Write
         _I2C_Wait
     _I2C_NoAck
     _I2C_Restart
     _I2C_Start
     _I2C_Stop
   _DS1307_readRam
     _DS1307_Read
       _I2C_Read
         _I2C_Wait
     _DS1307_Write
       _I2C_Write
         _I2C_Wait
     _I2C_Ack
     _I2C_NoAck
     _I2C_Restart
     _I2C_Start
     _I2C_Stop
   _I2C_Init
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   ___wmul
     ___awdiv (ARG)
   _clearPrompt
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _doMenu
     _DS1307_SetDate
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Start
       _I2C_Stop
     _DS1307_SetTime
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Start
       _I2C_Stop
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     ___awdiv
     ___awmod
     _readInputs
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _readClock
     _DS1307_GetDate
       _DS1307_Read
         _I2C_Read
           _I2C_Wait
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Ack
       _I2C_NoAck
       _I2C_Restart
       _I2C_Start
       _I2C_Stop
     _DS1307_GetTime
       _DS1307_Read
         _I2C_Read
           _I2C_Wait
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Ack
       _I2C_NoAck
       _I2C_Restart
       _I2C_Start
       _I2C_Stop
     _DS1307_writeRam
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Start
       _I2C_Stop
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _readInputs
   _showClock
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     _showRunningTime
       _LCDByte
         _LCDBusyLoop
       _LCDGotoXY
         _LCDByte
           _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___awdiv
       ___awmod
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      48       5       90.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      D       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      55      12        0.0%
ABS                  0      0      55       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon May 23 07:40:48 2016

            ?_LCDBusyLoop 0071        __size_of_I2C_NoAck 0007                         pc 0002  
      __size_of_I2C_Start 0006               __CFG_CP$OFF 0000        __size_of_I2C_Write 000D  
                      _BF 04A0                        l94 0918                        l88 0912  
            ___awdiv@sign 0077                        fsr 0004       ___wmul@multiplicand 007C  
             __CFG_LVP$ON 0000                       l100 0937                       l112 0926  
                     l106 0950                       l124 090C                       l118 091F  
                     l154 0BCA                       l314 0357                       l155 0BCD  
                     l326 03B3                       l191 09DE                       l192 09C7  
                     l512 0A1A                       l338 041C                       l380 0648  
                     l356 0571                       l287 0252                       l392 06BF  
                     l368 05D0                       _RB1 0031                       _RB2 0032  
                     _RB4 0034                       _RB5 0035                       _RD2 0042  
                     _RD3 0043                       _PEN 048A              __CFG_CPD$OFF 0000  
                     _SEN 0488               __CFG_WRT$ON 0000                       _day 0052  
         __end_of_I2C_Ack 0929                       fsr0 0004                       indf 0000  
            ___awmod@sign 0077              __CFG_FOSC$XT 0000              _DS1307_Write 0903  
    __size_of_I2C_Restart 0006   LCDWriteInt@field_length 0024           __end_of_LCDByte 0C01  
         __end_of_LCDInit 0B2A              ?_LCDWriteInt 0022               LCDByte@temp 007C  
                    l2020 0F17                      l2110 0B99                      l2104 0B7D  
                    l2032 0F53                      l2106 0B8B                      l2114 0BA4  
                    l2210 0AEB                      l2044 0F8F                      l2118 0BAC  
                    l2222 0A9A                      l2062 0FD9                      l2080 09D0  
                    l2056 0FCB                      l2208 0ACB                      l2314 0CC1  
                    l2074 09C9                      l2316 0CE3                      l2076 09CB  
                    l2092 0B70                      l2068 0FF5                      l2412 02FF  
                    l2406 02ED                      l2096 0B77                      l2440 0363  
                    l2408 02F8                      l2602 05AD                      l2522 0454  
                    l2506 0426                      l2514 03FA                      l2450 036F  
                    l2530 050C                      l2604 05F4                      l2516 043C  
                    l2508 0428                      l2630 0661                      l2606 05F9  
                    l2534 0513                      l2438 0361                      l2446 0335  
                    l2640 067A                      l2528 0501                      l2472 03BD  
                    l2480 0391                      l2448 036A                      l2720 02A4  
                    l2570 0586                      l2562 057F                      l2482 03D3  
                    l2474 03BF                      l2386 0179                      l1836 0D60  
                    l1932 0A10                      l2636 061B                      l2572 058B  
                    l2484 03D8                      l2732 0245                      l2670 069C  
                    l2638 0675                      l2742 025D                      l1928 09E5  
                    l1952 0D06                      l2680 0701                      l2672 06E1  
                    l2664 06CD                      l2568 054D                      l2752 0295  
                    l2728 023F                      l1874 0929                      l1970 0D27  
                    l1980 0D48                      l2684 07DF                      l2596 05E0  
                    l2756 02E7                      l1958 0D11                      l1984 0D50  
                    l1976 0D3D                      l1968 0D19                      STR_1 0853  
                    STR_2 08B0                      STR_3 0864                      STR_4 0885  
                    STR_5 088C                      STR_6 086D                      STR_7 08A5  
                    STR_8 087D                      STR_9 0875                      u2115 0417  
                    u2045 03AE                      u1335 0D68                      u1415 0BD3  
                    u1345 0D74                      u1425 0BEB                      u2305 05CA  
                    u1355 0D8A                      u2235 056A                      u2165 0442  
                    u1535 0D1C                      u2175 044A                      u2505 06EF  
                    u2185 0452                      u1395 0BB5                      u1555 0D28  
                    u1475 0A1B                      u2515 06F7                      u1805 0B91  
                    u1565 0D34                      u1485 0A22                      u2525 06FF  
                    u2445 06B9                      u1815 0B9A                      u1575 0D3E  
                    u1735 0FED                      u2375 0640                      u1905 00E2  
                    u2707 0AF6                      u1915 017F                      u1845 0ADB  
                    u2645 02E5                      u2495 06E7                      u1785 0B80  
                    u2657 01FB                      u1875 0AA6                      u2667 020A  
                    u2677 0219                      u1895 0CD1                      u1975 0352  
                    u2687 0228                      u2697 0A90                      _RCEN 048B  
                    _RSEN 0489                      _date 0050                      _main 0197  
                    _hour 0054        __size_of_LCDGotoXY 0026          __end_of_I2C_Init 094D  
        __end_of_I2C_Read 095D                      _year 005E                      btemp 007E  
        __end_of_I2C_Wait 0932               _runningTime 0066          __end_of_I2C_Stop 091B  
                    ltemp 007E                      start 0001                      ttemp 007E  
                    wtemp 007E          DS1307_SetDate@dd 0073          DS1307_SetDate@mm 0074  
        DS1307_SetDate@nn 0076          DS1307_SetDate@yy 0075         ??_DS1307_writeRam 0077  
                   ?_main 0071                     _ACKEN 048C                     _ACKDT 048D  
         __end_of___awdiv 0D55                     STR_10 08AB                     STR_11 089F  
                   STR_12 0899                     STR_13 0893             __CFG_WDTE$OFF 0000  
         __end_of___awmod 0BB1              LCDInit@style 007D           ___awdiv@divisor 0071  
         ___awdiv@counter 0076                     _PORTD 0008                     _TRISD 0088  
           __CFG_PWRTE$ON 0000          DS1307_SetTime@hh 0075          DS1307_SetTime@mm 0073  
        DS1307_SetTime@ss 0074            _DS1307_GetDate 0DB2            _DS1307_GetTime 0C52  
       __end_of_I2C_NoAck 0922                     _month 0058                     _state 0065  
       __end_of_I2C_Start 0915           __end_of_setText 0853         __end_of_I2C_Write 093F  
          __CFG_BOREN$OFF 0000                     pclath 000A                     ltemp0 007E  
                   ltemp1 0082                     ltemp2 0086                     ltemp3 0080  
          _DS1307_SetDate 0A5B            _DS1307_SetTime 0A33                     ttemp0 007E  
                   ttemp1 0081                     ttemp2 0084                     ttemp3 0087  
                   ttemp4 007F                     status 0003                     wtemp0 007E  
                   wtemp1 0080                     wtemp2 0082                     wtemp3 0084  
                   wtemp4 0086                     wtemp5 0088                     wtemp6 007F  
         __initialization 07EA      __size_of_clearPrompt 0017              __end_of_main 02ED  
__size_of_showRunningTime 004C            _DS1307_readRam 0CA3                 ??_I2C_Ack 0071  
                  ??_main 0047         __end_of_LCDGotoXY 09E5             LCDByte@isdata 0076  
               ??_LCDByte 0077                 ??_LCDInit 0020    __end_of_DS1307_GetDate 0E13  
  __end_of_DS1307_GetTime 0CA3    __end_of_DS1307_SetDate 0A89          ___awdiv@dividend 0073  
  __end_of_DS1307_SetTime 0A5B                    _SSPADD 0093                    _TRISC3 043B  
                  _TRISC4 043C                    _SSPCON 0014                    _SSPBUF 0013  
            DS1307_Init@s 0074      DS1307_readRam@length 0075      DS1307_readRam@offset 0073  
          _LCDWriteString 09E5    __end_of_DS1307_readRam 0CFC                    ___wmul 0A0C  
               ??___awdiv 0075                    _doMenu 02ED                 ??___awmod 0075  
    __size_of_LCDBusyLoop 005D          ___awdiv@quotient 0078                    _minute 0056  
         ___awmod@divisor 0071     __end_of_daysOfTheWeek 0842           ___awmod@counter 0076  
                  _ttable 0810             _runningMinute 005A                 ?_I2C_Init 0071  
               ?_I2C_Read 0071                 ?_I2C_Wait 0071          __end_of_showDate 0EC5  
         ?_DS1307_GetDate 0073                 ?_I2C_Stop 0071              LCDWriteInt@c 0032  
        __end_of_showTime 0B66           ?_DS1307_GetTime 0073           ?_DS1307_SetDate 0073  
         ?_DS1307_SetTime 0073      __size_of_LCDWriteInt 013B   __end_of__initialization 07FC  
  __end_of_LCDWriteString 0A0C                 LCDByte@hn 0079                 LCDByte@ln 007A  
          __pcstackCOMMON 0071           ?_DS1307_readRam 0073              __pidataBANK0 0985  
       ??_showRunningTime 0033                ??_I2C_Init 0071                ??_I2C_Read 0071  
              ??_I2C_Wait 0071                ??_I2C_Stop 0071             ??_DS1307_Init 0073  
           ??_DS1307_Read 0073                __pbssBANK0 0062        __size_of_readClock 0145  
         ?_LCDWriteString 0020           _DS1307_writeRam 0AB8                __pmaintext 0197  
            I2C_Read@temp 0072                   ?___wmul 007A                   ?_doMenu 0071  
                 _I2C_Ack 0922        __size_of_showClock 0022             ??_I2C_Restart 0071  
                 _LCDByte 0BB1                   _LCDInit 0AEF                   _SSPCON2 0091  
                 _SSPSTAT 0094                __stringtab 0800                 _I2C_NoAck 091B  
               _I2C_Start 090F                 _I2C_Write 0932       __end_of_DS1307_Init 0C52  
     __end_of_DS1307_Read 0903                   _bButton 0064           _next_menu_clear 0062  
               ?_showDate 0071                 ?_showTime 0071              I2C_Write@dat 0071  
                 ___awdiv 0CFC                   ___awmod 0B66           __size_of___wmul 0027  
              _readInputs 0A89           __size_of_doMenu 04FD                   __ptext1 099D  
                 __ptext2 0006                   __ptext3 0052                   __ptext4 0AB8  
                 __ptext5 0C52                   __ptext6 0DB2                   __ptext7 02ED  
                 __ptext8 0B2A                   __ptext9 0E13         __end_of_readClock 0197  
                 doMenu@d 0041                   doMenu@h 0039                   doMenu@m 003B  
                 doMenu@n 003F                   doMenu@s 003D                   doMenu@y 0045  
        ___awmod@dividend 0073                   _seconds 005C                   _setText 084E  
               _LCDGotoXY 09BF       __end_of_I2C_Restart 090F   __end_of_DS1307_writeRam 0AEF  
    end_of_initialization 07FC         __end_of_monthDays 084E                ?_I2C_NoAck 0071  
              ?_I2C_Start 0071         __end_of_showClock 09BF             ??_clearPrompt 007E  
              ?_I2C_Write 0071                ??_showDate 0033                ??_showTime 0033  
   LCDWriteInt@characters 0028          ??_DS1307_GetDate 0076          ??_DS1307_GetTime 0075  
       LCDWriteString@msg 0020          ??_DS1307_SetDate 0076          ??_DS1307_SetTime 0075  
               _TRISBbits 0086                 _TRISDbits 0088                ?_LCDGotoXY 007D  
       __size_of_I2C_Init 000E         __size_of_I2C_Read 0010         __size_of_I2C_Wait 0009  
       __size_of_I2C_Stop 0006               _DS1307_Init 0C01               _DS1307_Read 08FF  
     _showRunningTime$738 0034                LCDGotoXY@x 0021                LCDGotoXY@y 007D  
        ??_DS1307_readRam 0077           _showRunningTime 0006             ??_LCDBusyLoop 0071  
             ?_readInputs 0071       __end_of_clearPrompt 0985            __end_of___wmul 0A33  
          __end_of_doMenu 07EA            __end_of_ttable 082C               _I2C_Restart 0909  
     start_initialization 07EA             ?_DS1307_Write 0071             ??_LCDWriteInt 0025  
        ??_LCDWriteString 007D          ?_DS1307_writeRam 0073               ??_I2C_NoAck 0071  
              readClock@a 0026                readClock@b 0027                readClock@c 0028  
              readClock@n 0025               ??_I2C_Start 0071               ??_I2C_Write 0071  
         DS1307_Write@dat 0072                  ??___wmul 007E                  ??_doMenu 0036  
              init_fetch0 095D               __pdataBANK0 004A                  ?_I2C_Ack 0071  
     __end_of_LCDBusyLoop 0DB2                  ?_LCDByte 0076                  ?_LCDInit 0071  
          ??_DS1307_Write 0072                  LCDByte@c 007B                 ___latbits 0002  
           __pcstackBANK0 0020               ??_LCDGotoXY 0020              _menuFunction 0061  
     __size_of_readInputs 002F         DS1307_readRam@ptr 0079   __end_of_showRunningTime 0052  
        LCDWriteInt@F1142 004A       __end_of_LCDWriteInt 1000               _clearPrompt 096E  
                ?___awdiv 0071                  ?___awmod 0071         __size_of_showDate 00B2  
       __size_of_showTime 003C                 __pstrings 0800             _daysOfTheWeek 082C  
                _I2C_Init 093F                  _I2C_Read 094D                  _I2C_Wait 0929  
                _I2C_Stop 0915                 _readClock 0052           LCDBusyLoop@busy 0073  
         LCDBusyLoop@temp 0074                 _last_hour 0060            ___wmul@product 0020  
               _monthDays 0842                 _showClock 099D               _LCDBusyLoop 0D55  
        __size_of_I2C_Ack 0007               __stringbase 080F         ___wmul@multiplier 007A  
        __size_of_LCDByte 0050          __size_of_LCDInit 003B                ?_readClock 0071  
             _LCDWriteInt 0EC5     DS1307_writeRam@length 0075     DS1307_writeRam@offset 0073  
            ?_DS1307_Init 0071              ?_DS1307_Read 0071               doMenu@m_310 0043  
        ?_showRunningTime 0071      __end_of_DS1307_Write 0909                ?_showClock 0071  
            ??_readInputs 0071          __size_of___awdiv 0059          __size_of___awmod 004B  
       LCDBusyLoop@status 0075        __end_of__stringtab 0810              ?_I2C_Restart 0071  
     DS1307_GetDate@d_ptr 0073       DS1307_GetDate@m_ptr 0074       DS1307_GetDate@n_ptr 0077  
     DS1307_GetDate@y_ptr 0075           LCDWriteInt@from 0030                  __ptext10 0EC5  
                __ptext11 0A0C                  __ptext20 0AEF                  __ptext12 0CFC  
                __ptext21 0BB1                  __ptext13 0A89                  __ptext30 091B  
                __ptext22 0D55                  __ptext14 0B66                  __ptext31 0903  
                __ptext23 093F                  __ptext15 0A33                  __ptext32 0932  
                __ptext24 0CA3                  __ptext16 0A5B                  __ptext33 08FF  
                __ptext25 0922                  __ptext17 096E                  __ptext34 094D  
                __ptext26 0C01                  __ptext18 09E5                  __ptext35 0929  
                __ptext27 0915                  __ptext19 09BF                  __ptext28 090F  
                __ptext29 0909        DS1307_writeRam@ptr 0079        __end_of_readInputs 0AB8  
           __size_of_main 0156                 showDate@d 0034                  _showDate 0E13  
                _showTime 0B2A               ??_readClock 0022                  init_ram0 0961  
 __size_of_DS1307_GetDate 0061   __size_of_DS1307_GetTime 0051   __size_of_DS1307_SetDate 002E  
          LCDWriteInt@val 0022            LCDWriteInt@str 002A   __size_of_DS1307_SetTime 0028  
            ?_clearPrompt 0071                 stringcode 080A  __size_of_DS1307_writeRam 0037  
             ??_showClock 007E   __size_of_DS1307_readRam 0059                  stringdir 080A  
                stringtab 0800     __size_of_DS1307_Write 0006       DS1307_GetTime@h_ptr 0076  
     DS1307_GetTime@m_ptr 0073       DS1307_GetTime@s_ptr 0074      __size_of_DS1307_Init 0051  
    __size_of_DS1307_Read 0004        readInputs@pinstate 0074   __size_of_LCDWriteString 0027  
