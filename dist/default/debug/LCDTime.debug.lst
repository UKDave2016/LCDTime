

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue May 10 17:10:59 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	dabs	1,0x7E,2
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  0008                     	;# 
    55  0009                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000D                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0013                     	;# 
    67  0014                     	;# 
    68  0015                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0017                     	;# 
    72  0018                     	;# 
    73  0019                     	;# 
    74  001A                     	;# 
    75  001B                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0087                     	;# 
    85  0088                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  010F                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  0087                     	;# 
   143  0088                     	;# 
   144  0089                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010F                     	;# 
   160  018C                     	;# 
   161  018D                     	;# 
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  000E                     	;# 
   178  000F                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0013                     	;# 
   183  0014                     	;# 
   184  0015                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001D                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  0081                     	;# 
   198  0085                     	;# 
   199  0086                     	;# 
   200  0087                     	;# 
   201  0088                     	;# 
   202  0089                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  010C                     	;# 
   273  010D                     	;# 
   274  010E                     	;# 
   275  010F                     	;# 
   276  018C                     	;# 
   277  018D                     	;# 
   278                           
   279                           	psect	idataBANK0
   280  0B7E                     __pidataBANK0:	
   281                           
   282                           ;initializer for _date
   283  0B7E  3408               	retlw	8
   284  0B7F  3400               	retlw	0
   285                           
   286                           ;initializer for _day
   287  0B80  3401               	retlw	1
   288  0B81  3400               	retlw	0
   289                           
   290                           ;initializer for _hour
   291  0B82  3406               	retlw	6
   292  0B83  3400               	retlw	0
   293                           
   294                           ;initializer for _minute
   295  0B84  3405               	retlw	5
   296  0B85  3400               	retlw	0
   297                           
   298                           ;initializer for _month
   299  0B86  3405               	retlw	5
   300  0B87  3400               	retlw	0
   301                           
   302                           ;initializer for _seconds
   303  0B88  3404               	retlw	4
   304  0B89  3400               	retlw	0
   305                           
   306                           ;initializer for _year
   307  0B8A  3410               	retlw	16
   308  0B8B  3400               	retlw	0
   309                           
   310                           ;initializer for _last_hour
   311  0B8C  34EE               	retlw	238
   312                           
   313                           	psect	strings
   314  0003                     __pstrings:	
   315  0003                     stringtab:	
   316  0003                     __stringtab:	
   317  0003                     stringcode:	
   318                           ;	String table - string pointers are 1 byte each
   319                           
   320  0003                     stringdir:	
   321  0003  3000               	movlw	high stringdir
   322  0004  008A               	movwf	10
   323  0005  0804               	movf	4,w
   324  0006  0A84               	incf	4,f
   325  0007  0782               	addwf	2,f
   326  0008                     __stringbase:	
   327  0008  3400               	retlw	0
   328  0009                     __end_of__stringtab:	
   329  0009                     _ttable:	
   330  0009  3400               	retlw	0
   331  000A  3402               	retlw	2
   332  000B  3404               	retlw	4
   333  000C  3400               	retlw	0
   334  000D  3403               	retlw	3
   335  000E  3400               	retlw	0
   336  000F  3401               	retlw	1
   337  0010  3410               	retlw	16
   338  0011  3403               	retlw	3
   339  0012  3402               	retlw	2
   340  0013  3400               	retlw	0
   341  0014  3400               	retlw	0
   342  0015  3403               	retlw	3
   343  0016  3402               	retlw	2
   344  0017  3401               	retlw	1
   345  0018  3400               	retlw	0
   346  0019  3406               	retlw	6
   347  001A  3400               	retlw	0
   348  001B  3404               	retlw	4
   349  001C  3400               	retlw	0
   350  001D  3406               	retlw	6
   351  001E  3405               	retlw	5
   352  001F  3400               	retlw	0
   353  0020  3420               	retlw	32
   354  0021  3406               	retlw	6
   355  0022  3405               	retlw	5
   356  0023  3404               	retlw	4
   357  0024  3400               	retlw	0
   358  0025                     __end_of_ttable:	
   359  0025                     _monthDays:	
   360  0025  341F               	retlw	31
   361  0026  341D               	retlw	29
   362  0027  341F               	retlw	31
   363  0028  341E               	retlw	30
   364  0029  341F               	retlw	31
   365  002A  341E               	retlw	30
   366  002B  341F               	retlw	31
   367  002C  341F               	retlw	31
   368  002D  341E               	retlw	30
   369  002E  341F               	retlw	31
   370  002F  341E               	retlw	30
   371  0030  341F               	retlw	31
   372  0031                     __end_of_monthDays:	
   373  0008                     _PORTD	set	8
   374  0031                     _RB1	set	49
   375  0032                     _RB2	set	50
   376  0034                     _RB4	set	52
   377  0035                     _RB5	set	53
   378  0036                     _RB6	set	54
   379  0037                     _RB7	set	55
   380  0038                     _RC0	set	56
   381  0039                     _RC1	set	57
   382  003A                     _RC2	set	58
   383  0040                     _RD0	set	64
   384  0041                     _RD1	set	65
   385  0086                     _TRISBbits	set	134
   386  0088                     _TRISD	set	136
   387  0438                     _TRISC0	set	1080
   388  0439                     _TRISC1	set	1081
   389  043A                     _TRISC2	set	1082
   390  0440                     _TRISD0	set	1088
   391  0441                     _TRISD1	set	1089
   392  0031                     STR_3:	
   393  0031  3453               	retlw	83	;'S'
   394  0032  3465               	retlw	101	;'e'
   395  0033  3474               	retlw	116	;'t'
   396  0034  3420               	retlw	32	;' '
   397  0035  3453               	retlw	83	;'S'
   398  0036  3465               	retlw	101	;'e'
   399  0037  3463               	retlw	99	;'c'
   400  0038  346F               	retlw	111	;'o'
   401  0039  346E               	retlw	110	;'n'
   402  003A  3464               	retlw	100	;'d'
   403  003B  3473               	retlw	115	;'s'
   404  003C  3400               	retlw	0
   405  003D                     STR_2:	
   406  003D  3453               	retlw	83	;'S'
   407  003E  3465               	retlw	101	;'e'
   408  003F  3474               	retlw	116	;'t'
   409  0040  3420               	retlw	32	;' '
   410  0041  344D               	retlw	77	;'M'
   411  0042  3469               	retlw	105	;'i'
   412  0043  346E               	retlw	110	;'n'
   413  0044  3475               	retlw	117	;'u'
   414  0045  3474               	retlw	116	;'t'
   415  0046  3465               	retlw	101	;'e'
   416  0047  3473               	retlw	115	;'s'
   417  0048  3400               	retlw	0
   418  0049                     STR_7:	
   419  0049  3453               	retlw	83	;'S'
   420  004A  3465               	retlw	101	;'e'
   421  004B  3474               	retlw	116	;'t'
   422  004C  3420               	retlw	32	;' '
   423  004D  3444               	retlw	68	;'D'
   424  004E  3461               	retlw	97	;'a'
   425  004F  3479               	retlw	121	;'y'
   426  0050  3420               	retlw	32	;' '
   427  0051  3420               	retlw	32	;' '
   428  0052  3400               	retlw	0
   429  0053                     STR_6:	
   430  0053  3453               	retlw	83	;'S'
   431  0054  3465               	retlw	101	;'e'
   432  0055  3474               	retlw	116	;'t'
   433  0056  3420               	retlw	32	;' '
   434  0057  3444               	retlw	68	;'D'
   435  0058  3461               	retlw	97	;'a'
   436  0059  3474               	retlw	116	;'t'
   437  005A  3465               	retlw	101	;'e'
   438  005B  3420               	retlw	32	;' '
   439  005C  3400               	retlw	0
   440  005D                     STR_5:	
   441  005D  3453               	retlw	83	;'S'
   442  005E  3465               	retlw	101	;'e'
   443  005F  3474               	retlw	116	;'t'
   444  0060  3420               	retlw	32	;' '
   445  0061  344D               	retlw	77	;'M'
   446  0062  346F               	retlw	111	;'o'
   447  0063  346E               	retlw	110	;'n'
   448  0064  3474               	retlw	116	;'t'
   449  0065  3468               	retlw	104	;'h'
   450  0066  3400               	retlw	0
   451  0067                     STR_1:	
   452  0067  3453               	retlw	83	;'S'
   453  0068  3465               	retlw	101	;'e'
   454  0069  3474               	retlw	116	;'t'
   455  006A  3420               	retlw	32	;' '
   456  006B  3448               	retlw	72	;'H'
   457  006C  346F               	retlw	111	;'o'
   458  006D  3475               	retlw	117	;'u'
   459  006E  3472               	retlw	114	;'r'
   460  006F  3473               	retlw	115	;'s'
   461  0070  3400               	retlw	0
   462  0071                     STR_4:	
   463  0071  3453               	retlw	83	;'S'
   464  0072  3465               	retlw	101	;'e'
   465  0073  3474               	retlw	116	;'t'
   466  0074  3420               	retlw	32	;' '
   467  0075  3459               	retlw	89	;'Y'
   468  0076  3465               	retlw	101	;'e'
   469  0077  3461               	retlw	97	;'a'
   470  0078  3472               	retlw	114	;'r'
   471  0079  3400               	retlw	0
   472  007A                     STR_10:	
   473  007A  3457               	retlw	87	;'W'
   474  007B  3465               	retlw	101	;'e'
   475  007C  3464               	retlw	100	;'d'
   476  007D  3400               	retlw	0
   477  007E                     STR_9:	
   478  007E  3454               	retlw	84	;'T'
   479  007F  3475               	retlw	117	;'u'
   480  0080  3465               	retlw	101	;'e'
   481  0081  3400               	retlw	0
   482  0082                     STR_12:	
   483  0082  3446               	retlw	70	;'F'
   484  0083  3472               	retlw	114	;'r'
   485  0084  3469               	retlw	105	;'i'
   486  0085  3400               	retlw	0
   487  0086                     STR_8:	
   488  0086  344D               	retlw	77	;'M'
   489  0087  346F               	retlw	111	;'o'
   490  0088  346E               	retlw	110	;'n'
   491  0089  3400               	retlw	0
   492  008A                     STR_14:	
   493  008A  3453               	retlw	83	;'S'
   494  008B  3475               	retlw	117	;'u'
   495  008C  346E               	retlw	110	;'n'
   496  008D  3400               	retlw	0
   497  008E                     STR_13:	
   498  008E  3453               	retlw	83	;'S'
   499  008F  3461               	retlw	97	;'a'
   500  0090  3474               	retlw	116	;'t'
   501  0091  3400               	retlw	0
   502  0092                     STR_11:	
   503  0092  3454               	retlw	84	;'T'
   504  0093  3468               	retlw	104	;'h'
   505  0094  3475               	retlw	117	;'u'
   506  0095  3400               	retlw	0
   507                           
   508                           ; #config settings
   509  0000                     
   510                           	psect	cinit
   511  07ED                     start_initialization:	
   512  07ED                     __initialization:	
   513                           
   514                           ; Clear objects allocated to BANK0
   515  07ED  01CB               	clrf	__pbssBANK0& (0+127)
   516  07EE  01CC               	clrf	(__pbssBANK0+1)& (0+127)
   517  07EF  01CD               	clrf	(__pbssBANK0+2)& (0+127)
   518                           
   519                           ; Initialize objects allocated to BANK0
   520  07F0  1383               	bcf	3,7	;select IRP bank0
   521  07F1  304B               	movlw	low (__pdataBANK0+15)
   522  07F2  00FD               	movwf	btemp+-1
   523  07F3  300B               	movlw	high __pidataBANK0
   524  07F4  00FE               	movwf	btemp
   525  07F5  307E               	movlw	low __pidataBANK0
   526  07F6  00FF               	movwf	btemp+1
   527  07F7  303C               	movlw	low __pdataBANK0
   528  07F8  0084               	movwf	4
   529  07F9  120A  158A  23C2   	fcall	init_ram0
   530  07FC                     end_of_initialization:	
   531                           ;End of C runtime variable initialization code
   532                           
   533  07FC                     __end_of__initialization:	
   534  07FC  0183               	clrf	3
   535  07FD  120A  118A  2899   	ljmp	_main	;jump to C main() function
   536                           
   537                           	psect	bssBANK0
   538  004B                     __pbssBANK0:	
   539  004B                     _bButton:	
   540  004B                     	ds	1
   541  004C                     _menuFunction:	
   542  004C                     	ds	1
   543  004D                     _state:	
   544  004D                     	ds	1
   545                           
   546                           	psect	dataBANK0
   547  003C                     __pdataBANK0:	
   548  003C                     _date:	
   549  003C                     	ds	2
   550  003E                     _day:	
   551  003E                     	ds	2
   552  0040                     _hour:	
   553  0040                     	ds	2
   554  0042                     _minute:	
   555  0042                     	ds	2
   556  0044                     _month:	
   557  0044                     	ds	2
   558  0046                     _seconds:	
   559  0046                     	ds	2
   560  0048                     _year:	
   561  0048                     	ds	2
   562  004A                     _last_hour:	
   563  004A                     	ds	1
   564                           
   565                           	psect	inittext
   566  0BBE                     init_fetch0:	
   567                           ;	Called with low address in FSR and high address in W
   568                           
   569  0BBE  087E               	movf	126,w
   570  0BBF  008A               	movwf	10
   571  0BC0  087F               	movf	127,w
   572  0BC1  0082               	movwf	2
   573  0BC2                     init_ram0:	
   574                           ;Called with:
   575                           ;	high address of idata address in btemp 
   576                           ;	low address of idata address in btemp+1 
   577                           ;	low address of data in FSR
   578                           ;	high address + 1 of data in btemp-1
   579                           
   580  0BC2  23BE  120A  158A   	fcall	init_fetch0
   581  0BC5  0080               	movwf	0
   582  0BC6  0A84               	incf	4,f
   583  0BC7  0804               	movf	4,w
   584  0BC8  067D               	xorwf	125,w
   585  0BC9  1903               	btfsc	3,2
   586  0BCA  3400               	retlw	0
   587  0BCB  0AFF               	incf	127,f
   588  0BCC  1903               	btfsc	3,2
   589  0BCD  0AFE               	incf	126,f
   590  0BCE  2BC2               	goto	init_ram0
   591                           
   592                           	psect	cstackCOMMON
   593  0070                     __pcstackCOMMON:	
   594  0070                     ?_I2C_Start:	
   595  0070                     ??_I2C_Start:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_DS1307_Write:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_DS1307_Read:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_I2C_NoAck:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ??_I2C_NoAck:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_I2C_Stop:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ??_I2C_Stop:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_I2C_Write:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ??_I2C_Write:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_I2C_Clock:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ??_I2C_Clock:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_I2C_Read:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ??_I2C_Read:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_I2C_Ack:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ??_I2C_Ack:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_LCDBusyLoop:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ??_LCDBusyLoop:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ?_initLED:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_readClock:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_showClock:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ?_readInputs:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ??_readInputs:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?_doMenu:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_showTime:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ?_showDate:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_sendLED:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ?_I2C_Init:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ??_I2C_Init:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ?_LCDInit:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_LCDWriteString:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?_main:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_DS1307_Init:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ?___awdiv:	
   692                           ; 2 bytes @ 0x0
   693                           
   694  0070                     ?___awmod:	
   695                           ; 2 bytes @ 0x0
   696                           
   697  0070                     sendLED@c:	
   698                           ; 2 bytes @ 0x0
   699                           
   700  0070                     ___awdiv@divisor:	
   701                           ; 2 bytes @ 0x0
   702                           
   703  0070                     ___awmod@divisor:	
   704                           ; 2 bytes @ 0x0
   705                           
   706                           
   707                           ; 2 bytes @ 0x0
   708  0070                     	ds	2
   709  0072                     ??_sendLED:	
   710  0072                     I2C_Write@dat:	
   711                           ; 1 bytes @ 0x2
   712                           
   713  0072                     I2C_Read@i:	
   714                           ; 1 bytes @ 0x2
   715                           
   716  0072                     LCDBusyLoop@busy:	
   717                           ; 1 bytes @ 0x2
   718                           
   719  0072                     ___awdiv@dividend:	
   720                           ; 1 bytes @ 0x2
   721                           
   722  0072                     ___awmod@dividend:	
   723                           ; 2 bytes @ 0x2
   724                           
   725                           
   726                           ; 2 bytes @ 0x2
   727  0072                     	ds	1
   728  0073                     I2C_Write@i:	
   729  0073                     I2C_Read@dat:	
   730                           ; 1 bytes @ 0x3
   731                           
   732  0073                     LCDBusyLoop@temp:	
   733                           ; 1 bytes @ 0x3
   734                           
   735  0073                     readInputs@pinstate:	
   736                           ; 1 bytes @ 0x3
   737                           
   738                           
   739                           ; 1 bytes @ 0x3
   740  0073                     	ds	1
   741  0074                     ??_DS1307_Write:	
   742  0074                     ??_DS1307_Read:	
   743                           ; 1 bytes @ 0x4
   744                           
   745  0074                     ??___awdiv:	
   746                           ; 1 bytes @ 0x4
   747                           
   748  0074                     ??___awmod:	
   749                           ; 1 bytes @ 0x4
   750                           
   751  0074                     DS1307_Write@dat:	
   752                           ; 1 bytes @ 0x4
   753                           
   754  0074                     LCDBusyLoop@status:	
   755                           ; 1 bytes @ 0x4
   756                           
   757  0074                     sendLED@i:	
   758                           ; 1 bytes @ 0x4
   759                           
   760                           
   761                           ; 2 bytes @ 0x4
   762  0074                     	ds	1
   763  0075                     ??_DS1307_Init:	
   764  0075                     ?_DS1307_SetTime:	
   765                           ; 1 bytes @ 0x5
   766                           
   767  0075                     ?_DS1307_SetDate:	
   768                           ; 1 bytes @ 0x5
   769                           
   770  0075                     ?_DS1307_GetTime:	
   771                           ; 1 bytes @ 0x5
   772                           
   773  0075                     ?_DS1307_GetDate:	
   774                           ; 1 bytes @ 0x5
   775                           
   776  0075                     ?_LCDByte:	
   777                           ; 1 bytes @ 0x5
   778                           
   779  0075                     DS1307_SetTime@mm:	
   780                           ; 1 bytes @ 0x5
   781                           
   782  0075                     DS1307_SetDate@dd:	
   783                           ; 1 bytes @ 0x5
   784                           
   785  0075                     DS1307_GetTime@m_ptr:	
   786                           ; 1 bytes @ 0x5
   787                           
   788  0075                     DS1307_GetDate@d_ptr:	
   789                           ; 1 bytes @ 0x5
   790                           
   791  0075                     LCDByte@isdata:	
   792                           ; 1 bytes @ 0x5
   793                           
   794  0075                     ___awdiv@counter:	
   795                           ; 1 bytes @ 0x5
   796                           
   797  0075                     ___awmod@counter:	
   798                           ; 1 bytes @ 0x5
   799                           
   800                           
   801                           ; 1 bytes @ 0x5
   802  0075                     	ds	1
   803  0076                     ??_initLED:	
   804  0076                     ??_LCDByte:	
   805                           ; 1 bytes @ 0x6
   806                           
   807  0076                     DS1307_Init@s:	
   808                           ; 1 bytes @ 0x6
   809                           
   810  0076                     DS1307_SetTime@ss:	
   811                           ; 1 bytes @ 0x6
   812                           
   813  0076                     DS1307_SetDate@mm:	
   814                           ; 1 bytes @ 0x6
   815                           
   816  0076                     DS1307_GetTime@s_ptr:	
   817                           ; 1 bytes @ 0x6
   818                           
   819  0076                     DS1307_GetDate@m_ptr:	
   820                           ; 1 bytes @ 0x6
   821                           
   822  0076                     ___awdiv@sign:	
   823                           ; 1 bytes @ 0x6
   824                           
   825  0076                     ___awmod@sign:	
   826                           ; 1 bytes @ 0x6
   827                           
   828                           
   829                           ; 1 bytes @ 0x6
   830  0076                     	ds	1
   831  0077                     ??_DS1307_SetTime:	
   832  0077                     ??_DS1307_GetTime:	
   833                           ; 1 bytes @ 0x7
   834                           
   835  0077                     DS1307_SetTime@hh:	
   836                           ; 1 bytes @ 0x7
   837                           
   838  0077                     DS1307_SetDate@yy:	
   839                           ; 1 bytes @ 0x7
   840                           
   841  0077                     DS1307_GetDate@y_ptr:	
   842                           ; 1 bytes @ 0x7
   843                           
   844  0077                     ___awdiv@quotient:	
   845                           ; 1 bytes @ 0x7
   846                           
   847                           
   848                           ; 2 bytes @ 0x7
   849  0077                     	ds	1
   850  0078                     ??_DS1307_SetDate:	
   851  0078                     ??_DS1307_GetDate:	
   852                           ; 1 bytes @ 0x8
   853                           
   854  0078                     DS1307_SetDate@nn:	
   855                           ; 1 bytes @ 0x8
   856                           
   857  0078                     DS1307_GetTime@h_ptr:	
   858                           ; 1 bytes @ 0x8
   859                           
   860  0078                     LCDByte@hn:	
   861                           ; 1 bytes @ 0x8
   862                           
   863                           
   864                           ; 1 bytes @ 0x8
   865  0078                     	ds	1
   866  0079                     ?___wmul:	
   867  0079                     DS1307_GetDate@n_ptr:	
   868                           ; 2 bytes @ 0x9
   869                           
   870  0079                     LCDByte@ln:	
   871                           ; 1 bytes @ 0x9
   872                           
   873  0079                     ___wmul@multiplier:	
   874                           ; 1 bytes @ 0x9
   875                           
   876                           
   877                           ; 2 bytes @ 0x9
   878  0079                     	ds	1
   879  007A                     LCDByte@c:	
   880                           
   881                           ; 1 bytes @ 0xA
   882  007A                     	ds	1
   883  007B                     LCDByte@temp:	
   884  007B                     ___wmul@multiplicand:	
   885                           ; 1 bytes @ 0xB
   886                           
   887                           
   888                           ; 2 bytes @ 0xB
   889  007B                     	ds	1
   890  007C                     ??_LCDInit:	
   891  007C                     ??_LCDWriteString:	
   892                           ; 1 bytes @ 0xC
   893                           
   894  007C                     ?_LCDWriteInt:	
   895                           ; 1 bytes @ 0xC
   896                           
   897  007C                     ?_LCDGotoXY:	
   898                           ; 1 bytes @ 0xC
   899                           
   900  007C                     LCDWriteInt@field_length:	
   901                           ; 1 bytes @ 0xC
   902                           
   903  007C                     LCDGotoXY@y:	
   904                           ; 1 bytes @ 0xC
   905                           
   906                           
   907                           ; 1 bytes @ 0xC
   908  007C                     	ds	1
   909  007D                     ??_showTime:	
   910  007D                     ??_showDate:	
   911                           ; 1 bytes @ 0xD
   912                           
   913  007D                     ??_LCDGotoXY:	
   914                           ; 1 bytes @ 0xD
   915                           
   916  007D                     ??___wmul:	
   917                           ; 1 bytes @ 0xD
   918                           
   919                           
   920                           ; 1 bytes @ 0xD
   921  007D                     	ds	1
   922  007E                     ??_showClock:	
   923                           
   924                           	psect	cstackBANK0
   925  0020                     __pcstackBANK0:	
   926                           ; 1 bytes @ 0xE
   927                           
   928  0020                     ??_LCDWriteInt:	
   929  0020                     LCDInit@style:	
   930                           ; 1 bytes @ 0x0
   931                           
   932  0020                     LCDWriteString@cc:	
   933                           ; 1 bytes @ 0x0
   934                           
   935  0020                     LCDGotoXY@x:	
   936                           ; 1 bytes @ 0x0
   937                           
   938  0020                     ___wmul@product:	
   939                           ; 1 bytes @ 0x0
   940                           
   941                           
   942                           ; 2 bytes @ 0x0
   943  0020                     	ds	1
   944  0021                     LCDWriteString@msg:	
   945                           
   946                           ; 1 bytes @ 0x1
   947  0021                     	ds	1
   948  0022                     ??_readClock:	
   949                           
   950                           ; 1 bytes @ 0x2
   951  0022                     	ds	1
   952  0023                     LCDWriteInt@c:	
   953                           
   954                           ; 2 bytes @ 0x3
   955  0023                     	ds	2
   956  0025                     readClock@n:	
   957  0025                     LCDWriteInt@d:	
   958                           ; 1 bytes @ 0x5
   959                           
   960                           
   961                           ; 2 bytes @ 0x5
   962  0025                     	ds	1
   963  0026                     readClock@a:	
   964                           
   965                           ; 1 bytes @ 0x6
   966  0026                     	ds	1
   967  0027                     LCDWriteInt@val:	
   968  0027                     readClock@b:	
   969                           ; 1 bytes @ 0x7
   970                           
   971                           
   972                           ; 1 bytes @ 0x7
   973  0027                     	ds	1
   974  0028                     ??_doMenu:	
   975  0028                     readClock@c:	
   976                           ; 1 bytes @ 0x8
   977                           
   978                           
   979                           ; 1 bytes @ 0x8
   980  0028                     	ds	3
   981  002B                     doMenu@h:	
   982                           
   983                           ; 2 bytes @ 0xB
   984  002B                     	ds	2
   985  002D                     doMenu@m:	
   986                           
   987                           ; 2 bytes @ 0xD
   988  002D                     	ds	2
   989  002F                     doMenu@s:	
   990                           
   991                           ; 2 bytes @ 0xF
   992  002F                     	ds	2
   993  0031                     doMenu@n:	
   994                           
   995                           ; 2 bytes @ 0x11
   996  0031                     	ds	2
   997  0033                     doMenu@d:	
   998                           
   999                           ; 2 bytes @ 0x13
  1000  0033                     	ds	2
  1001  0035                     doMenu@m_251:	
  1002                           
  1003                           ; 2 bytes @ 0x15
  1004  0035                     	ds	2
  1005  0037                     doMenu@y:	
  1006                           
  1007                           ; 2 bytes @ 0x17
  1008  0037                     	ds	2
  1009  0039                     ??_main:	
  1010                           
  1011                           ; 1 bytes @ 0x19
  1012  0039                     	ds	3
  1013                           
  1014                           	psect	maintext
  1015  0099                     __pmaintext:	
  1016 ;;
  1017 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1018 ;;
  1019 ;; *************** function _main *****************
  1020 ;; Defined at:
  1021 ;;		line 45 in file "LCDTime.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;		None
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : B00/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1035 ;;      Params:         0       0       0       0       0
  1036 ;;      Locals:         0       0       0       0       0
  1037 ;;      Temps:          0       3       0       0       0
  1038 ;;      Totals:         0       3       0       0       0
  1039 ;;Total ram usage:        3 bytes
  1040 ;; Hardware stack levels required when called:    5
  1041 ;; This function calls:
  1042 ;;		_DS1307_Init
  1043 ;;		_I2C_Init
  1044 ;;		_LCDByte
  1045 ;;		_LCDInit
  1046 ;;		_doMenu
  1047 ;;		_initLED
  1048 ;;		_readClock
  1049 ;;		_readInputs
  1050 ;;		_showClock
  1051 ;; This function is called by:
  1052 ;;		Startup code after reset
  1053 ;; This function uses a non-reentrant model
  1054 ;;
  1055                           
  1056                           
  1057                           ;psect for function _main
  1058  0099                     _main:	
  1059                           
  1060                           ;LCDTime.c: 47: I2C_Init() ;
  1061                           
  1062                           ;incstack = 0
  1063                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1064  0099  120A  158A  2351  120A  118A  	fcall	_I2C_Init
  1065                           
  1066                           ;LCDTime.c: 48: LCDInit(0B00000000);
  1067  009E  3000               	movlw	0
  1068  009F  120A  158A  253C  120A  118A  	fcall	_LCDInit
  1069                           
  1070                           ;LCDTime.c: 49: DS1307_Init() ;
  1071  00A4  120A  158A  2604  120A  118A  	fcall	_DS1307_Init
  1072                           
  1073                           ;LCDTime.c: 51: (LCDByte(0b00000001,0));
  1074  00A9  01F5               	clrf	LCDByte@isdata
  1075  00AA  3001               	movlw	1
  1076  00AB  120A  158A  2654  120A  118A  	fcall	_LCDByte
  1077                           
  1078                           ;LCDTime.c: 53: initLED() ;
  1079  00B0  120A  158A  239D  120A  118A  	fcall	_initLED
  1080  00B5  28BB               	goto	l2455
  1081  00B6                     l2463:	
  1082                           
  1083                           ;LCDTime.c: 64: doMenu();
  1084  00B6  120A  118A  236F  120A  118A  	fcall	_doMenu
  1085  00BB                     l2455:	
  1086                           ;LCDTime.c: 55: while(1)
  1087                           
  1088                           
  1089                           ;LCDTime.c: 56: {
  1090                           ;LCDTime.c: 57: readClock();
  1091  00BB  120A  118A  2249  120A  118A  	fcall	_readClock
  1092                           
  1093                           ;LCDTime.c: 59: showClock() ;
  1094  00C0  120A  158A  23CF  120A  118A  	fcall	_showClock
  1095                           
  1096                           ;LCDTime.c: 61: readInputs() ;
  1097  00C5  120A  158A  24DA  120A  118A  	fcall	_readInputs
  1098                           
  1099                           ;LCDTime.c: 63: if (bButton)
  1100  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  1101  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  1102  00CC  084B               	movf	_bButton,w
  1103  00CD  1D03               	btfss	3,2
  1104  00CE  28B6               	goto	l2463
  1105                           
  1106                           ;LCDTime.c: 65: else
  1107                           ;LCDTime.c: 66: {
  1108                           ;LCDTime.c: 67: initLED() ;
  1109  00CF  120A  158A  239D  120A  118A  	fcall	_initLED
  1110                           
  1111                           ;LCDTime.c: 68: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1112  00D4  3004               	movlw	4
  1113  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1114  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1115  00D7  00BB               	movwf	??_main+2
  1116  00D8  30CF               	movlw	207
  1117  00D9  00BA               	movwf	??_main+1
  1118  00DA  3003               	movlw	3
  1119  00DB  00B9               	movwf	??_main
  1120  00DC                     u2337:	
  1121  00DC  0BB9               	decfsz	??_main,f
  1122  00DD  28DC               	goto	u2337
  1123  00DE  0BBA               	decfsz	??_main+1,f
  1124  00DF  28DC               	goto	u2337
  1125  00E0  0BBB               	decfsz	??_main+2,f
  1126  00E1  28DC               	goto	u2337
  1127  00E2  28E3               	nop2
  1128  00E3  28BB               	goto	l2455
  1129  00E4                     __end_of_main:	
  1130                           
  1131                           	psect	text1
  1132  0BCF                     __ptext1:	
  1133 ;; *************** function _showClock *****************
  1134 ;; Defined at:
  1135 ;;		line 381 in file "LCDTime.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      void 
  1142 ;; Registers used:
  1143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1149 ;;      Params:         0       0       0       0       0
  1150 ;;      Locals:         0       0       0       0       0
  1151 ;;      Temps:          0       0       0       0       0
  1152 ;;      Totals:         0       0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    4
  1156 ;; This function calls:
  1157 ;;		_LCDGotoXY
  1158 ;;		_showDate
  1159 ;;		_showTime
  1160 ;; This function is called by:
  1161 ;;		_main
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           
  1166                           ;psect for function _showClock
  1167  0BCF                     _showClock:	
  1168                           
  1169                           ;LCDTime.c: 383: LCDGotoXY(0,0) ;
  1170                           
  1171                           ;incstack = 0
  1172                           ; Regs used in _showClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1173  0BCF  01FC               	clrf	LCDGotoXY@y
  1174  0BD0  3000               	movlw	0
  1175  0BD1  120A  158A  240D  120A  158A  	fcall	_LCDGotoXY
  1176                           
  1177                           ;LCDTime.c: 384: showTime() ;
  1178  0BD6  120A  158A  2509  120A  158A  	fcall	_showTime
  1179                           
  1180                           ;LCDTime.c: 386: LCDGotoXY(0,1) ;
  1181  0BDB  01FC               	clrf	LCDGotoXY@y
  1182  0BDC  0AFC               	incf	LCDGotoXY@y,f
  1183  0BDD  3000               	movlw	0
  1184  0BDE  120A  158A  240D  120A  158A  	fcall	_LCDGotoXY
  1185                           
  1186                           ;LCDTime.c: 387: showDate() ;
  1187  0BE3  120A  118A  21B2   	fcall	_showDate
  1188  0BE6  0008               	return
  1189  0BE7                     __end_of_showClock:	
  1190                           
  1191                           	psect	text2
  1192  0249                     __ptext2:	
  1193 ;; *************** function _readClock *****************
  1194 ;; Defined at:
  1195 ;;		line 358 in file "LCDTime.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;  c               1    8[BANK0 ] unsigned char 
  1200 ;;  b               1    7[BANK0 ] unsigned char 
  1201 ;;  a               1    6[BANK0 ] unsigned char 
  1202 ;;  n               1    5[BANK0 ] unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1212 ;;      Params:         0       0       0       0       0
  1213 ;;      Locals:         0       4       0       0       0
  1214 ;;      Temps:          0       3       0       0       0
  1215 ;;      Totals:         0       7       0       0       0
  1216 ;;Total ram usage:        7 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    4
  1219 ;; This function calls:
  1220 ;;		_DS1307_GetDate
  1221 ;;		_DS1307_GetTime
  1222 ;;		___awdiv
  1223 ;;		___wmul
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           
  1230                           ;psect for function _readClock
  1231  0249                     _readClock:	
  1232                           
  1233                           ;LCDTime.c: 360: unsigned char a,b,c,n ;
  1234                           ;LCDTime.c: 362: DS1307_GetTime(&a,&b,&c);
  1235                           
  1236                           ;incstack = 0
  1237                           ; Regs used in _readClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1238  0249  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1239  024A  1283               	bcf	3,5	;RP0=0, select bank0
  1240  024B  1303               	bcf	3,6	;RP1=0, select bank0
  1241  024C  00A2               	movwf	??_readClock
  1242  024D  0822               	movf	??_readClock,w
  1243  024E  00F5               	movwf	DS1307_GetTime@m_ptr
  1244  024F  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1245  0250  00A3               	movwf	??_readClock+1
  1246  0251  0823               	movf	??_readClock+1,w
  1247  0252  00F6               	movwf	DS1307_GetTime@s_ptr
  1248  0253  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1249  0254  120A  158A  26F4  120A  118A  	fcall	_DS1307_GetTime
  1250                           
  1251                           ;LCDTime.c: 364: hour = (a % 16) + ((a / 16 ) * 10) ;
  1252  0259  3010               	movlw	16
  1253  025A  00F0               	movwf	___awdiv@divisor
  1254  025B  3000               	movlw	0
  1255  025C  00F1               	movwf	___awdiv@divisor+1
  1256  025D  1283               	bcf	3,5	;RP0=0, select bank0
  1257  025E  1303               	bcf	3,6	;RP1=0, select bank0
  1258  025F  0826               	movf	readClock@a,w
  1259  0260  00A2               	movwf	??_readClock
  1260  0261  01A3               	clrf	??_readClock+1
  1261  0262  0822               	movf	??_readClock,w
  1262  0263  00F2               	movwf	___awdiv@dividend
  1263  0264  0823               	movf	??_readClock+1,w
  1264  0265  00F3               	movwf	___awdiv@dividend+1
  1265  0266  120A  158A  274A  120A  118A  	fcall	___awdiv
  1266  026B  0871               	movf	?___awdiv+1,w
  1267  026C  00FA               	movwf	___wmul@multiplier+1
  1268  026D  0870               	movf	?___awdiv,w
  1269  026E  00F9               	movwf	___wmul@multiplier
  1270  026F  300A               	movlw	10
  1271  0270  00FB               	movwf	___wmul@multiplicand
  1272  0271  3000               	movlw	0
  1273  0272  00FC               	movwf	___wmul@multiplicand+1
  1274  0273  120A  158A  2433  120A  118A  	fcall	___wmul
  1275  0278  1283               	bcf	3,5	;RP0=0, select bank0
  1276  0279  1303               	bcf	3,6	;RP1=0, select bank0
  1277  027A  0826               	movf	readClock@a,w
  1278  027B  390F               	andlw	15
  1279  027C  0779               	addwf	?___wmul,w
  1280  027D  00C0               	movwf	_hour
  1281  027E  087A               	movf	?___wmul+1,w
  1282  027F  1803               	skipnc
  1283  0280  0A7A               	incf	?___wmul+1,w
  1284  0281  00C1               	movwf	_hour+1
  1285                           
  1286                           ;LCDTime.c: 365: minute = (b % 16) + ((b / 16 ) * 10) ;
  1287  0282  3010               	movlw	16
  1288  0283  00F0               	movwf	___awdiv@divisor
  1289  0284  3000               	movlw	0
  1290  0285  00F1               	movwf	___awdiv@divisor+1
  1291  0286  0827               	movf	readClock@b,w
  1292  0287  00A2               	movwf	??_readClock
  1293  0288  01A3               	clrf	??_readClock+1
  1294  0289  0822               	movf	??_readClock,w
  1295  028A  00F2               	movwf	___awdiv@dividend
  1296  028B  0823               	movf	??_readClock+1,w
  1297  028C  00F3               	movwf	___awdiv@dividend+1
  1298  028D  120A  158A  274A  120A  118A  	fcall	___awdiv
  1299  0292  0871               	movf	?___awdiv+1,w
  1300  0293  00FA               	movwf	___wmul@multiplier+1
  1301  0294  0870               	movf	?___awdiv,w
  1302  0295  00F9               	movwf	___wmul@multiplier
  1303  0296  300A               	movlw	10
  1304  0297  00FB               	movwf	___wmul@multiplicand
  1305  0298  3000               	movlw	0
  1306  0299  00FC               	movwf	___wmul@multiplicand+1
  1307  029A  120A  158A  2433  120A  118A  	fcall	___wmul
  1308  029F  1283               	bcf	3,5	;RP0=0, select bank0
  1309  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  1310  02A1  0827               	movf	readClock@b,w
  1311  02A2  390F               	andlw	15
  1312  02A3  0779               	addwf	?___wmul,w
  1313  02A4  00C2               	movwf	_minute
  1314  02A5  087A               	movf	?___wmul+1,w
  1315  02A6  1803               	skipnc
  1316  02A7  0A7A               	incf	?___wmul+1,w
  1317  02A8  00C3               	movwf	_minute+1
  1318                           
  1319                           ;LCDTime.c: 366: seconds = (c % 16) + ((c / 16 ) * 10) ;
  1320  02A9  3010               	movlw	16
  1321  02AA  00F0               	movwf	___awdiv@divisor
  1322  02AB  3000               	movlw	0
  1323  02AC  00F1               	movwf	___awdiv@divisor+1
  1324  02AD  0828               	movf	readClock@c,w
  1325  02AE  00A2               	movwf	??_readClock
  1326  02AF  01A3               	clrf	??_readClock+1
  1327  02B0  0822               	movf	??_readClock,w
  1328  02B1  00F2               	movwf	___awdiv@dividend
  1329  02B2  0823               	movf	??_readClock+1,w
  1330  02B3  00F3               	movwf	___awdiv@dividend+1
  1331  02B4  120A  158A  274A  120A  118A  	fcall	___awdiv
  1332  02B9  0871               	movf	?___awdiv+1,w
  1333  02BA  00FA               	movwf	___wmul@multiplier+1
  1334  02BB  0870               	movf	?___awdiv,w
  1335  02BC  00F9               	movwf	___wmul@multiplier
  1336  02BD  300A               	movlw	10
  1337  02BE  00FB               	movwf	___wmul@multiplicand
  1338  02BF  3000               	movlw	0
  1339  02C0  00FC               	movwf	___wmul@multiplicand+1
  1340  02C1  120A  158A  2433  120A  118A  	fcall	___wmul
  1341  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  1342  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  1343  02C8  0828               	movf	readClock@c,w
  1344  02C9  390F               	andlw	15
  1345  02CA  0779               	addwf	?___wmul,w
  1346  02CB  00C6               	movwf	_seconds
  1347  02CC  087A               	movf	?___wmul+1,w
  1348  02CD  1803               	skipnc
  1349  02CE  0A7A               	incf	?___wmul+1,w
  1350  02CF  00C7               	movwf	_seconds+1
  1351                           
  1352                           ;LCDTime.c: 368: if (hour != last_hour)
  1353  02D0  084A               	movf	_last_hour,w
  1354  02D1  00A2               	movwf	??_readClock
  1355  02D2  01A3               	clrf	??_readClock+1
  1356  02D3  0841               	movf	_hour+1,w
  1357  02D4  0623               	xorwf	??_readClock+1,w
  1358  02D5  1D03               	skipz
  1359  02D6  2AD9               	goto	u1705
  1360  02D7  0840               	movf	_hour,w
  1361  02D8  0622               	xorwf	??_readClock,w
  1362  02D9                     u1705:	
  1363  02D9  1903               	skipnz
  1364  02DA  0008               	return
  1365                           
  1366                           ;LCDTime.c: 369: {
  1367                           ;LCDTime.c: 370: last_hour = hour ;
  1368  02DB  0840               	movf	_hour,w
  1369  02DC  00A2               	movwf	??_readClock
  1370  02DD  0822               	movf	??_readClock,w
  1371  02DE  00CA               	movwf	_last_hour
  1372                           
  1373                           ;LCDTime.c: 372: DS1307_GetDate(&n,&a,&b,&c) ;
  1374  02DF  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1375  02E0  00A2               	movwf	??_readClock
  1376  02E1  0822               	movf	??_readClock,w
  1377  02E2  00F5               	movwf	DS1307_GetDate@d_ptr
  1378  02E3  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1379  02E4  00A3               	movwf	??_readClock+1
  1380  02E5  0823               	movf	??_readClock+1,w
  1381  02E6  00F6               	movwf	DS1307_GetDate@m_ptr
  1382  02E7  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1383  02E8  00A4               	movwf	??_readClock+2
  1384  02E9  0824               	movf	??_readClock+2,w
  1385  02EA  00F7               	movwf	DS1307_GetDate@y_ptr
  1386  02EB  3025               	movlw	(low (readClock@n| 0))& (0+255)
  1387  02EC  120A  118A  20E4  120A  118A  	fcall	_DS1307_GetDate
  1388                           
  1389                           ;LCDTime.c: 374: day = (n % 16) ;
  1390  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  1391  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  1392  02F3  0825               	movf	readClock@n,w
  1393  02F4  390F               	andlw	15
  1394  02F5  00A2               	movwf	??_readClock
  1395  02F6  01A3               	clrf	??_readClock+1
  1396  02F7  0822               	movf	??_readClock,w
  1397  02F8  00BE               	movwf	_day
  1398  02F9  0823               	movf	??_readClock+1,w
  1399  02FA  00BF               	movwf	_day+1
  1400                           
  1401                           ;LCDTime.c: 375: date = (a % 16) + ((a / 16 ) * 10) ;
  1402  02FB  3010               	movlw	16
  1403  02FC  00F0               	movwf	___awdiv@divisor
  1404  02FD  3000               	movlw	0
  1405  02FE  00F1               	movwf	___awdiv@divisor+1
  1406  02FF  0826               	movf	readClock@a,w
  1407  0300  00A2               	movwf	??_readClock
  1408  0301  01A3               	clrf	??_readClock+1
  1409  0302  0822               	movf	??_readClock,w
  1410  0303  00F2               	movwf	___awdiv@dividend
  1411  0304  0823               	movf	??_readClock+1,w
  1412  0305  00F3               	movwf	___awdiv@dividend+1
  1413  0306  120A  158A  274A  120A  118A  	fcall	___awdiv
  1414  030B  0871               	movf	?___awdiv+1,w
  1415  030C  00FA               	movwf	___wmul@multiplier+1
  1416  030D  0870               	movf	?___awdiv,w
  1417  030E  00F9               	movwf	___wmul@multiplier
  1418  030F  300A               	movlw	10
  1419  0310  00FB               	movwf	___wmul@multiplicand
  1420  0311  3000               	movlw	0
  1421  0312  00FC               	movwf	___wmul@multiplicand+1
  1422  0313  120A  158A  2433  120A  118A  	fcall	___wmul
  1423  0318  1283               	bcf	3,5	;RP0=0, select bank0
  1424  0319  1303               	bcf	3,6	;RP1=0, select bank0
  1425  031A  0826               	movf	readClock@a,w
  1426  031B  390F               	andlw	15
  1427  031C  0779               	addwf	?___wmul,w
  1428  031D  00BC               	movwf	_date
  1429  031E  087A               	movf	?___wmul+1,w
  1430  031F  1803               	skipnc
  1431  0320  0A7A               	incf	?___wmul+1,w
  1432  0321  00BD               	movwf	_date+1
  1433                           
  1434                           ;LCDTime.c: 376: month = (b % 16) + ((b / 16 ) * 10) ;
  1435  0322  3010               	movlw	16
  1436  0323  00F0               	movwf	___awdiv@divisor
  1437  0324  3000               	movlw	0
  1438  0325  00F1               	movwf	___awdiv@divisor+1
  1439  0326  0827               	movf	readClock@b,w
  1440  0327  00A2               	movwf	??_readClock
  1441  0328  01A3               	clrf	??_readClock+1
  1442  0329  0822               	movf	??_readClock,w
  1443  032A  00F2               	movwf	___awdiv@dividend
  1444  032B  0823               	movf	??_readClock+1,w
  1445  032C  00F3               	movwf	___awdiv@dividend+1
  1446  032D  120A  158A  274A  120A  118A  	fcall	___awdiv
  1447  0332  0871               	movf	?___awdiv+1,w
  1448  0333  00FA               	movwf	___wmul@multiplier+1
  1449  0334  0870               	movf	?___awdiv,w
  1450  0335  00F9               	movwf	___wmul@multiplier
  1451  0336  300A               	movlw	10
  1452  0337  00FB               	movwf	___wmul@multiplicand
  1453  0338  3000               	movlw	0
  1454  0339  00FC               	movwf	___wmul@multiplicand+1
  1455  033A  120A  158A  2433  120A  118A  	fcall	___wmul
  1456  033F  1283               	bcf	3,5	;RP0=0, select bank0
  1457  0340  1303               	bcf	3,6	;RP1=0, select bank0
  1458  0341  0827               	movf	readClock@b,w
  1459  0342  390F               	andlw	15
  1460  0343  0779               	addwf	?___wmul,w
  1461  0344  00C4               	movwf	_month
  1462  0345  087A               	movf	?___wmul+1,w
  1463  0346  1803               	skipnc
  1464  0347  0A7A               	incf	?___wmul+1,w
  1465  0348  00C5               	movwf	_month+1
  1466                           
  1467                           ;LCDTime.c: 377: year = (c % 16) + ((c / 16 ) * 10) ;
  1468  0349  3010               	movlw	16
  1469  034A  00F0               	movwf	___awdiv@divisor
  1470  034B  3000               	movlw	0
  1471  034C  00F1               	movwf	___awdiv@divisor+1
  1472  034D  0828               	movf	readClock@c,w
  1473  034E  00A2               	movwf	??_readClock
  1474  034F  01A3               	clrf	??_readClock+1
  1475  0350  0822               	movf	??_readClock,w
  1476  0351  00F2               	movwf	___awdiv@dividend
  1477  0352  0823               	movf	??_readClock+1,w
  1478  0353  00F3               	movwf	___awdiv@dividend+1
  1479  0354  120A  158A  274A  120A  118A  	fcall	___awdiv
  1480  0359  0871               	movf	?___awdiv+1,w
  1481  035A  00FA               	movwf	___wmul@multiplier+1
  1482  035B  0870               	movf	?___awdiv,w
  1483  035C  00F9               	movwf	___wmul@multiplier
  1484  035D  300A               	movlw	10
  1485  035E  00FB               	movwf	___wmul@multiplicand
  1486  035F  3000               	movlw	0
  1487  0360  00FC               	movwf	___wmul@multiplicand+1
  1488  0361  120A  158A  2433   	fcall	___wmul
  1489  0364  1283               	bcf	3,5	;RP0=0, select bank0
  1490  0365  1303               	bcf	3,6	;RP1=0, select bank0
  1491  0366  0828               	movf	readClock@c,w
  1492  0367  390F               	andlw	15
  1493  0368  0779               	addwf	?___wmul,w
  1494  0369  00C8               	movwf	_year
  1495  036A  087A               	movf	?___wmul+1,w
  1496  036B  1803               	skipnc
  1497  036C  0A7A               	incf	?___wmul+1,w
  1498  036D  00C9               	movwf	_year+1
  1499  036E  0008               	return
  1500  036F                     __end_of_readClock:	
  1501                           
  1502                           	psect	text3
  1503  0C33                     __ptext3:	
  1504 ;; *************** function ___wmul *****************
  1505 ;; Defined at:
  1506 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  multiplier      2    9[COMMON] unsigned int 
  1509 ;;  multiplicand    2   11[COMMON] unsigned int 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  product         2    0[BANK0 ] unsigned int 
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  2    9[COMMON] unsigned int 
  1514 ;; Registers used:
  1515 ;;		wreg, status,2, status,0
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1521 ;;      Params:         4       0       0       0       0
  1522 ;;      Locals:         0       2       0       0       0
  1523 ;;      Temps:          0       0       0       0       0
  1524 ;;      Totals:         4       2       0       0       0
  1525 ;;Total ram usage:        6 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; This function calls:
  1528 ;;		Nothing
  1529 ;; This function is called by:
  1530 ;;		_readClock
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           
  1535                           ;psect for function ___wmul
  1536  0C33                     ___wmul:	
  1537                           
  1538                           ;incstack = 0
  1539                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1540  0C33  1283               	bcf	3,5	;RP0=0, select bank0
  1541  0C34  1303               	bcf	3,6	;RP1=0, select bank0
  1542  0C35  01A0               	clrf	___wmul@product
  1543  0C36  01A1               	clrf	___wmul@product+1
  1544  0C37                     l2073:	
  1545  0C37  1C79               	btfss	___wmul@multiplier,0
  1546  0C38  2C41               	goto	l449
  1547  0C39  087B               	movf	___wmul@multiplicand,w
  1548  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  1549  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  1550  0C3C  07A0               	addwf	___wmul@product,f
  1551  0C3D  1803               	skipnc
  1552  0C3E  0AA1               	incf	___wmul@product+1,f
  1553  0C3F  087C               	movf	___wmul@multiplicand+1,w
  1554  0C40  07A1               	addwf	___wmul@product+1,f
  1555  0C41                     l449:	
  1556  0C41  3001               	movlw	1
  1557  0C42                     u1665:	
  1558  0C42  1003               	clrc
  1559  0C43  0DFB               	rlf	___wmul@multiplicand,f
  1560  0C44  0DFC               	rlf	___wmul@multiplicand+1,f
  1561  0C45  3EFF               	addlw	-1
  1562  0C46  1D03               	skipz
  1563  0C47  2C42               	goto	u1665
  1564  0C48  3001               	movlw	1
  1565  0C49                     u1675:	
  1566  0C49  1003               	clrc
  1567  0C4A  0CFA               	rrf	___wmul@multiplier+1,f
  1568  0C4B  0CF9               	rrf	___wmul@multiplier,f
  1569  0C4C  3EFF               	addlw	-1
  1570  0C4D  1D03               	skipz
  1571  0C4E  2C49               	goto	u1675
  1572  0C4F  0879               	movf	___wmul@multiplier,w
  1573  0C50  047A               	iorwf	___wmul@multiplier+1,w
  1574  0C51  1D03               	btfss	3,2
  1575  0C52  2C37               	goto	l2073
  1576  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  1577  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  1578  0C55  0821               	movf	___wmul@product+1,w
  1579  0C56  00FA               	movwf	?___wmul+1
  1580  0C57  0820               	movf	___wmul@product,w
  1581  0C58  00F9               	movwf	?___wmul
  1582  0C59  0008               	return
  1583  0C5A                     __end_of___wmul:	
  1584                           
  1585                           	psect	text4
  1586  0EF4                     __ptext4:	
  1587 ;; *************** function _DS1307_GetTime *****************
  1588 ;; Defined at:
  1589 ;;		line 66 in file "DS1307.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;  h_ptr           1    wreg     PTR unsigned char 
  1592 ;;		 -> readClock@a(1), 
  1593 ;;  m_ptr           1    5[COMMON] PTR unsigned char 
  1594 ;;		 -> readClock@b(1), 
  1595 ;;  s_ptr           1    6[COMMON] PTR unsigned char 
  1596 ;;		 -> readClock@c(1), 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  h_ptr           1    8[COMMON] PTR unsigned char 
  1599 ;;		 -> readClock@a(1), 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1609 ;;      Params:         2       0       0       0       0
  1610 ;;      Locals:         1       0       0       0       0
  1611 ;;      Temps:          1       0       0       0       0
  1612 ;;      Totals:         4       0       0       0       0
  1613 ;;Total ram usage:        4 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    3
  1616 ;; This function calls:
  1617 ;;		_DS1307_Read
  1618 ;;		_DS1307_Write
  1619 ;;		_I2C_Ack
  1620 ;;		_I2C_NoAck
  1621 ;;		_I2C_Start
  1622 ;;		_I2C_Stop
  1623 ;; This function is called by:
  1624 ;;		_readClock
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           
  1629                           ;psect for function _DS1307_GetTime
  1630  0EF4                     _DS1307_GetTime:	
  1631                           
  1632                           ;incstack = 0
  1633                           ; Regs used in _DS1307_GetTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1634                           ;DS1307_GetTime@h_ptr stored from wreg
  1635  0EF4  00F8               	movwf	DS1307_GetTime@h_ptr
  1636                           
  1637                           ;DS1307.c: 68: I2C_Start();
  1638  0EF5  120A  158A  23AD  120A  158A  	fcall	_I2C_Start
  1639                           
  1640                           ;DS1307.c: 69: DS1307_Write(0xD0);
  1641  0EFA  30D0               	movlw	208
  1642  0EFB  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  1643                           
  1644                           ;DS1307.c: 70: DS1307_Write(0x00);
  1645  0F00  3000               	movlw	0
  1646  0F01  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  1647                           
  1648                           ;DS1307.c: 71: I2C_Stop();
  1649  0F06  120A  158A  238D  120A  158A  	fcall	_I2C_Stop
  1650                           
  1651                           ;DS1307.c: 72: I2C_Start();
  1652  0F0B  120A  158A  23AD  120A  158A  	fcall	_I2C_Start
  1653                           
  1654                           ;DS1307.c: 73: DS1307_Write(0xD1);
  1655  0F10  30D1               	movlw	209
  1656  0F11  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  1657                           
  1658                           ;DS1307.c: 74: *s_ptr = DS1307_Read(); I2C_Ack();
  1659  0F16  120A  158A  234D  120A  158A  	fcall	_DS1307_Read
  1660  0F1B  00F7               	movwf	??_DS1307_GetTime
  1661  0F1C  0876               	movf	DS1307_GetTime@s_ptr,w
  1662  0F1D  0084               	movwf	4
  1663  0F1E  0877               	movf	??_DS1307_GetTime,w
  1664  0F1F  1383               	bcf	3,7	;select IRP bank0
  1665  0F20  0080               	movwf	0
  1666  0F21  120A  158A  2369  120A  158A  	fcall	_I2C_Ack
  1667                           
  1668                           ;DS1307.c: 75: *m_ptr = DS1307_Read(); I2C_Ack();
  1669  0F26  120A  158A  234D  120A  158A  	fcall	_DS1307_Read
  1670  0F2B  00F7               	movwf	??_DS1307_GetTime
  1671  0F2C  0875               	movf	DS1307_GetTime@m_ptr,w
  1672  0F2D  0084               	movwf	4
  1673  0F2E  0877               	movf	??_DS1307_GetTime,w
  1674  0F2F  1383               	bcf	3,7	;select IRP bank0
  1675  0F30  0080               	movwf	0
  1676  0F31  120A  158A  2369  120A  158A  	fcall	_I2C_Ack
  1677                           
  1678                           ;DS1307.c: 76: *h_ptr = DS1307_Read(); I2C_NoAck();
  1679  0F36  120A  158A  234D  120A  158A  	fcall	_DS1307_Read
  1680  0F3B  00F7               	movwf	??_DS1307_GetTime
  1681  0F3C  0878               	movf	DS1307_GetTime@h_ptr,w
  1682  0F3D  0084               	movwf	4
  1683  0F3E  0877               	movf	??_DS1307_GetTime,w
  1684  0F3F  1383               	bcf	3,7	;select IRP bank0
  1685  0F40  0080               	movwf	0
  1686  0F41  120A  158A  235F  120A  158A  	fcall	_I2C_NoAck
  1687                           
  1688                           ;DS1307.c: 77: I2C_Stop();
  1689  0F46  120A  158A  238D   	fcall	_I2C_Stop
  1690  0F49  0008               	return
  1691  0F4A                     __end_of_DS1307_GetTime:	
  1692                           
  1693                           	psect	text5
  1694  00E4                     __ptext5:	
  1695 ;; *************** function _DS1307_GetDate *****************
  1696 ;; Defined at:
  1697 ;;		line 80 in file "DS1307.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  n_ptr           1    wreg     PTR unsigned char 
  1700 ;;		 -> readClock@n(1), 
  1701 ;;  d_ptr           1    5[COMMON] PTR unsigned char 
  1702 ;;		 -> readClock@a(1), 
  1703 ;;  m_ptr           1    6[COMMON] PTR unsigned char 
  1704 ;;		 -> readClock@b(1), 
  1705 ;;  y_ptr           1    7[COMMON] PTR unsigned char 
  1706 ;;		 -> readClock@c(1), 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  n_ptr           1    9[COMMON] PTR unsigned char 
  1709 ;;		 -> readClock@n(1), 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1719 ;;      Params:         3       0       0       0       0
  1720 ;;      Locals:         1       0       0       0       0
  1721 ;;      Temps:          1       0       0       0       0
  1722 ;;      Totals:         5       0       0       0       0
  1723 ;;Total ram usage:        5 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    3
  1726 ;; This function calls:
  1727 ;;		_DS1307_Read
  1728 ;;		_DS1307_Write
  1729 ;;		_I2C_Ack
  1730 ;;		_I2C_NoAck
  1731 ;;		_I2C_Start
  1732 ;;		_I2C_Stop
  1733 ;; This function is called by:
  1734 ;;		_readClock
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           
  1739                           ;psect for function _DS1307_GetDate
  1740  00E4                     _DS1307_GetDate:	
  1741                           
  1742                           ;incstack = 0
  1743                           ; Regs used in _DS1307_GetDate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1744                           ;DS1307_GetDate@n_ptr stored from wreg
  1745  00E4  00F9               	movwf	DS1307_GetDate@n_ptr
  1746                           
  1747                           ;DS1307.c: 82: I2C_Start();
  1748  00E5  120A  158A  23AD  120A  118A  	fcall	_I2C_Start
  1749                           
  1750                           ;DS1307.c: 83: DS1307_Write(0xD0);
  1751  00EA  30D0               	movlw	208
  1752  00EB  120A  158A  2373  120A  118A  	fcall	_DS1307_Write
  1753                           
  1754                           ;DS1307.c: 84: DS1307_Write(0x03);
  1755  00F0  3003               	movlw	3
  1756  00F1  120A  158A  2373  120A  118A  	fcall	_DS1307_Write
  1757                           
  1758                           ;DS1307.c: 85: I2C_Stop();
  1759  00F6  120A  158A  238D  120A  118A  	fcall	_I2C_Stop
  1760                           
  1761                           ;DS1307.c: 86: I2C_Start();
  1762  00FB  120A  158A  23AD  120A  118A  	fcall	_I2C_Start
  1763                           
  1764                           ;DS1307.c: 87: DS1307_Write(0xD1);
  1765  0100  30D1               	movlw	209
  1766  0101  120A  158A  2373  120A  118A  	fcall	_DS1307_Write
  1767                           
  1768                           ;DS1307.c: 88: *n_ptr = DS1307_Read(); I2C_Ack();
  1769  0106  120A  158A  234D  120A  118A  	fcall	_DS1307_Read
  1770  010B  00F8               	movwf	??_DS1307_GetDate
  1771  010C  0879               	movf	DS1307_GetDate@n_ptr,w
  1772  010D  0084               	movwf	4
  1773  010E  0878               	movf	??_DS1307_GetDate,w
  1774  010F  1383               	bcf	3,7	;select IRP bank0
  1775  0110  0080               	movwf	0
  1776  0111  120A  158A  2369  120A  118A  	fcall	_I2C_Ack
  1777                           
  1778                           ;DS1307.c: 89: *d_ptr = DS1307_Read(); I2C_Ack();
  1779  0116  120A  158A  234D  120A  118A  	fcall	_DS1307_Read
  1780  011B  00F8               	movwf	??_DS1307_GetDate
  1781  011C  0875               	movf	DS1307_GetDate@d_ptr,w
  1782  011D  0084               	movwf	4
  1783  011E  0878               	movf	??_DS1307_GetDate,w
  1784  011F  1383               	bcf	3,7	;select IRP bank0
  1785  0120  0080               	movwf	0
  1786  0121  120A  158A  2369  120A  118A  	fcall	_I2C_Ack
  1787                           
  1788                           ;DS1307.c: 90: *m_ptr = DS1307_Read(); I2C_Ack();
  1789  0126  120A  158A  234D  120A  118A  	fcall	_DS1307_Read
  1790  012B  00F8               	movwf	??_DS1307_GetDate
  1791  012C  0876               	movf	DS1307_GetDate@m_ptr,w
  1792  012D  0084               	movwf	4
  1793  012E  0878               	movf	??_DS1307_GetDate,w
  1794  012F  1383               	bcf	3,7	;select IRP bank0
  1795  0130  0080               	movwf	0
  1796  0131  120A  158A  2369  120A  118A  	fcall	_I2C_Ack
  1797                           
  1798                           ;DS1307.c: 91: *y_ptr = DS1307_Read(); I2C_NoAck();
  1799  0136  120A  158A  234D  120A  118A  	fcall	_DS1307_Read
  1800  013B  00F8               	movwf	??_DS1307_GetDate
  1801  013C  0877               	movf	DS1307_GetDate@y_ptr,w
  1802  013D  0084               	movwf	4
  1803  013E  0878               	movf	??_DS1307_GetDate,w
  1804  013F  1383               	bcf	3,7	;select IRP bank0
  1805  0140  0080               	movwf	0
  1806  0141  120A  158A  235F  120A  118A  	fcall	_I2C_NoAck
  1807                           
  1808                           ;DS1307.c: 92: I2C_Stop();
  1809  0146  120A  158A  238D   	fcall	_I2C_Stop
  1810  0149  0008               	return
  1811  014A                     __end_of_DS1307_GetDate:	
  1812                           
  1813                           	psect	text6
  1814  0B69                     __ptext6:	
  1815 ;; *************** function _I2C_Ack *****************
  1816 ;; Defined at:
  1817 ;;		line 81 in file "i2c.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		status,2, status,0, pclath, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1831 ;;      Params:         0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0
  1834 ;;      Totals:         0       0       0       0       0
  1835 ;;Total ram usage:        0 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    1
  1838 ;; This function calls:
  1839 ;;		_I2C_Clock
  1840 ;; This function is called by:
  1841 ;;		_DS1307_GetTime
  1842 ;;		_DS1307_GetDate
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           
  1847                           ;psect for function _I2C_Ack
  1848  0B69                     _I2C_Ack:	
  1849                           
  1850                           ;i2c.c: 83: RD0 = 0;
  1851                           
  1852                           ;incstack = 0
  1853                           ; Regs used in _I2C_Ack: [status,2+status,0+pclath+cstack]
  1854  0B69  1283               	bcf	3,5	;RP0=0, select bank0
  1855  0B6A  1303               	bcf	3,6	;RP1=0, select bank0
  1856  0B6B  1008               	bcf	8,0	;volatile
  1857                           
  1858                           ;i2c.c: 84: I2C_Clock();
  1859  0B6C  120A  158A  2356   	fcall	_I2C_Clock
  1860                           
  1861                           ;i2c.c: 85: RD0 = 1;
  1862  0B6F  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0B70  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0B71  1408               	bsf	8,0	;volatile
  1865  0B72  0008               	return
  1866  0B73                     __end_of_I2C_Ack:	
  1867                           
  1868                           	psect	text7
  1869  0B9D                     __ptext7:	
  1870 ;; *************** function _initLED *****************
  1871 ;; Defined at:
  1872 ;;		line 422 in file "LCDTime.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1886 ;;      Params:         0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0
  1889 ;;      Totals:         0       0       0       0       0
  1890 ;;Total ram usage:        0 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    1
  1893 ;; This function calls:
  1894 ;;		_sendLED
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           
  1901                           ;psect for function _initLED
  1902  0B9D                     _initLED:	
  1903                           
  1904                           ;LCDTime.c: 424: TRISC0 = 0 ;
  1905                           
  1906                           ;incstack = 0
  1907                           ; Regs used in _initLED: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1908  0B9D  1683               	bsf	3,5	;RP0=1, select bank1
  1909  0B9E  1303               	bcf	3,6	;RP1=0, select bank1
  1910  0B9F  1007               	bcf	7,0	;volatile
  1911                           
  1912                           ;LCDTime.c: 425: TRISC1 = 0 ;
  1913  0BA0  1087               	bcf	7,1	;volatile
  1914                           
  1915                           ;LCDTime.c: 426: TRISC2 = 0 ;
  1916  0BA1  1107               	bcf	7,2	;volatile
  1917                           
  1918                           ;LCDTime.c: 428: RC1 = 1 ;
  1919  0BA2  1283               	bcf	3,5	;RP0=0, select bank0
  1920  0BA3  1303               	bcf	3,6	;RP1=0, select bank0
  1921  0BA4  1487               	bsf	7,1	;volatile
  1922                           
  1923                           ;LCDTime.c: 430: sendLED(0xF001) ;
  1924  0BA5  3001               	movlw	1
  1925  0BA6  00F0               	movwf	sendLED@c
  1926  0BA7  30F0               	movlw	240
  1927  0BA8  00F1               	movwf	sendLED@c+1
  1928  0BA9  120A  158A  2577   	fcall	_sendLED
  1929  0BAC  0008               	return
  1930  0BAD                     __end_of_initLED:	
  1931                           
  1932                           	psect	text8
  1933  0D77                     __ptext8:	
  1934 ;; *************** function _sendLED *****************
  1935 ;; Defined at:
  1936 ;;		line 433 in file "LCDTime.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  c               2    0[COMMON] unsigned int 
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  i               2    4[COMMON] int 
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      void 
  1943 ;; Registers used:
  1944 ;;		wreg, status,2, status,0, btemp+1
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1950 ;;      Params:         2       0       0       0       0
  1951 ;;      Locals:         2       0       0       0       0
  1952 ;;      Temps:          2       0       0       0       0
  1953 ;;      Totals:         6       0       0       0       0
  1954 ;;Total ram usage:        6 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_initLED
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           
  1964                           ;psect for function _sendLED
  1965  0D77                     _sendLED:	
  1966                           
  1967                           ;LCDTime.c: 435: int i ;
  1968                           ;LCDTime.c: 437: RC1 = 0 ;
  1969                           
  1970                           ;incstack = 0
  1971                           ; Regs used in _sendLED: [wreg+status,2+status,0+btemp+1]
  1972  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  1973  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  1974  0D79  1087               	bcf	7,1	;volatile
  1975                           
  1976                           ;LCDTime.c: 439: for (i=0;i<16;i++)
  1977  0D7A  01F4               	clrf	sendLED@i
  1978  0D7B  01F5               	clrf	sendLED@i+1
  1979  0D7C  0875               	movf	sendLED@i+1,w
  1980  0D7D  3A80               	xorlw	128
  1981  0D7E  00FF               	movwf	127
  1982  0D7F  3080               	movlw	128
  1983  0D80  027F               	subwf	127,w
  1984  0D81  1D03               	skipz
  1985  0D82  2D85               	goto	u1615
  1986  0D83  3010               	movlw	16
  1987  0D84  0274               	subwf	sendLED@i,w
  1988  0D85                     u1615:	
  1989  0D85  1803               	btfsc	3,0
  1990  0D86  2DB5               	goto	l364
  1991  0D87                     l363:	
  1992                           
  1993                           ;LCDTime.c: 440: {
  1994                           ;LCDTime.c: 441: _delay((unsigned long)((1)*(4000000/4000000.0)));
  1995  0D87  0000               	nop
  1996                           
  1997                           ;LCDTime.c: 443: RC0 = (c & 0x01) ;
  1998  0D88  1C70               	btfss	sendLED@c,0
  1999  0D89  2D8E               	goto	u1620
  2000  0D8A  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0D8B  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0D8C  1407               	bsf	7,0	;volatile
  2003  0D8D  2D91               	goto	l2057
  2004  0D8E                     u1620:	
  2005  0D8E  1283               	bcf	3,5	;RP0=0, select bank0
  2006  0D8F  1303               	bcf	3,6	;RP1=0, select bank0
  2007  0D90  1007               	bcf	7,0	;volatile
  2008  0D91                     l2057:	
  2009                           
  2010                           ;LCDTime.c: 444: c = c >> 1 ;
  2011  0D91  0871               	movf	sendLED@c+1,w
  2012  0D92  00F3               	movwf	??_sendLED+1
  2013  0D93  0870               	movf	sendLED@c,w
  2014  0D94  00F2               	movwf	??_sendLED
  2015  0D95  1003               	clrc
  2016  0D96  0CF3               	rrf	??_sendLED+1,f
  2017  0D97  0CF2               	rrf	??_sendLED,f
  2018  0D98  0872               	movf	??_sendLED,w
  2019  0D99  00F0               	movwf	sendLED@c
  2020  0D9A  0873               	movf	??_sendLED+1,w
  2021  0D9B  00F1               	movwf	sendLED@c+1
  2022                           
  2023                           ;LCDTime.c: 446: _delay((unsigned long)((1)*(4000000/4000000.0))) ;
  2024  0D9C  0000               	nop
  2025                           
  2026                           ;LCDTime.c: 447: RC2 = 1 ;
  2027  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  2028  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  2029  0D9F  1507               	bsf	7,2	;volatile
  2030                           
  2031                           ;LCDTime.c: 448: _delay((unsigned long)((1)*(4000000/4000000.0))) ;
  2032  0DA0  0000               	nop
  2033                           
  2034                           ;LCDTime.c: 449: RC2 = 0 ;
  2035  0DA1  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0DA2  1303               	bcf	3,6	;RP1=0, select bank0
  2037  0DA3  1107               	bcf	7,2	;volatile
  2038  0DA4  3001               	movlw	1
  2039  0DA5  07F4               	addwf	sendLED@i,f
  2040  0DA6  1803               	skipnc
  2041  0DA7  0AF5               	incf	sendLED@i+1,f
  2042  0DA8  3000               	movlw	0
  2043  0DA9  07F5               	addwf	sendLED@i+1,f
  2044  0DAA  0875               	movf	sendLED@i+1,w
  2045  0DAB  3A80               	xorlw	128
  2046  0DAC  00FF               	movwf	127
  2047  0DAD  3080               	movlw	128
  2048  0DAE  027F               	subwf	127,w
  2049  0DAF  1D03               	skipz
  2050  0DB0  2DB3               	goto	u1645
  2051  0DB1  3010               	movlw	16
  2052  0DB2  0274               	subwf	sendLED@i,w
  2053  0DB3                     u1645:	
  2054  0DB3  1C03               	skipc
  2055  0DB4  2D87               	goto	l363
  2056  0DB5                     l364:	
  2057                           
  2058                           ;LCDTime.c: 450: }
  2059                           ;LCDTime.c: 452: RC1 = 1 ;
  2060  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  2061  0DB6  1303               	bcf	3,6	;RP1=0, select bank0
  2062  0DB7  1487               	bsf	7,1	;volatile
  2063  0DB8  0008               	return
  2064  0DB9                     __end_of_sendLED:	
  2065                           
  2066                           	psect	text9
  2067  036F                     __ptext9:	
  2068 ;; *************** function _doMenu *****************
  2069 ;; Defined at:
  2070 ;;		line 74 in file "LCDTime.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;  y               2   23[BANK0 ] int 
  2075 ;;  m               2   21[BANK0 ] int 
  2076 ;;  d               2   19[BANK0 ] int 
  2077 ;;  n               2   17[BANK0 ] int 
  2078 ;;  s               2   15[BANK0 ] int 
  2079 ;;  m               2   13[BANK0 ] int 
  2080 ;;  h               2   11[BANK0 ] int 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2090 ;;      Params:         0       0       0       0       0
  2091 ;;      Locals:         0      14       0       0       0
  2092 ;;      Temps:          0       3       0       0       0
  2093 ;;      Totals:         0      17       0       0       0
  2094 ;;Total ram usage:       17 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    4
  2097 ;; This function calls:
  2098 ;;		_DS1307_SetDate
  2099 ;;		_DS1307_SetTime
  2100 ;;		_LCDByte
  2101 ;;		_LCDGotoXY
  2102 ;;		_LCDWriteString
  2103 ;;		___awdiv
  2104 ;;		___awmod
  2105 ;;		_readInputs
  2106 ;;		_showDate
  2107 ;;		_showTime
  2108 ;; This function is called by:
  2109 ;;		_main
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           
  2114                           ;psect for function _doMenu
  2115  036F                     _doMenu:	
  2116  036F                     l2199:	
  2117                           ;LCDTime.c: 76: while(bButton)
  2118                           
  2119                           ;incstack = 0
  2120                           ; Regs used in _doMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2121                           
  2122  036F  1283               	bcf	3,5	;RP0=0, select bank0
  2123  0370  1303               	bcf	3,6	;RP1=0, select bank0
  2124  0371  084B               	movf	_bButton,w
  2125  0372  1903               	btfsc	3,2
  2126  0373  2B7A               	goto	l2201
  2127                           
  2128                           ;LCDTime.c: 77: readInputs();
  2129  0374  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2130  0379  2B6F               	goto	l2199
  2131  037A                     l2201:	
  2132                           
  2133                           ;LCDTime.c: 80: if (menuFunction == 0 | menuFunction == 1)
  2134  037A  084C               	movf	_menuFunction,w
  2135  037B  1D03               	btfss	3,2
  2136  037C  034C               	decf	_menuFunction,w
  2137  037D  1D03               	btfss	3,2
  2138  037E  2D53               	goto	l2311
  2139                           
  2140                           ;LCDTime.c: 81: {
  2141                           ;LCDTime.c: 82: int h,m,s ;
  2142                           ;LCDTime.c: 84: h = hour ;
  2143  037F  0841               	movf	_hour+1,w
  2144  0380  00AC               	movwf	doMenu@h+1
  2145  0381  0840               	movf	_hour,w
  2146  0382  00AB               	movwf	doMenu@h
  2147                           
  2148                           ;LCDTime.c: 85: m = minute ;
  2149  0383  0843               	movf	_minute+1,w
  2150  0384  00AE               	movwf	doMenu@m+1
  2151  0385  0842               	movf	_minute,w
  2152  0386  00AD               	movwf	doMenu@m
  2153                           
  2154                           ;LCDTime.c: 86: s = seconds ;
  2155  0387  0847               	movf	_seconds+1,w
  2156  0388  00B0               	movwf	doMenu@s+1
  2157  0389  0846               	movf	_seconds,w
  2158  038A  00AF               	movwf	doMenu@s
  2159                           
  2160                           ;LCDTime.c: 88: (LCDByte(0b00000001,0));
  2161  038B  01F5               	clrf	LCDByte@isdata
  2162  038C  3001               	movlw	1
  2163  038D  120A  158A  2654  120A  118A  	fcall	_LCDByte
  2164                           
  2165                           ;LCDTime.c: 89: LCDWriteString("Set Hours");
  2166  0392  305F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2167  0393  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2168  0398                     L4:	
  2169                           
  2170                           ;LCDTime.c: 91: LCDGotoXY(0,1) ;
  2171  0398  01FC               	clrf	LCDGotoXY@y
  2172  0399  0AFC               	incf	LCDGotoXY@y,f
  2173  039A  3000               	movlw	0
  2174  039B  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  2175                           
  2176                           ;LCDTime.c: 92: showTime();
  2177  03A0  120A  158A  2509  120A  118A  	fcall	_showTime
  2178  03A5                     l2237:	
  2179                           ;LCDTime.c: 94: while(!bButton)
  2180                           
  2181  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2182  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2183  03A7  084B               	movf	_bButton,w
  2184  03A8  1D03               	btfss	3,2
  2185  03A9  2BDE               	goto	l2241
  2186                           
  2187                           ;LCDTime.c: 95: {
  2188                           ;LCDTime.c: 96: readInputs();
  2189  03AA  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2190                           
  2191                           ;LCDTime.c: 98: if (state & 0x10)
  2192  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  2193  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  2194  03B1  1E4D               	btfss	_state,4
  2195  03B2  2BC7               	goto	l239
  2196                           
  2197                           ;LCDTime.c: 99: {
  2198                           ;LCDTime.c: 100: hour++;
  2199  03B3  3001               	movlw	1
  2200  03B4  07C0               	addwf	_hour,f
  2201  03B5  1803               	skipnc
  2202  03B6  0AC1               	incf	_hour+1,f
  2203  03B7  3000               	movlw	0
  2204  03B8  07C1               	addwf	_hour+1,f
  2205                           
  2206                           ;LCDTime.c: 101: if (hour > 23)
  2207  03B9  0841               	movf	_hour+1,w
  2208  03BA  3A80               	xorlw	128
  2209  03BB  00FF               	movwf	127
  2210  03BC  3080               	movlw	128
  2211  03BD  027F               	subwf	127,w
  2212  03BE  1D03               	skipz
  2213  03BF  2BC2               	goto	u1755
  2214  03C0  3018               	movlw	24
  2215  03C1  0240               	subwf	_hour,w
  2216  03C2                     u1755:	
  2217  03C2  1C03               	skipc
  2218  03C3  2BD3               	goto	l2231
  2219                           
  2220                           ;LCDTime.c: 102: hour = 0 ;
  2221  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2222  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2223  03C6  2BD1               	goto	l2229
  2224  03C7                     l239:	
  2225                           ;LCDTime.c: 103: }
  2226                           
  2227                           
  2228                           ;LCDTime.c: 104: else if (state & 0x20)
  2229  03C7  1ECD               	btfss	_state,5
  2230  03C8  2BD3               	goto	l2231
  2231                           
  2232                           ;LCDTime.c: 105: {
  2233                           ;LCDTime.c: 106: hour--;
  2234  03C9  30FF               	movlw	255
  2235  03CA  07C0               	addwf	_hour,f
  2236  03CB  1803               	skipnc
  2237  03CC  0AC1               	incf	_hour+1,f
  2238  03CD  30FF               	movlw	255
  2239  03CE  07C1               	addwf	_hour+1,f
  2240                           
  2241                           ;LCDTime.c: 107: if (hour < 0)
  2242  03CF  1FC1               	btfss	_hour+1,7
  2243  03D0  2BD3               	goto	l2231
  2244  03D1                     l2229:	
  2245                           
  2246                           ;LCDTime.c: 108: hour = 0 ;
  2247  03D1  01C0               	clrf	_hour
  2248  03D2  01C1               	clrf	_hour+1
  2249  03D3                     l2231:	
  2250                           
  2251                           ;LCDTime.c: 109: }
  2252                           ;LCDTime.c: 111: if (state)
  2253  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2254  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2255  03D5  084D               	movf	_state,w
  2256  03D6  1903               	btfsc	3,2
  2257  03D7  2BA5               	goto	l2237
  2258  03D8  2B98               	goto	L4
  2259  03D9                     l2239:	
  2260                           ;LCDTime.c: 115: }
  2261                           ;LCDTime.c: 116: }
  2262                           ;LCDTime.c: 118: while(bButton)
  2263                           
  2264                           ;LCDTime.c: 114: showTime();
  2265                           
  2266                           ;LCDTime.c: 112: {
  2267                           ;LCDTime.c: 113: LCDGotoXY(0,1) ;
  2268                           
  2269                           
  2270                           ;LCDTime.c: 119: readInputs();
  2271  03D9  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2272  03DE                     l2241:	
  2273  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2274  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2275  03E0  084B               	movf	_bButton,w
  2276  03E1  1D03               	btfss	3,2
  2277  03E2  2BD9               	goto	l2239
  2278                           
  2279                           ;LCDTime.c: 121: LCDGotoXY(0,0) ;
  2280  03E3  01FC               	clrf	LCDGotoXY@y
  2281  03E4  3000               	movlw	0
  2282  03E5  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  2283                           
  2284                           ;LCDTime.c: 122: LCDWriteString("Set Minutes");
  2285  03EA  3035               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2286  03EB  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2287  03F0                     l2267:	
  2288                           ;LCDTime.c: 124: while(!bButton)
  2289                           
  2290  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2291  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  2292  03F2  084B               	movf	_bButton,w
  2293  03F3  1D03               	btfss	3,2
  2294  03F4  2C36               	goto	l2271
  2295                           
  2296                           ;LCDTime.c: 125: {
  2297                           ;LCDTime.c: 126: readInputs();
  2298  03F5  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2299                           
  2300                           ;LCDTime.c: 128: if (state & 0x10)
  2301  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2302  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2303  03FC  1E4D               	btfss	_state,4
  2304  03FD  2C12               	goto	l251
  2305                           
  2306                           ;LCDTime.c: 129: {
  2307                           ;LCDTime.c: 130: minute++;
  2308  03FE  3001               	movlw	1
  2309  03FF  07C2               	addwf	_minute,f
  2310  0400  1803               	skipnc
  2311  0401  0AC3               	incf	_minute+1,f
  2312  0402  3000               	movlw	0
  2313  0403  07C3               	addwf	_minute+1,f
  2314                           
  2315                           ;LCDTime.c: 131: if (minute > 59)
  2316  0404  0843               	movf	_minute+1,w
  2317  0405  3A80               	xorlw	128
  2318  0406  00FF               	movwf	127
  2319  0407  3080               	movlw	128
  2320  0408  027F               	subwf	127,w
  2321  0409  1D03               	skipz
  2322  040A  2C0D               	goto	u1825
  2323  040B  303C               	movlw	60
  2324  040C  0242               	subwf	_minute,w
  2325  040D                     u1825:	
  2326  040D  1C03               	skipc
  2327  040E  2C1E               	goto	l2261
  2328                           
  2329                           ;LCDTime.c: 132: minute = 0 ;
  2330  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2331  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2332  0411  2C1C               	goto	l2259
  2333  0412                     l251:	
  2334                           ;LCDTime.c: 133: }
  2335                           
  2336                           
  2337                           ;LCDTime.c: 134: else if (state & 0x20)
  2338  0412  1ECD               	btfss	_state,5
  2339  0413  2C1E               	goto	l2261
  2340                           
  2341                           ;LCDTime.c: 135: {
  2342                           ;LCDTime.c: 136: minute--;
  2343  0414  30FF               	movlw	255
  2344  0415  07C2               	addwf	_minute,f
  2345  0416  1803               	skipnc
  2346  0417  0AC3               	incf	_minute+1,f
  2347  0418  30FF               	movlw	255
  2348  0419  07C3               	addwf	_minute+1,f
  2349                           
  2350                           ;LCDTime.c: 137: if (minute < 0)
  2351  041A  1FC3               	btfss	_minute+1,7
  2352  041B  2C1E               	goto	l2261
  2353  041C                     l2259:	
  2354                           
  2355                           ;LCDTime.c: 138: minute = 0 ;
  2356  041C  01C2               	clrf	_minute
  2357  041D  01C3               	clrf	_minute+1
  2358  041E                     l2261:	
  2359                           
  2360                           ;LCDTime.c: 139: }
  2361                           ;LCDTime.c: 141: if (state)
  2362  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2363  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0420  084D               	movf	_state,w
  2365  0421  1903               	btfsc	3,2
  2366  0422  2BF0               	goto	l2267
  2367                           
  2368                           ;LCDTime.c: 142: {
  2369                           ;LCDTime.c: 143: LCDGotoXY(0,1) ;
  2370  0423  01FC               	clrf	LCDGotoXY@y
  2371  0424  0AFC               	incf	LCDGotoXY@y,f
  2372  0425  3000               	movlw	0
  2373  0426  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  2374                           
  2375                           ;LCDTime.c: 144: showTime();
  2376  042B  120A  158A  2509  120A  118A  	fcall	_showTime
  2377  0430  2BF0               	goto	l2267
  2378  0431                     l2269:	
  2379                           ;LCDTime.c: 145: }
  2380                           ;LCDTime.c: 146: }
  2381                           ;LCDTime.c: 148: while(bButton)
  2382                           
  2383                           
  2384                           ;LCDTime.c: 149: readInputs();
  2385  0431  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2386  0436                     l2271:	
  2387  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2388  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2389  0438  084B               	movf	_bButton,w
  2390  0439  1D03               	btfss	3,2
  2391  043A  2C31               	goto	l2269
  2392                           
  2393                           ;LCDTime.c: 151: LCDGotoXY(0,0) ;
  2394  043B  01FC               	clrf	LCDGotoXY@y
  2395  043C  3000               	movlw	0
  2396  043D  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  2397                           
  2398                           ;LCDTime.c: 152: LCDWriteString("Set Seconds");
  2399  0442  3029               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2400  0443  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2401  0448                     l2297:	
  2402                           ;LCDTime.c: 154: while(!bButton)
  2403                           
  2404  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2405  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2406  044A  084B               	movf	_bButton,w
  2407  044B  1D03               	btfss	3,2
  2408  044C  2C89               	goto	l2299
  2409                           
  2410                           ;LCDTime.c: 155: {
  2411                           ;LCDTime.c: 156: readInputs();
  2412  044D  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2413                           
  2414                           ;LCDTime.c: 158: if (state & 0x10)
  2415  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2416  0453  1303               	bcf	3,6	;RP1=0, select bank0
  2417  0454  1E4D               	btfss	_state,4
  2418  0455  2C6A               	goto	l263
  2419                           
  2420                           ;LCDTime.c: 159: {
  2421                           ;LCDTime.c: 160: seconds++;
  2422  0456  3001               	movlw	1
  2423  0457  07C6               	addwf	_seconds,f
  2424  0458  1803               	skipnc
  2425  0459  0AC7               	incf	_seconds+1,f
  2426  045A  3000               	movlw	0
  2427  045B  07C7               	addwf	_seconds+1,f
  2428                           
  2429                           ;LCDTime.c: 161: if (seconds > 59)
  2430  045C  0847               	movf	_seconds+1,w
  2431  045D  3A80               	xorlw	128
  2432  045E  00FF               	movwf	127
  2433  045F  3080               	movlw	128
  2434  0460  027F               	subwf	127,w
  2435  0461  1D03               	skipz
  2436  0462  2C65               	goto	u1895
  2437  0463  303C               	movlw	60
  2438  0464  0246               	subwf	_seconds,w
  2439  0465                     u1895:	
  2440  0465  1C03               	skipc
  2441  0466  2C76               	goto	l2291
  2442                           
  2443                           ;LCDTime.c: 162: seconds = 0 ;
  2444  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2445  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2446  0469  2C74               	goto	l2289
  2447  046A                     l263:	
  2448                           ;LCDTime.c: 163: }
  2449                           
  2450                           
  2451                           ;LCDTime.c: 164: else if (state & 0x20)
  2452  046A  1ECD               	btfss	_state,5
  2453  046B  2C76               	goto	l2291
  2454                           
  2455                           ;LCDTime.c: 165: {
  2456                           ;LCDTime.c: 166: seconds--;
  2457  046C  30FF               	movlw	255
  2458  046D  07C6               	addwf	_seconds,f
  2459  046E  1803               	skipnc
  2460  046F  0AC7               	incf	_seconds+1,f
  2461  0470  30FF               	movlw	255
  2462  0471  07C7               	addwf	_seconds+1,f
  2463                           
  2464                           ;LCDTime.c: 167: if (seconds < 0)
  2465  0472  1FC7               	btfss	_seconds+1,7
  2466  0473  2C76               	goto	l2291
  2467  0474                     l2289:	
  2468                           
  2469                           ;LCDTime.c: 168: seconds = 0 ;
  2470  0474  01C6               	clrf	_seconds
  2471  0475  01C7               	clrf	_seconds+1
  2472  0476                     l2291:	
  2473                           
  2474                           ;LCDTime.c: 169: }
  2475                           ;LCDTime.c: 171: if (state)
  2476  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2478  0478  084D               	movf	_state,w
  2479  0479  1903               	btfsc	3,2
  2480  047A  2C48               	goto	l2297
  2481                           
  2482                           ;LCDTime.c: 172: {
  2483                           ;LCDTime.c: 173: LCDGotoXY(0,1) ;
  2484  047B  01FC               	clrf	LCDGotoXY@y
  2485  047C  0AFC               	incf	LCDGotoXY@y,f
  2486  047D  3000               	movlw	0
  2487  047E  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  2488                           
  2489                           ;LCDTime.c: 174: showTime();
  2490  0483  120A  158A  2509  120A  118A  	fcall	_showTime
  2491  0488  2C48               	goto	l2297
  2492  0489                     l2299:	
  2493                           
  2494                           ;LCDTime.c: 175: }
  2495                           ;LCDTime.c: 176: }
  2496                           ;LCDTime.c: 179: if (h != hour || m != minute || s != seconds)
  2497  0489  0841               	movf	_hour+1,w
  2498  048A  062C               	xorwf	doMenu@h+1,w
  2499  048B  1D03               	skipz
  2500  048C  2C8F               	goto	u1945
  2501  048D  0840               	movf	_hour,w
  2502  048E  062B               	xorwf	doMenu@h,w
  2503  048F                     u1945:	
  2504  048F  1D03               	skipz
  2505  0490  2CA1               	goto	l2305
  2506  0491  0843               	movf	_minute+1,w
  2507  0492  062E               	xorwf	doMenu@m+1,w
  2508  0493  1D03               	skipz
  2509  0494  2C97               	goto	u1955
  2510  0495  0842               	movf	_minute,w
  2511  0496  062D               	xorwf	doMenu@m,w
  2512  0497                     u1955:	
  2513  0497  1D03               	skipz
  2514  0498  2CA1               	goto	l2305
  2515  0499  0847               	movf	_seconds+1,w
  2516  049A  0630               	xorwf	doMenu@s+1,w
  2517  049B  1D03               	skipz
  2518  049C  2C9F               	goto	u1965
  2519  049D  0846               	movf	_seconds,w
  2520  049E  062F               	xorwf	doMenu@s,w
  2521  049F                     u1965:	
  2522  049F  1903               	skipnz
  2523  04A0  2D48               	goto	l2309
  2524  04A1                     l2305:	
  2525                           
  2526                           ;LCDTime.c: 180: {
  2527                           ;LCDTime.c: 181: h = ((hour / 10) << 4) + hour % 10 ;
  2528  04A1  300A               	movlw	10
  2529  04A2  00F0               	movwf	___awdiv@divisor
  2530  04A3  3000               	movlw	0
  2531  04A4  00F1               	movwf	___awdiv@divisor+1
  2532  04A5  0841               	movf	_hour+1,w
  2533  04A6  00F3               	movwf	___awdiv@dividend+1
  2534  04A7  0840               	movf	_hour,w
  2535  04A8  00F2               	movwf	___awdiv@dividend
  2536  04A9  120A  158A  274A  120A  118A  	fcall	___awdiv
  2537  04AE  0870               	movf	?___awdiv,w
  2538  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  2539  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  2540  04B1  00A8               	movwf	??_doMenu
  2541  04B2  0871               	movf	?___awdiv+1,w
  2542  04B3  00A9               	movwf	??_doMenu+1
  2543  04B4  0EA8               	swapf	??_doMenu,f
  2544  04B5  0EA9               	swapf	??_doMenu+1,f
  2545  04B6  30F0               	movlw	240
  2546  04B7  05A9               	andwf	??_doMenu+1,f
  2547  04B8  0828               	movf	??_doMenu,w
  2548  04B9  390F               	andlw	15
  2549  04BA  04A9               	iorwf	??_doMenu+1,f
  2550  04BB  30F0               	movlw	240
  2551  04BC  05A8               	andwf	??_doMenu,f
  2552  04BD  300A               	movlw	10
  2553  04BE  00F0               	movwf	___awmod@divisor
  2554  04BF  3000               	movlw	0
  2555  04C0  00F1               	movwf	___awmod@divisor+1
  2556  04C1  0841               	movf	_hour+1,w
  2557  04C2  00F3               	movwf	___awmod@dividend+1
  2558  04C3  0840               	movf	_hour,w
  2559  04C4  00F2               	movwf	___awmod@dividend
  2560  04C5  120A  158A  25B9  120A  118A  	fcall	___awmod
  2561  04CA  0870               	movf	?___awmod,w
  2562  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2563  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2564  04CD  0728               	addwf	??_doMenu,w
  2565  04CE  00AB               	movwf	doMenu@h
  2566  04CF  0871               	movf	?___awmod+1,w
  2567  04D0  1803               	skipnc
  2568  04D1  0A71               	incf	?___awmod+1,w
  2569  04D2  0729               	addwf	??_doMenu+1,w
  2570  04D3  00AC               	movwf	doMenu@h+1
  2571                           
  2572                           ;LCDTime.c: 182: m = ((minute / 10) << 4) + minute % 10 ;
  2573  04D4  300A               	movlw	10
  2574  04D5  00F0               	movwf	___awdiv@divisor
  2575  04D6  3000               	movlw	0
  2576  04D7  00F1               	movwf	___awdiv@divisor+1
  2577  04D8  0843               	movf	_minute+1,w
  2578  04D9  00F3               	movwf	___awdiv@dividend+1
  2579  04DA  0842               	movf	_minute,w
  2580  04DB  00F2               	movwf	___awdiv@dividend
  2581  04DC  120A  158A  274A  120A  118A  	fcall	___awdiv
  2582  04E1  0870               	movf	?___awdiv,w
  2583  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  2584  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  2585  04E4  00A8               	movwf	??_doMenu
  2586  04E5  0871               	movf	?___awdiv+1,w
  2587  04E6  00A9               	movwf	??_doMenu+1
  2588  04E7  0EA8               	swapf	??_doMenu,f
  2589  04E8  0EA9               	swapf	??_doMenu+1,f
  2590  04E9  30F0               	movlw	240
  2591  04EA  05A9               	andwf	??_doMenu+1,f
  2592  04EB  0828               	movf	??_doMenu,w
  2593  04EC  390F               	andlw	15
  2594  04ED  04A9               	iorwf	??_doMenu+1,f
  2595  04EE  30F0               	movlw	240
  2596  04EF  05A8               	andwf	??_doMenu,f
  2597  04F0  300A               	movlw	10
  2598  04F1  00F0               	movwf	___awmod@divisor
  2599  04F2  3000               	movlw	0
  2600  04F3  00F1               	movwf	___awmod@divisor+1
  2601  04F4  0843               	movf	_minute+1,w
  2602  04F5  00F3               	movwf	___awmod@dividend+1
  2603  04F6  0842               	movf	_minute,w
  2604  04F7  00F2               	movwf	___awmod@dividend
  2605  04F8  120A  158A  25B9  120A  118A  	fcall	___awmod
  2606  04FD  0870               	movf	?___awmod,w
  2607  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  2608  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  2609  0500  0728               	addwf	??_doMenu,w
  2610  0501  00AD               	movwf	doMenu@m
  2611  0502  0871               	movf	?___awmod+1,w
  2612  0503  1803               	skipnc
  2613  0504  0A71               	incf	?___awmod+1,w
  2614  0505  0729               	addwf	??_doMenu+1,w
  2615  0506  00AE               	movwf	doMenu@m+1
  2616                           
  2617                           ;LCDTime.c: 183: s = ((seconds / 10) << 4) + seconds % 10 ;
  2618  0507  300A               	movlw	10
  2619  0508  00F0               	movwf	___awdiv@divisor
  2620  0509  3000               	movlw	0
  2621  050A  00F1               	movwf	___awdiv@divisor+1
  2622  050B  0847               	movf	_seconds+1,w
  2623  050C  00F3               	movwf	___awdiv@dividend+1
  2624  050D  0846               	movf	_seconds,w
  2625  050E  00F2               	movwf	___awdiv@dividend
  2626  050F  120A  158A  274A  120A  118A  	fcall	___awdiv
  2627  0514  0870               	movf	?___awdiv,w
  2628  0515  1283               	bcf	3,5	;RP0=0, select bank0
  2629  0516  1303               	bcf	3,6	;RP1=0, select bank0
  2630  0517  00A8               	movwf	??_doMenu
  2631  0518  0871               	movf	?___awdiv+1,w
  2632  0519  00A9               	movwf	??_doMenu+1
  2633  051A  0EA8               	swapf	??_doMenu,f
  2634  051B  0EA9               	swapf	??_doMenu+1,f
  2635  051C  30F0               	movlw	240
  2636  051D  05A9               	andwf	??_doMenu+1,f
  2637  051E  0828               	movf	??_doMenu,w
  2638  051F  390F               	andlw	15
  2639  0520  04A9               	iorwf	??_doMenu+1,f
  2640  0521  30F0               	movlw	240
  2641  0522  05A8               	andwf	??_doMenu,f
  2642  0523  300A               	movlw	10
  2643  0524  00F0               	movwf	___awmod@divisor
  2644  0525  3000               	movlw	0
  2645  0526  00F1               	movwf	___awmod@divisor+1
  2646  0527  0847               	movf	_seconds+1,w
  2647  0528  00F3               	movwf	___awmod@dividend+1
  2648  0529  0846               	movf	_seconds,w
  2649  052A  00F2               	movwf	___awmod@dividend
  2650  052B  120A  158A  25B9  120A  118A  	fcall	___awmod
  2651  0530  0870               	movf	?___awmod,w
  2652  0531  1283               	bcf	3,5	;RP0=0, select bank0
  2653  0532  1303               	bcf	3,6	;RP1=0, select bank0
  2654  0533  0728               	addwf	??_doMenu,w
  2655  0534  00AF               	movwf	doMenu@s
  2656  0535  0871               	movf	?___awmod+1,w
  2657  0536  1803               	skipnc
  2658  0537  0A71               	incf	?___awmod+1,w
  2659  0538  0729               	addwf	??_doMenu+1,w
  2660  0539  00B0               	movwf	doMenu@s+1
  2661                           
  2662                           ;LCDTime.c: 185: DS1307_SetTime(h,m,s) ;
  2663  053A  082D               	movf	doMenu@m,w
  2664  053B  00A8               	movwf	??_doMenu
  2665  053C  0828               	movf	??_doMenu,w
  2666  053D  00F5               	movwf	DS1307_SetTime@mm
  2667  053E  082F               	movf	doMenu@s,w
  2668  053F  00A9               	movwf	??_doMenu+1
  2669  0540  0829               	movf	??_doMenu+1,w
  2670  0541  00F6               	movwf	DS1307_SetTime@ss
  2671  0542  082B               	movf	doMenu@h,w
  2672  0543  120A  158A  245A  120A  118A  	fcall	_DS1307_SetTime
  2673  0548                     l2309:	
  2674                           ;LCDTime.c: 186: }
  2675                           ;LCDTime.c: 188: while(bButton)
  2676                           
  2677  0548  1283               	bcf	3,5	;RP0=0, select bank0
  2678  0549  1303               	bcf	3,6	;RP1=0, select bank0
  2679  054A  084B               	movf	_bButton,w
  2680  054B  1903               	btfsc	3,2
  2681  054C  2D53               	goto	l2311
  2682                           
  2683                           ;LCDTime.c: 189: readInputs();
  2684  054D  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2685  0552  2D48               	goto	l2309
  2686  0553                     l2311:	
  2687                           
  2688                           ;LCDTime.c: 190: }
  2689                           ;LCDTime.c: 193: if (menuFunction == 0 | menuFunction == 2)
  2690  0553  084C               	movf	_menuFunction,w
  2691  0554  1903               	btfsc	3,2
  2692  0555  2D5A               	goto	l2315
  2693  0556  3002               	movlw	2
  2694  0557  064C               	xorwf	_menuFunction,w
  2695  0558  1D03               	btfss	3,2
  2696  0559  0008               	return
  2697  055A                     l2315:	
  2698                           
  2699                           ;LCDTime.c: 194: {
  2700                           ;LCDTime.c: 195: int n,d,m,y ;
  2701                           ;LCDTime.c: 197: n = day ;
  2702  055A  083F               	movf	_day+1,w
  2703  055B  00B2               	movwf	doMenu@n+1
  2704  055C  083E               	movf	_day,w
  2705  055D  00B1               	movwf	doMenu@n
  2706                           
  2707                           ;LCDTime.c: 198: d = date ;
  2708  055E  083D               	movf	_date+1,w
  2709  055F  00B4               	movwf	doMenu@d+1
  2710  0560  083C               	movf	_date,w
  2711  0561  00B3               	movwf	doMenu@d
  2712                           
  2713                           ;LCDTime.c: 199: m = month ;
  2714  0562  0845               	movf	_month+1,w
  2715  0563  00B6               	movwf	doMenu@m_251+1
  2716  0564  0844               	movf	_month,w
  2717  0565  00B5               	movwf	doMenu@m_251
  2718                           
  2719                           ;LCDTime.c: 200: y = year ;
  2720  0566  0849               	movf	_year+1,w
  2721  0567  00B8               	movwf	doMenu@y+1
  2722  0568  0848               	movf	_year,w
  2723  0569  00B7               	movwf	doMenu@y
  2724                           
  2725                           ;LCDTime.c: 202: (LCDByte(0b00000001,0));
  2726  056A  01F5               	clrf	LCDByte@isdata
  2727  056B  3001               	movlw	1
  2728  056C  120A  158A  2654  120A  118A  	fcall	_LCDByte
  2729                           
  2730                           ;LCDTime.c: 203: LCDWriteString("Set Year");
  2731  0571  3069               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  2732  0572  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2733  0577                     L5:	
  2734                           
  2735                           ;LCDTime.c: 205: LCDGotoXY(0,1) ;
  2736  0577  01FC               	clrf	LCDGotoXY@y
  2737  0578  0AFC               	incf	LCDGotoXY@y,f
  2738  0579  3000               	movlw	0
  2739  057A  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  2740                           
  2741                           ;LCDTime.c: 206: showDate();
  2742  057F  120A  118A  21B2  120A  118A  	fcall	_showDate
  2743  0584                     l2345:	
  2744                           ;LCDTime.c: 208: while(!bButton)
  2745                           
  2746  0584  1283               	bcf	3,5	;RP0=0, select bank0
  2747  0585  1303               	bcf	3,6	;RP1=0, select bank0
  2748  0586  084B               	movf	_bButton,w
  2749  0587  1D03               	btfss	3,2
  2750  0588  2DC1               	goto	l2349
  2751                           
  2752                           ;LCDTime.c: 209: {
  2753                           ;LCDTime.c: 210: readInputs();
  2754  0589  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2755                           
  2756                           ;LCDTime.c: 212: if (state & 0x10)
  2757  058E  1283               	bcf	3,5	;RP0=0, select bank0
  2758  058F  1303               	bcf	3,6	;RP1=0, select bank0
  2759  0590  1E4D               	btfss	_state,4
  2760  0591  2DA8               	goto	l281
  2761                           
  2762                           ;LCDTime.c: 213: {
  2763                           ;LCDTime.c: 214: year++;
  2764  0592  3001               	movlw	1
  2765  0593  07C8               	addwf	_year,f
  2766  0594  1803               	skipnc
  2767  0595  0AC9               	incf	_year+1,f
  2768  0596  3000               	movlw	0
  2769  0597  07C9               	addwf	_year+1,f
  2770                           
  2771                           ;LCDTime.c: 215: if (year > 99)
  2772  0598  0849               	movf	_year+1,w
  2773  0599  3A80               	xorlw	128
  2774  059A  00FF               	movwf	127
  2775  059B  3080               	movlw	128
  2776  059C  027F               	subwf	127,w
  2777  059D  1D03               	skipz
  2778  059E  2DA1               	goto	u2015
  2779  059F  3064               	movlw	100
  2780  05A0  0248               	subwf	_year,w
  2781  05A1                     u2015:	
  2782  05A1  1C03               	skipc
  2783  05A2  2DB6               	goto	l2341
  2784                           
  2785                           ;LCDTime.c: 216: year = 0 ;
  2786  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  2787  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  2788  05A5  01C8               	clrf	_year
  2789  05A6  01C9               	clrf	_year+1
  2790                           
  2791                           ;LCDTime.c: 217: }
  2792  05A7  2DB6               	goto	l2341
  2793  05A8                     l281:	
  2794                           
  2795                           ;LCDTime.c: 218: else if (state & 0x20)
  2796  05A8  1ECD               	btfss	_state,5
  2797  05A9  2DB6               	goto	l2341
  2798                           
  2799                           ;LCDTime.c: 219: {
  2800                           ;LCDTime.c: 220: year--;
  2801  05AA  30FF               	movlw	255
  2802  05AB  07C8               	addwf	_year,f
  2803  05AC  1803               	skipnc
  2804  05AD  0AC9               	incf	_year+1,f
  2805  05AE  30FF               	movlw	255
  2806  05AF  07C9               	addwf	_year+1,f
  2807                           
  2808                           ;LCDTime.c: 221: if (year < 0)
  2809  05B0  1FC9               	btfss	_year+1,7
  2810  05B1  2DB6               	goto	l2341
  2811                           
  2812                           ;LCDTime.c: 222: date = 99 ;
  2813  05B2  3063               	movlw	99
  2814  05B3  00BC               	movwf	_date
  2815  05B4  3000               	movlw	0
  2816  05B5  00BD               	movwf	_date+1
  2817  05B6                     l2341:	
  2818                           
  2819                           ;LCDTime.c: 223: }
  2820                           ;LCDTime.c: 225: if (state)
  2821  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  2822  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  2823  05B8  084D               	movf	_state,w
  2824  05B9  1903               	btfsc	3,2
  2825  05BA  2D84               	goto	l2345
  2826  05BB  2D77               	goto	L5
  2827  05BC                     l2347:	
  2828                           ;LCDTime.c: 229: }
  2829                           ;LCDTime.c: 230: }
  2830                           ;LCDTime.c: 232: while(bButton)
  2831                           
  2832                           ;LCDTime.c: 228: showDate();
  2833                           
  2834                           ;LCDTime.c: 226: {
  2835                           ;LCDTime.c: 227: LCDGotoXY(0,1) ;
  2836                           
  2837                           
  2838                           ;LCDTime.c: 233: readInputs();
  2839  05BC  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2840  05C1                     l2349:	
  2841  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  2842  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  2843  05C3  084B               	movf	_bButton,w
  2844  05C4  1D03               	btfss	3,2
  2845  05C5  2DBC               	goto	l2347
  2846                           
  2847                           ;LCDTime.c: 235: LCDGotoXY(0,0) ;
  2848  05C6  01FC               	clrf	LCDGotoXY@y
  2849  05C7  3000               	movlw	0
  2850  05C8  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  2851                           
  2852                           ;LCDTime.c: 236: LCDWriteString("Set Month");
  2853  05CD  3055               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2854  05CE  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2855  05D3                     l2373:	
  2856                           ;LCDTime.c: 238: while(!bButton)
  2857                           
  2858  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  2859  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  2860  05D5  084B               	movf	_bButton,w
  2861  05D6  1D03               	btfss	3,2
  2862  05D7  2E1E               	goto	l2377
  2863                           
  2864                           ;LCDTime.c: 239: {
  2865                           ;LCDTime.c: 240: readInputs();
  2866  05D8  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2867                           
  2868                           ;LCDTime.c: 242: if (state & 0x10)
  2869  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  2870  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  2871  05DF  1E4D               	btfss	_state,4
  2872  05E0  2DF6               	goto	l293
  2873                           
  2874                           ;LCDTime.c: 243: {
  2875                           ;LCDTime.c: 244: month++;
  2876  05E1  3001               	movlw	1
  2877  05E2  07C4               	addwf	_month,f
  2878  05E3  1803               	skipnc
  2879  05E4  0AC5               	incf	_month+1,f
  2880  05E5  3000               	movlw	0
  2881  05E6  07C5               	addwf	_month+1,f
  2882                           
  2883                           ;LCDTime.c: 245: if (month > 12)
  2884  05E7  0845               	movf	_month+1,w
  2885  05E8  3A80               	xorlw	128
  2886  05E9  00FF               	movwf	127
  2887  05EA  3080               	movlw	128
  2888  05EB  027F               	subwf	127,w
  2889  05EC  1D03               	skipz
  2890  05ED  2DF0               	goto	u2085
  2891  05EE  300D               	movlw	13
  2892  05EF  0244               	subwf	_month,w
  2893  05F0                     u2085:	
  2894  05F0  1C03               	skipc
  2895  05F1  2E06               	goto	l2369
  2896                           
  2897                           ;LCDTime.c: 246: month = 1 ;
  2898  05F2  3001               	movlw	1
  2899  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  2900  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  2901  05F5  2E03               	goto	L1
  2902  05F6                     l293:	
  2903                           ;LCDTime.c: 247: }
  2904                           
  2905                           
  2906                           ;LCDTime.c: 248: else if (state & 0x20)
  2907  05F6  1ECD               	btfss	_state,5
  2908  05F7  2E06               	goto	l2369
  2909                           
  2910                           ;LCDTime.c: 249: {
  2911                           ;LCDTime.c: 250: month--;
  2912  05F8  30FF               	movlw	255
  2913  05F9  07C4               	addwf	_month,f
  2914  05FA  1803               	skipnc
  2915  05FB  0AC5               	incf	_month+1,f
  2916  05FC  30FF               	movlw	255
  2917  05FD  07C5               	addwf	_month+1,f
  2918                           
  2919                           ;LCDTime.c: 251: if (!month)
  2920  05FE  0844               	movf	_month,w
  2921  05FF  0445               	iorwf	_month+1,w
  2922  0600  1D03               	btfss	3,2
  2923  0601  2E06               	goto	l2369
  2924                           
  2925                           ;LCDTime.c: 252: month = 12 ;
  2926  0602  300C               	movlw	12
  2927  0603                     L1:	
  2928  0603  00C4               	movwf	_month
  2929  0604  3000               	movlw	0
  2930  0605  00C5               	movwf	_month+1
  2931  0606                     l2369:	
  2932                           
  2933                           ;LCDTime.c: 253: }
  2934                           ;LCDTime.c: 255: if (state)
  2935  0606  1283               	bcf	3,5	;RP0=0, select bank0
  2936  0607  1303               	bcf	3,6	;RP1=0, select bank0
  2937  0608  084D               	movf	_state,w
  2938  0609  1903               	btfsc	3,2
  2939  060A  2DD3               	goto	l2373
  2940                           
  2941                           ;LCDTime.c: 256: {
  2942                           ;LCDTime.c: 257: LCDGotoXY(0,1) ;
  2943  060B  01FC               	clrf	LCDGotoXY@y
  2944  060C  0AFC               	incf	LCDGotoXY@y,f
  2945  060D  3000               	movlw	0
  2946  060E  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  2947                           
  2948                           ;LCDTime.c: 258: showDate();
  2949  0613  120A  118A  21B2  120A  118A  	fcall	_showDate
  2950  0618  2DD3               	goto	l2373
  2951  0619                     l2375:	
  2952                           ;LCDTime.c: 259: }
  2953                           ;LCDTime.c: 260: }
  2954                           ;LCDTime.c: 262: while(bButton)
  2955                           
  2956                           
  2957                           ;LCDTime.c: 263: readInputs();
  2958  0619  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2959  061E                     l2377:	
  2960  061E  1283               	bcf	3,5	;RP0=0, select bank0
  2961  061F  1303               	bcf	3,6	;RP1=0, select bank0
  2962  0620  084B               	movf	_bButton,w
  2963  0621  1D03               	btfss	3,2
  2964  0622  2E19               	goto	l2375
  2965                           
  2966                           ;LCDTime.c: 265: LCDGotoXY(0,0) ;
  2967  0623  01FC               	clrf	LCDGotoXY@y
  2968  0624  3000               	movlw	0
  2969  0625  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  2970                           
  2971                           ;LCDTime.c: 266: LCDWriteString("Set Date ");
  2972  062A  304B               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2973  062B  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2974  0630                     l2401:	
  2975                           ;LCDTime.c: 268: while(!bButton)
  2976                           
  2977  0630  1283               	bcf	3,5	;RP0=0, select bank0
  2978  0631  1303               	bcf	3,6	;RP1=0, select bank0
  2979  0632  084B               	movf	_bButton,w
  2980  0633  1D03               	btfss	3,2
  2981  0634  2E8E               	goto	l2405
  2982                           
  2983                           ;LCDTime.c: 269: {
  2984                           ;LCDTime.c: 270: readInputs();
  2985  0635  120A  158A  24DA  120A  118A  	fcall	_readInputs
  2986                           
  2987                           ;LCDTime.c: 272: if (state & 0x10)
  2988  063A  1283               	bcf	3,5	;RP0=0, select bank0
  2989  063B  1303               	bcf	3,6	;RP1=0, select bank0
  2990  063C  1E4D               	btfss	_state,4
  2991  063D  2E5D               	goto	l305
  2992                           
  2993                           ;LCDTime.c: 273: {
  2994                           ;LCDTime.c: 274: date++;
  2995  063E  3001               	movlw	1
  2996  063F  07BC               	addwf	_date,f
  2997  0640  1803               	skipnc
  2998  0641  0ABD               	incf	_date+1,f
  2999  0642  3000               	movlw	0
  3000  0643  07BD               	addwf	_date+1,f
  3001                           
  3002                           ;LCDTime.c: 275: if (date > monthDays[month-1])
  3003  0644  0844               	movf	_month,w
  3004  0645  3EFF               	addlw	255
  3005  0646  3E1D               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3006  0647  0084               	movwf	4
  3007  0648  120A  118A  2003  120A  118A  	fcall	stringdir
  3008  064D  00A8               	movwf	??_doMenu
  3009  064E  083D               	movf	_date+1,w
  3010  064F  3A80               	xorlw	128
  3011  0650  3C80               	sublw	128
  3012  0651  1D03               	skipz
  3013  0652  2E55               	goto	u2155
  3014  0653  083C               	movf	_date,w
  3015  0654  0228               	subwf	??_doMenu,w
  3016  0655                     u2155:	
  3017  0655  1803               	skipnc
  3018  0656  2E76               	goto	l2397
  3019                           
  3020                           ;LCDTime.c: 276: date = 1 ;
  3021  0657  3001               	movlw	1
  3022  0658  1283               	bcf	3,5	;RP0=0, select bank0
  3023  0659  1303               	bcf	3,6	;RP1=0, select bank0
  3024  065A  00BC               	movwf	_date
  3025  065B  3000               	movlw	0
  3026  065C  2E75               	goto	L2
  3027  065D                     l305:	
  3028                           ;LCDTime.c: 277: }
  3029                           
  3030                           
  3031                           ;LCDTime.c: 278: else if (state & 0x20)
  3032  065D  1ECD               	btfss	_state,5
  3033  065E  2E76               	goto	l2397
  3034                           
  3035                           ;LCDTime.c: 279: {
  3036                           ;LCDTime.c: 280: date--;
  3037  065F  30FF               	movlw	255
  3038  0660  07BC               	addwf	_date,f
  3039  0661  1803               	skipnc
  3040  0662  0ABD               	incf	_date+1,f
  3041  0663  30FF               	movlw	255
  3042  0664  07BD               	addwf	_date+1,f
  3043                           
  3044                           ;LCDTime.c: 281: if (date < 0)
  3045  0665  1FBD               	btfss	_date+1,7
  3046  0666  2E76               	goto	l2397
  3047                           
  3048                           ;LCDTime.c: 282: date = monthDays[month-1] ;
  3049  0667  0844               	movf	_month,w
  3050  0668  3EFF               	addlw	255
  3051  0669  3E1D               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3052  066A  0084               	movwf	4
  3053  066B  120A  118A  2003  120A  118A  	fcall	stringdir
  3054  0670  00A8               	movwf	??_doMenu
  3055  0671  01A9               	clrf	??_doMenu+1
  3056  0672  0828               	movf	??_doMenu,w
  3057  0673  00BC               	movwf	_date
  3058  0674  0829               	movf	??_doMenu+1,w
  3059  0675                     L2:	
  3060  0675  00BD               	movwf	_date+1
  3061  0676                     l2397:	
  3062                           
  3063                           ;LCDTime.c: 283: }
  3064                           ;LCDTime.c: 285: if (state)
  3065  0676  1283               	bcf	3,5	;RP0=0, select bank0
  3066  0677  1303               	bcf	3,6	;RP1=0, select bank0
  3067  0678  084D               	movf	_state,w
  3068  0679  1903               	btfsc	3,2
  3069  067A  2E30               	goto	l2401
  3070                           
  3071                           ;LCDTime.c: 286: {
  3072                           ;LCDTime.c: 287: LCDGotoXY(0,1) ;
  3073  067B  01FC               	clrf	LCDGotoXY@y
  3074  067C  0AFC               	incf	LCDGotoXY@y,f
  3075  067D  3000               	movlw	0
  3076  067E  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  3077                           
  3078                           ;LCDTime.c: 288: showDate();
  3079  0683  120A  118A  21B2  120A  118A  	fcall	_showDate
  3080  0688  2E30               	goto	l2401
  3081  0689                     l2403:	
  3082                           ;LCDTime.c: 289: }
  3083                           ;LCDTime.c: 290: }
  3084                           ;LCDTime.c: 292: while(bButton)
  3085                           
  3086                           
  3087                           ;LCDTime.c: 293: readInputs();
  3088  0689  120A  158A  24DA  120A  118A  	fcall	_readInputs
  3089  068E                     l2405:	
  3090  068E  1283               	bcf	3,5	;RP0=0, select bank0
  3091  068F  1303               	bcf	3,6	;RP1=0, select bank0
  3092  0690  084B               	movf	_bButton,w
  3093  0691  1D03               	btfss	3,2
  3094  0692  2E89               	goto	l2403
  3095                           
  3096                           ;LCDTime.c: 295: LCDGotoXY(0,0) ;
  3097  0693  01FC               	clrf	LCDGotoXY@y
  3098  0694  3000               	movlw	0
  3099  0695  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  3100                           
  3101                           ;LCDTime.c: 296: LCDWriteString("Set Day  ");
  3102  069A  3041               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  3103  069B  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  3104  06A0                     l2429:	
  3105                           ;LCDTime.c: 298: while(!bButton)
  3106                           
  3107  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  3108  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  3109  06A2  084B               	movf	_bButton,w
  3110  06A3  1D03               	btfss	3,2
  3111  06A4  2EE4               	goto	l2431
  3112                           
  3113                           ;LCDTime.c: 299: {
  3114                           ;LCDTime.c: 300: readInputs();
  3115  06A5  120A  158A  24DA  120A  118A  	fcall	_readInputs
  3116                           
  3117                           ;LCDTime.c: 302: if (state & 0x10)
  3118  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  3119  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  3120  06AC  1E4D               	btfss	_state,4
  3121  06AD  2EC3               	goto	l317
  3122                           
  3123                           ;LCDTime.c: 303: {
  3124                           ;LCDTime.c: 304: day++;
  3125  06AE  3001               	movlw	1
  3126  06AF  07BE               	addwf	_day,f
  3127  06B0  1803               	skipnc
  3128  06B1  0ABF               	incf	_day+1,f
  3129  06B2  3000               	movlw	0
  3130  06B3  07BF               	addwf	_day+1,f
  3131                           
  3132                           ;LCDTime.c: 305: if (day > 7)
  3133  06B4  083F               	movf	_day+1,w
  3134  06B5  3A80               	xorlw	128
  3135  06B6  00FF               	movwf	127
  3136  06B7  3080               	movlw	128
  3137  06B8  027F               	subwf	127,w
  3138  06B9  1D03               	skipz
  3139  06BA  2EBD               	goto	u2225
  3140  06BB  3008               	movlw	8
  3141  06BC  023E               	subwf	_day,w
  3142  06BD                     u2225:	
  3143  06BD  1C03               	skipc
  3144  06BE  2ED1               	goto	l2425
  3145                           
  3146                           ;LCDTime.c: 306: day = 1 ;
  3147  06BF  3001               	movlw	1
  3148  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  3149  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  3150  06C2  2ECE               	goto	L3
  3151  06C3                     l317:	
  3152                           ;LCDTime.c: 307: }
  3153                           
  3154                           
  3155                           ;LCDTime.c: 308: else if (state & 0x20)
  3156  06C3  1ECD               	btfss	_state,5
  3157  06C4  2ED1               	goto	l2425
  3158                           
  3159                           ;LCDTime.c: 309: {
  3160                           ;LCDTime.c: 310: day--;
  3161  06C5  30FF               	movlw	255
  3162  06C6  07BE               	addwf	_day,f
  3163  06C7  1803               	skipnc
  3164  06C8  0ABF               	incf	_day+1,f
  3165  06C9  30FF               	movlw	255
  3166  06CA  07BF               	addwf	_day+1,f
  3167                           
  3168                           ;LCDTime.c: 311: if (day < 0)
  3169  06CB  1FBF               	btfss	_day+1,7
  3170  06CC  2ED1               	goto	l2425
  3171                           
  3172                           ;LCDTime.c: 312: day = 7 ;
  3173  06CD  3007               	movlw	7
  3174  06CE                     L3:	
  3175  06CE  00BE               	movwf	_day
  3176  06CF  3000               	movlw	0
  3177  06D0  00BF               	movwf	_day+1
  3178  06D1                     l2425:	
  3179                           
  3180                           ;LCDTime.c: 313: }
  3181                           ;LCDTime.c: 315: if (state)
  3182  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  3183  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  3184  06D3  084D               	movf	_state,w
  3185  06D4  1903               	btfsc	3,2
  3186  06D5  2EA0               	goto	l2429
  3187                           
  3188                           ;LCDTime.c: 316: {
  3189                           ;LCDTime.c: 317: LCDGotoXY(0,1) ;
  3190  06D6  01FC               	clrf	LCDGotoXY@y
  3191  06D7  0AFC               	incf	LCDGotoXY@y,f
  3192  06D8  3000               	movlw	0
  3193  06D9  120A  158A  240D  120A  118A  	fcall	_LCDGotoXY
  3194                           
  3195                           ;LCDTime.c: 318: showDate();
  3196  06DE  120A  118A  21B2  120A  118A  	fcall	_showDate
  3197  06E3  2EA0               	goto	l2429
  3198  06E4                     l2431:	
  3199                           
  3200                           ;LCDTime.c: 319: }
  3201                           ;LCDTime.c: 320: }
  3202                           ;LCDTime.c: 322: if (n != day || d != date || m != month || y != year)
  3203  06E4  083F               	movf	_day+1,w
  3204  06E5  0632               	xorwf	doMenu@n+1,w
  3205  06E6  1D03               	skipz
  3206  06E7  2EEA               	goto	u2275
  3207  06E8  083E               	movf	_day,w
  3208  06E9  0631               	xorwf	doMenu@n,w
  3209  06EA                     u2275:	
  3210  06EA  1D03               	skipz
  3211  06EB  2F04               	goto	l2439
  3212  06EC  083D               	movf	_date+1,w
  3213  06ED  0634               	xorwf	doMenu@d+1,w
  3214  06EE  1D03               	skipz
  3215  06EF  2EF2               	goto	u2285
  3216  06F0  083C               	movf	_date,w
  3217  06F1  0633               	xorwf	doMenu@d,w
  3218  06F2                     u2285:	
  3219  06F2  1D03               	skipz
  3220  06F3  2F04               	goto	l2439
  3221  06F4  0845               	movf	_month+1,w
  3222  06F5  0636               	xorwf	doMenu@m_251+1,w
  3223  06F6  1D03               	skipz
  3224  06F7  2EFA               	goto	u2295
  3225  06F8  0844               	movf	_month,w
  3226  06F9  0635               	xorwf	doMenu@m_251,w
  3227  06FA                     u2295:	
  3228  06FA  1D03               	skipz
  3229  06FB  2F04               	goto	l2439
  3230  06FC  0849               	movf	_year+1,w
  3231  06FD  0638               	xorwf	doMenu@y+1,w
  3232  06FE  1D03               	skipz
  3233  06FF  2F02               	goto	u2305
  3234  0700  0848               	movf	_year,w
  3235  0701  0637               	xorwf	doMenu@y,w
  3236  0702                     u2305:	
  3237  0702  1903               	skipnz
  3238  0703  2FE2               	goto	l2443
  3239  0704                     l2439:	
  3240                           
  3241                           ;LCDTime.c: 323: {
  3242                           ;LCDTime.c: 324: n = ((day / 10) << 4) + day % 10 ;
  3243  0704  300A               	movlw	10
  3244  0705  00F0               	movwf	___awdiv@divisor
  3245  0706  3000               	movlw	0
  3246  0707  00F1               	movwf	___awdiv@divisor+1
  3247  0708  083F               	movf	_day+1,w
  3248  0709  00F3               	movwf	___awdiv@dividend+1
  3249  070A  083E               	movf	_day,w
  3250  070B  00F2               	movwf	___awdiv@dividend
  3251  070C  120A  158A  274A  120A  118A  	fcall	___awdiv
  3252  0711  0870               	movf	?___awdiv,w
  3253  0712  1283               	bcf	3,5	;RP0=0, select bank0
  3254  0713  1303               	bcf	3,6	;RP1=0, select bank0
  3255  0714  00A8               	movwf	??_doMenu
  3256  0715  0871               	movf	?___awdiv+1,w
  3257  0716  00A9               	movwf	??_doMenu+1
  3258  0717  0EA8               	swapf	??_doMenu,f
  3259  0718  0EA9               	swapf	??_doMenu+1,f
  3260  0719  30F0               	movlw	240
  3261  071A  05A9               	andwf	??_doMenu+1,f
  3262  071B  0828               	movf	??_doMenu,w
  3263  071C  390F               	andlw	15
  3264  071D  04A9               	iorwf	??_doMenu+1,f
  3265  071E  30F0               	movlw	240
  3266  071F  05A8               	andwf	??_doMenu,f
  3267  0720  300A               	movlw	10
  3268  0721  00F0               	movwf	___awmod@divisor
  3269  0722  3000               	movlw	0
  3270  0723  00F1               	movwf	___awmod@divisor+1
  3271  0724  083F               	movf	_day+1,w
  3272  0725  00F3               	movwf	___awmod@dividend+1
  3273  0726  083E               	movf	_day,w
  3274  0727  00F2               	movwf	___awmod@dividend
  3275  0728  120A  158A  25B9  120A  118A  	fcall	___awmod
  3276  072D  0870               	movf	?___awmod,w
  3277  072E  1283               	bcf	3,5	;RP0=0, select bank0
  3278  072F  1303               	bcf	3,6	;RP1=0, select bank0
  3279  0730  0728               	addwf	??_doMenu,w
  3280  0731  00B1               	movwf	doMenu@n
  3281  0732  0871               	movf	?___awmod+1,w
  3282  0733  1803               	skipnc
  3283  0734  0A71               	incf	?___awmod+1,w
  3284  0735  0729               	addwf	??_doMenu+1,w
  3285  0736  00B2               	movwf	doMenu@n+1
  3286                           
  3287                           ;LCDTime.c: 325: d = ((date / 10) << 4) + date % 10 ;
  3288  0737  300A               	movlw	10
  3289  0738  00F0               	movwf	___awdiv@divisor
  3290  0739  3000               	movlw	0
  3291  073A  00F1               	movwf	___awdiv@divisor+1
  3292  073B  083D               	movf	_date+1,w
  3293  073C  00F3               	movwf	___awdiv@dividend+1
  3294  073D  083C               	movf	_date,w
  3295  073E  00F2               	movwf	___awdiv@dividend
  3296  073F  120A  158A  274A  120A  118A  	fcall	___awdiv
  3297  0744  0870               	movf	?___awdiv,w
  3298  0745  1283               	bcf	3,5	;RP0=0, select bank0
  3299  0746  1303               	bcf	3,6	;RP1=0, select bank0
  3300  0747  00A8               	movwf	??_doMenu
  3301  0748  0871               	movf	?___awdiv+1,w
  3302  0749  00A9               	movwf	??_doMenu+1
  3303  074A  0EA8               	swapf	??_doMenu,f
  3304  074B  0EA9               	swapf	??_doMenu+1,f
  3305  074C  30F0               	movlw	240
  3306  074D  05A9               	andwf	??_doMenu+1,f
  3307  074E  0828               	movf	??_doMenu,w
  3308  074F  390F               	andlw	15
  3309  0750  04A9               	iorwf	??_doMenu+1,f
  3310  0751  30F0               	movlw	240
  3311  0752  05A8               	andwf	??_doMenu,f
  3312  0753  300A               	movlw	10
  3313  0754  00F0               	movwf	___awmod@divisor
  3314  0755  3000               	movlw	0
  3315  0756  00F1               	movwf	___awmod@divisor+1
  3316  0757  083D               	movf	_date+1,w
  3317  0758  00F3               	movwf	___awmod@dividend+1
  3318  0759  083C               	movf	_date,w
  3319  075A  00F2               	movwf	___awmod@dividend
  3320  075B  120A  158A  25B9  120A  118A  	fcall	___awmod
  3321  0760  0870               	movf	?___awmod,w
  3322  0761  1283               	bcf	3,5	;RP0=0, select bank0
  3323  0762  1303               	bcf	3,6	;RP1=0, select bank0
  3324  0763  0728               	addwf	??_doMenu,w
  3325  0764  00B3               	movwf	doMenu@d
  3326  0765  0871               	movf	?___awmod+1,w
  3327  0766  1803               	skipnc
  3328  0767  0A71               	incf	?___awmod+1,w
  3329  0768  0729               	addwf	??_doMenu+1,w
  3330  0769  00B4               	movwf	doMenu@d+1
  3331                           
  3332                           ;LCDTime.c: 326: m = ((month / 10) << 4) + month % 10 ;
  3333  076A  300A               	movlw	10
  3334  076B  00F0               	movwf	___awdiv@divisor
  3335  076C  3000               	movlw	0
  3336  076D  00F1               	movwf	___awdiv@divisor+1
  3337  076E  0845               	movf	_month+1,w
  3338  076F  00F3               	movwf	___awdiv@dividend+1
  3339  0770  0844               	movf	_month,w
  3340  0771  00F2               	movwf	___awdiv@dividend
  3341  0772  120A  158A  274A  120A  118A  	fcall	___awdiv
  3342  0777  0870               	movf	?___awdiv,w
  3343  0778  1283               	bcf	3,5	;RP0=0, select bank0
  3344  0779  1303               	bcf	3,6	;RP1=0, select bank0
  3345  077A  00A8               	movwf	??_doMenu
  3346  077B  0871               	movf	?___awdiv+1,w
  3347  077C  00A9               	movwf	??_doMenu+1
  3348  077D  0EA8               	swapf	??_doMenu,f
  3349  077E  0EA9               	swapf	??_doMenu+1,f
  3350  077F  30F0               	movlw	240
  3351  0780  05A9               	andwf	??_doMenu+1,f
  3352  0781  0828               	movf	??_doMenu,w
  3353  0782  390F               	andlw	15
  3354  0783  04A9               	iorwf	??_doMenu+1,f
  3355  0784  30F0               	movlw	240
  3356  0785  05A8               	andwf	??_doMenu,f
  3357  0786  300A               	movlw	10
  3358  0787  00F0               	movwf	___awmod@divisor
  3359  0788  3000               	movlw	0
  3360  0789  00F1               	movwf	___awmod@divisor+1
  3361  078A  0845               	movf	_month+1,w
  3362  078B  00F3               	movwf	___awmod@dividend+1
  3363  078C  0844               	movf	_month,w
  3364  078D  00F2               	movwf	___awmod@dividend
  3365  078E  120A  158A  25B9  120A  118A  	fcall	___awmod
  3366  0793  0870               	movf	?___awmod,w
  3367  0794  1283               	bcf	3,5	;RP0=0, select bank0
  3368  0795  1303               	bcf	3,6	;RP1=0, select bank0
  3369  0796  0728               	addwf	??_doMenu,w
  3370  0797  00B5               	movwf	doMenu@m_251
  3371  0798  0871               	movf	?___awmod+1,w
  3372  0799  1803               	skipnc
  3373  079A  0A71               	incf	?___awmod+1,w
  3374  079B  0729               	addwf	??_doMenu+1,w
  3375  079C  00B6               	movwf	doMenu@m_251+1
  3376                           
  3377                           ;LCDTime.c: 327: y = ((year / 10) << 4) + year % 10 ;
  3378  079D  300A               	movlw	10
  3379  079E  00F0               	movwf	___awdiv@divisor
  3380  079F  3000               	movlw	0
  3381  07A0  00F1               	movwf	___awdiv@divisor+1
  3382  07A1  0849               	movf	_year+1,w
  3383  07A2  00F3               	movwf	___awdiv@dividend+1
  3384  07A3  0848               	movf	_year,w
  3385  07A4  00F2               	movwf	___awdiv@dividend
  3386  07A5  120A  158A  274A  120A  118A  	fcall	___awdiv
  3387  07AA  0870               	movf	?___awdiv,w
  3388  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  3389  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  3390  07AD  00A8               	movwf	??_doMenu
  3391  07AE  0871               	movf	?___awdiv+1,w
  3392  07AF  00A9               	movwf	??_doMenu+1
  3393  07B0  0EA8               	swapf	??_doMenu,f
  3394  07B1  0EA9               	swapf	??_doMenu+1,f
  3395  07B2  30F0               	movlw	240
  3396  07B3  05A9               	andwf	??_doMenu+1,f
  3397  07B4  0828               	movf	??_doMenu,w
  3398  07B5  390F               	andlw	15
  3399  07B6  04A9               	iorwf	??_doMenu+1,f
  3400  07B7  30F0               	movlw	240
  3401  07B8  05A8               	andwf	??_doMenu,f
  3402  07B9  300A               	movlw	10
  3403  07BA  00F0               	movwf	___awmod@divisor
  3404  07BB  3000               	movlw	0
  3405  07BC  00F1               	movwf	___awmod@divisor+1
  3406  07BD  0849               	movf	_year+1,w
  3407  07BE  00F3               	movwf	___awmod@dividend+1
  3408  07BF  0848               	movf	_year,w
  3409  07C0  00F2               	movwf	___awmod@dividend
  3410  07C1  120A  158A  25B9  120A  118A  	fcall	___awmod
  3411  07C6  0870               	movf	?___awmod,w
  3412  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  3413  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  3414  07C9  0728               	addwf	??_doMenu,w
  3415  07CA  00B7               	movwf	doMenu@y
  3416  07CB  0871               	movf	?___awmod+1,w
  3417  07CC  1803               	skipnc
  3418  07CD  0A71               	incf	?___awmod+1,w
  3419  07CE  0729               	addwf	??_doMenu+1,w
  3420  07CF  00B8               	movwf	doMenu@y+1
  3421                           
  3422                           ;LCDTime.c: 329: DS1307_SetDate(n,d,m,y) ;
  3423  07D0  0833               	movf	doMenu@d,w
  3424  07D1  00A8               	movwf	??_doMenu
  3425  07D2  0828               	movf	??_doMenu,w
  3426  07D3  00F5               	movwf	DS1307_SetDate@dd
  3427  07D4  0835               	movf	doMenu@m_251,w
  3428  07D5  00A9               	movwf	??_doMenu+1
  3429  07D6  0829               	movf	??_doMenu+1,w
  3430  07D7  00F6               	movwf	DS1307_SetDate@mm
  3431  07D8  0837               	movf	doMenu@y,w
  3432  07D9  00AA               	movwf	??_doMenu+2
  3433  07DA  082A               	movf	??_doMenu+2,w
  3434  07DB  00F7               	movwf	DS1307_SetDate@yy
  3435  07DC  0831               	movf	doMenu@n,w
  3436  07DD  120A  158A  24AC  120A  118A  	fcall	_DS1307_SetDate
  3437  07E2                     l2443:	
  3438                           ;LCDTime.c: 330: }
  3439                           ;LCDTime.c: 333: while(bButton)
  3440                           
  3441  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  3442  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  3443  07E4  084B               	movf	_bButton,w
  3444  07E5  1903               	btfsc	3,2
  3445  07E6  0008               	return
  3446                           
  3447                           ;LCDTime.c: 334: readInputs();
  3448  07E7  120A  158A  24DA  120A  118A  	fcall	_readInputs
  3449  07EC  2FE2               	goto	l2443
  3450  07ED                     __end_of_doMenu:	
  3451                           
  3452                           	psect	text10
  3453  0D09                     __ptext10:	
  3454 ;; *************** function _showTime *****************
  3455 ;; Defined at:
  3456 ;;		line 390 in file "LCDTime.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;		None
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;		None
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      void 
  3463 ;; Registers used:
  3464 ;;		wreg, status,2, status,0, pclath, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3470 ;;      Params:         0       0       0       0       0
  3471 ;;      Locals:         0       0       0       0       0
  3472 ;;      Temps:          1       0       0       0       0
  3473 ;;      Totals:         1       0       0       0       0
  3474 ;;Total ram usage:        1 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    3
  3477 ;; This function calls:
  3478 ;;		_LCDByte
  3479 ;;		_LCDWriteInt
  3480 ;; This function is called by:
  3481 ;;		_doMenu
  3482 ;;		_showClock
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _showTime
  3488  0D09                     _showTime:	
  3489                           
  3490                           ;LCDTime.c: 392: LCDWriteInt(hour,2);
  3491                           
  3492                           ;incstack = 0
  3493                           ; Regs used in _showTime: [wreg+status,2+status,0+pclath+cstack]
  3494  0D09  3002               	movlw	2
  3495  0D0A  00FD               	movwf	??_showTime
  3496  0D0B  087D               	movf	??_showTime,w
  3497  0D0C  00FC               	movwf	LCDWriteInt@field_length
  3498  0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0D0F  0840               	movf	_hour,w
  3501  0D10  120A  118A  214A  120A  158A  	fcall	_LCDWriteInt
  3502                           
  3503                           ;LCDTime.c: 393: (LCDByte(':',1)) ;
  3504  0D15  01F5               	clrf	LCDByte@isdata
  3505  0D16  0AF5               	incf	LCDByte@isdata,f
  3506  0D17  303A               	movlw	58
  3507  0D18  120A  158A  2654  120A  158A  	fcall	_LCDByte
  3508                           
  3509                           ;LCDTime.c: 394: LCDWriteInt(minute,2);
  3510  0D1D  3002               	movlw	2
  3511  0D1E  00FD               	movwf	??_showTime
  3512  0D1F  087D               	movf	??_showTime,w
  3513  0D20  00FC               	movwf	LCDWriteInt@field_length
  3514  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  3515  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  3516  0D23  0842               	movf	_minute,w
  3517  0D24  120A  118A  214A  120A  158A  	fcall	_LCDWriteInt
  3518                           
  3519                           ;LCDTime.c: 395: (LCDByte(':',1)) ;
  3520  0D29  01F5               	clrf	LCDByte@isdata
  3521  0D2A  0AF5               	incf	LCDByte@isdata,f
  3522  0D2B  303A               	movlw	58
  3523  0D2C  120A  158A  2654  120A  158A  	fcall	_LCDByte
  3524                           
  3525                           ;LCDTime.c: 396: LCDWriteInt(seconds,2);
  3526  0D31  3002               	movlw	2
  3527  0D32  00FD               	movwf	??_showTime
  3528  0D33  087D               	movf	??_showTime,w
  3529  0D34  00FC               	movwf	LCDWriteInt@field_length
  3530  0D35  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0D36  1303               	bcf	3,6	;RP1=0, select bank0
  3532  0D37  0846               	movf	_seconds,w
  3533  0D38  120A  118A  214A   	fcall	_LCDWriteInt
  3534  0D3B  0008               	return
  3535  0D3C                     __end_of_showTime:	
  3536                           
  3537                           	psect	text11
  3538  01B2                     __ptext11:	
  3539 ;; *************** function _showDate *****************
  3540 ;; Defined at:
  3541 ;;		line 399 in file "LCDTime.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3555 ;;      Params:         0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0
  3557 ;;      Temps:          1       0       0       0       0
  3558 ;;      Totals:         1       0       0       0       0
  3559 ;;Total ram usage:        1 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    3
  3562 ;; This function calls:
  3563 ;;		_LCDByte
  3564 ;;		_LCDWriteInt
  3565 ;;		_LCDWriteString
  3566 ;; This function is called by:
  3567 ;;		_doMenu
  3568 ;;		_showClock
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           
  3573                           ;psect for function _showDate
  3574  01B2                     _showDate:	
  3575                           
  3576                           ;LCDTime.c: 401: LCDWriteInt(date,2);
  3577                           
  3578                           ;incstack = 0
  3579                           ; Regs used in _showDate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3580  01B2  3002               	movlw	2
  3581  01B3  00FD               	movwf	??_showDate
  3582  01B4  087D               	movf	??_showDate,w
  3583  01B5  00FC               	movwf	LCDWriteInt@field_length
  3584  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  3585  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  3586  01B8  083C               	movf	_date,w
  3587  01B9  120A  118A  214A  120A  118A  	fcall	_LCDWriteInt
  3588                           
  3589                           ;LCDTime.c: 402: (LCDByte('/',1)) ;
  3590  01BE  01F5               	clrf	LCDByte@isdata
  3591  01BF  0AF5               	incf	LCDByte@isdata,f
  3592  01C0  302F               	movlw	47
  3593  01C1  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3594                           
  3595                           ;LCDTime.c: 403: LCDWriteInt(month,2);
  3596  01C6  3002               	movlw	2
  3597  01C7  00FD               	movwf	??_showDate
  3598  01C8  087D               	movf	??_showDate,w
  3599  01C9  00FC               	movwf	LCDWriteInt@field_length
  3600  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  3601  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  3602  01CC  0844               	movf	_month,w
  3603  01CD  120A  118A  214A  120A  118A  	fcall	_LCDWriteInt
  3604                           
  3605                           ;LCDTime.c: 404: (LCDByte('/',1)) ;
  3606  01D2  01F5               	clrf	LCDByte@isdata
  3607  01D3  0AF5               	incf	LCDByte@isdata,f
  3608  01D4  302F               	movlw	47
  3609  01D5  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3610                           
  3611                           ;LCDTime.c: 405: (LCDByte('2',1)) ;
  3612  01DA  01F5               	clrf	LCDByte@isdata
  3613  01DB  0AF5               	incf	LCDByte@isdata,f
  3614  01DC  3032               	movlw	50
  3615  01DD  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3616                           
  3617                           ;LCDTime.c: 406: (LCDByte('0',1)) ;
  3618  01E2  01F5               	clrf	LCDByte@isdata
  3619  01E3  0AF5               	incf	LCDByte@isdata,f
  3620  01E4  3030               	movlw	48
  3621  01E5  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3622                           
  3623                           ;LCDTime.c: 407: LCDWriteInt(year,2);
  3624  01EA  3002               	movlw	2
  3625  01EB  00FD               	movwf	??_showDate
  3626  01EC  087D               	movf	??_showDate,w
  3627  01ED  00FC               	movwf	LCDWriteInt@field_length
  3628  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  3629  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  3630  01F0  0848               	movf	_year,w
  3631  01F1  120A  118A  214A  120A  118A  	fcall	_LCDWriteInt
  3632                           
  3633                           ;LCDTime.c: 408: (LCDByte(32,1)) ;
  3634  01F6  01F5               	clrf	LCDByte@isdata
  3635  01F7  0AF5               	incf	LCDByte@isdata,f
  3636  01F8  3020               	movlw	32
  3637  01F9  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3638                           
  3639                           ;LCDTime.c: 409: (LCDByte(32,1)) ;
  3640  01FE  01F5               	clrf	LCDByte@isdata
  3641  01FF  0AF5               	incf	LCDByte@isdata,f
  3642  0200  3020               	movlw	32
  3643  0201  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3644                           
  3645                           ;LCDTime.c: 410: switch(day)
  3646  0206  2A2A               	goto	l2043
  3647  0207                     l2027:	
  3648                           ;LCDTime.c: 411: {
  3649                           ;LCDTime.c: 412: case 1 : LCDWriteString("Mon") ; break ;
  3650                           
  3651  0207  307E               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3652  0208  120A  158A  26A4   	fcall	_LCDWriteString
  3653  020B  0008               	return
  3654  020C                     l2029:	
  3655                           ;LCDTime.c: 413: case 2 : LCDWriteString("Tue") ; break ;
  3656                           
  3657  020C  3076               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3658  020D  120A  158A  26A4   	fcall	_LCDWriteString
  3659  0210  0008               	return
  3660  0211                     l2031:	
  3661                           ;LCDTime.c: 414: case 3 : LCDWriteString("Wed") ; break ;
  3662                           
  3663  0211  3072               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3664  0212  120A  158A  26A4   	fcall	_LCDWriteString
  3665  0215  0008               	return
  3666  0216                     l2033:	
  3667                           ;LCDTime.c: 415: case 4 : LCDWriteString("Thu") ; break ;
  3668                           
  3669  0216  308A               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3670  0217  120A  158A  26A4   	fcall	_LCDWriteString
  3671  021A  0008               	return
  3672  021B                     l2035:	
  3673                           ;LCDTime.c: 416: case 5 : LCDWriteString("Fri") ; break ;
  3674                           
  3675  021B  307A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  3676  021C  120A  158A  26A4   	fcall	_LCDWriteString
  3677  021F  0008               	return
  3678  0220                     l2037:	
  3679                           ;LCDTime.c: 417: case 6 : LCDWriteString("Sat") ; break ;
  3680                           
  3681  0220  3086               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  3682  0221  120A  158A  26A4   	fcall	_LCDWriteString
  3683  0224  0008               	return
  3684  0225                     l2039:	
  3685                           ;LCDTime.c: 418: case 7 : LCDWriteString("Sun") ; break ;
  3686                           
  3687  0225  3082               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  3688  0226  120A  158A  26A4   	fcall	_LCDWriteString
  3689                           
  3690                           ;LCDTime.c: 419: } ;
  3691  0229  0008               	return
  3692  022A                     l2043:	
  3693                           
  3694                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3695                           ; Switch size 1, requested type "space"
  3696                           ; Number of cases is 1, Range of values is 0 to 0
  3697                           ; switch strategies available:
  3698                           ; Name         Instructions Cycles
  3699                           ; simple_byte            4     3 (average)
  3700                           ; direct_byte           11     8 (fixed)
  3701                           ; jumptable            260     6 (fixed)
  3702                           ;	Chosen strategy is simple_byte
  3703  022A  1283               	bcf	3,5	;RP0=0, select bank0
  3704  022B  1303               	bcf	3,6	;RP1=0, select bank0
  3705  022C  083F               	movf	_day+1,w
  3706  022D  3A00               	xorlw	0	; case 0
  3707  022E  1903               	skipnz
  3708  022F  2A31               	goto	l2489
  3709  0230  2A48               	goto	l357
  3710  0231                     l2489:	
  3711                           
  3712                           ; Switch size 1, requested type "space"
  3713                           ; Number of cases is 7, Range of values is 1 to 7
  3714                           ; switch strategies available:
  3715                           ; Name         Instructions Cycles
  3716                           ; simple_byte           22    12 (average)
  3717                           ; direct_byte           32    11 (fixed)
  3718                           ; jumptable            263     9 (fixed)
  3719                           ;	Chosen strategy is simple_byte
  3720  0231  083E               	movf	_day,w
  3721  0232  3A01               	xorlw	1	; case 1
  3722  0233  1903               	skipnz
  3723  0234  2A07               	goto	l2027
  3724  0235  3A03               	xorlw	3	; case 2
  3725  0236  1903               	skipnz
  3726  0237  2A0C               	goto	l2029
  3727  0238  3A01               	xorlw	1	; case 3
  3728  0239  1903               	skipnz
  3729  023A  2A11               	goto	l2031
  3730  023B  3A07               	xorlw	7	; case 4
  3731  023C  1903               	skipnz
  3732  023D  2A16               	goto	l2033
  3733  023E  3A01               	xorlw	1	; case 5
  3734  023F  1903               	skipnz
  3735  0240  2A1B               	goto	l2035
  3736  0241  3A03               	xorlw	3	; case 6
  3737  0242  1903               	skipnz
  3738  0243  2A20               	goto	l2037
  3739  0244  3A01               	xorlw	1	; case 7
  3740  0245  1903               	skipnz
  3741  0246  2A25               	goto	l2039
  3742  0247  2A48               	goto	l357
  3743  0248                     l357:	
  3744  0248  0008               	return
  3745  0249                     __end_of_showDate:	
  3746                           
  3747                           	psect	text12
  3748  0EA4                     __ptext12:	
  3749 ;; *************** function _LCDWriteString *****************
  3750 ;; Defined at:
  3751 ;;		line 225 in file "lcd_hd44780_pic16.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  msg             1    wreg     PTR const unsigned char 
  3754 ;;		 -> STR_14(4), STR_13(4), STR_12(4), STR_11(4), 
  3755 ;;		 -> STR_10(4), STR_9(4), STR_8(4), STR_7(10), 
  3756 ;;		 -> STR_6(10), STR_5(10), STR_4(9), STR_3(12), 
  3757 ;;		 -> STR_2(12), STR_1(10), 
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;  msg             1    1[BANK0 ] PTR const unsigned char 
  3760 ;;		 -> STR_14(4), STR_13(4), STR_12(4), STR_11(4), 
  3761 ;;		 -> STR_10(4), STR_9(4), STR_8(4), STR_7(10), 
  3762 ;;		 -> STR_6(10), STR_5(10), STR_4(9), STR_3(12), 
  3763 ;;		 -> STR_2(12), STR_1(10), 
  3764 ;;  cc              1    0[BANK0 ] char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3774 ;;      Params:         0       0       0       0       0
  3775 ;;      Locals:         0       2       0       0       0
  3776 ;;      Temps:          1       0       0       0       0
  3777 ;;      Totals:         1       2       0       0       0
  3778 ;;Total ram usage:        3 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    2
  3781 ;; This function calls:
  3782 ;;		_LCDByte
  3783 ;; This function is called by:
  3784 ;;		_doMenu
  3785 ;;		_showDate
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           
  3790                           ;psect for function _LCDWriteString
  3791  0EA4                     _LCDWriteString:	
  3792                           
  3793                           ;incstack = 0
  3794                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3795                           ;LCDWriteString@msg stored from wreg
  3796  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  3797  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  3798  0EA6  00A1               	movwf	LCDWriteString@msg
  3799  0EA7                     l1901:	
  3800                           ;lcd_hd44780_pic16.c: 255: while(*msg!='\0')
  3801                           
  3802  0EA7  0821               	movf	LCDWriteString@msg,w
  3803  0EA8  0084               	movwf	4
  3804  0EA9  120A  118A  2003  120A  158A  	fcall	stringdir
  3805  0EAE  3A00               	xorlw	0
  3806  0EAF  1903               	btfsc	3,2
  3807  0EB0  0008               	return
  3808                           
  3809                           ;lcd_hd44780_pic16.c: 256: {
  3810                           ;lcd_hd44780_pic16.c: 258: if(*msg=='%')
  3811  0EB1  0821               	movf	LCDWriteString@msg,w
  3812  0EB2  0084               	movwf	4
  3813  0EB3  120A  118A  2003  120A  158A  	fcall	stringdir
  3814  0EB8  3A25               	xorlw	37
  3815  0EB9  1D03               	skipz
  3816  0EBA  2EDD               	goto	l1897
  3817                           
  3818                           ;lcd_hd44780_pic16.c: 259: {
  3819                           ;lcd_hd44780_pic16.c: 260: msg++;
  3820  0EBB  3001               	movlw	1
  3821  0EBC  00FC               	movwf	??_LCDWriteString
  3822  0EBD  087C               	movf	??_LCDWriteString,w
  3823  0EBE  07A1               	addwf	LCDWriteString@msg,f
  3824                           
  3825                           ;lcd_hd44780_pic16.c: 261: int8_t cc=*msg-'0';
  3826  0EBF  0821               	movf	LCDWriteString@msg,w
  3827  0EC0  0084               	movwf	4
  3828  0EC1  120A  118A  2003  120A  158A  	fcall	stringdir
  3829  0EC6  3ED0               	addlw	-48
  3830  0EC7  00FC               	movwf	??_LCDWriteString
  3831  0EC8  087C               	movf	??_LCDWriteString,w
  3832  0EC9  00A0               	movwf	LCDWriteString@cc
  3833                           
  3834                           ;lcd_hd44780_pic16.c: 263: if(cc>=0 && cc<=7)
  3835  0ECA  1BA0               	btfsc	LCDWriteString@cc,7
  3836  0ECB  2ED5               	goto	l1893
  3837  0ECC  0820               	movf	LCDWriteString@cc,w
  3838  0ECD  3A80               	xorlw	128
  3839  0ECE  3E78               	addlw	-136
  3840  0ECF  1803               	skipnc
  3841  0ED0  2ED5               	goto	l1893
  3842                           
  3843                           ;lcd_hd44780_pic16.c: 264: {
  3844                           ;lcd_hd44780_pic16.c: 265: (LCDByte(cc,1));
  3845  0ED1  01F5               	clrf	LCDByte@isdata
  3846  0ED2  0AF5               	incf	LCDByte@isdata,f
  3847  0ED3  0820               	movf	LCDWriteString@cc,w
  3848  0ED4  2EE8               	goto	L6
  3849  0ED5                     l1893:	
  3850                           ;lcd_hd44780_pic16.c: 266: }
  3851                           
  3852                           
  3853                           ;lcd_hd44780_pic16.c: 267: else
  3854                           ;lcd_hd44780_pic16.c: 268: {
  3855                           ;lcd_hd44780_pic16.c: 269: (LCDByte('%',1));
  3856  0ED5  01F5               	clrf	LCDByte@isdata
  3857  0ED6  0AF5               	incf	LCDByte@isdata,f
  3858  0ED7  3025               	movlw	37
  3859  0ED8  120A  158A  2654  120A  158A  	fcall	_LCDByte
  3860  0EDD                     l1897:	
  3861                           ;lcd_hd44780_pic16.c: 271: }
  3862                           ;lcd_hd44780_pic16.c: 272: }
  3863                           
  3864                           ;lcd_hd44780_pic16.c: 270: (LCDByte(*msg,1));
  3865                           
  3866                           
  3867                           ;lcd_hd44780_pic16.c: 273: else
  3868                           ;lcd_hd44780_pic16.c: 274: {
  3869                           ;lcd_hd44780_pic16.c: 275: (LCDByte(*msg,1));
  3870  0EDD  01F5               	clrf	LCDByte@isdata
  3871  0EDE  0AF5               	incf	LCDByte@isdata,f
  3872  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  3873  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  3874  0EE1  0821               	movf	LCDWriteString@msg,w
  3875  0EE2  0084               	movwf	4
  3876  0EE3  120A  118A  2003  120A  158A  	fcall	stringdir
  3877  0EE8                     L6:	
  3878  0EE8  120A  158A  2654  120A  158A  	fcall	_LCDByte
  3879                           
  3880                           ;lcd_hd44780_pic16.c: 276: }
  3881                           ;lcd_hd44780_pic16.c: 277: msg++;
  3882  0EED  3001               	movlw	1
  3883  0EEE  00FC               	movwf	??_LCDWriteString
  3884  0EEF  087C               	movf	??_LCDWriteString,w
  3885  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  3886  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  3887  0EF2  07A1               	addwf	LCDWriteString@msg,f
  3888  0EF3  2EA7               	goto	l1901
  3889  0EF4                     __end_of_LCDWriteString:	
  3890                           
  3891                           	psect	text13
  3892  014A                     __ptext13:	
  3893 ;; *************** function _LCDWriteInt *****************
  3894 ;; Defined at:
  3895 ;;		line 323 in file "lcd_hd44780_pic16.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;  val             1    wreg     unsigned char 
  3898 ;;  field_length    1   12[COMMON] char 
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;  val             1    7[BANK0 ] unsigned char 
  3901 ;;  d               2    5[BANK0 ] unsigned int 
  3902 ;;  c               2    3[BANK0 ] unsigned int 
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      void 
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0, pclath, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3912 ;;      Params:         1       0       0       0       0
  3913 ;;      Locals:         0       5       0       0       0
  3914 ;;      Temps:          0       3       0       0       0
  3915 ;;      Totals:         1       8       0       0       0
  3916 ;;Total ram usage:        9 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    2
  3919 ;; This function calls:
  3920 ;;		_LCDByte
  3921 ;;		___awdiv
  3922 ;;		___awmod
  3923 ;; This function is called by:
  3924 ;;		_showTime
  3925 ;;		_showDate
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           
  3930                           ;psect for function _LCDWriteInt
  3931  014A                     _LCDWriteInt:	
  3932                           
  3933                           ;incstack = 0
  3934                           ; Regs used in _LCDWriteInt: [wreg+status,2+status,0+pclath+cstack]
  3935                           ;LCDWriteInt@val stored from wreg
  3936  014A  1283               	bcf	3,5	;RP0=0, select bank0
  3937  014B  1303               	bcf	3,6	;RP1=0, select bank0
  3938  014C  00A7               	movwf	LCDWriteInt@val
  3939                           
  3940                           ;lcd_hd44780_pic16.c: 325: unsigned int c,d ;
  3941                           ;lcd_hd44780_pic16.c: 327: c = 0x30 + (val % 10) ;
  3942  014D  300A               	movlw	10
  3943  014E  00F0               	movwf	___awmod@divisor
  3944  014F  3000               	movlw	0
  3945  0150  00F1               	movwf	___awmod@divisor+1
  3946  0151  0827               	movf	LCDWriteInt@val,w
  3947  0152  00A0               	movwf	??_LCDWriteInt
  3948  0153  01A1               	clrf	??_LCDWriteInt+1
  3949  0154  0820               	movf	??_LCDWriteInt,w
  3950  0155  00F2               	movwf	___awmod@dividend
  3951  0156  0821               	movf	??_LCDWriteInt+1,w
  3952  0157  00F3               	movwf	___awmod@dividend+1
  3953  0158  120A  158A  25B9  120A  118A  	fcall	___awmod
  3954  015D  0870               	movf	?___awmod,w
  3955  015E  3E30               	addlw	48
  3956  015F  1283               	bcf	3,5	;RP0=0, select bank0
  3957  0160  1303               	bcf	3,6	;RP1=0, select bank0
  3958  0161  00A3               	movwf	LCDWriteInt@c
  3959  0162  0871               	movf	?___awmod+1,w
  3960  0163  1803               	skipnc
  3961  0164  3E01               	addlw	1
  3962  0165  3E00               	addlw	0
  3963  0166  00A4               	movwf	LCDWriteInt@c+1
  3964                           
  3965                           ;lcd_hd44780_pic16.c: 328: val=val/10;
  3966  0167  300A               	movlw	10
  3967  0168  00F0               	movwf	___awdiv@divisor
  3968  0169  3000               	movlw	0
  3969  016A  00F1               	movwf	___awdiv@divisor+1
  3970  016B  0827               	movf	LCDWriteInt@val,w
  3971  016C  00A0               	movwf	??_LCDWriteInt
  3972  016D  01A1               	clrf	??_LCDWriteInt+1
  3973  016E  0820               	movf	??_LCDWriteInt,w
  3974  016F  00F2               	movwf	___awdiv@dividend
  3975  0170  0821               	movf	??_LCDWriteInt+1,w
  3976  0171  00F3               	movwf	___awdiv@dividend+1
  3977  0172  120A  158A  274A  120A  118A  	fcall	___awdiv
  3978  0177  0870               	movf	?___awdiv,w
  3979  0178  1283               	bcf	3,5	;RP0=0, select bank0
  3980  0179  1303               	bcf	3,6	;RP1=0, select bank0
  3981  017A  00A2               	movwf	??_LCDWriteInt+2
  3982  017B  0822               	movf	??_LCDWriteInt+2,w
  3983  017C  00A7               	movwf	LCDWriteInt@val
  3984                           
  3985                           ;lcd_hd44780_pic16.c: 329: d = 0x30 + val ;
  3986  017D  0827               	movf	LCDWriteInt@val,w
  3987  017E  3E30               	addlw	48
  3988  017F  00A5               	movwf	LCDWriteInt@d
  3989  0180  3000               	movlw	0
  3990  0181  1803               	skipnc
  3991  0182  3001               	movlw	1
  3992  0183  00A6               	movwf	LCDWriteInt@d+1
  3993                           
  3994                           ;lcd_hd44780_pic16.c: 331: if (d > 0x39)
  3995  0184  3000               	movlw	0
  3996  0185  0226               	subwf	LCDWriteInt@d+1,w
  3997  0186  303A               	movlw	58
  3998  0187  1903               	skipnz
  3999  0188  0225               	subwf	LCDWriteInt@d,w
  4000  0189  1C03               	skipc
  4001  018A  298F               	goto	l1911
  4002                           
  4003                           ;lcd_hd44780_pic16.c: 332: (LCDByte('?',1)) ;
  4004  018B  01F5               	clrf	LCDByte@isdata
  4005  018C  0AF5               	incf	LCDByte@isdata,f
  4006  018D  303F               	movlw	63
  4007  018E  2994               	goto	L7
  4008  018F                     l1911:	
  4009                           
  4010                           ;lcd_hd44780_pic16.c: 333: else
  4011                           ;lcd_hd44780_pic16.c: 334: (LCDByte(d,1));
  4012  018F  01F5               	clrf	LCDByte@isdata
  4013  0190  0AF5               	incf	LCDByte@isdata,f
  4014  0191  1283               	bcf	3,5	;RP0=0, select bank0
  4015  0192  1303               	bcf	3,6	;RP1=0, select bank0
  4016  0193  0825               	movf	LCDWriteInt@d,w
  4017  0194                     L7:	
  4018  0194  120A  158A  2654  120A  118A  	fcall	_LCDByte
  4019                           
  4020                           ;lcd_hd44780_pic16.c: 335: if (c > 0x39)
  4021  0199  3000               	movlw	0
  4022  019A  1283               	bcf	3,5	;RP0=0, select bank0
  4023  019B  1303               	bcf	3,6	;RP1=0, select bank0
  4024  019C  0224               	subwf	LCDWriteInt@c+1,w
  4025  019D  303A               	movlw	58
  4026  019E  1903               	skipnz
  4027  019F  0223               	subwf	LCDWriteInt@c,w
  4028  01A0  1C03               	skipc
  4029  01A1  29A9               	goto	l1917
  4030                           
  4031                           ;lcd_hd44780_pic16.c: 336: (LCDByte('?',1)) ;
  4032  01A2  01F5               	clrf	LCDByte@isdata
  4033  01A3  0AF5               	incf	LCDByte@isdata,f
  4034  01A4  303F               	movlw	63
  4035  01A5  120A  158A  2654   	fcall	_LCDByte
  4036  01A8  0008               	return
  4037  01A9                     l1917:	
  4038                           
  4039                           ;lcd_hd44780_pic16.c: 337: else
  4040                           ;lcd_hd44780_pic16.c: 338: (LCDByte(c,1));
  4041  01A9  01F5               	clrf	LCDByte@isdata
  4042  01AA  0AF5               	incf	LCDByte@isdata,f
  4043  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  4044  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  4045  01AD  0823               	movf	LCDWriteInt@c,w
  4046  01AE  120A  158A  2654   	fcall	_LCDByte
  4047  01B1  0008               	return
  4048  01B2                     __end_of_LCDWriteInt:	
  4049                           
  4050                           	psect	text14
  4051  0DB9                     __ptext14:	
  4052 ;; *************** function ___awmod *****************
  4053 ;; Defined at:
  4054 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  divisor         2    0[COMMON] int 
  4057 ;;  dividend        2    2[COMMON] int 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  sign            1    6[COMMON] unsigned char 
  4060 ;;  counter         1    5[COMMON] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  2    0[COMMON] int 
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4070 ;;      Params:         4       0       0       0       0
  4071 ;;      Locals:         2       0       0       0       0
  4072 ;;      Temps:          1       0       0       0       0
  4073 ;;      Totals:         7       0       0       0       0
  4074 ;;Total ram usage:        7 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; This function calls:
  4077 ;;		Nothing
  4078 ;; This function is called by:
  4079 ;;		_LCDWriteInt
  4080 ;;		_doMenu
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           
  4085                           ;psect for function ___awmod
  4086  0DB9                     ___awmod:	
  4087                           
  4088                           ;incstack = 0
  4089                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4090  0DB9  01F6               	clrf	___awmod@sign
  4091  0DBA  1FF3               	btfss	___awmod@dividend+1,7
  4092  0DBB  2DC3               	goto	l1825
  4093  0DBC  09F2               	comf	___awmod@dividend,f
  4094  0DBD  09F3               	comf	___awmod@dividend+1,f
  4095  0DBE  0AF2               	incf	___awmod@dividend,f
  4096  0DBF  1903               	skipnz
  4097  0DC0  0AF3               	incf	___awmod@dividend+1,f
  4098  0DC1  01F6               	clrf	___awmod@sign
  4099  0DC2  0AF6               	incf	___awmod@sign,f
  4100  0DC3                     l1825:	
  4101  0DC3  1FF1               	btfss	___awmod@divisor+1,7
  4102  0DC4  2DCA               	goto	l1829
  4103  0DC5  09F0               	comf	___awmod@divisor,f
  4104  0DC6  09F1               	comf	___awmod@divisor+1,f
  4105  0DC7  0AF0               	incf	___awmod@divisor,f
  4106  0DC8  1903               	skipnz
  4107  0DC9  0AF1               	incf	___awmod@divisor+1,f
  4108  0DCA                     l1829:	
  4109  0DCA  0870               	movf	___awmod@divisor,w
  4110  0DCB  0471               	iorwf	___awmod@divisor+1,w
  4111  0DCC  1903               	btfsc	3,2
  4112  0DCD  2DF7               	goto	l1847
  4113  0DCE  01F5               	clrf	___awmod@counter
  4114  0DCF  0AF5               	incf	___awmod@counter,f
  4115  0DD0                     l1837:	
  4116  0DD0  1BF1               	btfsc	___awmod@divisor+1,7
  4117  0DD1  2DDE               	goto	l1839
  4118  0DD2  3001               	movlw	1
  4119  0DD3                     u1455:	
  4120  0DD3  1003               	clrc
  4121  0DD4  0DF0               	rlf	___awmod@divisor,f
  4122  0DD5  0DF1               	rlf	___awmod@divisor+1,f
  4123  0DD6  3EFF               	addlw	-1
  4124  0DD7  1D03               	skipz
  4125  0DD8  2DD3               	goto	u1455
  4126  0DD9  3001               	movlw	1
  4127  0DDA  00F4               	movwf	??___awmod
  4128  0DDB  0874               	movf	??___awmod,w
  4129  0DDC  07F5               	addwf	___awmod@counter,f
  4130  0DDD  2DD0               	goto	l1837
  4131  0DDE                     l1839:	
  4132  0DDE  0871               	movf	___awmod@divisor+1,w
  4133  0DDF  0273               	subwf	___awmod@dividend+1,w
  4134  0DE0  1D03               	skipz
  4135  0DE1  2DE4               	goto	u1475
  4136  0DE2  0870               	movf	___awmod@divisor,w
  4137  0DE3  0272               	subwf	___awmod@dividend,w
  4138  0DE4                     u1475:	
  4139  0DE4  1C03               	skipc
  4140  0DE5  2DEC               	goto	l1843
  4141  0DE6  0870               	movf	___awmod@divisor,w
  4142  0DE7  02F2               	subwf	___awmod@dividend,f
  4143  0DE8  0871               	movf	___awmod@divisor+1,w
  4144  0DE9  1C03               	skipc
  4145  0DEA  03F3               	decf	___awmod@dividend+1,f
  4146  0DEB  02F3               	subwf	___awmod@dividend+1,f
  4147  0DEC                     l1843:	
  4148  0DEC  3001               	movlw	1
  4149  0DED                     u1485:	
  4150  0DED  1003               	clrc
  4151  0DEE  0CF1               	rrf	___awmod@divisor+1,f
  4152  0DEF  0CF0               	rrf	___awmod@divisor,f
  4153  0DF0  3EFF               	addlw	-1
  4154  0DF1  1D03               	skipz
  4155  0DF2  2DED               	goto	u1485
  4156  0DF3  3001               	movlw	1
  4157  0DF4  02F5               	subwf	___awmod@counter,f
  4158  0DF5  1D03               	btfss	3,2
  4159  0DF6  2DDE               	goto	l1839
  4160  0DF7                     l1847:	
  4161  0DF7  0876               	movf	___awmod@sign,w
  4162  0DF8  1903               	btfsc	3,2
  4163  0DF9  2DFF               	goto	l1851
  4164  0DFA  09F2               	comf	___awmod@dividend,f
  4165  0DFB  09F3               	comf	___awmod@dividend+1,f
  4166  0DFC  0AF2               	incf	___awmod@dividend,f
  4167  0DFD  1903               	skipnz
  4168  0DFE  0AF3               	incf	___awmod@dividend+1,f
  4169  0DFF                     l1851:	
  4170  0DFF  0873               	movf	___awmod@dividend+1,w
  4171  0E00  00F1               	movwf	?___awmod+1
  4172  0E01  0872               	movf	___awmod@dividend,w
  4173  0E02  00F0               	movwf	?___awmod
  4174  0E03  0008               	return
  4175  0E04                     __end_of___awmod:	
  4176                           
  4177                           	psect	text15
  4178  0F4A                     __ptext15:	
  4179 ;; *************** function ___awdiv *****************
  4180 ;; Defined at:
  4181 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  divisor         2    0[COMMON] int 
  4184 ;;  dividend        2    2[COMMON] int 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;  quotient        2    7[COMMON] int 
  4187 ;;  sign            1    6[COMMON] unsigned char 
  4188 ;;  counter         1    5[COMMON] unsigned char 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  2    0[COMMON] int 
  4191 ;; Registers used:
  4192 ;;		wreg, status,2, status,0
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4198 ;;      Params:         4       0       0       0       0
  4199 ;;      Locals:         4       0       0       0       0
  4200 ;;      Temps:          1       0       0       0       0
  4201 ;;      Totals:         9       0       0       0       0
  4202 ;;Total ram usage:        9 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_LCDWriteInt
  4208 ;;		_doMenu
  4209 ;;		_readClock
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function ___awdiv
  4215  0F4A                     ___awdiv:	
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4219  0F4A  01F6               	clrf	___awdiv@sign
  4220  0F4B  1FF1               	btfss	___awdiv@divisor+1,7
  4221  0F4C  2F54               	goto	l1781
  4222  0F4D  09F0               	comf	___awdiv@divisor,f
  4223  0F4E  09F1               	comf	___awdiv@divisor+1,f
  4224  0F4F  0AF0               	incf	___awdiv@divisor,f
  4225  0F50  1903               	skipnz
  4226  0F51  0AF1               	incf	___awdiv@divisor+1,f
  4227  0F52  01F6               	clrf	___awdiv@sign
  4228  0F53  0AF6               	incf	___awdiv@sign,f
  4229  0F54                     l1781:	
  4230  0F54  1FF3               	btfss	___awdiv@dividend+1,7
  4231  0F55  2F5F               	goto	l1787
  4232  0F56  09F2               	comf	___awdiv@dividend,f
  4233  0F57  09F3               	comf	___awdiv@dividend+1,f
  4234  0F58  0AF2               	incf	___awdiv@dividend,f
  4235  0F59  1903               	skipnz
  4236  0F5A  0AF3               	incf	___awdiv@dividend+1,f
  4237  0F5B  3001               	movlw	1
  4238  0F5C  00F4               	movwf	??___awdiv
  4239  0F5D  0874               	movf	??___awdiv,w
  4240  0F5E  06F6               	xorwf	___awdiv@sign,f
  4241  0F5F                     l1787:	
  4242  0F5F  01F7               	clrf	___awdiv@quotient
  4243  0F60  01F8               	clrf	___awdiv@quotient+1
  4244  0F61  0870               	movf	___awdiv@divisor,w
  4245  0F62  0471               	iorwf	___awdiv@divisor+1,w
  4246  0F63  1903               	btfsc	3,2
  4247  0F64  2F96               	goto	l1809
  4248  0F65  01F5               	clrf	___awdiv@counter
  4249  0F66  0AF5               	incf	___awdiv@counter,f
  4250  0F67                     l1797:	
  4251  0F67  1BF1               	btfsc	___awdiv@divisor+1,7
  4252  0F68  2F75               	goto	l1799
  4253  0F69  3001               	movlw	1
  4254  0F6A                     u1355:	
  4255  0F6A  1003               	clrc
  4256  0F6B  0DF0               	rlf	___awdiv@divisor,f
  4257  0F6C  0DF1               	rlf	___awdiv@divisor+1,f
  4258  0F6D  3EFF               	addlw	-1
  4259  0F6E  1D03               	skipz
  4260  0F6F  2F6A               	goto	u1355
  4261  0F70  3001               	movlw	1
  4262  0F71  00F4               	movwf	??___awdiv
  4263  0F72  0874               	movf	??___awdiv,w
  4264  0F73  07F5               	addwf	___awdiv@counter,f
  4265  0F74  2F67               	goto	l1797
  4266  0F75                     l1799:	
  4267  0F75  3001               	movlw	1
  4268  0F76                     u1375:	
  4269  0F76  1003               	clrc
  4270  0F77  0DF7               	rlf	___awdiv@quotient,f
  4271  0F78  0DF8               	rlf	___awdiv@quotient+1,f
  4272  0F79  3EFF               	addlw	-1
  4273  0F7A  1D03               	skipz
  4274  0F7B  2F76               	goto	u1375
  4275  0F7C  0871               	movf	___awdiv@divisor+1,w
  4276  0F7D  0273               	subwf	___awdiv@dividend+1,w
  4277  0F7E  1D03               	skipz
  4278  0F7F  2F82               	goto	u1385
  4279  0F80  0870               	movf	___awdiv@divisor,w
  4280  0F81  0272               	subwf	___awdiv@dividend,w
  4281  0F82                     u1385:	
  4282  0F82  1C03               	skipc
  4283  0F83  2F8B               	goto	l1805
  4284  0F84  0870               	movf	___awdiv@divisor,w
  4285  0F85  02F2               	subwf	___awdiv@dividend,f
  4286  0F86  0871               	movf	___awdiv@divisor+1,w
  4287  0F87  1C03               	skipc
  4288  0F88  03F3               	decf	___awdiv@dividend+1,f
  4289  0F89  02F3               	subwf	___awdiv@dividend+1,f
  4290  0F8A  1477               	bsf	___awdiv@quotient,0
  4291  0F8B                     l1805:	
  4292  0F8B  3001               	movlw	1
  4293  0F8C                     u1395:	
  4294  0F8C  1003               	clrc
  4295  0F8D  0CF1               	rrf	___awdiv@divisor+1,f
  4296  0F8E  0CF0               	rrf	___awdiv@divisor,f
  4297  0F8F  3EFF               	addlw	-1
  4298  0F90  1D03               	skipz
  4299  0F91  2F8C               	goto	u1395
  4300  0F92  3001               	movlw	1
  4301  0F93  02F5               	subwf	___awdiv@counter,f
  4302  0F94  1D03               	btfss	3,2
  4303  0F95  2F75               	goto	l1799
  4304  0F96                     l1809:	
  4305  0F96  0876               	movf	___awdiv@sign,w
  4306  0F97  1903               	btfsc	3,2
  4307  0F98  2F9E               	goto	l1813
  4308  0F99  09F7               	comf	___awdiv@quotient,f
  4309  0F9A  09F8               	comf	___awdiv@quotient+1,f
  4310  0F9B  0AF7               	incf	___awdiv@quotient,f
  4311  0F9C  1903               	skipnz
  4312  0F9D  0AF8               	incf	___awdiv@quotient+1,f
  4313  0F9E                     l1813:	
  4314  0F9E  0878               	movf	___awdiv@quotient+1,w
  4315  0F9F  00F1               	movwf	?___awdiv+1
  4316  0FA0  0877               	movf	___awdiv@quotient,w
  4317  0FA1  00F0               	movwf	?___awdiv
  4318  0FA2  0008               	return
  4319  0FA3                     __end_of___awdiv:	
  4320                           
  4321                           	psect	text16
  4322  0CDA                     __ptext16:	
  4323 ;; *************** function _readInputs *****************
  4324 ;; Defined at:
  4325 ;;		line 338 in file "LCDTime.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  pinstate        1    3[COMMON] unsigned char 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  1    wreg      void 
  4332 ;; Registers used:
  4333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4339 ;;      Params:         0       0       0       0       0
  4340 ;;      Locals:         1       0       0       0       0
  4341 ;;      Temps:          3       0       0       0       0
  4342 ;;      Totals:         4       0       0       0       0
  4343 ;;Total ram usage:        4 bytes
  4344 ;; Hardware stack levels used:    2
  4345 ;; This function calls:
  4346 ;;		Nothing
  4347 ;; This function is called by:
  4348 ;;		_main
  4349 ;;		_doMenu
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           
  4354                           ;psect for function _readInputs
  4355  0CDA                     _readInputs:	
  4356                           
  4357                           ;LCDTime.c: 341: bButton = 0 ;
  4358                           
  4359                           ;incstack = 0
  4360                           ; Regs used in _readInputs: [wreg-fsr0h+status,2+status,0+pclath]
  4361  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  4362  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  4363  0CDC  01CB               	clrf	_bButton
  4364                           
  4365                           ;LCDTime.c: 343: if (RB4 == 1)
  4366  0CDD  1E06               	btfss	6,4	;volatile
  4367  0CDE  2CEB               	goto	l2019
  4368                           
  4369                           ;LCDTime.c: 344: {
  4370                           ;LCDTime.c: 345: _delay((unsigned long)((15)*(4000000/4000000.0))) ;
  4371  0CDF  3004               	movlw	4
  4372  0CE0  00F0               	movwf	??_readInputs
  4373  0CE1                     u2347:	
  4374  0CE1  0BF0               	decfsz	??_readInputs,f
  4375  0CE2  2CE1               	goto	u2347
  4376  0CE3  2CE4               	nop2	;nop
  4377                           
  4378                           ;LCDTime.c: 346: if (RB4 == 1)
  4379  0CE4  1283               	bcf	3,5	;RP0=0, select bank0
  4380  0CE5  1303               	bcf	3,6	;RP1=0, select bank0
  4381  0CE6  1E06               	btfss	6,4	;volatile
  4382  0CE7  2CEB               	goto	l2019
  4383                           
  4384                           ;LCDTime.c: 347: {
  4385                           ;LCDTime.c: 348: bButton = 1 ;
  4386  0CE8  01CB               	clrf	_bButton
  4387  0CE9  0ACB               	incf	_bButton,f
  4388                           
  4389                           ;LCDTime.c: 349: return ;
  4390  0CEA  0008               	return
  4391  0CEB                     l2019:	
  4392                           
  4393                           ;LCDTime.c: 350: }
  4394                           ;LCDTime.c: 351: }
  4395                           ;LCDTime.c: 353: unsigned char pinstate = (RB1 << 1) | RB2 ;
  4396  0CEB  3000               	movlw	0
  4397  0CEC  1886               	btfsc	6,1	;volatile
  4398  0CED  3002               	movlw	2
  4399  0CEE  1906               	btfsc	6,2	;volatile
  4400  0CEF  3801               	iorlw	1
  4401  0CF0  00F0               	movwf	??_readInputs
  4402  0CF1  0870               	movf	??_readInputs,w
  4403  0CF2  00F3               	movwf	readInputs@pinstate
  4404                           
  4405                           ;LCDTime.c: 355: state = ttable[state & 0xf][pinstate];
  4406  0CF3  084D               	movf	_state,w
  4407  0CF4  390F               	andlw	15
  4408  0CF5  00F0               	movwf	??_readInputs
  4409  0CF6  3002               	movlw	2
  4410  0CF7                     u1605:	
  4411  0CF7  1003               	clrc
  4412  0CF8  0DF0               	rlf	??_readInputs,f
  4413  0CF9  3EFF               	addlw	-1
  4414  0CFA  1D03               	skipz
  4415  0CFB  2CF7               	goto	u1605
  4416  0CFC  3001               	movlw	(low ((_ttable-__stringbase)| (0+32768)))& (0+255)
  4417  0CFD  0770               	addwf	??_readInputs,w
  4418  0CFE  00F1               	movwf	??_readInputs+1
  4419  0CFF  0873               	movf	readInputs@pinstate,w
  4420  0D00  0771               	addwf	??_readInputs+1,w
  4421  0D01  0084               	movwf	4
  4422  0D02  120A  118A  2003   	fcall	stringdir
  4423  0D05  00F2               	movwf	??_readInputs+2
  4424  0D06  0872               	movf	??_readInputs+2,w
  4425  0D07  00CD               	movwf	_state
  4426  0D08  0008               	return
  4427  0D09                     __end_of_readInputs:	
  4428                           
  4429                           	psect	text17
  4430  0C0D                     __ptext17:	
  4431 ;; *************** function _LCDGotoXY *****************
  4432 ;; Defined at:
  4433 ;;		line 345 in file "lcd_hd44780_pic16.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  x               1    wreg     unsigned char 
  4436 ;;  y               1   12[COMMON] unsigned char 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  x               1    0[BANK0 ] unsigned char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4448 ;;      Params:         1       0       0       0       0
  4449 ;;      Locals:         0       1       0       0       0
  4450 ;;      Temps:          1       0       0       0       0
  4451 ;;      Totals:         2       1       0       0       0
  4452 ;;Total ram usage:        3 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:    2
  4455 ;; This function calls:
  4456 ;;		_LCDByte
  4457 ;; This function is called by:
  4458 ;;		_doMenu
  4459 ;;		_showClock
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           
  4464                           ;psect for function _LCDGotoXY
  4465  0C0D                     _LCDGotoXY:	
  4466                           
  4467                           ;incstack = 0
  4468                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4469                           ;LCDGotoXY@x stored from wreg
  4470  0C0D  1283               	bcf	3,5	;RP0=0, select bank0
  4471  0C0E  1303               	bcf	3,6	;RP1=0, select bank0
  4472  0C0F  00A0               	movwf	LCDGotoXY@x
  4473                           
  4474                           ;lcd_hd44780_pic16.c: 347: if(x>=20) return;
  4475  0C10  3014               	movlw	20
  4476  0C11  0220               	subwf	LCDGotoXY@x,w
  4477  0C12  1803               	btfsc	3,0
  4478  0C13  0008               	return
  4479  0C14  2C1E               	goto	l2005
  4480  0C15                     l134:	
  4481                           ;lcd_hd44780_pic16.c: 355: case 1:
  4482                           
  4483                           ;lcd_hd44780_pic16.c: 354: break;
  4484                           
  4485                           ;lcd_hd44780_pic16.c: 352: {
  4486                           ;lcd_hd44780_pic16.c: 353: case 0:
  4487                           
  4488                           ;lcd_hd44780_pic16.c: 351: switch(y)
  4489                           
  4490                           
  4491                           ;lcd_hd44780_pic16.c: 356: x|=0b01000000;
  4492  0C15  1720               	bsf	LCDGotoXY@x,6
  4493                           
  4494                           ;lcd_hd44780_pic16.c: 357: break;
  4495  0C16  2C2C               	goto	l133
  4496  0C17                     l1999:	
  4497                           ;lcd_hd44780_pic16.c: 358: case 2:
  4498                           
  4499                           
  4500                           ;lcd_hd44780_pic16.c: 359: x+=0x14;
  4501  0C17  3014               	movlw	20
  4502  0C18  2C1A               	goto	L8
  4503  0C19                     l2001:	
  4504                           ;lcd_hd44780_pic16.c: 361: case 3:
  4505                           
  4506                           ;lcd_hd44780_pic16.c: 360: break;
  4507                           
  4508                           
  4509                           ;lcd_hd44780_pic16.c: 362: x+=0x54;
  4510  0C19  3054               	movlw	84
  4511  0C1A                     L8:	
  4512  0C1A  00FD               	movwf	??_LCDGotoXY
  4513  0C1B  087D               	movf	??_LCDGotoXY,w
  4514  0C1C  07A0               	addwf	LCDGotoXY@x,f
  4515                           
  4516                           ;lcd_hd44780_pic16.c: 364: }
  4517                           
  4518                           ;lcd_hd44780_pic16.c: 363: break;
  4519  0C1D  2C2C               	goto	l133
  4520  0C1E                     l2005:	
  4521  0C1E  087C               	movf	LCDGotoXY@y,w
  4522                           
  4523                           ; Switch size 1, requested type "space"
  4524                           ; Number of cases is 4, Range of values is 0 to 3
  4525                           ; switch strategies available:
  4526                           ; Name         Instructions Cycles
  4527                           ; simple_byte           13     7 (average)
  4528                           ; direct_byte           20     8 (fixed)
  4529                           ; jumptable            260     6 (fixed)
  4530                           ;	Chosen strategy is simple_byte
  4531  0C1F  3A00               	xorlw	0	; case 0
  4532  0C20  1903               	skipnz
  4533  0C21  2C2C               	goto	l133
  4534  0C22  3A01               	xorlw	1	; case 1
  4535  0C23  1903               	skipnz
  4536  0C24  2C15               	goto	l134
  4537  0C25  3A03               	xorlw	3	; case 2
  4538  0C26  1903               	skipnz
  4539  0C27  2C17               	goto	l1999
  4540  0C28  3A01               	xorlw	1	; case 3
  4541  0C29  1903               	skipnz
  4542  0C2A  2C19               	goto	l2001
  4543  0C2B  2C2C               	goto	l133
  4544  0C2C                     l133:	
  4545                           
  4546                           ;lcd_hd44780_pic16.c: 386: x|=0b10000000;
  4547  0C2C  17A0               	bsf	LCDGotoXY@x,7
  4548                           
  4549                           ;lcd_hd44780_pic16.c: 387: (LCDByte(x,0));
  4550  0C2D  01F5               	clrf	LCDByte@isdata
  4551  0C2E  0820               	movf	LCDGotoXY@x,w
  4552  0C2F  120A  158A  2654   	fcall	_LCDByte
  4553  0C32  0008               	return
  4554  0C33                     __end_of_LCDGotoXY:	
  4555                           
  4556                           	psect	text18
  4557  0C5A                     __ptext18:	
  4558 ;; *************** function _DS1307_SetTime *****************
  4559 ;; Defined at:
  4560 ;;		line 43 in file "DS1307.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  hh              1    wreg     unsigned char 
  4563 ;;  mm              1    5[COMMON] unsigned char 
  4564 ;;  ss              1    6[COMMON] unsigned char 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  hh              1    7[COMMON] unsigned char 
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      void 
  4569 ;; Registers used:
  4570 ;;		wreg, status,2, status,0, pclath, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4576 ;;      Params:         2       0       0       0       0
  4577 ;;      Locals:         1       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0
  4579 ;;      Totals:         3       0       0       0       0
  4580 ;;Total ram usage:        3 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    3
  4583 ;; This function calls:
  4584 ;;		_DS1307_Write
  4585 ;;		_I2C_Start
  4586 ;;		_I2C_Stop
  4587 ;; This function is called by:
  4588 ;;		_doMenu
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           
  4593                           ;psect for function _DS1307_SetTime
  4594  0C5A                     _DS1307_SetTime:	
  4595                           
  4596                           ;incstack = 0
  4597                           ; Regs used in _DS1307_SetTime: [wreg+status,2+status,0+pclath+cstack]
  4598                           ;DS1307_SetTime@hh stored from wreg
  4599  0C5A  00F7               	movwf	DS1307_SetTime@hh
  4600                           
  4601                           ;DS1307.c: 45: I2C_Start();
  4602  0C5B  120A  158A  23AD  120A  158A  	fcall	_I2C_Start
  4603                           
  4604                           ;DS1307.c: 46: DS1307_Write(0xD0);
  4605  0C60  30D0               	movlw	208
  4606  0C61  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4607                           
  4608                           ;DS1307.c: 47: DS1307_Write(0x00);
  4609  0C66  3000               	movlw	0
  4610  0C67  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4611                           
  4612                           ;DS1307.c: 48: DS1307_Write(ss);
  4613  0C6C  0876               	movf	DS1307_SetTime@ss,w
  4614  0C6D  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4615                           
  4616                           ;DS1307.c: 49: DS1307_Write(mm);
  4617  0C72  0875               	movf	DS1307_SetTime@mm,w
  4618  0C73  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4619                           
  4620                           ;DS1307.c: 50: DS1307_Write(hh);
  4621  0C78  0877               	movf	DS1307_SetTime@hh,w
  4622  0C79  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4623                           
  4624                           ;DS1307.c: 51: I2C_Stop();
  4625  0C7E  120A  158A  238D   	fcall	_I2C_Stop
  4626  0C81  0008               	return
  4627  0C82                     __end_of_DS1307_SetTime:	
  4628                           
  4629                           	psect	text19
  4630  0CAC                     __ptext19:	
  4631 ;; *************** function _DS1307_SetDate *****************
  4632 ;; Defined at:
  4633 ;;		line 54 in file "DS1307.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  nn              1    wreg     unsigned char 
  4636 ;;  dd              1    5[COMMON] unsigned char 
  4637 ;;  mm              1    6[COMMON] unsigned char 
  4638 ;;  yy              1    7[COMMON] unsigned char 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  nn              1    8[COMMON] unsigned char 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, status,0, pclath, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4650 ;;      Params:         3       0       0       0       0
  4651 ;;      Locals:         1       0       0       0       0
  4652 ;;      Temps:          0       0       0       0       0
  4653 ;;      Totals:         4       0       0       0       0
  4654 ;;Total ram usage:        4 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    3
  4657 ;; This function calls:
  4658 ;;		_DS1307_Write
  4659 ;;		_I2C_Start
  4660 ;;		_I2C_Stop
  4661 ;; This function is called by:
  4662 ;;		_doMenu
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           
  4667                           ;psect for function _DS1307_SetDate
  4668  0CAC                     _DS1307_SetDate:	
  4669                           
  4670                           ;incstack = 0
  4671                           ; Regs used in _DS1307_SetDate: [wreg+status,2+status,0+pclath+cstack]
  4672                           ;DS1307_SetDate@nn stored from wreg
  4673  0CAC  00F8               	movwf	DS1307_SetDate@nn
  4674                           
  4675                           ;DS1307.c: 56: I2C_Start();
  4676  0CAD  120A  158A  23AD  120A  158A  	fcall	_I2C_Start
  4677                           
  4678                           ;DS1307.c: 57: DS1307_Write(0xD0);
  4679  0CB2  30D0               	movlw	208
  4680  0CB3  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4681                           
  4682                           ;DS1307.c: 58: DS1307_Write(0x03);
  4683  0CB8  3003               	movlw	3
  4684  0CB9  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4685                           
  4686                           ;DS1307.c: 59: DS1307_Write(nn);
  4687  0CBE  0878               	movf	DS1307_SetDate@nn,w
  4688  0CBF  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4689                           
  4690                           ;DS1307.c: 60: DS1307_Write(dd);
  4691  0CC4  0875               	movf	DS1307_SetDate@dd,w
  4692  0CC5  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4693                           
  4694                           ;DS1307.c: 61: DS1307_Write(mm);
  4695  0CCA  0876               	movf	DS1307_SetDate@mm,w
  4696  0CCB  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4697                           
  4698                           ;DS1307.c: 62: DS1307_Write(yy);
  4699  0CD0  0877               	movf	DS1307_SetDate@yy,w
  4700  0CD1  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  4701                           
  4702                           ;DS1307.c: 63: I2C_Stop();
  4703  0CD6  120A  158A  238D   	fcall	_I2C_Stop
  4704  0CD9  0008               	return
  4705  0CDA                     __end_of_DS1307_SetDate:	
  4706                           
  4707                           	psect	text20
  4708  0D3C                     __ptext20:	
  4709 ;; *************** function _LCDInit *****************
  4710 ;; Defined at:
  4711 ;;		line 167 in file "lcd_hd44780_pic16.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  style           1    wreg     unsigned char 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  style           1    0[BANK0 ] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2, status,0, pclath, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4725 ;;      Params:         0       0       0       0       0
  4726 ;;      Locals:         0       1       0       0       0
  4727 ;;      Temps:          2       0       0       0       0
  4728 ;;      Totals:         2       1       0       0       0
  4729 ;;Total ram usage:        3 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    2
  4732 ;; This function calls:
  4733 ;;		_LCDBusyLoop
  4734 ;;		_LCDByte
  4735 ;; This function is called by:
  4736 ;;		_main
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           
  4741                           ;psect for function _LCDInit
  4742  0D3C                     _LCDInit:	
  4743                           
  4744                           ;incstack = 0
  4745                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  4746                           ;LCDInit@style stored from wreg
  4747  0D3C  1283               	bcf	3,5	;RP0=0, select bank0
  4748  0D3D  1303               	bcf	3,6	;RP1=0, select bank0
  4749  0D3E  00A0               	movwf	LCDInit@style
  4750                           
  4751                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((30)*(4000000/4000.0)));
  4752  0D3F  3027               	movlw	39
  4753  0D40  00FD               	movwf	??_LCDInit+1
  4754  0D41  30F5               	movlw	245
  4755  0D42  00FC               	movwf	??_LCDInit
  4756  0D43                     u2357:	
  4757  0D43  0BFC               	decfsz	??_LCDInit,f
  4758  0D44  2D43               	goto	u2357
  4759  0D45  0BFD               	decfsz	??_LCDInit+1,f
  4760  0D46  2D43               	goto	u2357
  4761                           
  4762                           ;lcd_hd44780_pic16.c: 186: TRISD&=(~(0x0F<<4));
  4763  0D47  300F               	movlw	15
  4764  0D48  00FC               	movwf	??_LCDInit
  4765  0D49  087C               	movf	??_LCDInit,w
  4766  0D4A  1683               	bsf	3,5	;RP0=1, select bank1
  4767  0D4B  1303               	bcf	3,6	;RP1=0, select bank1
  4768  0D4C  0588               	andwf	8,f	;volatile
  4769                           
  4770                           ;lcd_hd44780_pic16.c: 188: TRISBbits.TRISB5=0;
  4771  0D4D  1286               	bcf	6,5	;volatile
  4772                           
  4773                           ;lcd_hd44780_pic16.c: 189: TRISBbits.TRISB7=0;
  4774  0D4E  1386               	bcf	6,7	;volatile
  4775                           
  4776                           ;lcd_hd44780_pic16.c: 190: TRISBbits.TRISB6=0;
  4777  0D4F  1306               	bcf	6,6	;volatile
  4778                           
  4779                           ;lcd_hd44780_pic16.c: 192: PORTD&=(~(0x0F<<4));
  4780  0D50  300F               	movlw	15
  4781  0D51  00FC               	movwf	??_LCDInit
  4782  0D52  087C               	movf	??_LCDInit,w
  4783  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  4784  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  4785  0D55  0588               	andwf	8,f	;volatile
  4786                           
  4787                           ;lcd_hd44780_pic16.c: 194: (RB5=0);
  4788  0D56  1286               	bcf	6,5	;volatile
  4789                           
  4790                           ;lcd_hd44780_pic16.c: 195: (RB6=0);
  4791  0D57  1306               	bcf	6,6	;volatile
  4792                           
  4793                           ;lcd_hd44780_pic16.c: 196: (RB7=0);
  4794  0D58  1386               	bcf	6,7	;volatile
  4795                           
  4796                           ;lcd_hd44780_pic16.c: 201: (RB5=1);
  4797                           
  4798                           ;lcd_hd44780_pic16.c: 199: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  4799  0D59  1283               	bcf	3,5	;RP0=0, select bank0
  4800  0D5A  1303               	bcf	3,6	;RP1=0, select bank0
  4801  0D5B  1686               	bsf	6,5	;volatile
  4802                           
  4803                           ;lcd_hd44780_pic16.c: 202: PORTD|=((0b00000010)<<4);
  4804  0D5C  1688               	bsf	8,5	;volatile
  4805                           
  4806                           ;lcd_hd44780_pic16.c: 203: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4807  0D5D  0000               	nop
  4808                           
  4809                           ;lcd_hd44780_pic16.c: 204: (RB5=0);
  4810  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  4811  0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  4812  0D60  1286               	bcf	6,5	;volatile
  4813                           
  4814                           ;lcd_hd44780_pic16.c: 205: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4815  0D61  0000               	nop
  4816                           
  4817                           ;lcd_hd44780_pic16.c: 208: LCDBusyLoop();
  4818  0D62  120A  158A  27A3  120A  158A  	fcall	_LCDBusyLoop
  4819                           
  4820                           ;lcd_hd44780_pic16.c: 213: (LCDByte(0b00101000,0));
  4821  0D67  01F5               	clrf	LCDByte@isdata
  4822  0D68  3028               	movlw	40
  4823  0D69  120A  158A  2654  120A  158A  	fcall	_LCDByte
  4824                           
  4825                           ;lcd_hd44780_pic16.c: 214: (LCDByte(0b00001100|style,0));
  4826  0D6E  01F5               	clrf	LCDByte@isdata
  4827  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  4828  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  4829  0D71  0820               	movf	LCDInit@style,w
  4830  0D72  380C               	iorlw	12
  4831  0D73  120A  158A  2654   	fcall	_LCDByte
  4832  0D76  0008               	return
  4833  0D77                     __end_of_LCDInit:	
  4834                           
  4835                           	psect	text21
  4836  0E54                     __ptext21:	
  4837 ;; *************** function _LCDByte *****************
  4838 ;; Defined at:
  4839 ;;		line 54 in file "lcd_hd44780_pic16.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;  c               1    wreg     unsigned char 
  4842 ;;  isdata          1    5[COMMON] unsigned char 
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;  c               1   10[COMMON] unsigned char 
  4845 ;;  temp            1   11[COMMON] unsigned char 
  4846 ;;  ln              1    9[COMMON] unsigned char 
  4847 ;;  hn              1    8[COMMON] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  1    wreg      void 
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0, pclath, cstack
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4857 ;;      Params:         1       0       0       0       0
  4858 ;;      Locals:         4       0       0       0       0
  4859 ;;      Temps:          2       0       0       0       0
  4860 ;;      Totals:         7       0       0       0       0
  4861 ;;Total ram usage:        7 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    1
  4864 ;; This function calls:
  4865 ;;		_LCDBusyLoop
  4866 ;; This function is called by:
  4867 ;;		_LCDInit
  4868 ;;		_LCDWriteString
  4869 ;;		_LCDWriteInt
  4870 ;;		_LCDGotoXY
  4871 ;;		_main
  4872 ;;		_doMenu
  4873 ;;		_showTime
  4874 ;;		_showDate
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           
  4879                           ;psect for function _LCDByte
  4880  0E54                     _LCDByte:	
  4881                           
  4882                           ;incstack = 0
  4883                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  4884                           ;LCDByte@c stored from wreg
  4885  0E54  00FA               	movwf	LCDByte@c
  4886                           
  4887                           ;lcd_hd44780_pic16.c: 63: uint8_t hn,ln;
  4888                           ;lcd_hd44780_pic16.c: 64: uint8_t temp;
  4889                           ;lcd_hd44780_pic16.c: 66: hn=c>>4;
  4890  0E55  087A               	movf	LCDByte@c,w
  4891  0E56  00F6               	movwf	??_LCDByte
  4892  0E57  3004               	movlw	4
  4893  0E58                     u1285:	
  4894  0E58  1003               	clrc
  4895  0E59  0CF6               	rrf	??_LCDByte,f
  4896  0E5A  3EFF               	addlw	-1
  4897  0E5B  1D03               	skipz
  4898  0E5C  2E58               	goto	u1285
  4899  0E5D  0876               	movf	??_LCDByte,w
  4900  0E5E  00F7               	movwf	??_LCDByte+1
  4901  0E5F  0877               	movf	??_LCDByte+1,w
  4902  0E60  00F8               	movwf	LCDByte@hn
  4903                           
  4904                           ;lcd_hd44780_pic16.c: 67: ln=(c & 0x0F);
  4905  0E61  087A               	movf	LCDByte@c,w
  4906  0E62  390F               	andlw	15
  4907  0E63  00F6               	movwf	??_LCDByte
  4908  0E64  0876               	movf	??_LCDByte,w
  4909  0E65  00F9               	movwf	LCDByte@ln
  4910                           
  4911                           ;lcd_hd44780_pic16.c: 69: if(isdata==0)
  4912  0E66  0875               	movf	LCDByte@isdata,w
  4913  0E67  1D03               	btfss	3,2
  4914  0E68  2E6D               	goto	l99
  4915                           
  4916                           ;lcd_hd44780_pic16.c: 70: (RB7=0);
  4917  0E69  1283               	bcf	3,5	;RP0=0, select bank0
  4918  0E6A  1303               	bcf	3,6	;RP1=0, select bank0
  4919  0E6B  1386               	bcf	6,7	;volatile
  4920  0E6C  2E70               	goto	l100
  4921  0E6D                     l99:	
  4922                           
  4923                           ;lcd_hd44780_pic16.c: 71: else
  4924                           ;lcd_hd44780_pic16.c: 72: (RB7=1);
  4925  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  4926  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  4927  0E6F  1786               	bsf	6,7	;volatile
  4928  0E70                     l100:	
  4929                           
  4930                           ;lcd_hd44780_pic16.c: 74: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  4931                           ;lcd_hd44780_pic16.c: 76: (RB5=1);
  4932  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  4933  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  4934  0E72  1686               	bsf	6,5	;volatile
  4935                           
  4936                           ;lcd_hd44780_pic16.c: 80: temp=(PORTD & (~(0X0F<<4)))|((hn<<4));
  4937  0E73  0878               	movf	LCDByte@hn,w
  4938  0E74  00F6               	movwf	??_LCDByte
  4939  0E75  3004               	movlw	4
  4940  0E76                     u1305:	
  4941  0E76  1003               	clrc
  4942  0E77  0DF6               	rlf	??_LCDByte,f
  4943  0E78  3EFF               	addlw	-1
  4944  0E79  1D03               	skipz
  4945  0E7A  2E76               	goto	u1305
  4946  0E7B  0808               	movf	8,w	;volatile
  4947  0E7C  390F               	andlw	15
  4948  0E7D  0476               	iorwf	??_LCDByte,w
  4949  0E7E  00F7               	movwf	??_LCDByte+1
  4950  0E7F  0877               	movf	??_LCDByte+1,w
  4951  0E80  00FB               	movwf	LCDByte@temp
  4952                           
  4953                           ;lcd_hd44780_pic16.c: 81: PORTD=temp;
  4954  0E81  087B               	movf	LCDByte@temp,w
  4955  0E82  0088               	movwf	8	;volatile
  4956                           
  4957                           ;lcd_hd44780_pic16.c: 83: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4958  0E83  0000               	nop
  4959                           
  4960                           ;lcd_hd44780_pic16.c: 87: (RB5=0);
  4961  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  4962  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  4963  0E86  1286               	bcf	6,5	;volatile
  4964                           
  4965                           ;lcd_hd44780_pic16.c: 89: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4966  0E87  0000               	nop
  4967                           
  4968                           ;lcd_hd44780_pic16.c: 92: (RB5=1);
  4969  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  4970  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  4971  0E8A  1686               	bsf	6,5	;volatile
  4972                           
  4973                           ;lcd_hd44780_pic16.c: 94: temp=(PORTD & (~(0X0F<<4)))|((ln<<4));
  4974  0E8B  0879               	movf	LCDByte@ln,w
  4975  0E8C  00F6               	movwf	??_LCDByte
  4976  0E8D  3004               	movlw	4
  4977  0E8E                     u1315:	
  4978  0E8E  1003               	clrc
  4979  0E8F  0DF6               	rlf	??_LCDByte,f
  4980  0E90  3EFF               	addlw	-1
  4981  0E91  1D03               	skipz
  4982  0E92  2E8E               	goto	u1315
  4983  0E93  0808               	movf	8,w	;volatile
  4984  0E94  390F               	andlw	15
  4985  0E95  0476               	iorwf	??_LCDByte,w
  4986  0E96  00F7               	movwf	??_LCDByte+1
  4987  0E97  0877               	movf	??_LCDByte+1,w
  4988  0E98  00FB               	movwf	LCDByte@temp
  4989                           
  4990                           ;lcd_hd44780_pic16.c: 96: PORTD=temp;
  4991  0E99  087B               	movf	LCDByte@temp,w
  4992  0E9A  0088               	movwf	8	;volatile
  4993                           
  4994                           ;lcd_hd44780_pic16.c: 98: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4995  0E9B  0000               	nop
  4996                           
  4997                           ;lcd_hd44780_pic16.c: 102: (RB5=0);
  4998  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  4999  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  5000  0E9E  1286               	bcf	6,5	;volatile
  5001                           
  5002                           ;lcd_hd44780_pic16.c: 104: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5003  0E9F  0000               	nop
  5004                           
  5005                           ;lcd_hd44780_pic16.c: 106: LCDBusyLoop();
  5006  0EA0  120A  158A  27A3   	fcall	_LCDBusyLoop
  5007  0EA3  0008               	return
  5008  0EA4                     __end_of_LCDByte:	
  5009                           
  5010                           	psect	text22
  5011  0FA3                     __ptext22:	
  5012 ;; *************** function _LCDBusyLoop *****************
  5013 ;; Defined at:
  5014 ;;		line 109 in file "lcd_hd44780_pic16.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;		None
  5017 ;; Auto vars:     Size  Location     Type
  5018 ;;  status          1    4[COMMON] unsigned char 
  5019 ;;  temp            1    3[COMMON] unsigned char 
  5020 ;;  busy            1    2[COMMON] unsigned char 
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, status,2, status,0
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5030 ;;      Params:         0       0       0       0       0
  5031 ;;      Locals:         3       0       0       0       0
  5032 ;;      Temps:          2       0       0       0       0
  5033 ;;      Totals:         5       0       0       0       0
  5034 ;;Total ram usage:        5 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; This function calls:
  5037 ;;		Nothing
  5038 ;; This function is called by:
  5039 ;;		_LCDByte
  5040 ;;		_LCDInit
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _LCDBusyLoop
  5046  0FA3                     _LCDBusyLoop:	
  5047                           
  5048                           ;lcd_hd44780_pic16.c: 113: uint8_t busy,status=0x00,temp;
  5049                           
  5050                           ;incstack = 0
  5051                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  5052  0FA3  01F4               	clrf	LCDBusyLoop@status
  5053                           
  5054                           ;lcd_hd44780_pic16.c: 116: TRISD|=(0x0f<<4);
  5055  0FA4  30F0               	movlw	240
  5056  0FA5  00F0               	movwf	??_LCDBusyLoop
  5057  0FA6  0870               	movf	??_LCDBusyLoop,w
  5058  0FA7  1683               	bsf	3,5	;RP0=1, select bank1
  5059  0FA8  1303               	bcf	3,6	;RP1=0, select bank1
  5060  0FA9  0488               	iorwf	8,f	;volatile
  5061                           
  5062                           ;lcd_hd44780_pic16.c: 119: (RB6=1);
  5063  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  5064  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  5065  0FAC  1706               	bsf	6,6	;volatile
  5066                           
  5067                           ;lcd_hd44780_pic16.c: 120: (RB7=0);
  5068  0FAD  1386               	bcf	6,7	;volatile
  5069  0FAE                     l1669:	
  5070                           ;lcd_hd44780_pic16.c: 127: do
  5071                           
  5072                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5073                           
  5074                           
  5075                           ;lcd_hd44780_pic16.c: 128: {
  5076                           ;lcd_hd44780_pic16.c: 130: (RB5=1);
  5077  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  5078  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  5079  0FB0  1686               	bsf	6,5	;volatile
  5080                           
  5081                           ;lcd_hd44780_pic16.c: 135: status=(PORTD>>4);
  5082                           
  5083                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5084  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  5085  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  5086  0FB3  0808               	movf	8,w	;volatile
  5087  0FB4  00F0               	movwf	??_LCDBusyLoop
  5088  0FB5  3004               	movlw	4
  5089  0FB6                     u1175:	
  5090  0FB6  1003               	clrc
  5091  0FB7  0CF0               	rrf	??_LCDBusyLoop,f
  5092  0FB8  3EFF               	addlw	-1
  5093  0FB9  1D03               	skipz
  5094  0FBA  2FB6               	goto	u1175
  5095  0FBB  0870               	movf	??_LCDBusyLoop,w
  5096  0FBC  00F1               	movwf	??_LCDBusyLoop+1
  5097  0FBD  0871               	movf	??_LCDBusyLoop+1,w
  5098  0FBE  00F4               	movwf	LCDBusyLoop@status
  5099                           
  5100                           ;lcd_hd44780_pic16.c: 136: status=status<<4;
  5101  0FBF  0874               	movf	LCDBusyLoop@status,w
  5102  0FC0  00F0               	movwf	??_LCDBusyLoop
  5103  0FC1  3003               	movlw	3
  5104  0FC2                     u1185:	
  5105  0FC2  1003               	clrc
  5106  0FC3  0DF0               	rlf	??_LCDBusyLoop,f
  5107  0FC4  3EFF               	addlw	-1
  5108  0FC5  1D03               	skipz
  5109  0FC6  2FC2               	goto	u1185
  5110  0FC7  1003               	clrc
  5111  0FC8  0D70               	rlf	??_LCDBusyLoop,w
  5112  0FC9  00F1               	movwf	??_LCDBusyLoop+1
  5113  0FCA  0871               	movf	??_LCDBusyLoop+1,w
  5114  0FCB  00F4               	movwf	LCDBusyLoop@status
  5115                           
  5116                           ;lcd_hd44780_pic16.c: 141: (RB5=0);
  5117                           
  5118                           ;lcd_hd44780_pic16.c: 138: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5119  0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  5120  0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  5121  0FCE  1286               	bcf	6,5	;volatile
  5122                           
  5123                           ;lcd_hd44780_pic16.c: 142: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5124  0FCF  0000               	nop
  5125                           
  5126                           ;lcd_hd44780_pic16.c: 144: (RB5=1);
  5127  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  5128  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  5129  0FD2  1686               	bsf	6,5	;volatile
  5130                           
  5131                           ;lcd_hd44780_pic16.c: 147: temp=(PORTD>>4);
  5132                           
  5133                           ;lcd_hd44780_pic16.c: 145: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5134  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  5135  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  5136  0FD5  0808               	movf	8,w	;volatile
  5137  0FD6  00F0               	movwf	??_LCDBusyLoop
  5138  0FD7  3004               	movlw	4
  5139  0FD8                     u1195:	
  5140  0FD8  1003               	clrc
  5141  0FD9  0CF0               	rrf	??_LCDBusyLoop,f
  5142  0FDA  3EFF               	addlw	-1
  5143  0FDB  1D03               	skipz
  5144  0FDC  2FD8               	goto	u1195
  5145  0FDD  0870               	movf	??_LCDBusyLoop,w
  5146  0FDE  00F1               	movwf	??_LCDBusyLoop+1
  5147  0FDF  0871               	movf	??_LCDBusyLoop+1,w
  5148  0FE0  00F3               	movwf	LCDBusyLoop@temp
  5149                           
  5150                           ;lcd_hd44780_pic16.c: 148: temp&=0x0F;
  5151  0FE1  300F               	movlw	15
  5152  0FE2  00F0               	movwf	??_LCDBusyLoop
  5153  0FE3  0870               	movf	??_LCDBusyLoop,w
  5154  0FE4  05F3               	andwf	LCDBusyLoop@temp,f
  5155                           
  5156                           ;lcd_hd44780_pic16.c: 150: status=status|temp;
  5157  0FE5  0874               	movf	LCDBusyLoop@status,w
  5158  0FE6  0473               	iorwf	LCDBusyLoop@temp,w
  5159  0FE7  00F0               	movwf	??_LCDBusyLoop
  5160  0FE8  0870               	movf	??_LCDBusyLoop,w
  5161  0FE9  00F4               	movwf	LCDBusyLoop@status
  5162                           
  5163                           ;lcd_hd44780_pic16.c: 152: busy=status & 0b10000000;
  5164  0FEA  0874               	movf	LCDBusyLoop@status,w
  5165  0FEB  3980               	andlw	128
  5166  0FEC  00F0               	movwf	??_LCDBusyLoop
  5167  0FED  0870               	movf	??_LCDBusyLoop,w
  5168  0FEE  00F2               	movwf	LCDBusyLoop@busy
  5169                           
  5170                           ;lcd_hd44780_pic16.c: 156: (RB5=0);
  5171                           
  5172                           ;lcd_hd44780_pic16.c: 154: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5173  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  5174  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  5175  0FF1  1286               	bcf	6,5	;volatile
  5176                           
  5177                           ;lcd_hd44780_pic16.c: 157: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5178  0FF2  0000               	nop
  5179                           
  5180                           ;lcd_hd44780_pic16.c: 158: }while(busy);
  5181  0FF3  0872               	movf	LCDBusyLoop@busy,w
  5182  0FF4  1D03               	btfss	3,2
  5183  0FF5  2FAE               	goto	l1669
  5184                           
  5185                           ;lcd_hd44780_pic16.c: 160: (RB6=0);
  5186  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  5187  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  5188  0FF8  1306               	bcf	6,6	;volatile
  5189                           
  5190                           ;lcd_hd44780_pic16.c: 163: TRISD&=(~(0x0F<<4));
  5191  0FF9  300F               	movlw	15
  5192  0FFA  00F0               	movwf	??_LCDBusyLoop
  5193  0FFB  0870               	movf	??_LCDBusyLoop,w
  5194  0FFC  1683               	bsf	3,5	;RP0=1, select bank1
  5195  0FFD  1303               	bcf	3,6	;RP1=0, select bank1
  5196  0FFE  0588               	andwf	8,f	;volatile
  5197  0FFF  0008               	return
  5198  1000                     __end_of_LCDBusyLoop:	
  5199                           
  5200                           	psect	text23
  5201  0B51                     __ptext23:	
  5202 ;; *************** function _I2C_Init *****************
  5203 ;; Defined at:
  5204 ;;		line 3 in file "i2c.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;		None
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		None
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5218 ;;      Params:         0       0       0       0       0
  5219 ;;      Locals:         0       0       0       0       0
  5220 ;;      Temps:          0       0       0       0       0
  5221 ;;      Totals:         0       0       0       0       0
  5222 ;;Total ram usage:        0 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; This function calls:
  5225 ;;		Nothing
  5226 ;; This function is called by:
  5227 ;;		_main
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           
  5232                           ;psect for function _I2C_Init
  5233  0B51                     _I2C_Init:	
  5234                           
  5235                           ;i2c.c: 5: TRISD1 = 0 ;
  5236                           
  5237                           ;incstack = 0
  5238                           ; Regs used in _I2C_Init: []
  5239  0B51  1683               	bsf	3,5	;RP0=1, select bank1
  5240  0B52  1303               	bcf	3,6	;RP1=0, select bank1
  5241  0B53  1088               	bcf	8,1	;volatile
  5242                           
  5243                           ;i2c.c: 6: TRISD0 = 0 ;
  5244  0B54  1008               	bcf	8,0	;volatile
  5245  0B55  0008               	return
  5246  0B56                     __end_of_I2C_Init:	
  5247                           
  5248                           	psect	text24
  5249  0E04                     __ptext24:	
  5250 ;; *************** function _DS1307_Init *****************
  5251 ;; Defined at:
  5252 ;;		line 4 in file "DS1307.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;		None
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  s               1    6[COMMON] unsigned char 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  2   20[None  ] int 
  5259 ;; Registers used:
  5260 ;;		wreg, status,2, status,0, pclath, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5266 ;;      Params:         0       0       0       0       0
  5267 ;;      Locals:         1       0       0       0       0
  5268 ;;      Temps:          1       0       0       0       0
  5269 ;;      Totals:         2       0       0       0       0
  5270 ;;Total ram usage:        2 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    3
  5273 ;; This function calls:
  5274 ;;		_DS1307_Read
  5275 ;;		_DS1307_Write
  5276 ;;		_I2C_NoAck
  5277 ;;		_I2C_Start
  5278 ;;		_I2C_Stop
  5279 ;; This function is called by:
  5280 ;;		_main
  5281 ;; This function uses a non-reentrant model
  5282 ;;
  5283                           
  5284                           
  5285                           ;psect for function _DS1307_Init
  5286  0E04                     _DS1307_Init:	
  5287                           
  5288                           ;DS1307.c: 6: unsigned char s = 0 ;
  5289                           
  5290                           ;incstack = 0
  5291                           ; Regs used in _DS1307_Init: [wreg+status,2+status,0+pclath+cstack]
  5292  0E04  01F6               	clrf	DS1307_Init@s
  5293                           
  5294                           ;DS1307.c: 8: I2C_Start();
  5295  0E05  120A  158A  23AD  120A  158A  	fcall	_I2C_Start
  5296                           
  5297                           ;DS1307.c: 9: DS1307_Write(0xd0);
  5298  0E0A  30D0               	movlw	208
  5299  0E0B  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  5300                           
  5301                           ;DS1307.c: 10: DS1307_Write(0x00);
  5302  0E10  3000               	movlw	0
  5303  0E11  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  5304                           
  5305                           ;DS1307.c: 11: I2C_Start();
  5306  0E16  120A  158A  23AD  120A  158A  	fcall	_I2C_Start
  5307                           
  5308                           ;DS1307.c: 12: DS1307_Write(0xd1);
  5309  0E1B  30D1               	movlw	209
  5310  0E1C  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  5311                           
  5312                           ;DS1307.c: 13: s = DS1307_Read();
  5313  0E21  120A  158A  234D  120A  158A  	fcall	_DS1307_Read
  5314  0E26  00F5               	movwf	??_DS1307_Init
  5315  0E27  0875               	movf	??_DS1307_Init,w
  5316  0E28  00F6               	movwf	DS1307_Init@s
  5317                           
  5318                           ;DS1307.c: 14: I2C_NoAck();
  5319  0E29  120A  158A  235F  120A  158A  	fcall	_I2C_NoAck
  5320                           
  5321                           ;DS1307.c: 16: if (s & 0x80)
  5322  0E2E  1FF6               	btfss	DS1307_Init@s,7
  5323  0E2F  2E50               	goto	l2119
  5324                           
  5325                           ;DS1307.c: 17: {
  5326                           ;DS1307.c: 18: s = s & 0x7f ;
  5327  0E30  0876               	movf	DS1307_Init@s,w
  5328  0E31  397F               	andlw	127
  5329  0E32  00F5               	movwf	??_DS1307_Init
  5330  0E33  0875               	movf	??_DS1307_Init,w
  5331  0E34  00F6               	movwf	DS1307_Init@s
  5332                           
  5333                           ;DS1307.c: 19: I2C_Start();
  5334  0E35  120A  158A  23AD  120A  158A  	fcall	_I2C_Start
  5335                           
  5336                           ;DS1307.c: 20: DS1307_Write(0xD0);
  5337  0E3A  30D0               	movlw	208
  5338  0E3B  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  5339                           
  5340                           ;DS1307.c: 21: DS1307_Write(0x00);
  5341  0E40  3000               	movlw	0
  5342  0E41  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  5343                           
  5344                           ;DS1307.c: 22: DS1307_Write(s);
  5345  0E46  0876               	movf	DS1307_Init@s,w
  5346  0E47  120A  158A  2373  120A  158A  	fcall	_DS1307_Write
  5347                           
  5348                           ;DS1307.c: 23: I2C_Stop();
  5349  0E4C  120A  158A  238D   	fcall	_I2C_Stop
  5350                           
  5351                           ;DS1307.c: 25: }
  5352                           
  5353                           ;DS1307.c: 24: return 1 ;
  5354                           ;	Return value of _DS1307_Init is never used
  5355  0E4F  0008               	return
  5356  0E50                     l2119:	
  5357                           
  5358                           ;DS1307.c: 26: else
  5359                           ;DS1307.c: 27: I2C_Stop();
  5360  0E50  120A  158A  238D   	fcall	_I2C_Stop
  5361  0E53  0008               	return
  5362  0E54                     __end_of_DS1307_Init:	
  5363                           ;DS1307.c: 29: return 0 ;
  5364                           ;	Return value of _DS1307_Init is never used
  5365                           
  5366                           
  5367                           	psect	text25
  5368  0B8D                     __ptext25:	
  5369 ;; *************** function _I2C_Stop *****************
  5370 ;; Defined at:
  5371 ;;		line 29 in file "i2c.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;		None
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;		None
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  1    wreg      void 
  5378 ;; Registers used:
  5379 ;;		None
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5385 ;;      Params:         0       0       0       0       0
  5386 ;;      Locals:         0       0       0       0       0
  5387 ;;      Temps:          0       0       0       0       0
  5388 ;;      Totals:         0       0       0       0       0
  5389 ;;Total ram usage:        0 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; This function calls:
  5392 ;;		Nothing
  5393 ;; This function is called by:
  5394 ;;		_DS1307_Init
  5395 ;;		_DS1307_SetTime
  5396 ;;		_DS1307_SetDate
  5397 ;;		_DS1307_GetTime
  5398 ;;		_DS1307_GetDate
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           
  5403                           ;psect for function _I2C_Stop
  5404  0B8D                     _I2C_Stop:	
  5405                           
  5406                           ;i2c.c: 31: RD1 = 0;
  5407                           
  5408                           ;incstack = 0
  5409                           ; Regs used in _I2C_Stop: []
  5410  0B8D  1283               	bcf	3,5	;RP0=0, select bank0
  5411  0B8E  1303               	bcf	3,6	;RP1=0, select bank0
  5412  0B8F  1088               	bcf	8,1	;volatile
  5413                           
  5414                           ;i2c.c: 32: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5415  0B90  0000               	nop
  5416                           
  5417                           ;i2c.c: 33: RD0 = 0;
  5418  0B91  1283               	bcf	3,5	;RP0=0, select bank0
  5419  0B92  1303               	bcf	3,6	;RP1=0, select bank0
  5420  0B93  1008               	bcf	8,0	;volatile
  5421                           
  5422                           ;i2c.c: 34: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5423  0B94  0000               	nop
  5424                           
  5425                           ;i2c.c: 35: RD1 = 1;
  5426  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  5427  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  5428  0B97  1488               	bsf	8,1	;volatile
  5429                           
  5430                           ;i2c.c: 36: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5431  0B98  0000               	nop
  5432                           
  5433                           ;i2c.c: 37: RD0 = 1;
  5434  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  5435  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  5436  0B9B  1408               	bsf	8,0	;volatile
  5437  0B9C  0008               	return
  5438  0B9D                     __end_of_I2C_Stop:	
  5439                           
  5440                           	psect	text26
  5441  0BAD                     __ptext26:	
  5442 ;; *************** function _I2C_Start *****************
  5443 ;; Defined at:
  5444 ;;		line 17 in file "i2c.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;		None
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      void 
  5451 ;; Registers used:
  5452 ;;		None
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5458 ;;      Params:         0       0       0       0       0
  5459 ;;      Locals:         0       0       0       0       0
  5460 ;;      Temps:          0       0       0       0       0
  5461 ;;      Totals:         0       0       0       0       0
  5462 ;;Total ram usage:        0 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; This function calls:
  5465 ;;		Nothing
  5466 ;; This function is called by:
  5467 ;;		_DS1307_Init
  5468 ;;		_DS1307_SetTime
  5469 ;;		_DS1307_SetDate
  5470 ;;		_DS1307_GetTime
  5471 ;;		_DS1307_GetDate
  5472 ;; This function uses a non-reentrant model
  5473 ;;
  5474                           
  5475                           
  5476                           ;psect for function _I2C_Start
  5477  0BAD                     _I2C_Start:	
  5478                           
  5479                           ;i2c.c: 19: RD1 = 0;
  5480                           
  5481                           ;incstack = 0
  5482                           ; Regs used in _I2C_Start: []
  5483  0BAD  1283               	bcf	3,5	;RP0=0, select bank0
  5484  0BAE  1303               	bcf	3,6	;RP1=0, select bank0
  5485  0BAF  1088               	bcf	8,1	;volatile
  5486                           
  5487                           ;i2c.c: 20: RD0 = 1;
  5488  0BB0  1408               	bsf	8,0	;volatile
  5489                           
  5490                           ;i2c.c: 21: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5491  0BB1  0000               	nop
  5492                           
  5493                           ;i2c.c: 22: RD1 = 1;
  5494  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  5495  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  5496  0BB4  1488               	bsf	8,1	;volatile
  5497                           
  5498                           ;i2c.c: 23: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5499  0BB5  0000               	nop
  5500                           
  5501                           ;i2c.c: 24: RD0 = 0;
  5502  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
  5503  0BB7  1303               	bcf	3,6	;RP1=0, select bank0
  5504  0BB8  1008               	bcf	8,0	;volatile
  5505                           
  5506                           ;i2c.c: 25: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5507  0BB9  0000               	nop
  5508                           
  5509                           ;i2c.c: 26: RD1 = 0;
  5510  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  5511  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  5512  0BBC  1088               	bcf	8,1	;volatile
  5513  0BBD  0008               	return
  5514  0BBE                     __end_of_I2C_Start:	
  5515                           
  5516                           	psect	text27
  5517  0B5F                     __ptext27:	
  5518 ;; *************** function _I2C_NoAck *****************
  5519 ;; Defined at:
  5520 ;;		line 88 in file "i2c.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;		None
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;		None
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  1    wreg      void 
  5527 ;; Registers used:
  5528 ;;		status,2, status,0, pclath, cstack
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5534 ;;      Params:         0       0       0       0       0
  5535 ;;      Locals:         0       0       0       0       0
  5536 ;;      Temps:          0       0       0       0       0
  5537 ;;      Totals:         0       0       0       0       0
  5538 ;;Total ram usage:        0 bytes
  5539 ;; Hardware stack levels used:    1
  5540 ;; Hardware stack levels required when called:    1
  5541 ;; This function calls:
  5542 ;;		_I2C_Clock
  5543 ;; This function is called by:
  5544 ;;		_DS1307_Init
  5545 ;;		_DS1307_GetTime
  5546 ;;		_DS1307_GetDate
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           
  5551                           ;psect for function _I2C_NoAck
  5552  0B5F                     _I2C_NoAck:	
  5553                           
  5554                           ;i2c.c: 90: RD0 = 1;
  5555                           
  5556                           ;incstack = 0
  5557                           ; Regs used in _I2C_NoAck: [status,2+status,0+pclath+cstack]
  5558  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  5559  0B60  1303               	bcf	3,6	;RP1=0, select bank0
  5560  0B61  1408               	bsf	8,0	;volatile
  5561                           
  5562                           ;i2c.c: 91: I2C_Clock();
  5563  0B62  120A  158A  2356   	fcall	_I2C_Clock
  5564                           
  5565                           ;i2c.c: 92: RD1 = 1;
  5566  0B65  1283               	bcf	3,5	;RP0=0, select bank0
  5567  0B66  1303               	bcf	3,6	;RP1=0, select bank0
  5568  0B67  1488               	bsf	8,1	;volatile
  5569  0B68  0008               	return
  5570  0B69                     __end_of_I2C_NoAck:	
  5571                           
  5572                           	psect	text28
  5573  0B73                     __ptext28:	
  5574 ;; *************** function _DS1307_Write *****************
  5575 ;; Defined at:
  5576 ;;		line 32 in file "DS1307.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  dat             1    wreg     unsigned char 
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;  dat             1    4[COMMON] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      void 
  5583 ;; Registers used:
  5584 ;;		wreg, status,2, status,0, pclath, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5590 ;;      Params:         0       0       0       0       0
  5591 ;;      Locals:         1       0       0       0       0
  5592 ;;      Temps:          0       0       0       0       0
  5593 ;;      Totals:         1       0       0       0       0
  5594 ;;Total ram usage:        1 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    2
  5597 ;; This function calls:
  5598 ;;		_I2C_Clock
  5599 ;;		_I2C_Write
  5600 ;; This function is called by:
  5601 ;;		_DS1307_Init
  5602 ;;		_DS1307_SetTime
  5603 ;;		_DS1307_SetDate
  5604 ;;		_DS1307_GetTime
  5605 ;;		_DS1307_GetDate
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           
  5610                           ;psect for function _DS1307_Write
  5611  0B73                     _DS1307_Write:	
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _DS1307_Write: [wreg+status,2+status,0+pclath+cstack]
  5615                           ;DS1307_Write@dat stored from wreg
  5616  0B73  00F4               	movwf	DS1307_Write@dat
  5617                           
  5618                           ;DS1307.c: 34: I2C_Write(dat);
  5619  0B74  0874               	movf	DS1307_Write@dat,w
  5620  0B75  120A  158A  23E7  120A  158A  	fcall	_I2C_Write
  5621                           
  5622                           ;DS1307.c: 35: I2C_Clock();
  5623  0B7A  120A  158A  2356   	fcall	_I2C_Clock
  5624  0B7D  0008               	return
  5625  0B7E                     __end_of_DS1307_Write:	
  5626                           
  5627                           	psect	text29
  5628  0BE7                     __ptext29:	
  5629 ;; *************** function _I2C_Write *****************
  5630 ;; Defined at:
  5631 ;;		line 40 in file "i2c.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  dat             1    wreg     unsigned char 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  dat             1    2[COMMON] unsigned char 
  5636 ;;  i               1    3[COMMON] unsigned char 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0, pclath, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5646 ;;      Params:         0       0       0       0       0
  5647 ;;      Locals:         2       0       0       0       0
  5648 ;;      Temps:          2       0       0       0       0
  5649 ;;      Totals:         4       0       0       0       0
  5650 ;;Total ram usage:        4 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    1
  5653 ;; This function calls:
  5654 ;;		_I2C_Clock
  5655 ;; This function is called by:
  5656 ;;		_DS1307_Write
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           
  5661                           ;psect for function _I2C_Write
  5662  0BE7                     _I2C_Write:	
  5663                           
  5664                           ;incstack = 0
  5665                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  5666                           ;I2C_Write@dat stored from wreg
  5667  0BE7  00F2               	movwf	I2C_Write@dat
  5668                           
  5669                           ;i2c.c: 42: unsigned char i ;
  5670                           ;i2c.c: 43: for(i=0;i<8;i++)
  5671  0BE8  01F3               	clrf	I2C_Write@i
  5672  0BE9  3008               	movlw	8
  5673  0BEA  0273               	subwf	I2C_Write@i,w
  5674  0BEB  1803               	btfsc	3,0
  5675  0BEC  2C09               	goto	l67
  5676  0BED                     l66:	
  5677                           
  5678                           ;i2c.c: 44: {
  5679                           ;i2c.c: 45: RD0 = (dat & 0x80) ? 1 : 0 ;
  5680  0BED  1FF2               	btfss	I2C_Write@dat,7
  5681  0BEE  2BF3               	goto	u1220
  5682  0BEF  1283               	bcf	3,5	;RP0=0, select bank0
  5683  0BF0  1303               	bcf	3,6	;RP1=0, select bank0
  5684  0BF1  1408               	bsf	8,0	;volatile
  5685  0BF2  2BF6               	goto	l1711
  5686  0BF3                     u1220:	
  5687  0BF3  1283               	bcf	3,5	;RP0=0, select bank0
  5688  0BF4  1303               	bcf	3,6	;RP1=0, select bank0
  5689  0BF5  1008               	bcf	8,0	;volatile
  5690  0BF6                     l1711:	
  5691                           
  5692                           ;i2c.c: 47: I2C_Clock();
  5693  0BF6  120A  158A  2356  120A  158A  	fcall	_I2C_Clock
  5694                           
  5695                           ;i2c.c: 49: dat = dat << 1;
  5696  0BFB  0872               	movf	I2C_Write@dat,w
  5697  0BFC  00F0               	movwf	??_I2C_Write
  5698  0BFD  0770               	addwf	??_I2C_Write,w
  5699  0BFE  00F1               	movwf	??_I2C_Write+1
  5700  0BFF  0871               	movf	??_I2C_Write+1,w
  5701  0C00  00F2               	movwf	I2C_Write@dat
  5702  0C01  3001               	movlw	1
  5703  0C02  00F0               	movwf	??_I2C_Write
  5704  0C03  0870               	movf	??_I2C_Write,w
  5705  0C04  07F3               	addwf	I2C_Write@i,f
  5706  0C05  3008               	movlw	8
  5707  0C06  0273               	subwf	I2C_Write@i,w
  5708  0C07  1C03               	skipc
  5709  0C08  2BED               	goto	l66
  5710  0C09                     l67:	
  5711                           
  5712                           ;i2c.c: 50: }
  5713                           ;i2c.c: 51: RD0 = 1;
  5714  0C09  1283               	bcf	3,5	;RP0=0, select bank0
  5715  0C0A  1303               	bcf	3,6	;RP1=0, select bank0
  5716  0C0B  1408               	bsf	8,0	;volatile
  5717  0C0C  0008               	return
  5718  0C0D                     __end_of_I2C_Write:	
  5719                           
  5720                           	psect	text30
  5721  0B56                     __ptext30:	
  5722 ;; *************** function _I2C_Clock *****************
  5723 ;; Defined at:
  5724 ;;		line 9 in file "i2c.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;		None
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  1    wreg      void 
  5731 ;; Registers used:
  5732 ;;		None
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5738 ;;      Params:         0       0       0       0       0
  5739 ;;      Locals:         0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0
  5741 ;;      Totals:         0       0       0       0       0
  5742 ;;Total ram usage:        0 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; This function calls:
  5745 ;;		Nothing
  5746 ;; This function is called by:
  5747 ;;		_DS1307_Write
  5748 ;;		_I2C_Write
  5749 ;;		_I2C_Ack
  5750 ;;		_I2C_NoAck
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           
  5755                           ;psect for function _I2C_Clock
  5756  0B56                     _I2C_Clock:	
  5757                           
  5758                           ;i2c.c: 11: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5759                           
  5760                           ;incstack = 0
  5761                           ; Regs used in _I2C_Clock: []
  5762  0B56  0000               	nop
  5763                           
  5764                           ;i2c.c: 12: RD1 = 1;
  5765  0B57  1283               	bcf	3,5	;RP0=0, select bank0
  5766  0B58  1303               	bcf	3,6	;RP1=0, select bank0
  5767  0B59  1488               	bsf	8,1	;volatile
  5768                           
  5769                           ;i2c.c: 13: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5770  0B5A  0000               	nop
  5771                           
  5772                           ;i2c.c: 14: RD1 = 0;
  5773  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  5774  0B5C  1303               	bcf	3,6	;RP1=0, select bank0
  5775  0B5D  1088               	bcf	8,1	;volatile
  5776  0B5E  0008               	return
  5777  0B5F                     __end_of_I2C_Clock:	
  5778                           
  5779                           	psect	text31
  5780  0B4D                     __ptext31:	
  5781 ;; *************** function _DS1307_Read *****************
  5782 ;; Defined at:
  5783 ;;		line 38 in file "DS1307.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;		None
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;		None
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      unsigned char 
  5790 ;; Registers used:
  5791 ;;		wreg, status,2, status,0, pclath, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5797 ;;      Params:         0       0       0       0       0
  5798 ;;      Locals:         0       0       0       0       0
  5799 ;;      Temps:          0       0       0       0       0
  5800 ;;      Totals:         0       0       0       0       0
  5801 ;;Total ram usage:        0 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    1
  5804 ;; This function calls:
  5805 ;;		_I2C_Read
  5806 ;; This function is called by:
  5807 ;;		_DS1307_Init
  5808 ;;		_DS1307_GetTime
  5809 ;;		_DS1307_GetDate
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           
  5814                           ;psect for function _DS1307_Read
  5815  0B4D                     _DS1307_Read:	
  5816                           
  5817                           ;DS1307.c: 40: return I2C_Read();
  5818                           
  5819                           ;incstack = 0
  5820                           ; Regs used in _DS1307_Read: [wreg+status,2+status,0+pclath+cstack]
  5821  0B4D  120A  158A  2482   	fcall	_I2C_Read
  5822  0B50  0008               	return
  5823  0B51                     __end_of_DS1307_Read:	
  5824                           
  5825                           	psect	text32
  5826  0C82                     __ptext32:	
  5827 ;; *************** function _I2C_Read *****************
  5828 ;; Defined at:
  5829 ;;		line 54 in file "i2c.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;		None
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;  dat             1    3[COMMON] unsigned char 
  5834 ;;  i               1    2[COMMON] unsigned char 
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  1    wreg      unsigned char 
  5837 ;; Registers used:
  5838 ;;		wreg, status,2, status,0
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5844 ;;      Params:         0       0       0       0       0
  5845 ;;      Locals:         2       0       0       0       0
  5846 ;;      Temps:          2       0       0       0       0
  5847 ;;      Totals:         4       0       0       0       0
  5848 ;;Total ram usage:        4 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; This function calls:
  5851 ;;		Nothing
  5852 ;; This function is called by:
  5853 ;;		_DS1307_Read
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           
  5858                           ;psect for function _I2C_Read
  5859  0C82                     _I2C_Read:	
  5860                           
  5861                           ;i2c.c: 56: unsigned char i, dat=0x00;
  5862                           
  5863                           ;incstack = 0
  5864                           ; Regs used in _I2C_Read: [wreg+status,2+status,0]
  5865  0C82  01F3               	clrf	I2C_Read@dat
  5866                           
  5867                           ;i2c.c: 58: TRISD0 = 1 ;
  5868  0C83  1683               	bsf	3,5	;RP0=1, select bank1
  5869  0C84  1303               	bcf	3,6	;RP1=0, select bank1
  5870  0C85  1408               	bsf	8,0	;volatile
  5871                           
  5872                           ;i2c.c: 60: for(i=0;i<8;i++)
  5873  0C86  01F2               	clrf	I2C_Read@i
  5874  0C87  3008               	movlw	8
  5875  0C88  0272               	subwf	I2C_Read@i,w
  5876  0C89  1803               	btfsc	3,0
  5877  0C8A  2CA7               	goto	l72
  5878  0C8B                     l71:	
  5879                           
  5880                           ;i2c.c: 61: {
  5881                           ;i2c.c: 62: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5882  0C8B  0000               	nop
  5883                           
  5884                           ;i2c.c: 64: RD1 = 1;
  5885  0C8C  1283               	bcf	3,5	;RP0=0, select bank0
  5886  0C8D  1303               	bcf	3,6	;RP1=0, select bank0
  5887  0C8E  1488               	bsf	8,1	;volatile
  5888                           
  5889                           ;i2c.c: 66: dat = dat << 1;
  5890  0C8F  0873               	movf	I2C_Read@dat,w
  5891  0C90  00F0               	movwf	??_I2C_Read
  5892  0C91  0770               	addwf	??_I2C_Read,w
  5893  0C92  00F1               	movwf	??_I2C_Read+1
  5894  0C93  0871               	movf	??_I2C_Read+1,w
  5895  0C94  00F3               	movwf	I2C_Read@dat
  5896                           
  5897                           ;i2c.c: 68: if (RD0 == 1)
  5898  0C95  1C08               	btfss	8,0	;volatile
  5899  0C96  2C9B               	goto	l1733
  5900                           
  5901                           ;i2c.c: 69: dat++;
  5902  0C97  3001               	movlw	1
  5903  0C98  00F0               	movwf	??_I2C_Read
  5904  0C99  0870               	movf	??_I2C_Read,w
  5905  0C9A  07F3               	addwf	I2C_Read@dat,f
  5906  0C9B                     l1733:	
  5907                           
  5908                           ;i2c.c: 71: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5909  0C9B  0000               	nop
  5910                           
  5911                           ;i2c.c: 73: RD1 = 0;
  5912  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  5913  0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  5914  0C9E  1088               	bcf	8,1	;volatile
  5915  0C9F  3001               	movlw	1
  5916  0CA0  00F0               	movwf	??_I2C_Read
  5917  0CA1  0870               	movf	??_I2C_Read,w
  5918  0CA2  07F2               	addwf	I2C_Read@i,f
  5919  0CA3  3008               	movlw	8
  5920  0CA4  0272               	subwf	I2C_Read@i,w
  5921  0CA5  1C03               	skipc
  5922  0CA6  2C8B               	goto	l71
  5923  0CA7                     l72:	
  5924                           
  5925                           ;i2c.c: 74: }
  5926                           ;i2c.c: 76: TRISD0 = 0 ;
  5927  0CA7  1683               	bsf	3,5	;RP0=1, select bank1
  5928  0CA8  1303               	bcf	3,6	;RP1=0, select bank1
  5929  0CA9  1008               	bcf	8,0	;volatile
  5930                           
  5931                           ;i2c.c: 78: return dat;
  5932  0CAA  0873               	movf	I2C_Read@dat,w
  5933  0CAB  0008               	return
  5934  0CAC                     __end_of_I2C_Read:	
  5935  007E                     btemp	set	126	;btemp
  5936  007E                     wtemp	set	126
  5937  007E                     wtemp0	set	126
  5938  0080                     wtemp1	set	128
  5939  0082                     wtemp2	set	130
  5940  0084                     wtemp3	set	132
  5941  0086                     wtemp4	set	134
  5942  0088                     wtemp5	set	136
  5943  007F                     wtemp6	set	127
  5944  007E                     ttemp	set	126
  5945  007E                     ttemp0	set	126
  5946  0081                     ttemp1	set	129
  5947  0084                     ttemp2	set	132
  5948  0087                     ttemp3	set	135
  5949  007F                     ttemp4	set	127
  5950  007E                     ltemp	set	126
  5951  007E                     ltemp0	set	126
  5952  0082                     ltemp1	set	130
  5953  0086                     ltemp2	set	134
  5954  0080                     ltemp3	set	128


Data Sizes:
    Strings     101
    Constant    40
    Data        15
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      46
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[4]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[9]), STR_3(CODE[12]), 
		 -> STR_2(CODE[12]), STR_1(CODE[10]), 

    DS1307_GetDate@y_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 

    DS1307_GetDate@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetDate@d_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetDate@n_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@n(BANK0[1]), 

    DS1307_GetTime@h_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetTime@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetTime@s_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_LCDInit
    _showClock->_LCDGotoXY
    _showClock->_showDate
    _showClock->_showTime
    _readClock->___wmul
    ___wmul->___awdiv
    _DS1307_GetTime->_DS1307_Write
    _DS1307_GetDate->_DS1307_Write
    _initLED->_sendLED
    _doMenu->_LCDGotoXY
    _doMenu->_showDate
    _doMenu->_showTime
    _showTime->_LCDWriteInt
    _showDate->_LCDWriteInt
    _showDate->_LCDWriteString
    _LCDWriteString->_LCDByte
    _LCDWriteInt->_LCDByte
    _LCDGotoXY->_LCDByte
    _DS1307_SetTime->_DS1307_Write
    _DS1307_SetDate->_DS1307_Write
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _DS1307_Init->_DS1307_Write
    _DS1307_Write->_I2C_Write
    _DS1307_Read->_I2C_Read

Critical Paths under _main in BANK0

    _main->_doMenu
    _readClock->___wmul
    _showTime->_LCDWriteInt
    _showDate->_LCDWriteInt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   48525
                                             25 BANK0      3     3      0
                        _DS1307_Init
                           _I2C_Init
                            _LCDByte
                            _LCDInit
                             _doMenu
                            _initLED
                          _readClock
                         _readInputs
                          _showClock
 ---------------------------------------------------------------------------------
 (1) _showClock                                            0     0      0   16927
                          _LCDGotoXY
                           _showDate
                           _showTime
 ---------------------------------------------------------------------------------
 (1) _readClock                                            7     7      0    3851
                                              2 BANK0      7     7      0
                     _DS1307_GetDate
                     _DS1307_GetTime
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     728
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetTime                                       4     2      2     405
                                              5 COMMON     4     2      2
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetDate                                       5     2      3     480
                                              5 COMMON     5     2      3
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (1) _initLED                                              0     0      0     144
                            _sendLED
 ---------------------------------------------------------------------------------
 (2) _sendLED                                              6     4      2     144
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _doMenu                                              17    17      0   24284
                                              8 BANK0     17    17      0
                     _DS1307_SetDate
                     _DS1307_SetTime
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            ___awdiv
                            ___awmod
                         _readInputs
                           _showDate
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showTime                                             1     1      0    6285
                                             13 COMMON     1     1      0
                            _LCDByte
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (2) _showDate                                             1     1      0    8283
                                             13 COMMON     1     1      0
                            _LCDByte
                        _LCDWriteInt
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (3) _LCDWriteString                                       3     3      0    1998
                                             12 COMMON     1     1      0
                                              0 BANK0      2     2      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDWriteInt                                          9     8      1    4844
                                             12 COMMON     1     0      1
                                              0 BANK0      8     8      0
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1144
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1784
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _readInputs                                           4     4      0      23
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            3     2      1    2359
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetTime                                       3     1      2     285
                                              5 COMMON     3     1      2
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetDate                                       4     1      3     360
                                              5 COMMON     4     1      3
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1580
                                             12 COMMON     2     2      0
                                              0 BANK0      1     1      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (4) _LCDByte                                              7     6      1    1441
                                              5 COMMON     7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (5) _LCDBusyLoop                                          5     5      0     117
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS1307_Init                                          2     2      0     275
                                              5 COMMON     2     2      0
                        _DS1307_Read
                       _DS1307_Write
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_NoAck                                            0     0      0       0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (3) _DS1307_Write                                         1     1      0     113
                                              4 COMMON     1     1      0
                          _I2C_Clock
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            4     4      0      91
                                              0 COMMON     4     4      0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (4) _I2C_Clock                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DS1307_Read                                          0     0      0      93
                           _I2C_Read
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             4     4      0      93
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1307_Init
     _DS1307_Read
       _I2C_Read
     _DS1307_Write
       _I2C_Clock
       _I2C_Write
         _I2C_Clock
     _I2C_NoAck
       _I2C_Clock
     _I2C_Start
     _I2C_Stop
   _I2C_Init
   _LCDByte
     _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _doMenu
     _DS1307_SetDate
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_SetTime
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     ___awdiv
     ___awmod
     _readInputs
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
   _initLED
     _sendLED
   _readClock
     _DS1307_GetDate
       _DS1307_Read
         _I2C_Read
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Ack
         _I2C_Clock
       _I2C_NoAck
         _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_GetTime
       _DS1307_Read
         _I2C_Read
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Ack
         _I2C_Clock
       _I2C_NoAck
         _I2C_Clock
       _I2C_Start
       _I2C_Stop
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _readInputs
   _showClock
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      2E       5       57.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3C      12        0.0%
ABS                  0      0      3C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue May 10 17:10:59 2016

           ?_LCDBusyLoop 0070       __size_of_I2C_Clock 0009       __size_of_I2C_NoAck 000A  
                      pc 0002       __size_of_I2C_Start 0011              __CFG_CP$OFF 0000  
     __size_of_I2C_Write 0026                       l71 0C8B                       l72 0CA7  
                     l66 0BED                       l67 0C09                       l99 0E6D  
           ___awdiv@sign 0076                       fsr 0004      ___wmul@multiplicand 007B  
            __CFG_LVP$ON 0000                      l100 0E70                      l133 0C2C  
                    l134 0C15                      l305 065D                      l251 0412  
                    l317 06C3                      l263 046A                      l239 03C7  
                    l281 05A8                      l363 0D87                      l364 0DB5  
                    l357 0248                      l293 05F6                      l449 0C41  
                    _RB1 0031                      _RC0 0038                      _RB2 0032  
                    _RC1 0039                      _RD0 0040                      _RC2 003A  
                    _RB4 0034                      _RD1 0041                      _RB5 0035  
                    _RB6 0036                      _RB7 0037             __CFG_CPD$OFF 0000  
                    _day 003E          __end_of_I2C_Ack 0B73                      fsr0 0004  
                    indf 0000             ___awmod@sign 0076             __CFG_FOSC$XT 0000  
           _DS1307_Write 0B73  LCDWriteInt@field_length 007C          __end_of_LCDByte 0EA4  
        __end_of_LCDInit 0D77             ?_LCDWriteInt 007C              LCDByte@temp 007B  
                   l2001 0C19                     l2005 0C1E                     l2031 0211  
                   l2033 0216                     l2201 037A                     l2019 0CEB  
                   l2035 021B                     l2027 0207                     l2043 022A  
                   l2037 0220                     l2029 020C                     l2119 0E50  
                   l2039 0225                     l2231 03D3                     l2311 0553  
                   l2401 0630                     l2305 04A1                     l2241 03DE  
                   l2057 0D91                     l2073 0C37                     l2403 0689  
                   l2315 055A                     l2405 068E                     l2341 05B6  
                   l2309 0548                     l2261 041E                     l2229 03D1  
                   l2237 03A5                     l1711 0BF6                     l2431 06E4  
                   l2271 0436                     l2239 03D9                     l2425 06D1  
                   l2345 0584                     l2443 07E2                     l2347 05BC  
                   l2291 0476                     l2259 041C                     l2267 03F0  
                   l1733 0C9B                     l1813 0F9E                     l1805 0F8B  
                   l1901 0EA7                     l2429 06A0                     l2373 05D3  
                   l2349 05C1                     l2269 0431                     l1911 018F  
                   l2439 0704                     l2375 0619                     l2199 036F  
                   l2463 00B6                     l2455 00BB                     l1809 0F96  
                   l1825 0DC3                     l2377 061E                     l2369 0606  
                   l2289 0474                     l2297 0448                     l1851 0DFF  
                   l1843 0DEC                     l2299 0489                     l1669 0FAE  
                   l1781 0F54                     l1837 0DD0                     l1829 0DCA  
                   l1917 01A9                     l2397 0676                     l1839 0DDE  
                   l1847 0DF7                     l2489 0231                     l1787 0F5F  
                   l1797 0F67                     l1893 0ED5                     l1799 0F75  
                   l1897 0EDD                     l1999 0C17                     STR_1 0067  
                   STR_2 003D                     STR_3 0031                     STR_4 0071  
                   STR_5 005D                     STR_6 0053                     STR_7 0049  
                   STR_8 0086                     STR_9 007E                     u1220 0BF3  
                   u2015 05A1                     u1305 0E76                     u1315 0E8E  
                   u1175 0FB6                     u1185 0FC2                     u2305 0702  
                   u2225 06BD                     u1195 0FD8                     u1355 0F6A  
                   u2155 0655                     u1620 0D8E                     u1285 0E58  
                   u1605 0CF7                     u2085 05F0                     u1375 0F76  
                   u1455 0DD3                     u1615 0D85                     u1385 0F82  
                   u1705 02D9                     u2337 00DC                     u2347 0CE1  
                   u1395 0F8C                     u1475 0DE4                     u2275 06EA  
                   u2357 0D43                     u1485 0DED                     u2285 06F2  
                   u1645 0DB3                     u2295 06FA                     u1825 040D  
                   u1665 0C42                     u1755 03C2                     u1675 0C49  
                   u1945 048F                     u1955 0497                     u1965 049F  
                   u1895 0465             __CFG_WRT$OFF 0000                     _date 003C  
                   _main 0099                     _hour 0040       __size_of_LCDGotoXY 0026  
       __end_of_I2C_Init 0B56         __end_of_I2C_Read 0CAC                     _year 0048  
                   btemp 007E         __end_of_I2C_Stop 0B9D            __CFG_BOREN$ON 0000  
                   ltemp 007E                     start 0000                     ttemp 007E  
                   wtemp 007E         DS1307_SetDate@dd 0075         DS1307_SetDate@mm 0076  
       DS1307_SetDate@nn 0078         DS1307_SetDate@yy 0077                    ?_main 0070  
        __end_of___awdiv 0FA3                    STR_10 007A                    STR_11 0092  
                  STR_12 0082                    STR_13 008E                    STR_14 008A  
          __CFG_WDTE$OFF 0000          __end_of___awmod 0E04             LCDInit@style 0020  
        ___awdiv@divisor 0070          ___awdiv@counter 0075                    _PORTD 0008  
                  _TRISD 0088            __CFG_PWRTE$ON 0000         DS1307_SetTime@hh 0077  
       DS1307_SetTime@mm 0075         DS1307_SetTime@ss 0076           _DS1307_GetDate 00E4  
        __end_of_initLED 0BAD           _DS1307_GetTime 0EF4        __end_of_I2C_Clock 0B5F  
      __end_of_I2C_NoAck 0B69                    _month 0044          __end_of_sendLED 0DB9  
                  _state 004D        __end_of_I2C_Start 0BBE        __end_of_I2C_Write 0C0D  
                  pclath 000A                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080           _DS1307_SetDate 0CAC  
         _DS1307_SetTime 0C5A                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __initialization 07ED  
           __end_of_main 00E4                ??_I2C_Ack 0070                   ??_main 0039  
      __end_of_LCDGotoXY 0C33            LCDByte@isdata 0075                ??_LCDByte 0076  
              ??_LCDInit 007C   __end_of_DS1307_GetDate 014A   __end_of_DS1307_GetTime 0F4A  
              I2C_Read@i 0072   __end_of_DS1307_SetDate 0CDA         ___awdiv@dividend 0072  
 __end_of_DS1307_SetTime 0C82                   _TRISC0 0438                   _TRISC1 0439  
                 _TRISD0 0440                   _TRISC2 043A                   _TRISD1 0441  
           DS1307_Init@s 0076           _LCDWriteString 0EA4                   ___wmul 0C33  
              ??___awdiv 0074                   _doMenu 036F                ??___awmod 0074  
   __size_of_LCDBusyLoop 005D         ___awdiv@quotient 0077                   _minute 0042  
        ___awmod@divisor 0070          ___awmod@counter 0075                   _ttable 0009  
              ??_initLED 0076                ?_I2C_Init 0070                ?_I2C_Read 0070  
              ??_sendLED 0072         __end_of_showDate 0249          ?_DS1307_GetDate 0075  
              ?_I2C_Stop 0070             LCDWriteInt@c 0023             LCDWriteInt@d 0025  
       __end_of_showTime 0D3C          ?_DS1307_GetTime 0075          ?_DS1307_SetDate 0075  
        ?_DS1307_SetTime 0075     __size_of_LCDWriteInt 0068  __end_of__initialization 07FC  
 __end_of_LCDWriteString 0EF4                LCDByte@hn 0078                LCDByte@ln 0079  
         __pcstackCOMMON 0070             __pidataBANK0 0B7E               ??_I2C_Init 0070  
             ??_I2C_Read 0070               ??_I2C_Stop 0070            ??_DS1307_Init 0075  
          ??_DS1307_Read 0074               __pbssBANK0 004B       __size_of_readClock 0126  
        ?_LCDWriteString 0070               __pmaintext 0099                  ?___wmul 0079  
                ?_doMenu 0070                  _I2C_Ack 0B69               I2C_Write@i 0073  
     __size_of_showClock 0018                  _LCDByte 0E54                  _LCDInit 0D3C  
             __stringtab 0003                _I2C_Clock 0B56                _I2C_NoAck 0B5F  
              _I2C_Start 0BAD                _I2C_Write 0BE7      __end_of_DS1307_Init 0E54  
    __end_of_DS1307_Read 0B51                  _bButton 004B                ?_showDate 0070  
              ?_showTime 0070             I2C_Write@dat 0072                  ___awdiv 0F4A  
                ___awmod 0DB9          __size_of___wmul 0027               _readInputs 0CDA  
        __size_of_doMenu 047E                  __ptext1 0BCF                  __ptext2 0249  
                __ptext3 0C33                  __ptext4 0EF4                  __ptext5 00E4  
                __ptext6 0B69                  __ptext7 0B9D                  __ptext8 0D77  
                __ptext9 036F        __end_of_readClock 036F                  _initLED 0B9D  
                doMenu@d 0033                  doMenu@h 002B                  doMenu@m 002D  
                doMenu@n 0031                  doMenu@s 002F                  doMenu@y 0037  
                _sendLED 0D77         ___awmod@dividend 0072                  _seconds 0046  
              _LCDGotoXY 0C0D     end_of_initialization 07FC        __end_of_monthDays 0031  
             ?_I2C_Clock 0070               ?_I2C_NoAck 0070               ?_I2C_Start 0070  
      __end_of_showClock 0BE7               ?_I2C_Write 0070               ??_showDate 007D  
             ??_showTime 007D         ??_DS1307_GetDate 0078         ??_DS1307_GetTime 0077  
      LCDWriteString@msg 0021         ??_DS1307_SetDate 0078         ??_DS1307_SetTime 0077  
              _TRISBbits 0086               ?_LCDGotoXY 007C        __size_of_I2C_Init 0005  
      __size_of_I2C_Read 002A        __size_of_I2C_Stop 0010              _DS1307_Init 0E04  
            _DS1307_Read 0B4D               LCDGotoXY@x 0020               LCDGotoXY@y 007C  
          ??_LCDBusyLoop 0070              ?_readInputs 0070           __end_of___wmul 0C5A  
         __end_of_doMenu 07ED           __end_of_ttable 0025      start_initialization 07ED  
          ?_DS1307_Write 0070            ??_LCDWriteInt 0020         ??_LCDWriteString 007C  
            ??_I2C_Clock 0070              ??_I2C_NoAck 0070               readClock@a 0026  
             readClock@b 0027               readClock@c 0028               readClock@n 0025  
            ??_I2C_Start 0070              ??_I2C_Write 0070          DS1307_Write@dat 0074  
               ??___wmul 007D                 ??_doMenu 0028               init_fetch0 0BBE  
            __pdataBANK0 003C                 ?_I2C_Ack 0070      __end_of_LCDBusyLoop 1000  
               ?_LCDByte 0075                 ?_LCDInit 0070           ??_DS1307_Write 0074  
               LCDByte@c 007A                ___latbits 0002            __pcstackBANK0 0020  
            ??_LCDGotoXY 007D             _menuFunction 004C      __size_of_readInputs 002F  
    __end_of_LCDWriteInt 01B2              I2C_Read@dat 0073                 ?___awdiv 0070  
               ?___awmod 0070        __size_of_showDate 0097        __size_of_showTime 0033  
              __pstrings 0003                 ?_initLED 0070                 _I2C_Init 0B51  
               _I2C_Read 0C82                 ?_sendLED 0070                 _I2C_Stop 0B8D  
              _readClock 0249          LCDBusyLoop@busy 0072          LCDBusyLoop@temp 0073  
              _last_hour 004A           ___wmul@product 0020                _monthDays 0025  
              _showClock 0BCF              _LCDBusyLoop 0FA3         LCDWriteString@cc 0020  
       __size_of_I2C_Ack 000A              __stringbase 0008        ___wmul@multiplier 0079  
       __size_of_LCDByte 0050         __size_of_LCDInit 003B               ?_readClock 0070  
            _LCDWriteInt 014A             ?_DS1307_Init 0070             ?_DS1307_Read 0070  
            doMenu@m_251 0035     __end_of_DS1307_Write 0B7E               ?_showClock 0070  
           ??_readInputs 0070         __size_of___awdiv 0059         __size_of___awmod 004B  
      LCDBusyLoop@status 0074       __end_of__stringtab 0009      DS1307_GetDate@d_ptr 0075  
       __size_of_initLED 0010      DS1307_GetDate@m_ptr 0076      DS1307_GetDate@n_ptr 0079  
    DS1307_GetDate@y_ptr 0077         __size_of_sendLED 0042                 __ptext10 0D09  
               __ptext11 01B2                 __ptext20 0D3C                 __ptext12 0EA4  
               __ptext21 0E54                 __ptext13 014A                 __ptext30 0B56  
               __ptext22 0FA3                 __ptext14 0DB9                 __ptext31 0B4D  
               __ptext23 0B51                 __ptext15 0F4A                 __ptext32 0C82  
               __ptext24 0E04                 __ptext16 0CDA                 __ptext25 0B8D  
               __ptext17 0C0D                 __ptext26 0BAD                 __ptext18 0C5A  
               __ptext27 0B5F                 __ptext19 0CAC                 __ptext28 0B73  
               __ptext29 0BE7       __end_of_readInputs 0D09            __size_of_main 004B  
               _showDate 01B2                 _showTime 0D09              ??_readClock 0022  
               init_ram0 0BC2  __size_of_DS1307_GetDate 0066  __size_of_DS1307_GetTime 0056  
               sendLED@c 0070                 sendLED@i 0074  __size_of_DS1307_SetDate 002E  
         LCDWriteInt@val 0027  __size_of_DS1307_SetTime 0028                stringcode 0003  
            ??_showClock 007E                 stringdir 0003                 stringtab 0003  
  __size_of_DS1307_Write 000B      DS1307_GetTime@h_ptr 0078      DS1307_GetTime@m_ptr 0075  
    DS1307_GetTime@s_ptr 0076     __size_of_DS1307_Init 0050     __size_of_DS1307_Read 0004  
     readInputs@pinstate 0073  __size_of_LCDWriteString 0050  
