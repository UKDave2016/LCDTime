

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon May 16 19:37:33 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000D                     	;# 
   120  000E                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001B                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  0081                     	;# 
   142  0085                     	;# 
   143  0086                     	;# 
   144  0087                     	;# 
   145  0088                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009E                     	;# 
   157  009F                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  000E                     	;# 
   180  000F                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0014                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  0081                     	;# 
   200  0085                     	;# 
   201  0086                     	;# 
   202  0087                     	;# 
   203  0088                     	;# 
   204  0089                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  008E                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0093                     	;# 
   211  0094                     	;# 
   212  0098                     	;# 
   213  0099                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0088                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280                           
   281                           	psect	idataBANK0
   282  09A3                     __pidataBANK0:	
   283                           
   284                           ;initializer for LCDWriteInt@F1143
   285  09A3  342D               	retlw	45
   286  09A4  342D               	retlw	45
   287  09A5  342D               	retlw	45
   288  09A6  342D               	retlw	45
   289  09A7  342D               	retlw	45
   290  09A8  3400               	retlw	0
   291                           
   292                           ;initializer for _date
   293  09A9  3408               	retlw	8
   294  09AA  3400               	retlw	0
   295                           
   296                           ;initializer for _day
   297  09AB  3401               	retlw	1
   298  09AC  3400               	retlw	0
   299                           
   300                           ;initializer for _hour
   301  09AD  3406               	retlw	6
   302  09AE  3400               	retlw	0
   303                           
   304                           ;initializer for _minute
   305  09AF  3405               	retlw	5
   306  09B0  3400               	retlw	0
   307                           
   308                           ;initializer for _month
   309  09B1  3405               	retlw	5
   310  09B2  3400               	retlw	0
   311                           
   312                           ;initializer for _runningMinute
   313  09B3  34FF               	retlw	255
   314  09B4  34FF               	retlw	255
   315                           
   316                           ;initializer for _seconds
   317  09B5  3404               	retlw	4
   318  09B6  3400               	retlw	0
   319                           
   320                           ;initializer for _year
   321  09B7  3410               	retlw	16
   322  09B8  3400               	retlw	0
   323                           
   324                           ;initializer for _last_hour
   325  09B9  34EE               	retlw	238
   326                           
   327                           ;initializer for _menuFunction
   328  09BA  3401               	retlw	1
   329                           
   330                           	psect	strings
   331  0800                     __pstrings:	
   332  0800                     stringtab:	
   333  0800                     __stringtab:	
   334                           
   335                           ;	String table - string pointers are 1 byte each
   336  0800  1BFF               	btfsc	btemp+1,7
   337  0801  280A               	ljmp	stringcode
   338  0802  1383               	bcf	3,7
   339  0803  187F               	btfsc	btemp+1,0
   340  0804  1783               	bsf	3,7
   341  0805  0800               	movf	0,w
   342  0806  0A84               	incf	4,f
   343  0807  1903               	skipnz
   344  0808  0AFF               	incf	btemp+1,f
   345  0809  0008               	return
   346  080A                     stringcode:	
   347  080A                     stringdir:	
   348  080A  3008               	movlw	high stringdir
   349  080B  008A               	movwf	10
   350  080C  0804               	movf	4,w
   351  080D  0A84               	incf	4,f
   352  080E  0782               	addwf	2,f
   353  080F                     __stringbase:	
   354  080F  3400               	retlw	0
   355  0810                     __end_of__stringtab:	
   356  0810                     _ttable:	
   357  0810  3400               	retlw	0
   358  0811  3402               	retlw	2
   359  0812  3404               	retlw	4
   360  0813  3400               	retlw	0
   361  0814  3403               	retlw	3
   362  0815  3400               	retlw	0
   363  0816  3401               	retlw	1
   364  0817  3410               	retlw	16
   365  0818  3403               	retlw	3
   366  0819  3402               	retlw	2
   367  081A  3400               	retlw	0
   368  081B  3400               	retlw	0
   369  081C  3403               	retlw	3
   370  081D  3402               	retlw	2
   371  081E  3401               	retlw	1
   372  081F  3400               	retlw	0
   373  0820  3406               	retlw	6
   374  0821  3400               	retlw	0
   375  0822  3404               	retlw	4
   376  0823  3400               	retlw	0
   377  0824  3406               	retlw	6
   378  0825  3405               	retlw	5
   379  0826  3400               	retlw	0
   380  0827  3420               	retlw	32
   381  0828  3406               	retlw	6
   382  0829  3405               	retlw	5
   383  082A  3404               	retlw	4
   384  082B  3400               	retlw	0
   385  082C                     __end_of_ttable:	
   386  082C                     _daysOfTheWeek:	
   387  082C  344D               	retlw	77
   388  082D  346F               	retlw	111
   389  082E  346E               	retlw	110
   390  082F  3454               	retlw	84
   391  0830  3475               	retlw	117
   392  0831  3465               	retlw	101
   393  0832  3457               	retlw	87
   394  0833  3465               	retlw	101
   395  0834  3464               	retlw	100
   396  0835  3454               	retlw	84
   397  0836  3468               	retlw	104
   398  0837  3475               	retlw	117
   399  0838  3446               	retlw	70
   400  0839  3472               	retlw	114
   401  083A  3469               	retlw	105
   402  083B  3453               	retlw	83
   403  083C  3461               	retlw	97
   404  083D  3474               	retlw	116
   405  083E  3453               	retlw	83
   406  083F  3475               	retlw	117
   407  0840  346E               	retlw	110
   408  0841  3400               	retlw	0
   409  0842                     __end_of_daysOfTheWeek:	
   410  0842                     _monthDays:	
   411  0842  341F               	retlw	31
   412  0843  341D               	retlw	29
   413  0844  341F               	retlw	31
   414  0845  341E               	retlw	30
   415  0846  341F               	retlw	31
   416  0847  341E               	retlw	30
   417  0848  341F               	retlw	31
   418  0849  341F               	retlw	31
   419  084A  341E               	retlw	30
   420  084B  341F               	retlw	31
   421  084C  341E               	retlw	30
   422  084D  341F               	retlw	31
   423  084E                     __end_of_monthDays:	
   424  084E                     _setText:	
   425  084E  3453               	retlw	83
   426  084F  3465               	retlw	101
   427  0850  3474               	retlw	116
   428  0851  3420               	retlw	32
   429  0852  3400               	retlw	0
   430  0853                     __end_of_setText:	
   431  0008                     _PORTD	set	8
   432  0031                     _RB1	set	49
   433  0032                     _RB2	set	50
   434  0034                     _RB4	set	52
   435  0035                     _RB5	set	53
   436  0040                     _RD0	set	64
   437  0041                     _RD1	set	65
   438  0042                     _RD2	set	66
   439  0043                     _RD3	set	67
   440  0086                     _TRISBbits	set	134
   441  0088                     _TRISD	set	136
   442  0088                     _TRISDbits	set	136
   443  0440                     _TRISD0	set	1088
   444  0441                     _TRISD1	set	1089
   445  0853                     STR_3:	
   446  0853  3420               	retlw	32	;' '
   447  0854  3420               	retlw	32	;' '
   448  0855  3420               	retlw	32	;' '
   449  0856  3420               	retlw	32	;' '
   450  0857  3420               	retlw	32	;' '
   451  0858  3420               	retlw	32	;' '
   452  0859  3420               	retlw	32	;' '
   453  085A  3400               	retlw	0
   454  085B                     STR_6:	
   455  085B  3453               	retlw	83	;'S'
   456  085C  3465               	retlw	101	;'e'
   457  085D  3463               	retlw	99	;'c'
   458  085E  346F               	retlw	111	;'o'
   459  085F  346E               	retlw	110	;'n'
   460  0860  3464               	retlw	100	;'d'
   461  0861  3473               	retlw	115	;'s'
   462  0862  3400               	retlw	0
   463  0863                     STR_5:	
   464  0863  344D               	retlw	77	;'M'
   465  0864  3469               	retlw	105	;'i'
   466  0865  346E               	retlw	110	;'n'
   467  0866  3475               	retlw	117	;'u'
   468  0867  3474               	retlw	116	;'t'
   469  0868  3465               	retlw	101	;'e'
   470  0869  3473               	retlw	115	;'s'
   471  086A  3400               	retlw	0
   472  086B                     STR_1:	
   473  086B  3454               	retlw	84	;'T'
   474  086C  3469               	retlw	105	;'i'
   475  086D  346D               	retlw	109	;'m'
   476  086E  3465               	retlw	101	;'e'
   477  086F  3420               	retlw	32	;' '
   478  0870  343F               	retlw	63	;'?'
   479  0871  3400               	retlw	0
   480  0872                     STR_2:	
   481  0872  3444               	retlw	68	;'D'
   482  0873  3461               	retlw	97	;'a'
   483  0874  3474               	retlw	116	;'t'
   484  0875  3465               	retlw	101	;'e'
   485  0876  3420               	retlw	32	;' '
   486  0877  343F               	retlw	63	;'?'
   487  0878  3400               	retlw	0
   488  0879                     STR_10:	
   489  0879  3444               	retlw	68	;'D'
   490  087A  3461               	retlw	97	;'a'
   491  087B  3479               	retlw	121	;'y'
   492  087C  3420               	retlw	32	;' '
   493  087D  3420               	retlw	32	;' '
   494  087E  3400               	retlw	0
   495  087F                     STR_9:	
   496  087F  3444               	retlw	68	;'D'
   497  0880  3461               	retlw	97	;'a'
   498  0881  3474               	retlw	116	;'t'
   499  0882  3465               	retlw	101	;'e'
   500  0883  3420               	retlw	32	;' '
   501  0884  3400               	retlw	0
   502  0885                     STR_8:	
   503  0885  344D               	retlw	77	;'M'
   504  0886  346F               	retlw	111	;'o'
   505  0887  346E               	retlw	110	;'n'
   506  0888  3474               	retlw	116	;'t'
   507  0889  3468               	retlw	104	;'h'
   508  088A  3400               	retlw	0
   509  088B                     STR_4:	
   510  088B  3448               	retlw	72	;'H'
   511  088C  346F               	retlw	111	;'o'
   512  088D  3475               	retlw	117	;'u'
   513  088E  3472               	retlw	114	;'r'
   514  088F  3473               	retlw	115	;'s'
   515  0890  3400               	retlw	0
   516  0891                     STR_7:	
   517  0891  3459               	retlw	89	;'Y'
   518  0892  3465               	retlw	101	;'e'
   519  0893  3461               	retlw	97	;'a'
   520  0894  3472               	retlw	114	;'r'
   521  0895  3400               	retlw	0
   522                           
   523                           ; #config settings
   524  0000                     
   525                           	psect	cinit
   526  07EA                     start_initialization:	
   527  07EA                     __initialization:	
   528                           
   529                           ; Clear objects allocated to BANK0
   530  07EA  01E2               	clrf	__pbssBANK0& (0+127)
   531  07EB  01E3               	clrf	(__pbssBANK0+1)& (0+127)
   532  07EC  01E4               	clrf	(__pbssBANK0+2)& (0+127)
   533  07ED  01E5               	clrf	(__pbssBANK0+3)& (0+127)
   534  07EE  01E6               	clrf	(__pbssBANK0+4)& (0+127)
   535  07EF  01E7               	clrf	(__pbssBANK0+5)& (0+127)
   536                           
   537                           ; Initialize objects allocated to BANK0
   538  07F0  1383               	bcf	3,7	;select IRP bank0
   539  07F1  3062               	movlw	low (__pdataBANK0+24)
   540  07F2  00FD               	movwf	btemp+-1
   541  07F3  3009               	movlw	high __pidataBANK0
   542  07F4  00FE               	movwf	btemp
   543  07F5  30A3               	movlw	low __pidataBANK0
   544  07F6  00FF               	movwf	btemp+1
   545  07F7  304A               	movlw	low __pdataBANK0
   546  07F8  0084               	movwf	4
   547  07F9  120A  158A  217F   	fcall	init_ram0
   548  07FC                     end_of_initialization:	
   549                           ;End of C runtime variable initialization code
   550                           
   551  07FC                     __end_of__initialization:	
   552  07FC  0183               	clrf	3
   553  07FD  120A  158A  2F2A   	ljmp	_main	;jump to C main() function
   554                           
   555                           	psect	bssBANK0
   556  0062                     __pbssBANK0:	
   557  0062                     _next_menu_clear:	
   558  0062                     	ds	2
   559  0064                     _bButton:	
   560  0064                     	ds	1
   561  0065                     _state:	
   562  0065                     	ds	1
   563  0066                     _runningTime:	
   564  0066                     	ds	2
   565                           
   566                           	psect	dataBANK0
   567  004A                     __pdataBANK0:	
   568  004A                     LCDWriteInt@F1143:	
   569  004A                     	ds	6
   570  0050                     _date:	
   571  0050                     	ds	2
   572  0052                     _day:	
   573  0052                     	ds	2
   574  0054                     _hour:	
   575  0054                     	ds	2
   576  0056                     _minute:	
   577  0056                     	ds	2
   578  0058                     _month:	
   579  0058                     	ds	2
   580  005A                     _runningMinute:	
   581  005A                     	ds	2
   582  005C                     _seconds:	
   583  005C                     	ds	2
   584  005E                     _year:	
   585  005E                     	ds	2
   586  0060                     _last_hour:	
   587  0060                     	ds	1
   588  0061                     _menuFunction:	
   589  0061                     	ds	1
   590                           
   591                           	psect	inittext
   592  097B                     init_fetch0:	
   593                           ;	Called with low address in FSR and high address in W
   594                           
   595  097B  087E               	movf	126,w
   596  097C  008A               	movwf	10
   597  097D  087F               	movf	127,w
   598  097E  0082               	movwf	2
   599  097F                     init_ram0:	
   600                           ;Called with:
   601                           ;	high address of idata address in btemp 
   602                           ;	low address of idata address in btemp+1 
   603                           ;	low address of data in FSR
   604                           ;	high address + 1 of data in btemp-1
   605                           
   606  097F  217B  120A  158A   	fcall	init_fetch0
   607  0982  0080               	movwf	0
   608  0983  0A84               	incf	4,f
   609  0984  0804               	movf	4,w
   610  0985  067D               	xorwf	125,w
   611  0986  1903               	btfsc	3,2
   612  0987  3400               	retlw	0
   613  0988  0AFF               	incf	127,f
   614  0989  1903               	btfsc	3,2
   615  098A  0AFE               	incf	126,f
   616  098B  297F               	goto	init_ram0
   617                           
   618                           	psect	cstackCOMMON
   619  0071                     __pcstackCOMMON:	
   620  0071                     ?_I2C_Start:	
   621  0071                     ??_I2C_Start:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0071                     ?_DS1307_Write:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0071                     ?_DS1307_Read:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0071                     ?_I2C_NoAck:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0071                     ??_I2C_NoAck:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0071                     ?_I2C_Stop:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0071                     ??_I2C_Stop:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0071                     ?_I2C_Write:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0071                     ??_I2C_Write:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0071                     ?_I2C_Clock:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0071                     ??_I2C_Clock:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0071                     ?_I2C_Read:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0071                     ??_I2C_Read:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0071                     ?_I2C_Ack:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0071                     ??_I2C_Ack:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0071                     ?_LCDBusyLoop:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0071                     ??_LCDBusyLoop:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0071                     ?_readClock:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0071                     ?_showClock:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0071                     ?_readInputs:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0071                     ??_readInputs:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0071                     ?_doMenu:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0071                     ?_clearPrompt:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0071                     ?_showTime:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0071                     ?_showDate:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0071                     ?_showRunningTime:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0071                     ?_I2C_Init:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0071                     ??_I2C_Init:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0071                     ?_LCDInit:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0071                     ?_main:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0071                     ?_DS1307_Init:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0071                     ?___awdiv:	
   715                           ; 2 bytes @ 0x0
   716                           
   717  0071                     ?___awmod:	
   718                           ; 2 bytes @ 0x0
   719                           
   720  0071                     ___awdiv@divisor:	
   721                           ; 2 bytes @ 0x0
   722                           
   723  0071                     ___awmod@divisor:	
   724                           ; 2 bytes @ 0x0
   725                           
   726                           
   727                           ; 2 bytes @ 0x0
   728  0071                     	ds	2
   729  0073                     I2C_Write@dat:	
   730  0073                     I2C_Read@i:	
   731                           ; 1 bytes @ 0x2
   732                           
   733  0073                     LCDBusyLoop@busy:	
   734                           ; 1 bytes @ 0x2
   735                           
   736  0073                     ___awdiv@dividend:	
   737                           ; 1 bytes @ 0x2
   738                           
   739  0073                     ___awmod@dividend:	
   740                           ; 2 bytes @ 0x2
   741                           
   742                           
   743                           ; 2 bytes @ 0x2
   744  0073                     	ds	1
   745  0074                     I2C_Write@i:	
   746  0074                     I2C_Read@dat:	
   747                           ; 1 bytes @ 0x3
   748                           
   749  0074                     LCDBusyLoop@temp:	
   750                           ; 1 bytes @ 0x3
   751                           
   752  0074                     readInputs@pinstate:	
   753                           ; 1 bytes @ 0x3
   754                           
   755                           
   756                           ; 1 bytes @ 0x3
   757  0074                     	ds	1
   758  0075                     ??_DS1307_Write:	
   759  0075                     ??_DS1307_Read:	
   760                           ; 1 bytes @ 0x4
   761                           
   762  0075                     ??___awdiv:	
   763                           ; 1 bytes @ 0x4
   764                           
   765  0075                     ??___awmod:	
   766                           ; 1 bytes @ 0x4
   767                           
   768  0075                     DS1307_Write@dat:	
   769                           ; 1 bytes @ 0x4
   770                           
   771  0075                     LCDBusyLoop@status:	
   772                           ; 1 bytes @ 0x4
   773                           
   774                           
   775                           ; 1 bytes @ 0x4
   776  0075                     	ds	1
   777  0076                     ??_DS1307_Init:	
   778  0076                     ?_DS1307_SetTime:	
   779                           ; 1 bytes @ 0x5
   780                           
   781  0076                     ?_DS1307_SetDate:	
   782                           ; 1 bytes @ 0x5
   783                           
   784  0076                     ?_DS1307_GetTime:	
   785                           ; 1 bytes @ 0x5
   786                           
   787  0076                     ?_DS1307_GetDate:	
   788                           ; 1 bytes @ 0x5
   789                           
   790  0076                     ?_DS1307_readRam:	
   791                           ; 1 bytes @ 0x5
   792                           
   793  0076                     ?_DS1307_writeRam:	
   794                           ; 1 bytes @ 0x5
   795                           
   796  0076                     ?_LCDByte:	
   797                           ; 1 bytes @ 0x5
   798                           
   799  0076                     DS1307_SetTime@mm:	
   800                           ; 1 bytes @ 0x5
   801                           
   802  0076                     DS1307_SetDate@dd:	
   803                           ; 1 bytes @ 0x5
   804                           
   805  0076                     DS1307_GetTime@m_ptr:	
   806                           ; 1 bytes @ 0x5
   807                           
   808  0076                     DS1307_GetDate@d_ptr:	
   809                           ; 1 bytes @ 0x5
   810                           
   811  0076                     LCDByte@isdata:	
   812                           ; 1 bytes @ 0x5
   813                           
   814  0076                     ___awdiv@counter:	
   815                           ; 1 bytes @ 0x5
   816                           
   817  0076                     ___awmod@counter:	
   818                           ; 1 bytes @ 0x5
   819                           
   820  0076                     DS1307_readRam@ptr:	
   821                           ; 1 bytes @ 0x5
   822                           
   823  0076                     DS1307_writeRam@offset:	
   824                           ; 2 bytes @ 0x5
   825                           
   826                           
   827                           ; 2 bytes @ 0x5
   828  0076                     	ds	1
   829  0077                     ??_LCDByte:	
   830  0077                     DS1307_Init@s:	
   831                           ; 1 bytes @ 0x6
   832                           
   833  0077                     DS1307_SetTime@ss:	
   834                           ; 1 bytes @ 0x6
   835                           
   836  0077                     DS1307_SetDate@mm:	
   837                           ; 1 bytes @ 0x6
   838                           
   839  0077                     DS1307_GetTime@s_ptr:	
   840                           ; 1 bytes @ 0x6
   841                           
   842  0077                     DS1307_GetDate@m_ptr:	
   843                           ; 1 bytes @ 0x6
   844                           
   845  0077                     ___awdiv@sign:	
   846                           ; 1 bytes @ 0x6
   847                           
   848  0077                     ___awmod@sign:	
   849                           ; 1 bytes @ 0x6
   850                           
   851                           
   852                           ; 1 bytes @ 0x6
   853  0077                     	ds	1
   854  0078                     ??_DS1307_SetTime:	
   855  0078                     ??_DS1307_GetTime:	
   856                           ; 1 bytes @ 0x7
   857                           
   858  0078                     DS1307_SetTime@hh:	
   859                           ; 1 bytes @ 0x7
   860                           
   861  0078                     DS1307_SetDate@yy:	
   862                           ; 1 bytes @ 0x7
   863                           
   864  0078                     DS1307_GetDate@y_ptr:	
   865                           ; 1 bytes @ 0x7
   866                           
   867  0078                     DS1307_readRam@offset:	
   868                           ; 1 bytes @ 0x7
   869                           
   870  0078                     DS1307_writeRam@length:	
   871                           ; 2 bytes @ 0x7
   872                           
   873  0078                     ___awdiv@quotient:	
   874                           ; 2 bytes @ 0x7
   875                           
   876                           
   877                           ; 2 bytes @ 0x7
   878  0078                     	ds	1
   879  0079                     ??_DS1307_SetDate:	
   880  0079                     ??_DS1307_GetDate:	
   881                           ; 1 bytes @ 0x8
   882                           
   883  0079                     DS1307_SetDate@nn:	
   884                           ; 1 bytes @ 0x8
   885                           
   886  0079                     DS1307_GetTime@h_ptr:	
   887                           ; 1 bytes @ 0x8
   888                           
   889  0079                     LCDByte@hn:	
   890                           ; 1 bytes @ 0x8
   891                           
   892                           
   893                           ; 1 bytes @ 0x8
   894  0079                     	ds	1
   895  007A                     ??_DS1307_writeRam:	
   896  007A                     ?___wmul:	
   897                           ; 1 bytes @ 0x9
   898                           
   899  007A                     DS1307_GetDate@n_ptr:	
   900                           ; 2 bytes @ 0x9
   901                           
   902  007A                     LCDByte@ln:	
   903                           ; 1 bytes @ 0x9
   904                           
   905  007A                     DS1307_readRam@length:	
   906                           ; 1 bytes @ 0x9
   907                           
   908  007A                     ___wmul@multiplier:	
   909                           ; 2 bytes @ 0x9
   910                           
   911                           
   912                           ; 2 bytes @ 0x9
   913  007A                     	ds	1
   914  007B                     LCDByte@c:	
   915                           
   916                           ; 1 bytes @ 0xA
   917  007B                     	ds	1
   918  007C                     ??_DS1307_readRam:	
   919  007C                     DS1307_writeRam@ptr:	
   920                           ; 1 bytes @ 0xB
   921                           
   922  007C                     LCDByte@temp:	
   923                           ; 1 bytes @ 0xB
   924                           
   925  007C                     ___wmul@multiplicand:	
   926                           ; 1 bytes @ 0xB
   927                           
   928                           
   929                           ; 2 bytes @ 0xB
   930  007C                     	ds	1
   931  007D                     ??_LCDWriteString:	
   932  007D                     ?_LCDGotoXY:	
   933                           ; 1 bytes @ 0xC
   934                           
   935  007D                     LCDInit@style:	
   936                           ; 1 bytes @ 0xC
   937                           
   938  007D                     LCDGotoXY@y:	
   939                           ; 1 bytes @ 0xC
   940                           
   941                           
   942                           ; 1 bytes @ 0xC
   943  007D                     	ds	1
   944  007E                     ??_showClock:	
   945  007E                     ??_clearPrompt:	
   946                           ; 1 bytes @ 0xD
   947                           
   948  007E                     ??___wmul:	
   949                           ; 1 bytes @ 0xD
   950                           
   951                           
   952                           	psect	cstackBANK0
   953  0020                     __pcstackBANK0:	
   954                           ; 1 bytes @ 0xD
   955                           
   956  0020                     ??_LCDInit:	
   957  0020                     ?_LCDWriteString:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0020                     ??_LCDGotoXY:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0020                     LCDWriteString@msg:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0020                     ___wmul@product:	
   967                           ; 2 bytes @ 0x0
   968                           
   969                           
   970                           ; 2 bytes @ 0x0
   971  0020                     	ds	1
   972  0021                     LCDGotoXY@x:	
   973                           
   974                           ; 1 bytes @ 0x1
   975  0021                     	ds	1
   976  0022                     ??_readClock:	
   977  0022                     ?_LCDWriteInt:	
   978                           ; 1 bytes @ 0x2
   979                           
   980  0022                     LCDWriteInt@val:	
   981                           ; 1 bytes @ 0x2
   982                           
   983                           
   984                           ; 2 bytes @ 0x2
   985  0022                     	ds	2
   986  0024                     LCDWriteInt@field_length:	
   987                           
   988                           ; 1 bytes @ 0x4
   989  0024                     	ds	1
   990  0025                     ??_LCDWriteInt:	
   991  0025                     readClock@n:	
   992                           ; 1 bytes @ 0x5
   993                           
   994                           
   995                           ; 1 bytes @ 0x5
   996  0025                     	ds	1
   997  0026                     readClock@a:	
   998                           
   999                           ; 1 bytes @ 0x6
  1000  0026                     	ds	1
  1001  0027                     readClock@b:	
  1002                           
  1003                           ; 1 bytes @ 0x7
  1004  0027                     	ds	1
  1005  0028                     readClock@c:	
  1006  0028                     LCDWriteInt@characters:	
  1007                           ; 1 bytes @ 0x8
  1008                           
  1009                           
  1010                           ; 2 bytes @ 0x8
  1011  0028                     	ds	2
  1012  002A                     LCDWriteInt@str:	
  1013                           
  1014                           ; 6 bytes @ 0xA
  1015  002A                     	ds	6
  1016  0030                     LCDWriteInt@from:	
  1017                           
  1018                           ; 2 bytes @ 0x10
  1019  0030                     	ds	2
  1020  0032                     LCDWriteInt@c:	
  1021                           
  1022                           ; 1 bytes @ 0x12
  1023  0032                     	ds	1
  1024  0033                     ??_showTime:	
  1025  0033                     ??_showDate:	
  1026                           ; 1 bytes @ 0x13
  1027                           
  1028  0033                     ??_showRunningTime:	
  1029                           ; 1 bytes @ 0x13
  1030                           
  1031                           
  1032                           ; 1 bytes @ 0x13
  1033  0033                     	ds	1
  1034  0034                     showDate@d:	
  1035  0034                     _showRunningTime$725:	
  1036                           ; 2 bytes @ 0x14
  1037                           
  1038                           
  1039                           ; 2 bytes @ 0x14
  1040  0034                     	ds	2
  1041  0036                     ??_doMenu:	
  1042                           
  1043                           ; 1 bytes @ 0x16
  1044  0036                     	ds	3
  1045  0039                     doMenu@h:	
  1046                           
  1047                           ; 2 bytes @ 0x19
  1048  0039                     	ds	2
  1049  003B                     doMenu@m:	
  1050                           
  1051                           ; 2 bytes @ 0x1B
  1052  003B                     	ds	2
  1053  003D                     doMenu@s:	
  1054                           
  1055                           ; 2 bytes @ 0x1D
  1056  003D                     	ds	2
  1057  003F                     doMenu@n:	
  1058                           
  1059                           ; 2 bytes @ 0x1F
  1060  003F                     	ds	2
  1061  0041                     doMenu@d:	
  1062                           
  1063                           ; 2 bytes @ 0x21
  1064  0041                     	ds	2
  1065  0043                     doMenu@m_296:	
  1066                           
  1067                           ; 2 bytes @ 0x23
  1068  0043                     	ds	2
  1069  0045                     doMenu@y:	
  1070                           
  1071                           ; 2 bytes @ 0x25
  1072  0045                     	ds	2
  1073  0047                     ??_main:	
  1074                           
  1075                           ; 1 bytes @ 0x27
  1076  0047                     	ds	3
  1077                           
  1078                           	psect	maintext
  1079  0F2A                     __pmaintext:	
  1080 ;;
  1081 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1082 ;;
  1083 ;; *************** function _main *****************
  1084 ;; Defined at:
  1085 ;;		line 62 in file "LCDTime.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;		None
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;		None
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      void 
  1092 ;; Registers used:
  1093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1094 ;; Tracked objects:
  1095 ;;		On entry : B00/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1099 ;;      Params:         0       0       0       0       0
  1100 ;;      Locals:         0       0       0       0       0
  1101 ;;      Temps:          0       3       0       0       0
  1102 ;;      Totals:         0       3       0       0       0
  1103 ;;Total ram usage:        3 bytes
  1104 ;; Hardware stack levels required when called:    6
  1105 ;; This function calls:
  1106 ;;		_DS1307_Init
  1107 ;;		_DS1307_readRam
  1108 ;;		_I2C_Init
  1109 ;;		_LCDByte
  1110 ;;		_LCDGotoXY
  1111 ;;		_LCDInit
  1112 ;;		_LCDWriteString
  1113 ;;		___wmul
  1114 ;;		_clearPrompt
  1115 ;;		_doMenu
  1116 ;;		_readClock
  1117 ;;		_readInputs
  1118 ;;		_showClock
  1119 ;; This function is called by:
  1120 ;;		Startup code after reset
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           
  1125                           ;psect for function _main
  1126  0F2A                     _main:	
  1127                           
  1128                           ;LCDTime.c: 65: I2C_Init() ;
  1129                           
  1130                           ;incstack = 0
  1131                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1132  0F2A  120A  158A  212D  120A  158A  	fcall	_I2C_Init
  1133                           
  1134                           ;LCDTime.c: 67: LCDInit(0B00000000);
  1135  0F2F  3000               	movlw	0
  1136  0F30  120A  158A  235D  120A  158A  	fcall	_LCDInit
  1137                           
  1138                           ;LCDTime.c: 69: DS1307_Init() ;
  1139  0F35  120A  158A  246B  120A  158A  	fcall	_DS1307_Init
  1140                           
  1141                           ;LCDTime.c: 72: (LCDByte(0b00000001,0));
  1142  0F3A  01F6               	clrf	LCDByte@isdata
  1143  0F3B  3001               	movlw	1
  1144  0F3C  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  1145                           
  1146                           ;LCDTime.c: 74: DS1307_readRam(&runningTime,0,2) ;
  1147  0F41  3066               	movlw	(low (_runningTime| 0))& (0+255)
  1148  0F42  00F6               	movwf	DS1307_readRam@ptr
  1149  0F43  3000               	movlw	0
  1150  0F44  00F7               	movwf	DS1307_readRam@ptr+1
  1151  0F45  3000               	movlw	0
  1152  0F46  00F8               	movwf	DS1307_readRam@offset
  1153  0F47  00F9               	movwf	DS1307_readRam@offset+1
  1154  0F48  3002               	movlw	2
  1155  0F49  00FA               	movwf	DS1307_readRam@length
  1156  0F4A  3000               	movlw	0
  1157  0F4B  00FB               	movwf	DS1307_readRam@length+1
  1158  0F4C  120A  158A  2617  120A  158A  	fcall	_DS1307_readRam
  1159  0F51  2FB7               	goto	l2707
  1160  0F52                     l2715:	
  1161                           
  1162                           ;LCDTime.c: 87: doMenu();
  1163  0F52  120A  118A  22ED  120A  158A  	fcall	_doMenu
  1164  0F57  2FB7               	goto	l2707
  1165  0F58                     l2719:	
  1166                           
  1167                           ;LCDTime.c: 89: {
  1168                           ;LCDTime.c: 95: if (state & 0x10)
  1169  0F58  1E65               	btfss	_state,4
  1170  0F59  2F65               	goto	l246
  1171                           
  1172                           ;LCDTime.c: 96: {
  1173                           ;LCDTime.c: 97: menuFunction++ ;
  1174  0F5A  3001               	movlw	1
  1175  0F5B  00C7               	movwf	??_main
  1176  0F5C  0847               	movf	??_main,w
  1177  0F5D  07E1               	addwf	_menuFunction,f
  1178                           
  1179                           ;LCDTime.c: 98: if (menuFunction == 4)
  1180  0F5E  3004               	movlw	4
  1181  0F5F  0661               	xorwf	_menuFunction,w
  1182  0F60  1D03               	btfss	3,2
  1183  0F61  2F70               	goto	l2729
  1184                           
  1185                           ;LCDTime.c: 99: menuFunction = 1 ;
  1186  0F62  01E1               	clrf	_menuFunction
  1187  0F63  0AE1               	incf	_menuFunction,f
  1188                           
  1189                           ;LCDTime.c: 100: }
  1190  0F64  2F70               	goto	l2729
  1191  0F65                     l246:	
  1192                           
  1193                           ;LCDTime.c: 101: else if (state & 0x20)
  1194  0F65  1EE5               	btfss	_state,5
  1195  0F66  2F70               	goto	l2729
  1196                           
  1197                           ;LCDTime.c: 102: {
  1198                           ;LCDTime.c: 103: menuFunction-- ;
  1199  0F67  3001               	movlw	1
  1200  0F68  02E1               	subwf	_menuFunction,f
  1201                           
  1202                           ;LCDTime.c: 104: if (menuFunction < 1)
  1203  0F69  0861               	movf	_menuFunction,w
  1204  0F6A  1D03               	btfss	3,2
  1205  0F6B  2F70               	goto	l2729
  1206                           
  1207                           ;LCDTime.c: 105: menuFunction = 4-1 ;
  1208  0F6C  3003               	movlw	3
  1209  0F6D  00C7               	movwf	??_main
  1210  0F6E  0847               	movf	??_main,w
  1211  0F6F  00E1               	movwf	_menuFunction
  1212  0F70                     l2729:	
  1213                           
  1214                           ;LCDTime.c: 106: }
  1215                           ;LCDTime.c: 108: if (menuFunction != 1)
  1216  0F70  0361               	decf	_menuFunction,w
  1217  0F71  1903               	btfsc	3,2
  1218  0F72  2FFA               	goto	l2743
  1219                           
  1220                           ;LCDTime.c: 109: {
  1221                           ;LCDTime.c: 110: next_menu_clear = minute * 60 + seconds + 20 ;
  1222  0F73  0857               	movf	_minute+1,w
  1223  0F74  00FB               	movwf	___wmul@multiplier+1
  1224  0F75  0856               	movf	_minute,w
  1225  0F76  00FA               	movwf	___wmul@multiplier
  1226  0F77  303C               	movlw	60
  1227  0F78  00FC               	movwf	___wmul@multiplicand
  1228  0F79  3000               	movlw	0
  1229  0F7A  00FD               	movwf	___wmul@multiplicand+1
  1230  0F7B  120A  158A  2250  120A  158A  	fcall	___wmul
  1231  0F80  1283               	bcf	3,5	;RP0=0, select bank0
  1232  0F81  1303               	bcf	3,6	;RP1=0, select bank0
  1233  0F82  085C               	movf	_seconds,w
  1234  0F83  077A               	addwf	?___wmul,w
  1235  0F84  00C7               	movwf	??_main
  1236  0F85  085D               	movf	_seconds+1,w
  1237  0F86  1803               	skipnc
  1238  0F87  0A5D               	incf	_seconds+1,w
  1239  0F88  077B               	addwf	?___wmul+1,w
  1240  0F89  00C8               	movwf	??_main+1
  1241  0F8A  0847               	movf	??_main,w
  1242  0F8B  3E14               	addlw	20
  1243  0F8C  00E2               	movwf	_next_menu_clear
  1244  0F8D  0848               	movf	??_main+1,w
  1245  0F8E  1803               	skipnc
  1246  0F8F  3E01               	addlw	1
  1247  0F90  3E00               	addlw	0
  1248  0F91  00E3               	movwf	_next_menu_clear+1
  1249                           
  1250                           ;LCDTime.c: 111: LCDGotoXY(9,0);
  1251  0F92  01FD               	clrf	LCDGotoXY@y
  1252  0F93  3009               	movlw	9
  1253  0F94  120A  158A  2203  120A  158A  	fcall	_LCDGotoXY
  1254                           
  1255                           ;LCDTime.c: 112: if (menuFunction == 2)
  1256  0F99  3002               	movlw	2
  1257  0F9A  1283               	bcf	3,5	;RP0=0, select bank0
  1258  0F9B  1303               	bcf	3,6	;RP1=0, select bank0
  1259  0F9C  0661               	xorwf	_menuFunction,w
  1260  0F9D  1D03               	btfss	3,2
  1261  0F9E  2FA8               	goto	l2739
  1262                           
  1263                           ;LCDTime.c: 113: LCDWriteString("Time ?");
  1264  0F9F  305C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1265  0FA0  00A0               	movwf	LCDWriteString@msg
  1266  0FA1  3080               	movlw	128
  1267  0FA2  00A1               	movwf	LCDWriteString@msg+1
  1268  0FA3  120A  158A  2229  120A  158A  	fcall	_LCDWriteString
  1269  0FA8                     l2739:	
  1270                           
  1271                           ;LCDTime.c: 114: if (menuFunction == 3)
  1272  0FA8  3003               	movlw	3
  1273  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  1274  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  1275  0FAB  0661               	xorwf	_menuFunction,w
  1276  0FAC  1D03               	btfss	3,2
  1277  0FAD  2FB7               	goto	l2707
  1278                           
  1279                           ;LCDTime.c: 115: LCDWriteString("Date ?");
  1280  0FAE  3063               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1281  0FAF  00A0               	movwf	LCDWriteString@msg
  1282  0FB0  3080               	movlw	128
  1283  0FB1  00A1               	movwf	LCDWriteString@msg+1
  1284  0FB2  120A  158A  2229  120A  158A  	fcall	_LCDWriteString
  1285  0FB7                     l2707:	
  1286                           ;LCDTime.c: 77: while(1)
  1287                           
  1288                           ;LCDTime.c: 119: }
  1289                           
  1290                           ;LCDTime.c: 116: }
  1291                           
  1292                           
  1293                           ;LCDTime.c: 78: {
  1294                           ;LCDTime.c: 80: readClock();
  1295  0FB7  120A  118A  21A8  120A  158A  	fcall	_readClock
  1296                           
  1297                           ;LCDTime.c: 82: showClock() ;
  1298  0FBC  120A  158A  21BB  120A  158A  	fcall	_showClock
  1299                           
  1300                           ;LCDTime.c: 84: readInputs() ;
  1301  0FC1  120A  158A  22F7  120A  158A  	fcall	_readInputs
  1302                           
  1303                           ;LCDTime.c: 86: if (bButton)
  1304  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  1305  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  1306  0FC8  0864               	movf	_bButton,w
  1307  0FC9  1D03               	btfss	3,2
  1308  0FCA  2F52               	goto	l2715
  1309                           
  1310                           ;LCDTime.c: 88: else if (state & 0x30)
  1311  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  1312  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  1313  0FCD  0865               	movf	_state,w
  1314  0FCE  3930               	andlw	48
  1315  0FCF  1D03               	btfss	3,2
  1316  0FD0  2F58               	goto	l2719
  1317                           
  1318                           ;LCDTime.c: 120: else if (next_menu_clear && ((minute * 60 + seconds) > next_menu_clear)
      +                          )
  1319  0FD1  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0FD2  1303               	bcf	3,6	;RP1=0, select bank0
  1321  0FD3  0862               	movf	_next_menu_clear,w
  1322  0FD4  0463               	iorwf	_next_menu_clear+1,w
  1323  0FD5  1903               	btfsc	3,2
  1324  0FD6  2FB7               	goto	l2707
  1325  0FD7  0857               	movf	_minute+1,w
  1326  0FD8  00FB               	movwf	___wmul@multiplier+1
  1327  0FD9  0856               	movf	_minute,w
  1328  0FDA  00FA               	movwf	___wmul@multiplier
  1329  0FDB  303C               	movlw	60
  1330  0FDC  00FC               	movwf	___wmul@multiplicand
  1331  0FDD  3000               	movlw	0
  1332  0FDE  00FD               	movwf	___wmul@multiplicand+1
  1333  0FDF  120A  158A  2250  120A  158A  	fcall	___wmul
  1334  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  1335  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  1336  0FE6  085C               	movf	_seconds,w
  1337  0FE7  077A               	addwf	?___wmul,w
  1338  0FE8  00C7               	movwf	??_main
  1339  0FE9  085D               	movf	_seconds+1,w
  1340  0FEA  1803               	skipnc
  1341  0FEB  0A5D               	incf	_seconds+1,w
  1342  0FEC  077B               	addwf	?___wmul+1,w
  1343  0FED  00C8               	movwf	??_main+1
  1344  0FEE  0863               	movf	_next_menu_clear+1,w
  1345  0FEF  3A80               	xorlw	128
  1346  0FF0  00C9               	movwf	??_main+2
  1347  0FF1  0848               	movf	??_main+1,w
  1348  0FF2  3A80               	xorlw	128
  1349  0FF3  0249               	subwf	??_main+2,w
  1350  0FF4  1D03               	skipz
  1351  0FF5  2FF8               	goto	u2605
  1352  0FF6  0847               	movf	??_main,w
  1353  0FF7  0262               	subwf	_next_menu_clear,w
  1354  0FF8                     u2605:	
  1355  0FF8  1803               	skipnc
  1356  0FF9  2FB7               	goto	l2707
  1357  0FFA                     l2743:	
  1358                           
  1359                           ;LCDTime.c: 117: else
  1360                           ;LCDTime.c: 118: clearPrompt();
  1361  0FFA  120A  158A  218C  120A  158A  	fcall	_clearPrompt
  1362  0FFF  2FB7               	goto	l2707
  1363  1000                     __end_of_main:	
  1364                           ;LCDTime.c: 121: {
  1365                           ;LCDTime.c: 122: clearPrompt();
  1366                           
  1367                           
  1368                           	psect	text1
  1369  09BB                     __ptext1:	
  1370 ;; *************** function _showClock *****************
  1371 ;; Defined at:
  1372 ;;		line 460 in file "LCDTime.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;		None
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1386 ;;      Params:         0       0       0       0       0
  1387 ;;      Locals:         0       0       0       0       0
  1388 ;;      Temps:          0       0       0       0       0
  1389 ;;      Totals:         0       0       0       0       0
  1390 ;;Total ram usage:        0 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    5
  1393 ;; This function calls:
  1394 ;;		_LCDGotoXY
  1395 ;;		_showDate
  1396 ;;		_showRunningTime
  1397 ;;		_showTime
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           
  1404                           ;psect for function _showClock
  1405  09BB                     _showClock:	
  1406                           
  1407                           ;LCDTime.c: 462: LCDGotoXY(0,0) ;
  1408                           
  1409                           ;incstack = 0
  1410                           ; Regs used in _showClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1411  09BB  01FD               	clrf	LCDGotoXY@y
  1412  09BC  3000               	movlw	0
  1413  09BD  120A  158A  2203  120A  158A  	fcall	_LCDGotoXY
  1414                           
  1415                           ;LCDTime.c: 463: showTime() ;
  1416  09C2  120A  158A  2398  120A  158A  	fcall	_showTime
  1417                           
  1418                           ;LCDTime.c: 465: LCDGotoXY(0,1) ;
  1419  09C7  01FD               	clrf	LCDGotoXY@y
  1420  09C8  0AFD               	incf	LCDGotoXY@y,f
  1421  09C9  3000               	movlw	0
  1422  09CA  120A  158A  2203  120A  158A  	fcall	_LCDGotoXY
  1423                           
  1424                           ;LCDTime.c: 466: showDate() ;
  1425  09CF  120A  158A  2678  120A  158A  	fcall	_showDate
  1426                           
  1427                           ;LCDTime.c: 469: if (menuFunction == 1)
  1428  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  1429  09D5  1303               	bcf	3,6	;RP1=0, select bank0
  1430  09D6  0361               	decf	_menuFunction,w
  1431  09D7  1D03               	btfss	3,2
  1432  09D8  0008               	return
  1433                           
  1434                           ;LCDTime.c: 470: showRunningTime();
  1435  09D9  120A  158A  241F   	fcall	_showRunningTime
  1436  09DC  0008               	return
  1437  09DD                     __end_of_showClock:	
  1438                           
  1439                           	psect	text2
  1440  0C1F                     __ptext2:	
  1441 ;; *************** function _showRunningTime *****************
  1442 ;; Defined at:
  1443 ;;		line 506 in file "LCDTime.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;		None
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;		None
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1457 ;;      Params:         0       0       0       0       0
  1458 ;;      Locals:         0       2       0       0       0
  1459 ;;      Temps:          0       1       0       0       0
  1460 ;;      Totals:         0       3       0       0       0
  1461 ;;Total ram usage:        3 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    4
  1464 ;; This function calls:
  1465 ;;		_LCDByte
  1466 ;;		_LCDGotoXY
  1467 ;;		_LCDWriteInt
  1468 ;;		___awdiv
  1469 ;;		___awmod
  1470 ;; This function is called by:
  1471 ;;		_showClock
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           
  1476                           ;psect for function _showRunningTime
  1477  0C1F                     _showRunningTime:	
  1478                           
  1479                           ;LCDTime.c: 508: LCDGotoXY(10,0) ;
  1480                           
  1481                           ;incstack = 0
  1482                           ; Regs used in _showRunningTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1483  0C1F  01FD               	clrf	LCDGotoXY@y
  1484  0C20  300A               	movlw	10
  1485  0C21  120A  158A  2203  120A  158A  	fcall	_LCDGotoXY
  1486                           
  1487                           ;LCDTime.c: 509: LCDWriteInt(runningTime / 60,1);
  1488  0C26  303C               	movlw	60
  1489  0C27  00F1               	movwf	___awdiv@divisor
  1490  0C28  3000               	movlw	0
  1491  0C29  00F2               	movwf	___awdiv@divisor+1
  1492  0C2A  1283               	bcf	3,5	;RP0=0, select bank0
  1493  0C2B  1303               	bcf	3,6	;RP1=0, select bank0
  1494  0C2C  0867               	movf	_runningTime+1,w
  1495  0C2D  00F4               	movwf	___awdiv@dividend+1
  1496  0C2E  0866               	movf	_runningTime,w
  1497  0C2F  00F3               	movwf	___awdiv@dividend
  1498  0C30  120A  158A  2561  120A  158A  	fcall	___awdiv
  1499  0C35  0872               	movf	?___awdiv+1,w
  1500  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  1501  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  1502  0C38  00B5               	movwf	_showRunningTime$725+1
  1503  0C39  0871               	movf	?___awdiv,w
  1504  0C3A  00B4               	movwf	_showRunningTime$725
  1505                           
  1506                           ;LCDTime.c: 509: LCDWriteInt(runningTime / 60,1);
  1507  0C3B  0835               	movf	_showRunningTime$725+1,w
  1508  0C3C  00A3               	movwf	LCDWriteInt@val+1
  1509  0C3D  0834               	movf	_showRunningTime$725,w
  1510  0C3E  00A2               	movwf	LCDWriteInt@val
  1511  0C3F  01A4               	clrf	LCDWriteInt@field_length
  1512  0C40  0AA4               	incf	LCDWriteInt@field_length,f
  1513  0C41  120A  118A  206D  120A  158A  	fcall	_LCDWriteInt
  1514                           
  1515                           ;LCDTime.c: 510: (LCDByte(':',1)) ;
  1516  0C46  01F6               	clrf	LCDByte@isdata
  1517  0C47  0AF6               	incf	LCDByte@isdata,f
  1518  0C48  303A               	movlw	58
  1519  0C49  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  1520                           
  1521                           ;LCDTime.c: 511: LCDWriteInt(runningTime % 60,2);
  1522  0C4E  303C               	movlw	60
  1523  0C4F  00F1               	movwf	___awmod@divisor
  1524  0C50  3000               	movlw	0
  1525  0C51  00F2               	movwf	___awmod@divisor+1
  1526  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  1527  0C53  1303               	bcf	3,6	;RP1=0, select bank0
  1528  0C54  0867               	movf	_runningTime+1,w
  1529  0C55  00F4               	movwf	___awmod@dividend+1
  1530  0C56  0866               	movf	_runningTime,w
  1531  0C57  00F3               	movwf	___awmod@dividend
  1532  0C58  120A  158A  23D4  120A  158A  	fcall	___awmod
  1533  0C5D  0872               	movf	?___awmod+1,w
  1534  0C5E  1283               	bcf	3,5	;RP0=0, select bank0
  1535  0C5F  1303               	bcf	3,6	;RP1=0, select bank0
  1536  0C60  00A3               	movwf	LCDWriteInt@val+1
  1537  0C61  0871               	movf	?___awmod,w
  1538  0C62  00A2               	movwf	LCDWriteInt@val
  1539  0C63  3002               	movlw	2
  1540  0C64  00B3               	movwf	??_showRunningTime
  1541  0C65  0833               	movf	??_showRunningTime,w
  1542  0C66  00A4               	movwf	LCDWriteInt@field_length
  1543  0C67  120A  118A  206D   	fcall	_LCDWriteInt
  1544  0C6A  0008               	return
  1545  0C6B                     __end_of_showRunningTime:	
  1546                           
  1547                           	psect	text3
  1548  01A8                     __ptext3:	
  1549 ;; *************** function _readClock *****************
  1550 ;; Defined at:
  1551 ;;		line 428 in file "LCDTime.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;		None
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  c               1    8[BANK0 ] unsigned char 
  1556 ;;  b               1    7[BANK0 ] unsigned char 
  1557 ;;  a               1    6[BANK0 ] unsigned char 
  1558 ;;  n               1    5[BANK0 ] unsigned char 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  1    wreg      void 
  1561 ;; Registers used:
  1562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1568 ;;      Params:         0       0       0       0       0
  1569 ;;      Locals:         0       4       0       0       0
  1570 ;;      Temps:          0       3       0       0       0
  1571 ;;      Totals:         0       7       0       0       0
  1572 ;;Total ram usage:        7 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    4
  1575 ;; This function calls:
  1576 ;;		_DS1307_GetDate
  1577 ;;		_DS1307_GetTime
  1578 ;;		_DS1307_writeRam
  1579 ;;		___awdiv
  1580 ;;		___wmul
  1581 ;; This function is called by:
  1582 ;;		_main
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           
  1587                           ;psect for function _readClock
  1588  01A8                     _readClock:	
  1589                           
  1590                           ;LCDTime.c: 430: unsigned char a,b,c,n ;
  1591                           ;LCDTime.c: 432: DS1307_GetTime(&a,&b,&c);
  1592                           
  1593                           ;incstack = 0
  1594                           ; Regs used in _readClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1595  01A8  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1596  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1597  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  1598  01AB  00A2               	movwf	??_readClock
  1599  01AC  0822               	movf	??_readClock,w
  1600  01AD  00F6               	movwf	DS1307_GetTime@m_ptr
  1601  01AE  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1602  01AF  00A3               	movwf	??_readClock+1
  1603  01B0  0823               	movf	??_readClock+1,w
  1604  01B1  00F7               	movwf	DS1307_GetTime@s_ptr
  1605  01B2  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1606  01B3  120A  158A  250B  120A  118A  	fcall	_DS1307_GetTime
  1607                           
  1608                           ;LCDTime.c: 435: hour = (a % 16) + ((a / 16 ) * 10) ;
  1609  01B8  3010               	movlw	16
  1610  01B9  00F1               	movwf	___awdiv@divisor
  1611  01BA  3000               	movlw	0
  1612  01BB  00F2               	movwf	___awdiv@divisor+1
  1613  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1614  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1615  01BE  0826               	movf	readClock@a,w
  1616  01BF  00A2               	movwf	??_readClock
  1617  01C0  01A3               	clrf	??_readClock+1
  1618  01C1  0822               	movf	??_readClock,w
  1619  01C2  00F3               	movwf	___awdiv@dividend
  1620  01C3  0823               	movf	??_readClock+1,w
  1621  01C4  00F4               	movwf	___awdiv@dividend+1
  1622  01C5  120A  158A  2561  120A  118A  	fcall	___awdiv
  1623  01CA  0872               	movf	?___awdiv+1,w
  1624  01CB  00FB               	movwf	___wmul@multiplier+1
  1625  01CC  0871               	movf	?___awdiv,w
  1626  01CD  00FA               	movwf	___wmul@multiplier
  1627  01CE  300A               	movlw	10
  1628  01CF  00FC               	movwf	___wmul@multiplicand
  1629  01D0  3000               	movlw	0
  1630  01D1  00FD               	movwf	___wmul@multiplicand+1
  1631  01D2  120A  158A  2250  120A  118A  	fcall	___wmul
  1632  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1633  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1634  01D9  0826               	movf	readClock@a,w
  1635  01DA  390F               	andlw	15
  1636  01DB  077A               	addwf	?___wmul,w
  1637  01DC  00D4               	movwf	_hour
  1638  01DD  087B               	movf	?___wmul+1,w
  1639  01DE  1803               	skipnc
  1640  01DF  0A7B               	incf	?___wmul+1,w
  1641  01E0  00D5               	movwf	_hour+1
  1642                           
  1643                           ;LCDTime.c: 436: minute = (b % 16) + ((b / 16 ) * 10) ;
  1644  01E1  3010               	movlw	16
  1645  01E2  00F1               	movwf	___awdiv@divisor
  1646  01E3  3000               	movlw	0
  1647  01E4  00F2               	movwf	___awdiv@divisor+1
  1648  01E5  0827               	movf	readClock@b,w
  1649  01E6  00A2               	movwf	??_readClock
  1650  01E7  01A3               	clrf	??_readClock+1
  1651  01E8  0822               	movf	??_readClock,w
  1652  01E9  00F3               	movwf	___awdiv@dividend
  1653  01EA  0823               	movf	??_readClock+1,w
  1654  01EB  00F4               	movwf	___awdiv@dividend+1
  1655  01EC  120A  158A  2561  120A  118A  	fcall	___awdiv
  1656  01F1  0872               	movf	?___awdiv+1,w
  1657  01F2  00FB               	movwf	___wmul@multiplier+1
  1658  01F3  0871               	movf	?___awdiv,w
  1659  01F4  00FA               	movwf	___wmul@multiplier
  1660  01F5  300A               	movlw	10
  1661  01F6  00FC               	movwf	___wmul@multiplicand
  1662  01F7  3000               	movlw	0
  1663  01F8  00FD               	movwf	___wmul@multiplicand+1
  1664  01F9  120A  158A  2250  120A  118A  	fcall	___wmul
  1665  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  1666  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  1667  0200  0827               	movf	readClock@b,w
  1668  0201  390F               	andlw	15
  1669  0202  077A               	addwf	?___wmul,w
  1670  0203  00D6               	movwf	_minute
  1671  0204  087B               	movf	?___wmul+1,w
  1672  0205  1803               	skipnc
  1673  0206  0A7B               	incf	?___wmul+1,w
  1674  0207  00D7               	movwf	_minute+1
  1675                           
  1676                           ;LCDTime.c: 437: seconds = (c % 16) + ((c / 16 ) * 10) ;
  1677  0208  3010               	movlw	16
  1678  0209  00F1               	movwf	___awdiv@divisor
  1679  020A  3000               	movlw	0
  1680  020B  00F2               	movwf	___awdiv@divisor+1
  1681  020C  0828               	movf	readClock@c,w
  1682  020D  00A2               	movwf	??_readClock
  1683  020E  01A3               	clrf	??_readClock+1
  1684  020F  0822               	movf	??_readClock,w
  1685  0210  00F3               	movwf	___awdiv@dividend
  1686  0211  0823               	movf	??_readClock+1,w
  1687  0212  00F4               	movwf	___awdiv@dividend+1
  1688  0213  120A  158A  2561  120A  118A  	fcall	___awdiv
  1689  0218  0872               	movf	?___awdiv+1,w
  1690  0219  00FB               	movwf	___wmul@multiplier+1
  1691  021A  0871               	movf	?___awdiv,w
  1692  021B  00FA               	movwf	___wmul@multiplier
  1693  021C  300A               	movlw	10
  1694  021D  00FC               	movwf	___wmul@multiplicand
  1695  021E  3000               	movlw	0
  1696  021F  00FD               	movwf	___wmul@multiplicand+1
  1697  0220  120A  158A  2250  120A  118A  	fcall	___wmul
  1698  0225  1283               	bcf	3,5	;RP0=0, select bank0
  1699  0226  1303               	bcf	3,6	;RP1=0, select bank0
  1700  0227  0828               	movf	readClock@c,w
  1701  0228  390F               	andlw	15
  1702  0229  077A               	addwf	?___wmul,w
  1703  022A  00DC               	movwf	_seconds
  1704  022B  087B               	movf	?___wmul+1,w
  1705  022C  1803               	skipnc
  1706  022D  0A7B               	incf	?___wmul+1,w
  1707  022E  00DD               	movwf	_seconds+1
  1708                           
  1709                           ;LCDTime.c: 439: if (hour != last_hour)
  1710  022F  0860               	movf	_last_hour,w
  1711  0230  00A2               	movwf	??_readClock
  1712  0231  01A3               	clrf	??_readClock+1
  1713  0232  0855               	movf	_hour+1,w
  1714  0233  0623               	xorwf	??_readClock+1,w
  1715  0234  1D03               	skipz
  1716  0235  2A38               	goto	u1865
  1717  0236  0854               	movf	_hour,w
  1718  0237  0622               	xorwf	??_readClock,w
  1719  0238                     u1865:	
  1720  0238  1903               	skipnz
  1721  0239  2ACF               	goto	l2389
  1722                           
  1723                           ;LCDTime.c: 440: {
  1724                           ;LCDTime.c: 441: last_hour = hour ;
  1725  023A  0854               	movf	_hour,w
  1726  023B  00A2               	movwf	??_readClock
  1727  023C  0822               	movf	??_readClock,w
  1728  023D  00E0               	movwf	_last_hour
  1729                           
  1730                           ;LCDTime.c: 443: DS1307_GetDate(&n,&a,&b,&c) ;
  1731  023E  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1732  023F  00A2               	movwf	??_readClock
  1733  0240  0822               	movf	??_readClock,w
  1734  0241  00F6               	movwf	DS1307_GetDate@d_ptr
  1735  0242  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1736  0243  00A3               	movwf	??_readClock+1
  1737  0244  0823               	movf	??_readClock+1,w
  1738  0245  00F7               	movwf	DS1307_GetDate@m_ptr
  1739  0246  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1740  0247  00A4               	movwf	??_readClock+2
  1741  0248  0824               	movf	??_readClock+2,w
  1742  0249  00F8               	movwf	DS1307_GetDate@y_ptr
  1743  024A  3025               	movlw	(low (readClock@n| 0))& (0+255)
  1744  024B  120A  118A  2007  120A  118A  	fcall	_DS1307_GetDate
  1745                           
  1746                           ;LCDTime.c: 445: day = (n % 16) ;
  1747  0250  1283               	bcf	3,5	;RP0=0, select bank0
  1748  0251  1303               	bcf	3,6	;RP1=0, select bank0
  1749  0252  0825               	movf	readClock@n,w
  1750  0253  390F               	andlw	15
  1751  0254  00A2               	movwf	??_readClock
  1752  0255  01A3               	clrf	??_readClock+1
  1753  0256  0822               	movf	??_readClock,w
  1754  0257  00D2               	movwf	_day
  1755  0258  0823               	movf	??_readClock+1,w
  1756  0259  00D3               	movwf	_day+1
  1757                           
  1758                           ;LCDTime.c: 446: date = (a % 16) + ((a / 16 ) * 10) ;
  1759  025A  3010               	movlw	16
  1760  025B  00F1               	movwf	___awdiv@divisor
  1761  025C  3000               	movlw	0
  1762  025D  00F2               	movwf	___awdiv@divisor+1
  1763  025E  0826               	movf	readClock@a,w
  1764  025F  00A2               	movwf	??_readClock
  1765  0260  01A3               	clrf	??_readClock+1
  1766  0261  0822               	movf	??_readClock,w
  1767  0262  00F3               	movwf	___awdiv@dividend
  1768  0263  0823               	movf	??_readClock+1,w
  1769  0264  00F4               	movwf	___awdiv@dividend+1
  1770  0265  120A  158A  2561  120A  118A  	fcall	___awdiv
  1771  026A  0872               	movf	?___awdiv+1,w
  1772  026B  00FB               	movwf	___wmul@multiplier+1
  1773  026C  0871               	movf	?___awdiv,w
  1774  026D  00FA               	movwf	___wmul@multiplier
  1775  026E  300A               	movlw	10
  1776  026F  00FC               	movwf	___wmul@multiplicand
  1777  0270  3000               	movlw	0
  1778  0271  00FD               	movwf	___wmul@multiplicand+1
  1779  0272  120A  158A  2250  120A  118A  	fcall	___wmul
  1780  0277  1283               	bcf	3,5	;RP0=0, select bank0
  1781  0278  1303               	bcf	3,6	;RP1=0, select bank0
  1782  0279  0826               	movf	readClock@a,w
  1783  027A  390F               	andlw	15
  1784  027B  077A               	addwf	?___wmul,w
  1785  027C  00D0               	movwf	_date
  1786  027D  087B               	movf	?___wmul+1,w
  1787  027E  1803               	skipnc
  1788  027F  0A7B               	incf	?___wmul+1,w
  1789  0280  00D1               	movwf	_date+1
  1790                           
  1791                           ;LCDTime.c: 447: month = (b % 16) + ((b / 16 ) * 10) ;
  1792  0281  3010               	movlw	16
  1793  0282  00F1               	movwf	___awdiv@divisor
  1794  0283  3000               	movlw	0
  1795  0284  00F2               	movwf	___awdiv@divisor+1
  1796  0285  0827               	movf	readClock@b,w
  1797  0286  00A2               	movwf	??_readClock
  1798  0287  01A3               	clrf	??_readClock+1
  1799  0288  0822               	movf	??_readClock,w
  1800  0289  00F3               	movwf	___awdiv@dividend
  1801  028A  0823               	movf	??_readClock+1,w
  1802  028B  00F4               	movwf	___awdiv@dividend+1
  1803  028C  120A  158A  2561  120A  118A  	fcall	___awdiv
  1804  0291  0872               	movf	?___awdiv+1,w
  1805  0292  00FB               	movwf	___wmul@multiplier+1
  1806  0293  0871               	movf	?___awdiv,w
  1807  0294  00FA               	movwf	___wmul@multiplier
  1808  0295  300A               	movlw	10
  1809  0296  00FC               	movwf	___wmul@multiplicand
  1810  0297  3000               	movlw	0
  1811  0298  00FD               	movwf	___wmul@multiplicand+1
  1812  0299  120A  158A  2250  120A  118A  	fcall	___wmul
  1813  029E  1283               	bcf	3,5	;RP0=0, select bank0
  1814  029F  1303               	bcf	3,6	;RP1=0, select bank0
  1815  02A0  0827               	movf	readClock@b,w
  1816  02A1  390F               	andlw	15
  1817  02A2  077A               	addwf	?___wmul,w
  1818  02A3  00D8               	movwf	_month
  1819  02A4  087B               	movf	?___wmul+1,w
  1820  02A5  1803               	skipnc
  1821  02A6  0A7B               	incf	?___wmul+1,w
  1822  02A7  00D9               	movwf	_month+1
  1823                           
  1824                           ;LCDTime.c: 448: year = (c % 16) + ((c / 16 ) * 10) ;
  1825  02A8  3010               	movlw	16
  1826  02A9  00F1               	movwf	___awdiv@divisor
  1827  02AA  3000               	movlw	0
  1828  02AB  00F2               	movwf	___awdiv@divisor+1
  1829  02AC  0828               	movf	readClock@c,w
  1830  02AD  00A2               	movwf	??_readClock
  1831  02AE  01A3               	clrf	??_readClock+1
  1832  02AF  0822               	movf	??_readClock,w
  1833  02B0  00F3               	movwf	___awdiv@dividend
  1834  02B1  0823               	movf	??_readClock+1,w
  1835  02B2  00F4               	movwf	___awdiv@dividend+1
  1836  02B3  120A  158A  2561  120A  118A  	fcall	___awdiv
  1837  02B8  0872               	movf	?___awdiv+1,w
  1838  02B9  00FB               	movwf	___wmul@multiplier+1
  1839  02BA  0871               	movf	?___awdiv,w
  1840  02BB  00FA               	movwf	___wmul@multiplier
  1841  02BC  300A               	movlw	10
  1842  02BD  00FC               	movwf	___wmul@multiplicand
  1843  02BE  3000               	movlw	0
  1844  02BF  00FD               	movwf	___wmul@multiplicand+1
  1845  02C0  120A  158A  2250  120A  118A  	fcall	___wmul
  1846  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  1847  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  1848  02C7  0828               	movf	readClock@c,w
  1849  02C8  390F               	andlw	15
  1850  02C9  077A               	addwf	?___wmul,w
  1851  02CA  00DE               	movwf	_year
  1852  02CB  087B               	movf	?___wmul+1,w
  1853  02CC  1803               	skipnc
  1854  02CD  0A7B               	incf	?___wmul+1,w
  1855  02CE  00DF               	movwf	_year+1
  1856  02CF                     l2389:	
  1857                           
  1858                           ;LCDTime.c: 449: }
  1859                           ;LCDTime.c: 451: if (minute != runningMinute)
  1860  02CF  085B               	movf	_runningMinute+1,w
  1861  02D0  0657               	xorwf	_minute+1,w
  1862  02D1  1D03               	skipz
  1863  02D2  2AD5               	goto	u1875
  1864  02D3  085A               	movf	_runningMinute,w
  1865  02D4  0656               	xorwf	_minute,w
  1866  02D5                     u1875:	
  1867  02D5  1903               	skipnz
  1868  02D6  0008               	return
  1869                           
  1870                           ;LCDTime.c: 452: {
  1871                           ;LCDTime.c: 453: runningMinute = minute ;
  1872  02D7  0857               	movf	_minute+1,w
  1873  02D8  00DB               	movwf	_runningMinute+1
  1874  02D9  0856               	movf	_minute,w
  1875  02DA  00DA               	movwf	_runningMinute
  1876                           
  1877                           ;LCDTime.c: 454: runningTime++ ;
  1878  02DB  3001               	movlw	1
  1879  02DC  07E6               	addwf	_runningTime,f
  1880  02DD  1803               	skipnc
  1881  02DE  0AE7               	incf	_runningTime+1,f
  1882  02DF  3000               	movlw	0
  1883  02E0  07E7               	addwf	_runningTime+1,f
  1884                           
  1885                           ;LCDTime.c: 456: DS1307_writeRam(&runningTime,0,2) ;
  1886  02E1  3000               	movlw	0
  1887  02E2  00F6               	movwf	DS1307_writeRam@offset
  1888  02E3  00F7               	movwf	DS1307_writeRam@offset+1
  1889  02E4  3002               	movlw	2
  1890  02E5  00F8               	movwf	DS1307_writeRam@length
  1891  02E6  3000               	movlw	0
  1892  02E7  00F9               	movwf	DS1307_writeRam@length+1
  1893  02E8  3066               	movlw	(low (_runningTime| 0))& (0+255)
  1894  02E9  120A  158A  2326   	fcall	_DS1307_writeRam
  1895  02EC  0008               	return
  1896  02ED                     __end_of_readClock:	
  1897                           
  1898                           	psect	text4
  1899  0B26                     __ptext4:	
  1900 ;; *************** function _DS1307_writeRam *****************
  1901 ;; Defined at:
  1902 ;;		line 109 in file "DS1307.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;  ptr             1    wreg     PTR unsigned char 
  1905 ;;		 -> runningTime(2), 
  1906 ;;  offset          2    5[COMMON] int 
  1907 ;;  length          2    7[COMMON] int 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  ptr             1   11[COMMON] PTR unsigned char 
  1910 ;;		 -> runningTime(2), 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  1    wreg      void 
  1913 ;; Registers used:
  1914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1920 ;;      Params:         4       0       0       0       0
  1921 ;;      Locals:         1       0       0       0       0
  1922 ;;      Temps:          2       0       0       0       0
  1923 ;;      Totals:         7       0       0       0       0
  1924 ;;Total ram usage:        7 bytes
  1925 ;; Hardware stack levels used:    1
  1926 ;; Hardware stack levels required when called:    3
  1927 ;; This function calls:
  1928 ;;		_DS1307_Write
  1929 ;;		_I2C_Start
  1930 ;;		_I2C_Stop
  1931 ;; This function is called by:
  1932 ;;		_readClock
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           
  1937                           ;psect for function _DS1307_writeRam
  1938  0B26                     _DS1307_writeRam:	
  1939                           
  1940                           ;incstack = 0
  1941                           ; Regs used in _DS1307_writeRam: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1942                           ;DS1307_writeRam@ptr stored from wreg
  1943  0B26  00FC               	movwf	DS1307_writeRam@ptr
  1944                           
  1945                           ;DS1307.c: 111: I2C_Start();
  1946  0B27  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  1947                           
  1948                           ;DS1307.c: 112: DS1307_Write(0xD0);
  1949  0B2C  30D0               	movlw	208
  1950  0B2D  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  1951                           
  1952                           ;DS1307.c: 113: DS1307_Write(0x08 + offset);
  1953  0B32  0876               	movf	DS1307_writeRam@offset,w
  1954  0B33  3E08               	addlw	8
  1955  0B34  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  1956  0B39                     l2209:	
  1957                           ;DS1307.c: 115: while(length-- > 0)
  1958                           
  1959  0B39  0879               	movf	DS1307_writeRam@length+1,w
  1960  0B3A  00FB               	movwf	??_DS1307_writeRam+1
  1961  0B3B  03F8               	decf	DS1307_writeRam@length,f
  1962  0B3C  0A78               	incf	DS1307_writeRam@length,w
  1963  0B3D  00FA               	movwf	??_DS1307_writeRam
  1964  0B3E  1903               	skipnz
  1965  0B3F  03F9               	decf	DS1307_writeRam@length+1,f
  1966  0B40  087B               	movf	??_DS1307_writeRam+1,w
  1967  0B41  3A80               	xorlw	128
  1968  0B42  00FF               	movwf	127
  1969  0B43  3080               	movlw	128
  1970  0B44  027F               	subwf	127,w
  1971  0B45  1D03               	skipz
  1972  0B46  2B49               	goto	u1805
  1973  0B47  3001               	movlw	1
  1974  0B48  027A               	subwf	??_DS1307_writeRam,w
  1975  0B49                     u1805:	
  1976  0B49  1C03               	btfss	3,0
  1977  0B4A  2B59               	goto	l2211
  1978                           
  1979                           ;DS1307.c: 116: DS1307_Write(*ptr++);
  1980  0B4B  087C               	movf	DS1307_writeRam@ptr,w
  1981  0B4C  0084               	movwf	4
  1982  0B4D  1383               	bcf	3,7	;select IRP bank0
  1983  0B4E  0800               	movf	0,w
  1984  0B4F  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  1985  0B54  3001               	movlw	1
  1986  0B55  00FA               	movwf	??_DS1307_writeRam
  1987  0B56  087A               	movf	??_DS1307_writeRam,w
  1988  0B57  07FC               	addwf	DS1307_writeRam@ptr,f
  1989  0B58  2B39               	goto	l2209
  1990  0B59                     l2211:	
  1991                           
  1992                           ;DS1307.c: 118: I2C_Stop();
  1993  0B59  120A  158A  215A   	fcall	_I2C_Stop
  1994  0B5C  0008               	return
  1995  0B5D                     __end_of_DS1307_writeRam:	
  1996                           
  1997                           	psect	text5
  1998  0D0B                     __ptext5:	
  1999 ;; *************** function _DS1307_GetTime *****************
  2000 ;; Defined at:
  2001 ;;		line 66 in file "DS1307.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  h_ptr           1    wreg     PTR unsigned char 
  2004 ;;		 -> readClock@a(1), 
  2005 ;;  m_ptr           1    5[COMMON] PTR unsigned char 
  2006 ;;		 -> readClock@b(1), 
  2007 ;;  s_ptr           1    6[COMMON] PTR unsigned char 
  2008 ;;		 -> readClock@c(1), 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  h_ptr           1    8[COMMON] PTR unsigned char 
  2011 ;;		 -> readClock@a(1), 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      void 
  2014 ;; Registers used:
  2015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2021 ;;      Params:         2       0       0       0       0
  2022 ;;      Locals:         1       0       0       0       0
  2023 ;;      Temps:          1       0       0       0       0
  2024 ;;      Totals:         4       0       0       0       0
  2025 ;;Total ram usage:        4 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    3
  2028 ;; This function calls:
  2029 ;;		_DS1307_Read
  2030 ;;		_DS1307_Write
  2031 ;;		_I2C_Ack
  2032 ;;		_I2C_NoAck
  2033 ;;		_I2C_Start
  2034 ;;		_I2C_Stop
  2035 ;; This function is called by:
  2036 ;;		_readClock
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           
  2041                           ;psect for function _DS1307_GetTime
  2042  0D0B                     _DS1307_GetTime:	
  2043                           
  2044                           ;incstack = 0
  2045                           ; Regs used in _DS1307_GetTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2046                           ;DS1307_GetTime@h_ptr stored from wreg
  2047  0D0B  00F9               	movwf	DS1307_GetTime@h_ptr
  2048                           
  2049                           ;DS1307.c: 68: I2C_Start();
  2050  0D0C  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  2051                           
  2052                           ;DS1307.c: 69: DS1307_Write(0xD0);
  2053  0D11  30D0               	movlw	208
  2054  0D12  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  2055                           
  2056                           ;DS1307.c: 70: DS1307_Write(0x00);
  2057  0D17  3000               	movlw	0
  2058  0D18  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  2059                           
  2060                           ;DS1307.c: 71: I2C_Stop();
  2061  0D1D  120A  158A  215A  120A  158A  	fcall	_I2C_Stop
  2062                           
  2063                           ;DS1307.c: 72: I2C_Start();
  2064  0D22  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  2065                           
  2066                           ;DS1307.c: 73: DS1307_Write(0xD1);
  2067  0D27  30D1               	movlw	209
  2068  0D28  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  2069                           
  2070                           ;DS1307.c: 74: *s_ptr = DS1307_Read(); I2C_Ack();
  2071  0D2D  120A  158A  2129  120A  158A  	fcall	_DS1307_Read
  2072  0D32  00F8               	movwf	??_DS1307_GetTime
  2073  0D33  0877               	movf	DS1307_GetTime@s_ptr,w
  2074  0D34  0084               	movwf	4
  2075  0D35  0878               	movf	??_DS1307_GetTime,w
  2076  0D36  1383               	bcf	3,7	;select IRP bank0
  2077  0D37  0080               	movwf	0
  2078  0D38  120A  158A  2145  120A  158A  	fcall	_I2C_Ack
  2079                           
  2080                           ;DS1307.c: 75: *m_ptr = DS1307_Read(); I2C_Ack();
  2081  0D3D  120A  158A  2129  120A  158A  	fcall	_DS1307_Read
  2082  0D42  00F8               	movwf	??_DS1307_GetTime
  2083  0D43  0876               	movf	DS1307_GetTime@m_ptr,w
  2084  0D44  0084               	movwf	4
  2085  0D45  0878               	movf	??_DS1307_GetTime,w
  2086  0D46  1383               	bcf	3,7	;select IRP bank0
  2087  0D47  0080               	movwf	0
  2088  0D48  120A  158A  2145  120A  158A  	fcall	_I2C_Ack
  2089                           
  2090                           ;DS1307.c: 76: *h_ptr = DS1307_Read(); I2C_NoAck();
  2091  0D4D  120A  158A  2129  120A  158A  	fcall	_DS1307_Read
  2092  0D52  00F8               	movwf	??_DS1307_GetTime
  2093  0D53  0879               	movf	DS1307_GetTime@h_ptr,w
  2094  0D54  0084               	movwf	4
  2095  0D55  0878               	movf	??_DS1307_GetTime,w
  2096  0D56  1383               	bcf	3,7	;select IRP bank0
  2097  0D57  0080               	movwf	0
  2098  0D58  120A  158A  213B  120A  158A  	fcall	_I2C_NoAck
  2099                           
  2100                           ;DS1307.c: 77: I2C_Stop();
  2101  0D5D  120A  158A  215A   	fcall	_I2C_Stop
  2102  0D60  0008               	return
  2103  0D61                     __end_of_DS1307_GetTime:	
  2104                           
  2105                           	psect	text6
  2106  0007                     __ptext6:	
  2107 ;; *************** function _DS1307_GetDate *****************
  2108 ;; Defined at:
  2109 ;;		line 80 in file "DS1307.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  n_ptr           1    wreg     PTR unsigned char 
  2112 ;;		 -> readClock@n(1), 
  2113 ;;  d_ptr           1    5[COMMON] PTR unsigned char 
  2114 ;;		 -> readClock@a(1), 
  2115 ;;  m_ptr           1    6[COMMON] PTR unsigned char 
  2116 ;;		 -> readClock@b(1), 
  2117 ;;  y_ptr           1    7[COMMON] PTR unsigned char 
  2118 ;;		 -> readClock@c(1), 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  n_ptr           1    9[COMMON] PTR unsigned char 
  2121 ;;		 -> readClock@n(1), 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2131 ;;      Params:         3       0       0       0       0
  2132 ;;      Locals:         1       0       0       0       0
  2133 ;;      Temps:          1       0       0       0       0
  2134 ;;      Totals:         5       0       0       0       0
  2135 ;;Total ram usage:        5 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    3
  2138 ;; This function calls:
  2139 ;;		_DS1307_Read
  2140 ;;		_DS1307_Write
  2141 ;;		_I2C_Ack
  2142 ;;		_I2C_NoAck
  2143 ;;		_I2C_Start
  2144 ;;		_I2C_Stop
  2145 ;; This function is called by:
  2146 ;;		_readClock
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           
  2151                           ;psect for function _DS1307_GetDate
  2152  0007                     _DS1307_GetDate:	
  2153                           
  2154                           ;incstack = 0
  2155                           ; Regs used in _DS1307_GetDate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2156                           ;DS1307_GetDate@n_ptr stored from wreg
  2157  0007  00FA               	movwf	DS1307_GetDate@n_ptr
  2158                           
  2159                           ;DS1307.c: 82: I2C_Start();
  2160  0008  120A  158A  216A  120A  118A  	fcall	_I2C_Start
  2161                           
  2162                           ;DS1307.c: 83: DS1307_Write(0xD0);
  2163  000D  30D0               	movlw	208
  2164  000E  120A  158A  214F  120A  118A  	fcall	_DS1307_Write
  2165                           
  2166                           ;DS1307.c: 84: DS1307_Write(0x03);
  2167  0013  3003               	movlw	3
  2168  0014  120A  158A  214F  120A  118A  	fcall	_DS1307_Write
  2169                           
  2170                           ;DS1307.c: 85: I2C_Stop();
  2171  0019  120A  158A  215A  120A  118A  	fcall	_I2C_Stop
  2172                           
  2173                           ;DS1307.c: 86: I2C_Start();
  2174  001E  120A  158A  216A  120A  118A  	fcall	_I2C_Start
  2175                           
  2176                           ;DS1307.c: 87: DS1307_Write(0xD1);
  2177  0023  30D1               	movlw	209
  2178  0024  120A  158A  214F  120A  118A  	fcall	_DS1307_Write
  2179                           
  2180                           ;DS1307.c: 88: *n_ptr = DS1307_Read(); I2C_Ack();
  2181  0029  120A  158A  2129  120A  118A  	fcall	_DS1307_Read
  2182  002E  00F9               	movwf	??_DS1307_GetDate
  2183  002F  087A               	movf	DS1307_GetDate@n_ptr,w
  2184  0030  0084               	movwf	4
  2185  0031  0879               	movf	??_DS1307_GetDate,w
  2186  0032  1383               	bcf	3,7	;select IRP bank0
  2187  0033  0080               	movwf	0
  2188  0034  120A  158A  2145  120A  118A  	fcall	_I2C_Ack
  2189                           
  2190                           ;DS1307.c: 89: *d_ptr = DS1307_Read(); I2C_Ack();
  2191  0039  120A  158A  2129  120A  118A  	fcall	_DS1307_Read
  2192  003E  00F9               	movwf	??_DS1307_GetDate
  2193  003F  0876               	movf	DS1307_GetDate@d_ptr,w
  2194  0040  0084               	movwf	4
  2195  0041  0879               	movf	??_DS1307_GetDate,w
  2196  0042  1383               	bcf	3,7	;select IRP bank0
  2197  0043  0080               	movwf	0
  2198  0044  120A  158A  2145  120A  118A  	fcall	_I2C_Ack
  2199                           
  2200                           ;DS1307.c: 90: *m_ptr = DS1307_Read(); I2C_Ack();
  2201  0049  120A  158A  2129  120A  118A  	fcall	_DS1307_Read
  2202  004E  00F9               	movwf	??_DS1307_GetDate
  2203  004F  0877               	movf	DS1307_GetDate@m_ptr,w
  2204  0050  0084               	movwf	4
  2205  0051  0879               	movf	??_DS1307_GetDate,w
  2206  0052  1383               	bcf	3,7	;select IRP bank0
  2207  0053  0080               	movwf	0
  2208  0054  120A  158A  2145  120A  118A  	fcall	_I2C_Ack
  2209                           
  2210                           ;DS1307.c: 91: *y_ptr = DS1307_Read(); I2C_NoAck();
  2211  0059  120A  158A  2129  120A  118A  	fcall	_DS1307_Read
  2212  005E  00F9               	movwf	??_DS1307_GetDate
  2213  005F  0878               	movf	DS1307_GetDate@y_ptr,w
  2214  0060  0084               	movwf	4
  2215  0061  0879               	movf	??_DS1307_GetDate,w
  2216  0062  1383               	bcf	3,7	;select IRP bank0
  2217  0063  0080               	movwf	0
  2218  0064  120A  158A  213B  120A  118A  	fcall	_I2C_NoAck
  2219                           
  2220                           ;DS1307.c: 92: I2C_Stop();
  2221  0069  120A  158A  215A   	fcall	_I2C_Stop
  2222  006C  0008               	return
  2223  006D                     __end_of_DS1307_GetDate:	
  2224                           
  2225                           	psect	text7
  2226  02ED                     __ptext7:	
  2227 ;; *************** function _doMenu *****************
  2228 ;; Defined at:
  2229 ;;		line 135 in file "LCDTime.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;		None
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  y               2   37[BANK0 ] int 
  2234 ;;  m               2   35[BANK0 ] int 
  2235 ;;  d               2   33[BANK0 ] int 
  2236 ;;  n               2   31[BANK0 ] int 
  2237 ;;  s               2   29[BANK0 ] int 
  2238 ;;  m               2   27[BANK0 ] int 
  2239 ;;  h               2   25[BANK0 ] int 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2249 ;;      Params:         0       0       0       0       0
  2250 ;;      Locals:         0      14       0       0       0
  2251 ;;      Temps:          0       3       0       0       0
  2252 ;;      Totals:         0      17       0       0       0
  2253 ;;Total ram usage:       17 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    5
  2256 ;; This function calls:
  2257 ;;		_DS1307_SetDate
  2258 ;;		_DS1307_SetTime
  2259 ;;		_LCDByte
  2260 ;;		_LCDGotoXY
  2261 ;;		_LCDWriteString
  2262 ;;		___awdiv
  2263 ;;		___awmod
  2264 ;;		_readInputs
  2265 ;;		_showDate
  2266 ;;		_showTime
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           
  2273                           ;psect for function _doMenu
  2274  02ED                     _doMenu:	
  2275  02ED                     l2409:	
  2276                           ;LCDTime.c: 137: while(bButton)
  2277                           
  2278                           ;incstack = 0
  2279                           ; Regs used in _doMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2280                           
  2281  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2282  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  2283  02EF  0864               	movf	_bButton,w
  2284  02F0  1903               	btfsc	3,2
  2285  02F1  2AF8               	goto	l2411
  2286                           
  2287                           ;LCDTime.c: 138: readInputs();
  2288  02F2  120A  158A  22F7  120A  118A  	fcall	_readInputs
  2289  02F7  2AED               	goto	l2409
  2290  02F8                     l2411:	
  2291                           
  2292                           ;LCDTime.c: 141: if (menuFunction == 1 | menuFunction == 2)
  2293  02F8  0361               	decf	_menuFunction,w
  2294  02F9  1903               	btfsc	3,2
  2295  02FA  2AFF               	goto	l2415
  2296  02FB  3002               	movlw	2
  2297  02FC  0661               	xorwf	_menuFunction,w
  2298  02FD  1D03               	btfss	3,2
  2299  02FE  2D0C               	goto	l2533
  2300  02FF                     l2415:	
  2301                           
  2302                           ;LCDTime.c: 142: {
  2303                           ;LCDTime.c: 143: int h,m,s ;
  2304                           ;LCDTime.c: 145: h = hour ;
  2305  02FF  0855               	movf	_hour+1,w
  2306  0300  00BA               	movwf	doMenu@h+1
  2307  0301  0854               	movf	_hour,w
  2308  0302  00B9               	movwf	doMenu@h
  2309                           
  2310                           ;LCDTime.c: 146: m = minute ;
  2311  0303  0857               	movf	_minute+1,w
  2312  0304  00BC               	movwf	doMenu@m+1
  2313  0305  0856               	movf	_minute,w
  2314  0306  00BB               	movwf	doMenu@m
  2315                           
  2316                           ;LCDTime.c: 147: s = seconds ;
  2317  0307  085D               	movf	_seconds+1,w
  2318  0308  00BE               	movwf	doMenu@s+1
  2319  0309  085C               	movf	_seconds,w
  2320  030A  00BD               	movwf	doMenu@s
  2321                           
  2322                           ;LCDTime.c: 149: (LCDByte(0b00000001,0));
  2323  030B  01F6               	clrf	LCDByte@isdata
  2324  030C  3001               	movlw	1
  2325  030D  120A  158A  24BB  120A  118A  	fcall	_LCDByte
  2326                           
  2327                           ;LCDTime.c: 150: LCDWriteString(setText);
  2328  0312  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2329  0313  1283               	bcf	3,5	;RP0=0, select bank0
  2330  0314  1303               	bcf	3,6	;RP1=0, select bank0
  2331  0315  00A0               	movwf	LCDWriteString@msg
  2332  0316  3080               	movlw	128
  2333  0317  00A1               	movwf	LCDWriteString@msg+1
  2334  0318  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  2335                           
  2336                           ;LCDTime.c: 151: LCDWriteString("Hours");
  2337  031D  307C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  2338  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2339  031F  1303               	bcf	3,6	;RP1=0, select bank0
  2340  0320  00A0               	movwf	LCDWriteString@msg
  2341  0321  3080               	movlw	128
  2342  0322  00A1               	movwf	LCDWriteString@msg+1
  2343  0323  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  2344  0328                     L4:	
  2345                           
  2346                           ;LCDTime.c: 153: LCDGotoXY(0,1) ;
  2347  0328  01FD               	clrf	LCDGotoXY@y
  2348  0329  0AFD               	incf	LCDGotoXY@y,f
  2349  032A  3000               	movlw	0
  2350  032B  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  2351                           
  2352                           ;LCDTime.c: 154: showTime();
  2353  0330  120A  158A  2398  120A  118A  	fcall	_showTime
  2354  0335                     l2449:	
  2355                           ;LCDTime.c: 156: while(!bButton)
  2356                           
  2357  0335  1283               	bcf	3,5	;RP0=0, select bank0
  2358  0336  1303               	bcf	3,6	;RP1=0, select bank0
  2359  0337  0864               	movf	_bButton,w
  2360  0338  1D03               	btfss	3,2
  2361  0339  2B6F               	goto	l2453
  2362                           
  2363                           ;LCDTime.c: 157: {
  2364                           ;LCDTime.c: 158: readInputs();
  2365  033A  120A  158A  22F7  120A  118A  	fcall	_readInputs
  2366                           
  2367                           ;LCDTime.c: 160: if (state & 0x10)
  2368  033F  1283               	bcf	3,5	;RP0=0, select bank0
  2369  0340  1303               	bcf	3,6	;RP1=0, select bank0
  2370  0341  1E65               	btfss	_state,4
  2371  0342  2B57               	goto	l273
  2372                           
  2373                           ;LCDTime.c: 161: {
  2374                           ;LCDTime.c: 162: hour++;
  2375  0343  3001               	movlw	1
  2376  0344  07D4               	addwf	_hour,f
  2377  0345  1803               	skipnc
  2378  0346  0AD5               	incf	_hour+1,f
  2379  0347  3000               	movlw	0
  2380  0348  07D5               	addwf	_hour+1,f
  2381                           
  2382                           ;LCDTime.c: 163: if (hour > 23)
  2383  0349  0855               	movf	_hour+1,w
  2384  034A  3A80               	xorlw	128
  2385  034B  00FF               	movwf	127
  2386  034C  3080               	movlw	128
  2387  034D  027F               	subwf	127,w
  2388  034E  1D03               	skipz
  2389  034F  2B52               	goto	u1935
  2390  0350  3018               	movlw	24
  2391  0351  0254               	subwf	_hour,w
  2392  0352                     u1935:	
  2393  0352  1C03               	skipc
  2394  0353  2B63               	goto	l2443
  2395                           
  2396                           ;LCDTime.c: 164: hour = 0 ;
  2397  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0355  1303               	bcf	3,6	;RP1=0, select bank0
  2399  0356  2B61               	goto	l2441
  2400  0357                     l273:	
  2401                           ;LCDTime.c: 165: }
  2402                           
  2403                           
  2404                           ;LCDTime.c: 166: else if (state & 0x20)
  2405  0357  1EE5               	btfss	_state,5
  2406  0358  2B63               	goto	l2443
  2407                           
  2408                           ;LCDTime.c: 167: {
  2409                           ;LCDTime.c: 168: hour--;
  2410  0359  30FF               	movlw	255
  2411  035A  07D4               	addwf	_hour,f
  2412  035B  1803               	skipnc
  2413  035C  0AD5               	incf	_hour+1,f
  2414  035D  30FF               	movlw	255
  2415  035E  07D5               	addwf	_hour+1,f
  2416                           
  2417                           ;LCDTime.c: 169: if (hour < 0)
  2418  035F  1FD5               	btfss	_hour+1,7
  2419  0360  2B63               	goto	l2443
  2420  0361                     l2441:	
  2421                           
  2422                           ;LCDTime.c: 170: hour = 0 ;
  2423  0361  01D4               	clrf	_hour
  2424  0362  01D5               	clrf	_hour+1
  2425  0363                     l2443:	
  2426                           
  2427                           ;LCDTime.c: 171: }
  2428                           ;LCDTime.c: 173: if (state & 0x30)
  2429  0363  1283               	bcf	3,5	;RP0=0, select bank0
  2430  0364  1303               	bcf	3,6	;RP1=0, select bank0
  2431  0365  0865               	movf	_state,w
  2432  0366  3930               	andlw	48
  2433  0367  1903               	btfsc	3,2
  2434  0368  2B35               	goto	l2449
  2435  0369  2B28               	goto	L4
  2436  036A                     l2451:	
  2437                           ;LCDTime.c: 177: }
  2438                           ;LCDTime.c: 178: }
  2439                           ;LCDTime.c: 180: while(bButton)
  2440                           
  2441                           ;LCDTime.c: 176: showTime();
  2442                           
  2443                           ;LCDTime.c: 174: {
  2444                           ;LCDTime.c: 175: LCDGotoXY(0,1) ;
  2445                           
  2446                           
  2447                           ;LCDTime.c: 181: readInputs();
  2448  036A  120A  158A  22F7  120A  118A  	fcall	_readInputs
  2449  036F                     l2453:	
  2450  036F  1283               	bcf	3,5	;RP0=0, select bank0
  2451  0370  1303               	bcf	3,6	;RP1=0, select bank0
  2452  0371  0864               	movf	_bButton,w
  2453  0372  1D03               	btfss	3,2
  2454  0373  2B6A               	goto	l2451
  2455                           
  2456                           ;LCDTime.c: 183: LCDGotoXY(0,0) ;
  2457  0374  01FD               	clrf	LCDGotoXY@y
  2458  0375  3000               	movlw	0
  2459  0376  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  2460                           
  2461                           ;LCDTime.c: 184: LCDWriteString(setText);
  2462  037B  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2463  037C  1283               	bcf	3,5	;RP0=0, select bank0
  2464  037D  1303               	bcf	3,6	;RP1=0, select bank0
  2465  037E  00A0               	movwf	LCDWriteString@msg
  2466  037F  3080               	movlw	128
  2467  0380  00A1               	movwf	LCDWriteString@msg+1
  2468  0381  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  2469                           
  2470                           ;LCDTime.c: 185: LCDWriteString("Minutes");
  2471  0386  3054               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2472  0387  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0388  1303               	bcf	3,6	;RP1=0, select bank0
  2474  0389  00A0               	movwf	LCDWriteString@msg
  2475  038A  3080               	movlw	128
  2476  038B  00A1               	movwf	LCDWriteString@msg+1
  2477  038C  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  2478  0391                     l2483:	
  2479                           ;LCDTime.c: 187: while(!bButton)
  2480                           
  2481  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2482  0392  1303               	bcf	3,6	;RP1=0, select bank0
  2483  0393  0864               	movf	_bButton,w
  2484  0394  1D03               	btfss	3,2
  2485  0395  2BD8               	goto	l2487
  2486                           
  2487                           ;LCDTime.c: 188: {
  2488                           ;LCDTime.c: 189: readInputs();
  2489  0396  120A  158A  22F7  120A  118A  	fcall	_readInputs
  2490                           
  2491                           ;LCDTime.c: 191: if (state & 0x10)
  2492  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2493  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2494  039D  1E65               	btfss	_state,4
  2495  039E  2BB3               	goto	l285
  2496                           
  2497                           ;LCDTime.c: 192: {
  2498                           ;LCDTime.c: 193: minute++;
  2499  039F  3001               	movlw	1
  2500  03A0  07D6               	addwf	_minute,f
  2501  03A1  1803               	skipnc
  2502  03A2  0AD7               	incf	_minute+1,f
  2503  03A3  3000               	movlw	0
  2504  03A4  07D7               	addwf	_minute+1,f
  2505                           
  2506                           ;LCDTime.c: 194: if (minute > 59)
  2507  03A5  0857               	movf	_minute+1,w
  2508  03A6  3A80               	xorlw	128
  2509  03A7  00FF               	movwf	127
  2510  03A8  3080               	movlw	128
  2511  03A9  027F               	subwf	127,w
  2512  03AA  1D03               	skipz
  2513  03AB  2BAE               	goto	u2005
  2514  03AC  303C               	movlw	60
  2515  03AD  0256               	subwf	_minute,w
  2516  03AE                     u2005:	
  2517  03AE  1C03               	skipc
  2518  03AF  2BBF               	goto	l2477
  2519                           
  2520                           ;LCDTime.c: 195: minute = 0 ;
  2521  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  2522  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  2523  03B2  2BBD               	goto	l2475
  2524  03B3                     l285:	
  2525                           ;LCDTime.c: 196: }
  2526                           
  2527                           
  2528                           ;LCDTime.c: 197: else if (state & 0x20)
  2529  03B3  1EE5               	btfss	_state,5
  2530  03B4  2BBF               	goto	l2477
  2531                           
  2532                           ;LCDTime.c: 198: {
  2533                           ;LCDTime.c: 199: minute--;
  2534  03B5  30FF               	movlw	255
  2535  03B6  07D6               	addwf	_minute,f
  2536  03B7  1803               	skipnc
  2537  03B8  0AD7               	incf	_minute+1,f
  2538  03B9  30FF               	movlw	255
  2539  03BA  07D7               	addwf	_minute+1,f
  2540                           
  2541                           ;LCDTime.c: 200: if (minute < 0)
  2542  03BB  1FD7               	btfss	_minute+1,7
  2543  03BC  2BBF               	goto	l2477
  2544  03BD                     l2475:	
  2545                           
  2546                           ;LCDTime.c: 201: minute = 0 ;
  2547  03BD  01D6               	clrf	_minute
  2548  03BE  01D7               	clrf	_minute+1
  2549  03BF                     l2477:	
  2550                           
  2551                           ;LCDTime.c: 202: }
  2552                           ;LCDTime.c: 204: if (state & 0x30)
  2553  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2554  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2555  03C1  0865               	movf	_state,w
  2556  03C2  3930               	andlw	48
  2557  03C3  1903               	btfsc	3,2
  2558  03C4  2B91               	goto	l2483
  2559                           
  2560                           ;LCDTime.c: 205: {
  2561                           ;LCDTime.c: 206: LCDGotoXY(0,1) ;
  2562  03C5  01FD               	clrf	LCDGotoXY@y
  2563  03C6  0AFD               	incf	LCDGotoXY@y,f
  2564  03C7  3000               	movlw	0
  2565  03C8  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  2566                           
  2567                           ;LCDTime.c: 207: showTime();
  2568  03CD  120A  158A  2398  120A  118A  	fcall	_showTime
  2569  03D2  2B91               	goto	l2483
  2570  03D3                     l2485:	
  2571                           ;LCDTime.c: 208: }
  2572                           ;LCDTime.c: 209: }
  2573                           ;LCDTime.c: 211: while(bButton)
  2574                           
  2575                           
  2576                           ;LCDTime.c: 212: readInputs();
  2577  03D3  120A  158A  22F7  120A  118A  	fcall	_readInputs
  2578  03D8                     l2487:	
  2579  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2580  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2581  03DA  0864               	movf	_bButton,w
  2582  03DB  1D03               	btfss	3,2
  2583  03DC  2BD3               	goto	l2485
  2584                           
  2585                           ;LCDTime.c: 214: LCDGotoXY(0,0) ;
  2586  03DD  01FD               	clrf	LCDGotoXY@y
  2587  03DE  3000               	movlw	0
  2588  03DF  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  2589                           
  2590                           ;LCDTime.c: 215: LCDWriteString(setText);
  2591  03E4  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2592  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  2593  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  2594  03E7  00A0               	movwf	LCDWriteString@msg
  2595  03E8  3080               	movlw	128
  2596  03E9  00A1               	movwf	LCDWriteString@msg+1
  2597  03EA  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  2598                           
  2599                           ;LCDTime.c: 216: LCDWriteString("Seconds");
  2600  03EF  304C               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2601  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2602  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  2603  03F2  00A0               	movwf	LCDWriteString@msg
  2604  03F3  3080               	movlw	128
  2605  03F4  00A1               	movwf	LCDWriteString@msg+1
  2606  03F5  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  2607  03FA                     l2517:	
  2608                           ;LCDTime.c: 218: while(!bButton)
  2609                           
  2610  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2611  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2612  03FC  0864               	movf	_bButton,w
  2613  03FD  1D03               	btfss	3,2
  2614  03FE  2C3C               	goto	l2519
  2615                           
  2616                           ;LCDTime.c: 219: {
  2617                           ;LCDTime.c: 220: readInputs();
  2618  03FF  120A  158A  22F7  120A  118A  	fcall	_readInputs
  2619                           
  2620                           ;LCDTime.c: 222: if (state & 0x10)
  2621  0404  1283               	bcf	3,5	;RP0=0, select bank0
  2622  0405  1303               	bcf	3,6	;RP1=0, select bank0
  2623  0406  1E65               	btfss	_state,4
  2624  0407  2C1C               	goto	l297
  2625                           
  2626                           ;LCDTime.c: 223: {
  2627                           ;LCDTime.c: 224: seconds++;
  2628  0408  3001               	movlw	1
  2629  0409  07DC               	addwf	_seconds,f
  2630  040A  1803               	skipnc
  2631  040B  0ADD               	incf	_seconds+1,f
  2632  040C  3000               	movlw	0
  2633  040D  07DD               	addwf	_seconds+1,f
  2634                           
  2635                           ;LCDTime.c: 225: if (seconds > 59)
  2636  040E  085D               	movf	_seconds+1,w
  2637  040F  3A80               	xorlw	128
  2638  0410  00FF               	movwf	127
  2639  0411  3080               	movlw	128
  2640  0412  027F               	subwf	127,w
  2641  0413  1D03               	skipz
  2642  0414  2C17               	goto	u2075
  2643  0415  303C               	movlw	60
  2644  0416  025C               	subwf	_seconds,w
  2645  0417                     u2075:	
  2646  0417  1C03               	skipc
  2647  0418  2C28               	goto	l2511
  2648                           
  2649                           ;LCDTime.c: 226: seconds = 0 ;
  2650  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2651  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2652  041B  2C26               	goto	l2509
  2653  041C                     l297:	
  2654                           ;LCDTime.c: 227: }
  2655                           
  2656                           
  2657                           ;LCDTime.c: 228: else if (state & 0x20)
  2658  041C  1EE5               	btfss	_state,5
  2659  041D  2C28               	goto	l2511
  2660                           
  2661                           ;LCDTime.c: 229: {
  2662                           ;LCDTime.c: 230: seconds--;
  2663  041E  30FF               	movlw	255
  2664  041F  07DC               	addwf	_seconds,f
  2665  0420  1803               	skipnc
  2666  0421  0ADD               	incf	_seconds+1,f
  2667  0422  30FF               	movlw	255
  2668  0423  07DD               	addwf	_seconds+1,f
  2669                           
  2670                           ;LCDTime.c: 231: if (seconds < 0)
  2671  0424  1FDD               	btfss	_seconds+1,7
  2672  0425  2C28               	goto	l2511
  2673  0426                     l2509:	
  2674                           
  2675                           ;LCDTime.c: 232: seconds = 0 ;
  2676  0426  01DC               	clrf	_seconds
  2677  0427  01DD               	clrf	_seconds+1
  2678  0428                     l2511:	
  2679                           
  2680                           ;LCDTime.c: 233: }
  2681                           ;LCDTime.c: 235: if (state & 0x30)
  2682  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2683  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2684  042A  0865               	movf	_state,w
  2685  042B  3930               	andlw	48
  2686  042C  1903               	btfsc	3,2
  2687  042D  2BFA               	goto	l2517
  2688                           
  2689                           ;LCDTime.c: 236: {
  2690                           ;LCDTime.c: 237: LCDGotoXY(0,1) ;
  2691  042E  01FD               	clrf	LCDGotoXY@y
  2692  042F  0AFD               	incf	LCDGotoXY@y,f
  2693  0430  3000               	movlw	0
  2694  0431  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  2695                           
  2696                           ;LCDTime.c: 238: showTime();
  2697  0436  120A  158A  2398  120A  118A  	fcall	_showTime
  2698  043B  2BFA               	goto	l2517
  2699  043C                     l2519:	
  2700                           
  2701                           ;LCDTime.c: 239: }
  2702                           ;LCDTime.c: 240: }
  2703                           ;LCDTime.c: 243: if (h != hour || m != minute || s != seconds)
  2704  043C  0855               	movf	_hour+1,w
  2705  043D  063A               	xorwf	doMenu@h+1,w
  2706  043E  1D03               	skipz
  2707  043F  2C42               	goto	u2125
  2708  0440  0854               	movf	_hour,w
  2709  0441  0639               	xorwf	doMenu@h,w
  2710  0442                     u2125:	
  2711  0442  1D03               	skipz
  2712  0443  2C54               	goto	l2525
  2713  0444  0857               	movf	_minute+1,w
  2714  0445  063C               	xorwf	doMenu@m+1,w
  2715  0446  1D03               	skipz
  2716  0447  2C4A               	goto	u2135
  2717  0448  0856               	movf	_minute,w
  2718  0449  063B               	xorwf	doMenu@m,w
  2719  044A                     u2135:	
  2720  044A  1D03               	skipz
  2721  044B  2C54               	goto	l2525
  2722  044C  085D               	movf	_seconds+1,w
  2723  044D  063E               	xorwf	doMenu@s+1,w
  2724  044E  1D03               	skipz
  2725  044F  2C52               	goto	u2145
  2726  0450  085C               	movf	_seconds,w
  2727  0451  063D               	xorwf	doMenu@s,w
  2728  0452                     u2145:	
  2729  0452  1903               	skipnz
  2730  0453  2D01               	goto	l2531
  2731  0454                     l2525:	
  2732                           
  2733                           ;LCDTime.c: 244: {
  2734                           ;LCDTime.c: 245: h = ((hour / 10) << 4) + hour % 10 ;
  2735  0454  300A               	movlw	10
  2736  0455  00F1               	movwf	___awdiv@divisor
  2737  0456  3000               	movlw	0
  2738  0457  00F2               	movwf	___awdiv@divisor+1
  2739  0458  0855               	movf	_hour+1,w
  2740  0459  00F4               	movwf	___awdiv@dividend+1
  2741  045A  0854               	movf	_hour,w
  2742  045B  00F3               	movwf	___awdiv@dividend
  2743  045C  120A  158A  2561  120A  118A  	fcall	___awdiv
  2744  0461  0871               	movf	?___awdiv,w
  2745  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2746  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2747  0464  00B6               	movwf	??_doMenu
  2748  0465  0872               	movf	?___awdiv+1,w
  2749  0466  00B7               	movwf	??_doMenu+1
  2750  0467  0EB6               	swapf	??_doMenu,f
  2751  0468  0EB7               	swapf	??_doMenu+1,f
  2752  0469  30F0               	movlw	240
  2753  046A  05B7               	andwf	??_doMenu+1,f
  2754  046B  0836               	movf	??_doMenu,w
  2755  046C  390F               	andlw	15
  2756  046D  04B7               	iorwf	??_doMenu+1,f
  2757  046E  30F0               	movlw	240
  2758  046F  05B6               	andwf	??_doMenu,f
  2759  0470  300A               	movlw	10
  2760  0471  00F1               	movwf	___awmod@divisor
  2761  0472  3000               	movlw	0
  2762  0473  00F2               	movwf	___awmod@divisor+1
  2763  0474  0855               	movf	_hour+1,w
  2764  0475  00F4               	movwf	___awmod@dividend+1
  2765  0476  0854               	movf	_hour,w
  2766  0477  00F3               	movwf	___awmod@dividend
  2767  0478  120A  158A  23D4  120A  118A  	fcall	___awmod
  2768  047D  0871               	movf	?___awmod,w
  2769  047E  1283               	bcf	3,5	;RP0=0, select bank0
  2770  047F  1303               	bcf	3,6	;RP1=0, select bank0
  2771  0480  0736               	addwf	??_doMenu,w
  2772  0481  00B9               	movwf	doMenu@h
  2773  0482  0872               	movf	?___awmod+1,w
  2774  0483  1803               	skipnc
  2775  0484  0A72               	incf	?___awmod+1,w
  2776  0485  0737               	addwf	??_doMenu+1,w
  2777  0486  00BA               	movwf	doMenu@h+1
  2778                           
  2779                           ;LCDTime.c: 246: m = ((minute / 10) << 4) + minute % 10 ;
  2780  0487  300A               	movlw	10
  2781  0488  00F1               	movwf	___awdiv@divisor
  2782  0489  3000               	movlw	0
  2783  048A  00F2               	movwf	___awdiv@divisor+1
  2784  048B  0857               	movf	_minute+1,w
  2785  048C  00F4               	movwf	___awdiv@dividend+1
  2786  048D  0856               	movf	_minute,w
  2787  048E  00F3               	movwf	___awdiv@dividend
  2788  048F  120A  158A  2561  120A  118A  	fcall	___awdiv
  2789  0494  0871               	movf	?___awdiv,w
  2790  0495  1283               	bcf	3,5	;RP0=0, select bank0
  2791  0496  1303               	bcf	3,6	;RP1=0, select bank0
  2792  0497  00B6               	movwf	??_doMenu
  2793  0498  0872               	movf	?___awdiv+1,w
  2794  0499  00B7               	movwf	??_doMenu+1
  2795  049A  0EB6               	swapf	??_doMenu,f
  2796  049B  0EB7               	swapf	??_doMenu+1,f
  2797  049C  30F0               	movlw	240
  2798  049D  05B7               	andwf	??_doMenu+1,f
  2799  049E  0836               	movf	??_doMenu,w
  2800  049F  390F               	andlw	15
  2801  04A0  04B7               	iorwf	??_doMenu+1,f
  2802  04A1  30F0               	movlw	240
  2803  04A2  05B6               	andwf	??_doMenu,f
  2804  04A3  300A               	movlw	10
  2805  04A4  00F1               	movwf	___awmod@divisor
  2806  04A5  3000               	movlw	0
  2807  04A6  00F2               	movwf	___awmod@divisor+1
  2808  04A7  0857               	movf	_minute+1,w
  2809  04A8  00F4               	movwf	___awmod@dividend+1
  2810  04A9  0856               	movf	_minute,w
  2811  04AA  00F3               	movwf	___awmod@dividend
  2812  04AB  120A  158A  23D4  120A  118A  	fcall	___awmod
  2813  04B0  0871               	movf	?___awmod,w
  2814  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2815  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2816  04B3  0736               	addwf	??_doMenu,w
  2817  04B4  00BB               	movwf	doMenu@m
  2818  04B5  0872               	movf	?___awmod+1,w
  2819  04B6  1803               	skipnc
  2820  04B7  0A72               	incf	?___awmod+1,w
  2821  04B8  0737               	addwf	??_doMenu+1,w
  2822  04B9  00BC               	movwf	doMenu@m+1
  2823                           
  2824                           ;LCDTime.c: 247: s = ((seconds / 10) << 4) + seconds % 10 ;
  2825  04BA  300A               	movlw	10
  2826  04BB  00F1               	movwf	___awdiv@divisor
  2827  04BC  3000               	movlw	0
  2828  04BD  00F2               	movwf	___awdiv@divisor+1
  2829  04BE  085D               	movf	_seconds+1,w
  2830  04BF  00F4               	movwf	___awdiv@dividend+1
  2831  04C0  085C               	movf	_seconds,w
  2832  04C1  00F3               	movwf	___awdiv@dividend
  2833  04C2  120A  158A  2561  120A  118A  	fcall	___awdiv
  2834  04C7  0871               	movf	?___awdiv,w
  2835  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2836  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2837  04CA  00B6               	movwf	??_doMenu
  2838  04CB  0872               	movf	?___awdiv+1,w
  2839  04CC  00B7               	movwf	??_doMenu+1
  2840  04CD  0EB6               	swapf	??_doMenu,f
  2841  04CE  0EB7               	swapf	??_doMenu+1,f
  2842  04CF  30F0               	movlw	240
  2843  04D0  05B7               	andwf	??_doMenu+1,f
  2844  04D1  0836               	movf	??_doMenu,w
  2845  04D2  390F               	andlw	15
  2846  04D3  04B7               	iorwf	??_doMenu+1,f
  2847  04D4  30F0               	movlw	240
  2848  04D5  05B6               	andwf	??_doMenu,f
  2849  04D6  300A               	movlw	10
  2850  04D7  00F1               	movwf	___awmod@divisor
  2851  04D8  3000               	movlw	0
  2852  04D9  00F2               	movwf	___awmod@divisor+1
  2853  04DA  085D               	movf	_seconds+1,w
  2854  04DB  00F4               	movwf	___awmod@dividend+1
  2855  04DC  085C               	movf	_seconds,w
  2856  04DD  00F3               	movwf	___awmod@dividend
  2857  04DE  120A  158A  23D4  120A  118A  	fcall	___awmod
  2858  04E3  0871               	movf	?___awmod,w
  2859  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  2860  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  2861  04E6  0736               	addwf	??_doMenu,w
  2862  04E7  00BD               	movwf	doMenu@s
  2863  04E8  0872               	movf	?___awmod+1,w
  2864  04E9  1803               	skipnc
  2865  04EA  0A72               	incf	?___awmod+1,w
  2866  04EB  0737               	addwf	??_doMenu+1,w
  2867  04EC  00BE               	movwf	doMenu@s+1
  2868                           
  2869                           ;LCDTime.c: 249: DS1307_SetTime(h,m,s) ;
  2870  04ED  083B               	movf	doMenu@m,w
  2871  04EE  00B6               	movwf	??_doMenu
  2872  04EF  0836               	movf	??_doMenu,w
  2873  04F0  00F6               	movwf	DS1307_SetTime@mm
  2874  04F1  083D               	movf	doMenu@s,w
  2875  04F2  00B7               	movwf	??_doMenu+1
  2876  04F3  0837               	movf	??_doMenu+1,w
  2877  04F4  00F7               	movwf	DS1307_SetTime@ss
  2878  04F5  0839               	movf	doMenu@h,w
  2879  04F6  120A  158A  2277  120A  118A  	fcall	_DS1307_SetTime
  2880                           
  2881                           ;LCDTime.c: 251: runningMinute = minute ;
  2882  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2883  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2884  04FD  0857               	movf	_minute+1,w
  2885  04FE  00DB               	movwf	_runningMinute+1
  2886  04FF  0856               	movf	_minute,w
  2887  0500  00DA               	movwf	_runningMinute
  2888  0501                     l2531:	
  2889                           ;LCDTime.c: 252: }
  2890                           ;LCDTime.c: 254: while(bButton)
  2891                           
  2892  0501  1283               	bcf	3,5	;RP0=0, select bank0
  2893  0502  1303               	bcf	3,6	;RP1=0, select bank0
  2894  0503  0864               	movf	_bButton,w
  2895  0504  1903               	btfsc	3,2
  2896  0505  2D0C               	goto	l2533
  2897                           
  2898                           ;LCDTime.c: 255: readInputs();
  2899  0506  120A  158A  22F7  120A  118A  	fcall	_readInputs
  2900  050B  2D01               	goto	l2531
  2901  050C                     l2533:	
  2902                           
  2903                           ;LCDTime.c: 256: }
  2904                           ;LCDTime.c: 259: if (menuFunction == 1 | menuFunction == 3)
  2905  050C  0361               	decf	_menuFunction,w
  2906  050D  1903               	btfsc	3,2
  2907  050E  2D13               	goto	l2537
  2908  050F  3003               	movlw	3
  2909  0510  0661               	xorwf	_menuFunction,w
  2910  0511  1D03               	btfss	3,2
  2911  0512  0008               	return
  2912  0513                     l2537:	
  2913                           
  2914                           ;LCDTime.c: 260: {
  2915                           ;LCDTime.c: 261: int n,d,m,y ;
  2916                           ;LCDTime.c: 263: n = day ;
  2917  0513  0853               	movf	_day+1,w
  2918  0514  00C0               	movwf	doMenu@n+1
  2919  0515  0852               	movf	_day,w
  2920  0516  00BF               	movwf	doMenu@n
  2921                           
  2922                           ;LCDTime.c: 264: d = date ;
  2923  0517  0851               	movf	_date+1,w
  2924  0518  00C2               	movwf	doMenu@d+1
  2925  0519  0850               	movf	_date,w
  2926  051A  00C1               	movwf	doMenu@d
  2927                           
  2928                           ;LCDTime.c: 265: m = month ;
  2929  051B  0859               	movf	_month+1,w
  2930  051C  00C4               	movwf	doMenu@m_296+1
  2931  051D  0858               	movf	_month,w
  2932  051E  00C3               	movwf	doMenu@m_296
  2933                           
  2934                           ;LCDTime.c: 266: y = year ;
  2935  051F  085F               	movf	_year+1,w
  2936  0520  00C6               	movwf	doMenu@y+1
  2937  0521  085E               	movf	_year,w
  2938  0522  00C5               	movwf	doMenu@y
  2939                           
  2940                           ;LCDTime.c: 268: (LCDByte(0b00000001,0));
  2941  0523  01F6               	clrf	LCDByte@isdata
  2942  0524  3001               	movlw	1
  2943  0525  120A  158A  24BB  120A  118A  	fcall	_LCDByte
  2944                           
  2945                           ;LCDTime.c: 269: LCDWriteString(setText);
  2946  052A  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2947  052B  1283               	bcf	3,5	;RP0=0, select bank0
  2948  052C  1303               	bcf	3,6	;RP1=0, select bank0
  2949  052D  00A0               	movwf	LCDWriteString@msg
  2950  052E  3080               	movlw	128
  2951  052F  00A1               	movwf	LCDWriteString@msg+1
  2952  0530  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  2953                           
  2954                           ;LCDTime.c: 270: LCDWriteString("Year");
  2955  0535  3082               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2956  0536  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0537  1303               	bcf	3,6	;RP1=0, select bank0
  2958  0538  00A0               	movwf	LCDWriteString@msg
  2959  0539  3080               	movlw	128
  2960  053A  00A1               	movwf	LCDWriteString@msg+1
  2961  053B  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  2962  0540                     L5:	
  2963                           
  2964                           ;LCDTime.c: 272: LCDGotoXY(0,1) ;
  2965  0540  01FD               	clrf	LCDGotoXY@y
  2966  0541  0AFD               	incf	LCDGotoXY@y,f
  2967  0542  3000               	movlw	0
  2968  0543  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  2969                           
  2970                           ;LCDTime.c: 273: showDate();
  2971  0548  120A  158A  2678  120A  118A  	fcall	_showDate
  2972  054D                     l2571:	
  2973                           ;LCDTime.c: 275: while(!bButton)
  2974                           
  2975  054D  1283               	bcf	3,5	;RP0=0, select bank0
  2976  054E  1303               	bcf	3,6	;RP1=0, select bank0
  2977  054F  0864               	movf	_bButton,w
  2978  0550  1D03               	btfss	3,2
  2979  0551  2D8B               	goto	l2575
  2980                           
  2981                           ;LCDTime.c: 276: {
  2982                           ;LCDTime.c: 277: readInputs();
  2983  0552  120A  158A  22F7  120A  118A  	fcall	_readInputs
  2984                           
  2985                           ;LCDTime.c: 279: if (state & 0x10)
  2986  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2987  0558  1303               	bcf	3,6	;RP1=0, select bank0
  2988  0559  1E65               	btfss	_state,4
  2989  055A  2D71               	goto	l315
  2990                           
  2991                           ;LCDTime.c: 280: {
  2992                           ;LCDTime.c: 281: year++;
  2993  055B  3001               	movlw	1
  2994  055C  07DE               	addwf	_year,f
  2995  055D  1803               	skipnc
  2996  055E  0ADF               	incf	_year+1,f
  2997  055F  3000               	movlw	0
  2998  0560  07DF               	addwf	_year+1,f
  2999                           
  3000                           ;LCDTime.c: 282: if (year > 99)
  3001  0561  085F               	movf	_year+1,w
  3002  0562  3A80               	xorlw	128
  3003  0563  00FF               	movwf	127
  3004  0564  3080               	movlw	128
  3005  0565  027F               	subwf	127,w
  3006  0566  1D03               	skipz
  3007  0567  2D6A               	goto	u2195
  3008  0568  3064               	movlw	100
  3009  0569  025E               	subwf	_year,w
  3010  056A                     u2195:	
  3011  056A  1C03               	skipc
  3012  056B  2D7F               	goto	l2565
  3013                           
  3014                           ;LCDTime.c: 283: year = 0 ;
  3015  056C  1283               	bcf	3,5	;RP0=0, select bank0
  3016  056D  1303               	bcf	3,6	;RP1=0, select bank0
  3017  056E  01DE               	clrf	_year
  3018  056F  01DF               	clrf	_year+1
  3019                           
  3020                           ;LCDTime.c: 284: }
  3021  0570  2D7F               	goto	l2565
  3022  0571                     l315:	
  3023                           
  3024                           ;LCDTime.c: 285: else if (state & 0x20)
  3025  0571  1EE5               	btfss	_state,5
  3026  0572  2D7F               	goto	l2565
  3027                           
  3028                           ;LCDTime.c: 286: {
  3029                           ;LCDTime.c: 287: year--;
  3030  0573  30FF               	movlw	255
  3031  0574  07DE               	addwf	_year,f
  3032  0575  1803               	skipnc
  3033  0576  0ADF               	incf	_year+1,f
  3034  0577  30FF               	movlw	255
  3035  0578  07DF               	addwf	_year+1,f
  3036                           
  3037                           ;LCDTime.c: 288: if (year < 0)
  3038  0579  1FDF               	btfss	_year+1,7
  3039  057A  2D7F               	goto	l2565
  3040                           
  3041                           ;LCDTime.c: 289: date = 99 ;
  3042  057B  3063               	movlw	99
  3043  057C  00D0               	movwf	_date
  3044  057D  3000               	movlw	0
  3045  057E  00D1               	movwf	_date+1
  3046  057F                     l2565:	
  3047                           
  3048                           ;LCDTime.c: 290: }
  3049                           ;LCDTime.c: 292: if (state & 0x30)
  3050  057F  1283               	bcf	3,5	;RP0=0, select bank0
  3051  0580  1303               	bcf	3,6	;RP1=0, select bank0
  3052  0581  0865               	movf	_state,w
  3053  0582  3930               	andlw	48
  3054  0583  1903               	btfsc	3,2
  3055  0584  2D4D               	goto	l2571
  3056  0585  2D40               	goto	L5
  3057  0586                     l2573:	
  3058                           ;LCDTime.c: 296: }
  3059                           ;LCDTime.c: 297: }
  3060                           ;LCDTime.c: 299: while(bButton)
  3061                           
  3062                           ;LCDTime.c: 295: showDate();
  3063                           
  3064                           ;LCDTime.c: 293: {
  3065                           ;LCDTime.c: 294: LCDGotoXY(0,1) ;
  3066                           
  3067                           
  3068                           ;LCDTime.c: 300: readInputs();
  3069  0586  120A  158A  22F7  120A  118A  	fcall	_readInputs
  3070  058B                     l2575:	
  3071  058B  1283               	bcf	3,5	;RP0=0, select bank0
  3072  058C  1303               	bcf	3,6	;RP1=0, select bank0
  3073  058D  0864               	movf	_bButton,w
  3074  058E  1D03               	btfss	3,2
  3075  058F  2D86               	goto	l2573
  3076                           
  3077                           ;LCDTime.c: 302: LCDGotoXY(0,0) ;
  3078  0590  01FD               	clrf	LCDGotoXY@y
  3079  0591  3000               	movlw	0
  3080  0592  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  3081                           
  3082                           ;LCDTime.c: 303: LCDWriteString(setText);
  3083  0597  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3084  0598  1283               	bcf	3,5	;RP0=0, select bank0
  3085  0599  1303               	bcf	3,6	;RP1=0, select bank0
  3086  059A  00A0               	movwf	LCDWriteString@msg
  3087  059B  3080               	movlw	128
  3088  059C  00A1               	movwf	LCDWriteString@msg+1
  3089  059D  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  3090                           
  3091                           ;LCDTime.c: 304: LCDWriteString("Month");
  3092  05A2  3076               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3093  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  3094  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  3095  05A5  00A0               	movwf	LCDWriteString@msg
  3096  05A6  3080               	movlw	128
  3097  05A7  00A1               	movwf	LCDWriteString@msg+1
  3098  05A8  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  3099  05AD                     l2605:	
  3100                           ;LCDTime.c: 306: while(!bButton)
  3101                           
  3102  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  3103  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  3104  05AF  0864               	movf	_bButton,w
  3105  05B0  1D03               	btfss	3,2
  3106  05B1  2DF9               	goto	l2609
  3107                           
  3108                           ;LCDTime.c: 307: {
  3109                           ;LCDTime.c: 308: readInputs();
  3110  05B2  120A  158A  22F7  120A  118A  	fcall	_readInputs
  3111                           
  3112                           ;LCDTime.c: 310: if (state & 0x10)
  3113  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  3114  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  3115  05B9  1E65               	btfss	_state,4
  3116  05BA  2DD0               	goto	l327
  3117                           
  3118                           ;LCDTime.c: 311: {
  3119                           ;LCDTime.c: 312: month++;
  3120  05BB  3001               	movlw	1
  3121  05BC  07D8               	addwf	_month,f
  3122  05BD  1803               	skipnc
  3123  05BE  0AD9               	incf	_month+1,f
  3124  05BF  3000               	movlw	0
  3125  05C0  07D9               	addwf	_month+1,f
  3126                           
  3127                           ;LCDTime.c: 313: if (month > 12)
  3128  05C1  0859               	movf	_month+1,w
  3129  05C2  3A80               	xorlw	128
  3130  05C3  00FF               	movwf	127
  3131  05C4  3080               	movlw	128
  3132  05C5  027F               	subwf	127,w
  3133  05C6  1D03               	skipz
  3134  05C7  2DCA               	goto	u2265
  3135  05C8  300D               	movlw	13
  3136  05C9  0258               	subwf	_month,w
  3137  05CA                     u2265:	
  3138  05CA  1C03               	skipc
  3139  05CB  2DE0               	goto	l2599
  3140                           
  3141                           ;LCDTime.c: 314: month = 1 ;
  3142  05CC  3001               	movlw	1
  3143  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  3144  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  3145  05CF  2DDD               	goto	L1
  3146  05D0                     l327:	
  3147                           ;LCDTime.c: 315: }
  3148                           
  3149                           
  3150                           ;LCDTime.c: 316: else if (state & 0x20)
  3151  05D0  1EE5               	btfss	_state,5
  3152  05D1  2DE0               	goto	l2599
  3153                           
  3154                           ;LCDTime.c: 317: {
  3155                           ;LCDTime.c: 318: month--;
  3156  05D2  30FF               	movlw	255
  3157  05D3  07D8               	addwf	_month,f
  3158  05D4  1803               	skipnc
  3159  05D5  0AD9               	incf	_month+1,f
  3160  05D6  30FF               	movlw	255
  3161  05D7  07D9               	addwf	_month+1,f
  3162                           
  3163                           ;LCDTime.c: 319: if (!month)
  3164  05D8  0858               	movf	_month,w
  3165  05D9  0459               	iorwf	_month+1,w
  3166  05DA  1D03               	btfss	3,2
  3167  05DB  2DE0               	goto	l2599
  3168                           
  3169                           ;LCDTime.c: 320: month = 12 ;
  3170  05DC  300C               	movlw	12
  3171  05DD                     L1:	
  3172  05DD  00D8               	movwf	_month
  3173  05DE  3000               	movlw	0
  3174  05DF  00D9               	movwf	_month+1
  3175  05E0                     l2599:	
  3176                           
  3177                           ;LCDTime.c: 321: }
  3178                           ;LCDTime.c: 323: if (state & 0x30)
  3179  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  3180  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  3181  05E2  0865               	movf	_state,w
  3182  05E3  3930               	andlw	48
  3183  05E4  1903               	btfsc	3,2
  3184  05E5  2DAD               	goto	l2605
  3185                           
  3186                           ;LCDTime.c: 324: {
  3187                           ;LCDTime.c: 325: LCDGotoXY(0,1) ;
  3188  05E6  01FD               	clrf	LCDGotoXY@y
  3189  05E7  0AFD               	incf	LCDGotoXY@y,f
  3190  05E8  3000               	movlw	0
  3191  05E9  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  3192                           
  3193                           ;LCDTime.c: 326: showDate();
  3194  05EE  120A  158A  2678  120A  118A  	fcall	_showDate
  3195  05F3  2DAD               	goto	l2605
  3196  05F4                     l2607:	
  3197                           ;LCDTime.c: 327: }
  3198                           ;LCDTime.c: 328: }
  3199                           ;LCDTime.c: 330: while(bButton)
  3200                           
  3201                           
  3202                           ;LCDTime.c: 331: readInputs();
  3203  05F4  120A  158A  22F7  120A  118A  	fcall	_readInputs
  3204  05F9                     l2609:	
  3205  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  3206  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  3207  05FB  0864               	movf	_bButton,w
  3208  05FC  1D03               	btfss	3,2
  3209  05FD  2DF4               	goto	l2607
  3210                           
  3211                           ;LCDTime.c: 333: LCDGotoXY(0,0) ;
  3212  05FE  01FD               	clrf	LCDGotoXY@y
  3213  05FF  3000               	movlw	0
  3214  0600  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  3215                           
  3216                           ;LCDTime.c: 334: LCDWriteString(setText);
  3217  0605  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3218  0606  1283               	bcf	3,5	;RP0=0, select bank0
  3219  0607  1303               	bcf	3,6	;RP1=0, select bank0
  3220  0608  00A0               	movwf	LCDWriteString@msg
  3221  0609  3080               	movlw	128
  3222  060A  00A1               	movwf	LCDWriteString@msg+1
  3223  060B  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  3224                           
  3225                           ;LCDTime.c: 335: LCDWriteString("Date ");
  3226  0610  3070               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3227  0611  1283               	bcf	3,5	;RP0=0, select bank0
  3228  0612  1303               	bcf	3,6	;RP1=0, select bank0
  3229  0613  00A0               	movwf	LCDWriteString@msg
  3230  0614  3080               	movlw	128
  3231  0615  00A1               	movwf	LCDWriteString@msg+1
  3232  0616  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  3233  061B                     l2639:	
  3234                           ;LCDTime.c: 337: while(!bButton)
  3235                           
  3236  061B  1283               	bcf	3,5	;RP0=0, select bank0
  3237  061C  1303               	bcf	3,6	;RP1=0, select bank0
  3238  061D  0864               	movf	_bButton,w
  3239  061E  1D03               	btfss	3,2
  3240  061F  2E7A               	goto	l2643
  3241                           
  3242                           ;LCDTime.c: 338: {
  3243                           ;LCDTime.c: 339: readInputs();
  3244  0620  120A  158A  22F7  120A  118A  	fcall	_readInputs
  3245                           
  3246                           ;LCDTime.c: 341: if (state & 0x10)
  3247  0625  1283               	bcf	3,5	;RP0=0, select bank0
  3248  0626  1303               	bcf	3,6	;RP1=0, select bank0
  3249  0627  1E65               	btfss	_state,4
  3250  0628  2E48               	goto	l339
  3251                           
  3252                           ;LCDTime.c: 342: {
  3253                           ;LCDTime.c: 343: date++;
  3254  0629  3001               	movlw	1
  3255  062A  07D0               	addwf	_date,f
  3256  062B  1803               	skipnc
  3257  062C  0AD1               	incf	_date+1,f
  3258  062D  3000               	movlw	0
  3259  062E  07D1               	addwf	_date+1,f
  3260                           
  3261                           ;LCDTime.c: 344: if (date > monthDays[month-1])
  3262  062F  0858               	movf	_month,w
  3263  0630  3EFF               	addlw	255
  3264  0631  3E33               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3265  0632  0084               	movwf	4
  3266  0633  120A  158A  200A  120A  118A  	fcall	stringdir
  3267  0638  00B6               	movwf	??_doMenu
  3268  0639  0851               	movf	_date+1,w
  3269  063A  3A80               	xorlw	128
  3270  063B  3C80               	sublw	128
  3271  063C  1D03               	skipz
  3272  063D  2E40               	goto	u2335
  3273  063E  0850               	movf	_date,w
  3274  063F  0236               	subwf	??_doMenu,w
  3275  0640                     u2335:	
  3276  0640  1803               	skipnc
  3277  0641  2E61               	goto	l2633
  3278                           
  3279                           ;LCDTime.c: 345: date = 1 ;
  3280  0642  3001               	movlw	1
  3281  0643  1283               	bcf	3,5	;RP0=0, select bank0
  3282  0644  1303               	bcf	3,6	;RP1=0, select bank0
  3283  0645  00D0               	movwf	_date
  3284  0646  3000               	movlw	0
  3285  0647  2E60               	goto	L2
  3286  0648                     l339:	
  3287                           ;LCDTime.c: 346: }
  3288                           
  3289                           
  3290                           ;LCDTime.c: 347: else if (state & 0x20)
  3291  0648  1EE5               	btfss	_state,5
  3292  0649  2E61               	goto	l2633
  3293                           
  3294                           ;LCDTime.c: 348: {
  3295                           ;LCDTime.c: 349: date--;
  3296  064A  30FF               	movlw	255
  3297  064B  07D0               	addwf	_date,f
  3298  064C  1803               	skipnc
  3299  064D  0AD1               	incf	_date+1,f
  3300  064E  30FF               	movlw	255
  3301  064F  07D1               	addwf	_date+1,f
  3302                           
  3303                           ;LCDTime.c: 350: if (date < 0)
  3304  0650  1FD1               	btfss	_date+1,7
  3305  0651  2E61               	goto	l2633
  3306                           
  3307                           ;LCDTime.c: 351: date = monthDays[month-1] ;
  3308  0652  0858               	movf	_month,w
  3309  0653  3EFF               	addlw	255
  3310  0654  3E33               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3311  0655  0084               	movwf	4
  3312  0656  120A  158A  200A  120A  118A  	fcall	stringdir
  3313  065B  00B6               	movwf	??_doMenu
  3314  065C  01B7               	clrf	??_doMenu+1
  3315  065D  0836               	movf	??_doMenu,w
  3316  065E  00D0               	movwf	_date
  3317  065F  0837               	movf	??_doMenu+1,w
  3318  0660                     L2:	
  3319  0660  00D1               	movwf	_date+1
  3320  0661                     l2633:	
  3321                           
  3322                           ;LCDTime.c: 352: }
  3323                           ;LCDTime.c: 354: if (state & 0x30)
  3324  0661  1283               	bcf	3,5	;RP0=0, select bank0
  3325  0662  1303               	bcf	3,6	;RP1=0, select bank0
  3326  0663  0865               	movf	_state,w
  3327  0664  3930               	andlw	48
  3328  0665  1903               	btfsc	3,2
  3329  0666  2E1B               	goto	l2639
  3330                           
  3331                           ;LCDTime.c: 355: {
  3332                           ;LCDTime.c: 356: LCDGotoXY(0,1) ;
  3333  0667  01FD               	clrf	LCDGotoXY@y
  3334  0668  0AFD               	incf	LCDGotoXY@y,f
  3335  0669  3000               	movlw	0
  3336  066A  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  3337                           
  3338                           ;LCDTime.c: 357: showDate();
  3339  066F  120A  158A  2678  120A  118A  	fcall	_showDate
  3340  0674  2E1B               	goto	l2639
  3341  0675                     l2641:	
  3342                           ;LCDTime.c: 358: }
  3343                           ;LCDTime.c: 359: }
  3344                           ;LCDTime.c: 361: while(bButton)
  3345                           
  3346                           
  3347                           ;LCDTime.c: 362: readInputs();
  3348  0675  120A  158A  22F7  120A  118A  	fcall	_readInputs
  3349  067A                     l2643:	
  3350  067A  1283               	bcf	3,5	;RP0=0, select bank0
  3351  067B  1303               	bcf	3,6	;RP1=0, select bank0
  3352  067C  0864               	movf	_bButton,w
  3353  067D  1D03               	btfss	3,2
  3354  067E  2E75               	goto	l2641
  3355                           
  3356                           ;LCDTime.c: 364: LCDGotoXY(0,0) ;
  3357  067F  01FD               	clrf	LCDGotoXY@y
  3358  0680  3000               	movlw	0
  3359  0681  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  3360                           
  3361                           ;LCDTime.c: 365: LCDWriteString(setText);
  3362  0686  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3363  0687  1283               	bcf	3,5	;RP0=0, select bank0
  3364  0688  1303               	bcf	3,6	;RP1=0, select bank0
  3365  0689  00A0               	movwf	LCDWriteString@msg
  3366  068A  3080               	movlw	128
  3367  068B  00A1               	movwf	LCDWriteString@msg+1
  3368  068C  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  3369                           
  3370                           ;LCDTime.c: 366: LCDWriteString("Day  ");
  3371  0691  306A               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3372  0692  1283               	bcf	3,5	;RP0=0, select bank0
  3373  0693  1303               	bcf	3,6	;RP1=0, select bank0
  3374  0694  00A0               	movwf	LCDWriteString@msg
  3375  0695  3080               	movlw	128
  3376  0696  00A1               	movwf	LCDWriteString@msg+1
  3377  0697  120A  158A  2229  120A  118A  	fcall	_LCDWriteString
  3378  069C                     l2673:	
  3379                           ;LCDTime.c: 368: while(!bButton)
  3380                           
  3381  069C  1283               	bcf	3,5	;RP0=0, select bank0
  3382  069D  1303               	bcf	3,6	;RP1=0, select bank0
  3383  069E  0864               	movf	_bButton,w
  3384  069F  1D03               	btfss	3,2
  3385  06A0  2EE1               	goto	l2675
  3386                           
  3387                           ;LCDTime.c: 369: {
  3388                           ;LCDTime.c: 370: readInputs();
  3389  06A1  120A  158A  22F7  120A  118A  	fcall	_readInputs
  3390                           
  3391                           ;LCDTime.c: 372: if (state & 0x10)
  3392  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  3393  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  3394  06A8  1E65               	btfss	_state,4
  3395  06A9  2EBF               	goto	l351
  3396                           
  3397                           ;LCDTime.c: 373: {
  3398                           ;LCDTime.c: 374: day++;
  3399  06AA  3001               	movlw	1
  3400  06AB  07D2               	addwf	_day,f
  3401  06AC  1803               	skipnc
  3402  06AD  0AD3               	incf	_day+1,f
  3403  06AE  3000               	movlw	0
  3404  06AF  07D3               	addwf	_day+1,f
  3405                           
  3406                           ;LCDTime.c: 375: if (day > 7)
  3407  06B0  0853               	movf	_day+1,w
  3408  06B1  3A80               	xorlw	128
  3409  06B2  00FF               	movwf	127
  3410  06B3  3080               	movlw	128
  3411  06B4  027F               	subwf	127,w
  3412  06B5  1D03               	skipz
  3413  06B6  2EB9               	goto	u2405
  3414  06B7  3008               	movlw	8
  3415  06B8  0252               	subwf	_day,w
  3416  06B9                     u2405:	
  3417  06B9  1C03               	skipc
  3418  06BA  2ECD               	goto	l2667
  3419                           
  3420                           ;LCDTime.c: 376: day = 1 ;
  3421  06BB  3001               	movlw	1
  3422  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  3423  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  3424  06BE  2ECA               	goto	L3
  3425  06BF                     l351:	
  3426                           ;LCDTime.c: 377: }
  3427                           
  3428                           
  3429                           ;LCDTime.c: 378: else if (state & 0x20)
  3430  06BF  1EE5               	btfss	_state,5
  3431  06C0  2ECD               	goto	l2667
  3432                           
  3433                           ;LCDTime.c: 379: {
  3434                           ;LCDTime.c: 380: day--;
  3435  06C1  30FF               	movlw	255
  3436  06C2  07D2               	addwf	_day,f
  3437  06C3  1803               	skipnc
  3438  06C4  0AD3               	incf	_day+1,f
  3439  06C5  30FF               	movlw	255
  3440  06C6  07D3               	addwf	_day+1,f
  3441                           
  3442                           ;LCDTime.c: 381: if (day < 0)
  3443  06C7  1FD3               	btfss	_day+1,7
  3444  06C8  2ECD               	goto	l2667
  3445                           
  3446                           ;LCDTime.c: 382: day = 7 ;
  3447  06C9  3007               	movlw	7
  3448  06CA                     L3:	
  3449  06CA  00D2               	movwf	_day
  3450  06CB  3000               	movlw	0
  3451  06CC  00D3               	movwf	_day+1
  3452  06CD                     l2667:	
  3453                           
  3454                           ;LCDTime.c: 383: }
  3455                           ;LCDTime.c: 385: if (state & 0x30)
  3456  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  3457  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  3458  06CF  0865               	movf	_state,w
  3459  06D0  3930               	andlw	48
  3460  06D1  1903               	btfsc	3,2
  3461  06D2  2E9C               	goto	l2673
  3462                           
  3463                           ;LCDTime.c: 386: {
  3464                           ;LCDTime.c: 387: LCDGotoXY(0,1) ;
  3465  06D3  01FD               	clrf	LCDGotoXY@y
  3466  06D4  0AFD               	incf	LCDGotoXY@y,f
  3467  06D5  3000               	movlw	0
  3468  06D6  120A  158A  2203  120A  118A  	fcall	_LCDGotoXY
  3469                           
  3470                           ;LCDTime.c: 388: showDate();
  3471  06DB  120A  158A  2678  120A  118A  	fcall	_showDate
  3472  06E0  2E9C               	goto	l2673
  3473  06E1                     l2675:	
  3474                           
  3475                           ;LCDTime.c: 389: }
  3476                           ;LCDTime.c: 390: }
  3477                           ;LCDTime.c: 392: if (n != day || d != date || m != month || y != year)
  3478  06E1  0853               	movf	_day+1,w
  3479  06E2  0640               	xorwf	doMenu@n+1,w
  3480  06E3  1D03               	skipz
  3481  06E4  2EE7               	goto	u2455
  3482  06E5  0852               	movf	_day,w
  3483  06E6  063F               	xorwf	doMenu@n,w
  3484  06E7                     u2455:	
  3485  06E7  1D03               	skipz
  3486  06E8  2F01               	goto	l2683
  3487  06E9  0851               	movf	_date+1,w
  3488  06EA  0642               	xorwf	doMenu@d+1,w
  3489  06EB  1D03               	skipz
  3490  06EC  2EEF               	goto	u2465
  3491  06ED  0850               	movf	_date,w
  3492  06EE  0641               	xorwf	doMenu@d,w
  3493  06EF                     u2465:	
  3494  06EF  1D03               	skipz
  3495  06F0  2F01               	goto	l2683
  3496  06F1  0859               	movf	_month+1,w
  3497  06F2  0644               	xorwf	doMenu@m_296+1,w
  3498  06F3  1D03               	skipz
  3499  06F4  2EF7               	goto	u2475
  3500  06F5  0858               	movf	_month,w
  3501  06F6  0643               	xorwf	doMenu@m_296,w
  3502  06F7                     u2475:	
  3503  06F7  1D03               	skipz
  3504  06F8  2F01               	goto	l2683
  3505  06F9  085F               	movf	_year+1,w
  3506  06FA  0646               	xorwf	doMenu@y+1,w
  3507  06FB  1D03               	skipz
  3508  06FC  2EFF               	goto	u2485
  3509  06FD  085E               	movf	_year,w
  3510  06FE  0645               	xorwf	doMenu@y,w
  3511  06FF                     u2485:	
  3512  06FF  1903               	skipnz
  3513  0700  2FDF               	goto	l2687
  3514  0701                     l2683:	
  3515                           
  3516                           ;LCDTime.c: 393: {
  3517                           ;LCDTime.c: 394: n = ((day / 10) << 4) + day % 10 ;
  3518  0701  300A               	movlw	10
  3519  0702  00F1               	movwf	___awdiv@divisor
  3520  0703  3000               	movlw	0
  3521  0704  00F2               	movwf	___awdiv@divisor+1
  3522  0705  0853               	movf	_day+1,w
  3523  0706  00F4               	movwf	___awdiv@dividend+1
  3524  0707  0852               	movf	_day,w
  3525  0708  00F3               	movwf	___awdiv@dividend
  3526  0709  120A  158A  2561  120A  118A  	fcall	___awdiv
  3527  070E  0871               	movf	?___awdiv,w
  3528  070F  1283               	bcf	3,5	;RP0=0, select bank0
  3529  0710  1303               	bcf	3,6	;RP1=0, select bank0
  3530  0711  00B6               	movwf	??_doMenu
  3531  0712  0872               	movf	?___awdiv+1,w
  3532  0713  00B7               	movwf	??_doMenu+1
  3533  0714  0EB6               	swapf	??_doMenu,f
  3534  0715  0EB7               	swapf	??_doMenu+1,f
  3535  0716  30F0               	movlw	240
  3536  0717  05B7               	andwf	??_doMenu+1,f
  3537  0718  0836               	movf	??_doMenu,w
  3538  0719  390F               	andlw	15
  3539  071A  04B7               	iorwf	??_doMenu+1,f
  3540  071B  30F0               	movlw	240
  3541  071C  05B6               	andwf	??_doMenu,f
  3542  071D  300A               	movlw	10
  3543  071E  00F1               	movwf	___awmod@divisor
  3544  071F  3000               	movlw	0
  3545  0720  00F2               	movwf	___awmod@divisor+1
  3546  0721  0853               	movf	_day+1,w
  3547  0722  00F4               	movwf	___awmod@dividend+1
  3548  0723  0852               	movf	_day,w
  3549  0724  00F3               	movwf	___awmod@dividend
  3550  0725  120A  158A  23D4  120A  118A  	fcall	___awmod
  3551  072A  0871               	movf	?___awmod,w
  3552  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3553  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3554  072D  0736               	addwf	??_doMenu,w
  3555  072E  00BF               	movwf	doMenu@n
  3556  072F  0872               	movf	?___awmod+1,w
  3557  0730  1803               	skipnc
  3558  0731  0A72               	incf	?___awmod+1,w
  3559  0732  0737               	addwf	??_doMenu+1,w
  3560  0733  00C0               	movwf	doMenu@n+1
  3561                           
  3562                           ;LCDTime.c: 395: d = ((date / 10) << 4) + date % 10 ;
  3563  0734  300A               	movlw	10
  3564  0735  00F1               	movwf	___awdiv@divisor
  3565  0736  3000               	movlw	0
  3566  0737  00F2               	movwf	___awdiv@divisor+1
  3567  0738  0851               	movf	_date+1,w
  3568  0739  00F4               	movwf	___awdiv@dividend+1
  3569  073A  0850               	movf	_date,w
  3570  073B  00F3               	movwf	___awdiv@dividend
  3571  073C  120A  158A  2561  120A  118A  	fcall	___awdiv
  3572  0741  0871               	movf	?___awdiv,w
  3573  0742  1283               	bcf	3,5	;RP0=0, select bank0
  3574  0743  1303               	bcf	3,6	;RP1=0, select bank0
  3575  0744  00B6               	movwf	??_doMenu
  3576  0745  0872               	movf	?___awdiv+1,w
  3577  0746  00B7               	movwf	??_doMenu+1
  3578  0747  0EB6               	swapf	??_doMenu,f
  3579  0748  0EB7               	swapf	??_doMenu+1,f
  3580  0749  30F0               	movlw	240
  3581  074A  05B7               	andwf	??_doMenu+1,f
  3582  074B  0836               	movf	??_doMenu,w
  3583  074C  390F               	andlw	15
  3584  074D  04B7               	iorwf	??_doMenu+1,f
  3585  074E  30F0               	movlw	240
  3586  074F  05B6               	andwf	??_doMenu,f
  3587  0750  300A               	movlw	10
  3588  0751  00F1               	movwf	___awmod@divisor
  3589  0752  3000               	movlw	0
  3590  0753  00F2               	movwf	___awmod@divisor+1
  3591  0754  0851               	movf	_date+1,w
  3592  0755  00F4               	movwf	___awmod@dividend+1
  3593  0756  0850               	movf	_date,w
  3594  0757  00F3               	movwf	___awmod@dividend
  3595  0758  120A  158A  23D4  120A  118A  	fcall	___awmod
  3596  075D  0871               	movf	?___awmod,w
  3597  075E  1283               	bcf	3,5	;RP0=0, select bank0
  3598  075F  1303               	bcf	3,6	;RP1=0, select bank0
  3599  0760  0736               	addwf	??_doMenu,w
  3600  0761  00C1               	movwf	doMenu@d
  3601  0762  0872               	movf	?___awmod+1,w
  3602  0763  1803               	skipnc
  3603  0764  0A72               	incf	?___awmod+1,w
  3604  0765  0737               	addwf	??_doMenu+1,w
  3605  0766  00C2               	movwf	doMenu@d+1
  3606                           
  3607                           ;LCDTime.c: 396: m = ((month / 10) << 4) + month % 10 ;
  3608  0767  300A               	movlw	10
  3609  0768  00F1               	movwf	___awdiv@divisor
  3610  0769  3000               	movlw	0
  3611  076A  00F2               	movwf	___awdiv@divisor+1
  3612  076B  0859               	movf	_month+1,w
  3613  076C  00F4               	movwf	___awdiv@dividend+1
  3614  076D  0858               	movf	_month,w
  3615  076E  00F3               	movwf	___awdiv@dividend
  3616  076F  120A  158A  2561  120A  118A  	fcall	___awdiv
  3617  0774  0871               	movf	?___awdiv,w
  3618  0775  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0776  1303               	bcf	3,6	;RP1=0, select bank0
  3620  0777  00B6               	movwf	??_doMenu
  3621  0778  0872               	movf	?___awdiv+1,w
  3622  0779  00B7               	movwf	??_doMenu+1
  3623  077A  0EB6               	swapf	??_doMenu,f
  3624  077B  0EB7               	swapf	??_doMenu+1,f
  3625  077C  30F0               	movlw	240
  3626  077D  05B7               	andwf	??_doMenu+1,f
  3627  077E  0836               	movf	??_doMenu,w
  3628  077F  390F               	andlw	15
  3629  0780  04B7               	iorwf	??_doMenu+1,f
  3630  0781  30F0               	movlw	240
  3631  0782  05B6               	andwf	??_doMenu,f
  3632  0783  300A               	movlw	10
  3633  0784  00F1               	movwf	___awmod@divisor
  3634  0785  3000               	movlw	0
  3635  0786  00F2               	movwf	___awmod@divisor+1
  3636  0787  0859               	movf	_month+1,w
  3637  0788  00F4               	movwf	___awmod@dividend+1
  3638  0789  0858               	movf	_month,w
  3639  078A  00F3               	movwf	___awmod@dividend
  3640  078B  120A  158A  23D4  120A  118A  	fcall	___awmod
  3641  0790  0871               	movf	?___awmod,w
  3642  0791  1283               	bcf	3,5	;RP0=0, select bank0
  3643  0792  1303               	bcf	3,6	;RP1=0, select bank0
  3644  0793  0736               	addwf	??_doMenu,w
  3645  0794  00C3               	movwf	doMenu@m_296
  3646  0795  0872               	movf	?___awmod+1,w
  3647  0796  1803               	skipnc
  3648  0797  0A72               	incf	?___awmod+1,w
  3649  0798  0737               	addwf	??_doMenu+1,w
  3650  0799  00C4               	movwf	doMenu@m_296+1
  3651                           
  3652                           ;LCDTime.c: 397: y = ((year / 10) << 4) + year % 10 ;
  3653  079A  300A               	movlw	10
  3654  079B  00F1               	movwf	___awdiv@divisor
  3655  079C  3000               	movlw	0
  3656  079D  00F2               	movwf	___awdiv@divisor+1
  3657  079E  085F               	movf	_year+1,w
  3658  079F  00F4               	movwf	___awdiv@dividend+1
  3659  07A0  085E               	movf	_year,w
  3660  07A1  00F3               	movwf	___awdiv@dividend
  3661  07A2  120A  158A  2561  120A  118A  	fcall	___awdiv
  3662  07A7  0871               	movf	?___awdiv,w
  3663  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  3664  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  3665  07AA  00B6               	movwf	??_doMenu
  3666  07AB  0872               	movf	?___awdiv+1,w
  3667  07AC  00B7               	movwf	??_doMenu+1
  3668  07AD  0EB6               	swapf	??_doMenu,f
  3669  07AE  0EB7               	swapf	??_doMenu+1,f
  3670  07AF  30F0               	movlw	240
  3671  07B0  05B7               	andwf	??_doMenu+1,f
  3672  07B1  0836               	movf	??_doMenu,w
  3673  07B2  390F               	andlw	15
  3674  07B3  04B7               	iorwf	??_doMenu+1,f
  3675  07B4  30F0               	movlw	240
  3676  07B5  05B6               	andwf	??_doMenu,f
  3677  07B6  300A               	movlw	10
  3678  07B7  00F1               	movwf	___awmod@divisor
  3679  07B8  3000               	movlw	0
  3680  07B9  00F2               	movwf	___awmod@divisor+1
  3681  07BA  085F               	movf	_year+1,w
  3682  07BB  00F4               	movwf	___awmod@dividend+1
  3683  07BC  085E               	movf	_year,w
  3684  07BD  00F3               	movwf	___awmod@dividend
  3685  07BE  120A  158A  23D4  120A  118A  	fcall	___awmod
  3686  07C3  0871               	movf	?___awmod,w
  3687  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  3688  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  3689  07C6  0736               	addwf	??_doMenu,w
  3690  07C7  00C5               	movwf	doMenu@y
  3691  07C8  0872               	movf	?___awmod+1,w
  3692  07C9  1803               	skipnc
  3693  07CA  0A72               	incf	?___awmod+1,w
  3694  07CB  0737               	addwf	??_doMenu+1,w
  3695  07CC  00C6               	movwf	doMenu@y+1
  3696                           
  3697                           ;LCDTime.c: 399: DS1307_SetDate(n,d,m,y) ;
  3698  07CD  0841               	movf	doMenu@d,w
  3699  07CE  00B6               	movwf	??_doMenu
  3700  07CF  0836               	movf	??_doMenu,w
  3701  07D0  00F6               	movwf	DS1307_SetDate@dd
  3702  07D1  0843               	movf	doMenu@m_296,w
  3703  07D2  00B7               	movwf	??_doMenu+1
  3704  07D3  0837               	movf	??_doMenu+1,w
  3705  07D4  00F7               	movwf	DS1307_SetDate@mm
  3706  07D5  0845               	movf	doMenu@y,w
  3707  07D6  00B8               	movwf	??_doMenu+2
  3708  07D7  0838               	movf	??_doMenu+2,w
  3709  07D8  00F8               	movwf	DS1307_SetDate@yy
  3710  07D9  083F               	movf	doMenu@n,w
  3711  07DA  120A  158A  22C9  120A  118A  	fcall	_DS1307_SetDate
  3712  07DF                     l2687:	
  3713                           ;LCDTime.c: 400: }
  3714                           ;LCDTime.c: 403: while(bButton)
  3715                           
  3716  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  3717  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  3718  07E1  0864               	movf	_bButton,w
  3719  07E2  1903               	btfsc	3,2
  3720  07E3  0008               	return
  3721                           
  3722                           ;LCDTime.c: 404: readInputs();
  3723  07E4  120A  158A  22F7  120A  118A  	fcall	_readInputs
  3724  07E9  2FDF               	goto	l2687
  3725  07EA                     __end_of_doMenu:	
  3726                           
  3727                           	psect	text8
  3728  0B98                     __ptext8:	
  3729 ;; *************** function _showTime *****************
  3730 ;; Defined at:
  3731 ;;		line 474 in file "LCDTime.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;		None
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;		None
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3745 ;;      Params:         0       0       0       0       0
  3746 ;;      Locals:         0       0       0       0       0
  3747 ;;      Temps:          0       1       0       0       0
  3748 ;;      Totals:         0       1       0       0       0
  3749 ;;Total ram usage:        1 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    4
  3752 ;; This function calls:
  3753 ;;		_LCDByte
  3754 ;;		_LCDWriteInt
  3755 ;; This function is called by:
  3756 ;;		_doMenu
  3757 ;;		_showClock
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           
  3762                           ;psect for function _showTime
  3763  0B98                     _showTime:	
  3764                           
  3765                           ;LCDTime.c: 476: LCDWriteInt(hour,2);
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in _showTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3769  0B98  1283               	bcf	3,5	;RP0=0, select bank0
  3770  0B99  1303               	bcf	3,6	;RP1=0, select bank0
  3771  0B9A  0855               	movf	_hour+1,w
  3772  0B9B  00A3               	movwf	LCDWriteInt@val+1
  3773  0B9C  0854               	movf	_hour,w
  3774  0B9D  00A2               	movwf	LCDWriteInt@val
  3775  0B9E  3002               	movlw	2
  3776  0B9F  00B3               	movwf	??_showTime
  3777  0BA0  0833               	movf	??_showTime,w
  3778  0BA1  00A4               	movwf	LCDWriteInt@field_length
  3779  0BA2  120A  118A  206D  120A  158A  	fcall	_LCDWriteInt
  3780                           
  3781                           ;LCDTime.c: 477: (LCDByte(':',1)) ;
  3782  0BA7  01F6               	clrf	LCDByte@isdata
  3783  0BA8  0AF6               	incf	LCDByte@isdata,f
  3784  0BA9  303A               	movlw	58
  3785  0BAA  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3786                           
  3787                           ;LCDTime.c: 478: LCDWriteInt(minute,2);
  3788  0BAF  1283               	bcf	3,5	;RP0=0, select bank0
  3789  0BB0  1303               	bcf	3,6	;RP1=0, select bank0
  3790  0BB1  0857               	movf	_minute+1,w
  3791  0BB2  00A3               	movwf	LCDWriteInt@val+1
  3792  0BB3  0856               	movf	_minute,w
  3793  0BB4  00A2               	movwf	LCDWriteInt@val
  3794  0BB5  3002               	movlw	2
  3795  0BB6  00B3               	movwf	??_showTime
  3796  0BB7  0833               	movf	??_showTime,w
  3797  0BB8  00A4               	movwf	LCDWriteInt@field_length
  3798  0BB9  120A  118A  206D  120A  158A  	fcall	_LCDWriteInt
  3799                           
  3800                           ;LCDTime.c: 479: (LCDByte(':',1)) ;
  3801  0BBE  01F6               	clrf	LCDByte@isdata
  3802  0BBF  0AF6               	incf	LCDByte@isdata,f
  3803  0BC0  303A               	movlw	58
  3804  0BC1  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3805                           
  3806                           ;LCDTime.c: 480: LCDWriteInt(seconds,2);
  3807  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
  3808  0BC7  1303               	bcf	3,6	;RP1=0, select bank0
  3809  0BC8  085D               	movf	_seconds+1,w
  3810  0BC9  00A3               	movwf	LCDWriteInt@val+1
  3811  0BCA  085C               	movf	_seconds,w
  3812  0BCB  00A2               	movwf	LCDWriteInt@val
  3813  0BCC  3002               	movlw	2
  3814  0BCD  00B3               	movwf	??_showTime
  3815  0BCE  0833               	movf	??_showTime,w
  3816  0BCF  00A4               	movwf	LCDWriteInt@field_length
  3817  0BD0  120A  118A  206D   	fcall	_LCDWriteInt
  3818  0BD3  0008               	return
  3819  0BD4                     __end_of_showTime:	
  3820                           
  3821                           	psect	text9
  3822  0E78                     __ptext9:	
  3823 ;; *************** function _showDate *****************
  3824 ;; Defined at:
  3825 ;;		line 488 in file "LCDTime.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;		None
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  d               2   20[BANK0 ] int 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      void 
  3832 ;; Registers used:
  3833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3839 ;;      Params:         0       0       0       0       0
  3840 ;;      Locals:         0       2       0       0       0
  3841 ;;      Temps:          0       1       0       0       0
  3842 ;;      Totals:         0       3       0       0       0
  3843 ;;Total ram usage:        3 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; Hardware stack levels required when called:    4
  3846 ;; This function calls:
  3847 ;;		_LCDByte
  3848 ;;		_LCDWriteInt
  3849 ;;		___wmul
  3850 ;; This function is called by:
  3851 ;;		_doMenu
  3852 ;;		_showClock
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _showDate
  3858  0E78                     _showDate:	
  3859                           
  3860                           ;LCDTime.c: 490: int d = (day-1) * 3 ;
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _showDate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3864  0E78  1283               	bcf	3,5	;RP0=0, select bank0
  3865  0E79  1303               	bcf	3,6	;RP1=0, select bank0
  3866  0E7A  0852               	movf	_day,w
  3867  0E7B  3EFF               	addlw	255
  3868  0E7C  00FA               	movwf	___wmul@multiplier
  3869  0E7D  0853               	movf	_day+1,w
  3870  0E7E  1803               	skipnc
  3871  0E7F  3E01               	addlw	1
  3872  0E80  3EFF               	addlw	255
  3873  0E81  00FB               	movwf	___wmul@multiplier+1
  3874  0E82  3003               	movlw	3
  3875  0E83  00FC               	movwf	___wmul@multiplicand
  3876  0E84  3000               	movlw	0
  3877  0E85  00FD               	movwf	___wmul@multiplicand+1
  3878  0E86  120A  158A  2250  120A  158A  	fcall	___wmul
  3879  0E8B  087B               	movf	?___wmul+1,w
  3880  0E8C  1283               	bcf	3,5	;RP0=0, select bank0
  3881  0E8D  1303               	bcf	3,6	;RP1=0, select bank0
  3882  0E8E  00B5               	movwf	showDate@d+1
  3883  0E8F  087A               	movf	?___wmul,w
  3884  0E90  00B4               	movwf	showDate@d
  3885                           
  3886                           ;LCDTime.c: 492: LCDWriteInt(date,2);
  3887  0E91  0851               	movf	_date+1,w
  3888  0E92  00A3               	movwf	LCDWriteInt@val+1
  3889  0E93  0850               	movf	_date,w
  3890  0E94  00A2               	movwf	LCDWriteInt@val
  3891  0E95  3002               	movlw	2
  3892  0E96  00B3               	movwf	??_showDate
  3893  0E97  0833               	movf	??_showDate,w
  3894  0E98  00A4               	movwf	LCDWriteInt@field_length
  3895  0E99  120A  118A  206D  120A  158A  	fcall	_LCDWriteInt
  3896                           
  3897                           ;LCDTime.c: 493: (LCDByte('/',1)) ;
  3898  0E9E  01F6               	clrf	LCDByte@isdata
  3899  0E9F  0AF6               	incf	LCDByte@isdata,f
  3900  0EA0  302F               	movlw	47
  3901  0EA1  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3902                           
  3903                           ;LCDTime.c: 494: LCDWriteInt(month,2);
  3904  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  3905  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  3906  0EA8  0859               	movf	_month+1,w
  3907  0EA9  00A3               	movwf	LCDWriteInt@val+1
  3908  0EAA  0858               	movf	_month,w
  3909  0EAB  00A2               	movwf	LCDWriteInt@val
  3910  0EAC  3002               	movlw	2
  3911  0EAD  00B3               	movwf	??_showDate
  3912  0EAE  0833               	movf	??_showDate,w
  3913  0EAF  00A4               	movwf	LCDWriteInt@field_length
  3914  0EB0  120A  118A  206D  120A  158A  	fcall	_LCDWriteInt
  3915                           
  3916                           ;LCDTime.c: 495: (LCDByte('/',1)) ;
  3917  0EB5  01F6               	clrf	LCDByte@isdata
  3918  0EB6  0AF6               	incf	LCDByte@isdata,f
  3919  0EB7  302F               	movlw	47
  3920  0EB8  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3921                           
  3922                           ;LCDTime.c: 496: (LCDByte('2',1)) ;
  3923  0EBD  01F6               	clrf	LCDByte@isdata
  3924  0EBE  0AF6               	incf	LCDByte@isdata,f
  3925  0EBF  3032               	movlw	50
  3926  0EC0  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3927                           
  3928                           ;LCDTime.c: 497: (LCDByte('0',1)) ;
  3929  0EC5  01F6               	clrf	LCDByte@isdata
  3930  0EC6  0AF6               	incf	LCDByte@isdata,f
  3931  0EC7  3030               	movlw	48
  3932  0EC8  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3933                           
  3934                           ;LCDTime.c: 498: LCDWriteInt(year,2);
  3935  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  3936  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  3937  0ECF  085F               	movf	_year+1,w
  3938  0ED0  00A3               	movwf	LCDWriteInt@val+1
  3939  0ED1  085E               	movf	_year,w
  3940  0ED2  00A2               	movwf	LCDWriteInt@val
  3941  0ED3  3002               	movlw	2
  3942  0ED4  00B3               	movwf	??_showDate
  3943  0ED5  0833               	movf	??_showDate,w
  3944  0ED6  00A4               	movwf	LCDWriteInt@field_length
  3945  0ED7  120A  118A  206D  120A  158A  	fcall	_LCDWriteInt
  3946                           
  3947                           ;LCDTime.c: 499: (LCDByte(32,1)) ;
  3948  0EDC  01F6               	clrf	LCDByte@isdata
  3949  0EDD  0AF6               	incf	LCDByte@isdata,f
  3950  0EDE  3020               	movlw	32
  3951  0EDF  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3952                           
  3953                           ;LCDTime.c: 500: (LCDByte(32,1)) ;
  3954  0EE4  01F6               	clrf	LCDByte@isdata
  3955  0EE5  0AF6               	incf	LCDByte@isdata,f
  3956  0EE6  3020               	movlw	32
  3957  0EE7  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3958                           
  3959                           ;LCDTime.c: 501: (LCDByte(daysOfTheWeek[d++],1)) ;
  3960  0EEC  01F6               	clrf	LCDByte@isdata
  3961  0EED  0AF6               	incf	LCDByte@isdata,f
  3962  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  3963  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  3964  0EF0  0834               	movf	showDate@d,w
  3965  0EF1  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  3966  0EF2  0084               	movwf	4
  3967  0EF3  120A  158A  200A  120A  158A  	fcall	stringdir
  3968  0EF8  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3969  0EFD  3001               	movlw	1
  3970  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  3971  0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  3972  0F00  07B4               	addwf	showDate@d,f
  3973  0F01  1803               	skipnc
  3974  0F02  0AB5               	incf	showDate@d+1,f
  3975  0F03  3000               	movlw	0
  3976  0F04  07B5               	addwf	showDate@d+1,f
  3977                           
  3978                           ;LCDTime.c: 502: (LCDByte(daysOfTheWeek[d++],1)) ;
  3979  0F05  01F6               	clrf	LCDByte@isdata
  3980  0F06  0AF6               	incf	LCDByte@isdata,f
  3981  0F07  0834               	movf	showDate@d,w
  3982  0F08  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  3983  0F09  0084               	movwf	4
  3984  0F0A  120A  158A  200A  120A  158A  	fcall	stringdir
  3985  0F0F  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  3986  0F14  3001               	movlw	1
  3987  0F15  1283               	bcf	3,5	;RP0=0, select bank0
  3988  0F16  1303               	bcf	3,6	;RP1=0, select bank0
  3989  0F17  07B4               	addwf	showDate@d,f
  3990  0F18  1803               	skipnc
  3991  0F19  0AB5               	incf	showDate@d+1,f
  3992  0F1A  3000               	movlw	0
  3993  0F1B  07B5               	addwf	showDate@d+1,f
  3994                           
  3995                           ;LCDTime.c: 503: (LCDByte(daysOfTheWeek[d],1)) ;
  3996  0F1C  01F6               	clrf	LCDByte@isdata
  3997  0F1D  0AF6               	incf	LCDByte@isdata,f
  3998  0F1E  0834               	movf	showDate@d,w
  3999  0F1F  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4000  0F20  0084               	movwf	4
  4001  0F21  120A  158A  200A  120A  158A  	fcall	stringdir
  4002  0F26  120A  158A  24BB   	fcall	_LCDByte
  4003  0F29  0008               	return
  4004  0F2A                     __end_of_showDate:	
  4005                           
  4006                           	psect	text10
  4007  006D                     __ptext10:	
  4008 ;; *************** function _LCDWriteInt *****************
  4009 ;; Defined at:
  4010 ;;		line 277 in file "lcd_hd44780_pic16.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  val             2    2[BANK0 ] int 
  4013 ;;  field_length    1    4[BANK0 ] char 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  str             6   10[BANK0 ] unsigned char [6]
  4016 ;;  from            2   16[BANK0 ] int 
  4017 ;;  characters      2    8[BANK0 ] int 
  4018 ;;  c               1   18[BANK0 ] unsigned char 
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  1    wreg      void 
  4021 ;; Registers used:
  4022 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4028 ;;      Params:         0       3       0       0       0
  4029 ;;      Locals:         0      11       0       0       0
  4030 ;;      Temps:          0       3       0       0       0
  4031 ;;      Totals:         0      17       0       0       0
  4032 ;;Total ram usage:       17 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    3
  4035 ;; This function calls:
  4036 ;;		_LCDWriteString
  4037 ;;		___awdiv
  4038 ;;		___wmul
  4039 ;; This function is called by:
  4040 ;;		_showTime
  4041 ;;		_showDate
  4042 ;;		_showRunningTime
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           
  4047                           ;psect for function _LCDWriteInt
  4048  006D                     _LCDWriteInt:	
  4049                           
  4050                           ;lcd_hd44780_pic16.c: 279: char str[6] = { "-----\0" } ;
  4051                           
  4052                           ;incstack = 0
  4053                           ; Regs used in _LCDWriteInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4054  006D  302A               	movlw	LCDWriteInt@str& (0+255)
  4055  006E  0084               	movwf	4
  4056  006F  1283               	bcf	3,5	;RP0=0, select bank0
  4057  0070  1303               	bcf	3,6	;RP1=0, select bank0
  4058  0071  084A               	movf	LCDWriteInt@F1143,w
  4059  0072  1383               	bcf	3,7	;select IRP bank0
  4060  0073  0080               	movwf	0
  4061  0074  0A84               	incf	4,f
  4062  0075  084B               	movf	LCDWriteInt@F1143+1,w
  4063  0076  0080               	movwf	0
  4064  0077  0A84               	incf	4,f
  4065  0078  084C               	movf	LCDWriteInt@F1143+2,w
  4066  0079  0080               	movwf	0
  4067  007A  0A84               	incf	4,f
  4068  007B  084D               	movf	LCDWriteInt@F1143+3,w
  4069  007C  0080               	movwf	0
  4070  007D  0A84               	incf	4,f
  4071  007E  084E               	movf	LCDWriteInt@F1143+4,w
  4072  007F  0080               	movwf	0
  4073  0080  0A84               	incf	4,f
  4074  0081  084F               	movf	LCDWriteInt@F1143+5,w
  4075  0082  0080               	movwf	0
  4076                           
  4077                           ;lcd_hd44780_pic16.c: 280: int characters = 0 ;
  4078  0083  01A8               	clrf	LCDWriteInt@characters
  4079  0084  01A9               	clrf	LCDWriteInt@characters+1
  4080                           
  4081                           ;lcd_hd44780_pic16.c: 281: int from = 5 ;
  4082  0085  3005               	movlw	5
  4083  0086  00B0               	movwf	LCDWriteInt@from
  4084  0087  3000               	movlw	0
  4085  0088  00B1               	movwf	LCDWriteInt@from+1
  4086                           
  4087                           ;lcd_hd44780_pic16.c: 282: char c ;
  4088                           ;lcd_hd44780_pic16.c: 284: field_length = 5 - field_length ;
  4089  0089  0324               	decf	LCDWriteInt@field_length,w
  4090  008A  3AFF               	xorlw	255
  4091  008B  3E05               	addlw	5
  4092  008C  00A5               	movwf	??_LCDWriteInt
  4093  008D  0825               	movf	??_LCDWriteInt,w
  4094  008E  00A4               	movwf	LCDWriteInt@field_length
  4095                           
  4096                           ;lcd_hd44780_pic16.c: 286: c = val / 10000 ;
  4097  008F  3010               	movlw	16
  4098  0090  00F1               	movwf	___awdiv@divisor
  4099  0091  3027               	movlw	39
  4100  0092  00F2               	movwf	___awdiv@divisor+1
  4101  0093  0823               	movf	LCDWriteInt@val+1,w
  4102  0094  00F4               	movwf	___awdiv@dividend+1
  4103  0095  0822               	movf	LCDWriteInt@val,w
  4104  0096  00F3               	movwf	___awdiv@dividend
  4105  0097  120A  158A  2561  120A  118A  	fcall	___awdiv
  4106  009C  0871               	movf	?___awdiv,w
  4107  009D  1283               	bcf	3,5	;RP0=0, select bank0
  4108  009E  1303               	bcf	3,6	;RP1=0, select bank0
  4109  009F  00A5               	movwf	??_LCDWriteInt
  4110  00A0  0825               	movf	??_LCDWriteInt,w
  4111  00A1  00B2               	movwf	LCDWriteInt@c
  4112                           
  4113                           ;lcd_hd44780_pic16.c: 287: if (c)
  4114  00A2  0832               	movf	LCDWriteInt@c,w
  4115  00A3  1903               	btfsc	3,2
  4116  00A4  28BF               	goto	l2021
  4117                           
  4118                           ;lcd_hd44780_pic16.c: 288: {
  4119                           ;lcd_hd44780_pic16.c: 289: val -= c * 10000 ;
  4120  00A5  0832               	movf	LCDWriteInt@c,w
  4121  00A6  00A5               	movwf	??_LCDWriteInt
  4122  00A7  01A6               	clrf	??_LCDWriteInt+1
  4123  00A8  0825               	movf	??_LCDWriteInt,w
  4124  00A9  00FA               	movwf	___wmul@multiplier
  4125  00AA  0826               	movf	??_LCDWriteInt+1,w
  4126  00AB  00FB               	movwf	___wmul@multiplier+1
  4127  00AC  3010               	movlw	16
  4128  00AD  00FC               	movwf	___wmul@multiplicand
  4129  00AE  3027               	movlw	39
  4130  00AF  00FD               	movwf	___wmul@multiplicand+1
  4131  00B0  120A  158A  2250  120A  118A  	fcall	___wmul
  4132  00B5  087A               	movf	?___wmul,w
  4133  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  4134  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  4135  00B8  02A2               	subwf	LCDWriteInt@val,f
  4136  00B9  087B               	movf	?___wmul+1,w
  4137  00BA  1C03               	skipc
  4138  00BB  03A3               	decf	LCDWriteInt@val+1,f
  4139  00BC  02A3               	subwf	LCDWriteInt@val+1,f
  4140                           
  4141                           ;lcd_hd44780_pic16.c: 290: from = 0 ;
  4142  00BD  01B0               	clrf	LCDWriteInt@from
  4143  00BE  01B1               	clrf	LCDWriteInt@from+1
  4144  00BF                     l2021:	
  4145                           
  4146                           ;lcd_hd44780_pic16.c: 291: }
  4147                           ;lcd_hd44780_pic16.c: 292: str[0] = c + 0x30 ;
  4148  00BF  0832               	movf	LCDWriteInt@c,w
  4149  00C0  3E30               	addlw	48
  4150  00C1  00A5               	movwf	??_LCDWriteInt
  4151  00C2  0825               	movf	??_LCDWriteInt,w
  4152  00C3  00AA               	movwf	LCDWriteInt@str
  4153                           
  4154                           ;lcd_hd44780_pic16.c: 293: c = val / 1000 ;
  4155  00C4  30E8               	movlw	232
  4156  00C5  00F1               	movwf	___awdiv@divisor
  4157  00C6  3003               	movlw	3
  4158  00C7  00F2               	movwf	___awdiv@divisor+1
  4159  00C8  0823               	movf	LCDWriteInt@val+1,w
  4160  00C9  00F4               	movwf	___awdiv@dividend+1
  4161  00CA  0822               	movf	LCDWriteInt@val,w
  4162  00CB  00F3               	movwf	___awdiv@dividend
  4163  00CC  120A  158A  2561  120A  118A  	fcall	___awdiv
  4164  00D1  0871               	movf	?___awdiv,w
  4165  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  4166  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  4167  00D4  00A5               	movwf	??_LCDWriteInt
  4168  00D5  0825               	movf	??_LCDWriteInt,w
  4169  00D6  00B2               	movwf	LCDWriteInt@c
  4170                           
  4171                           ;lcd_hd44780_pic16.c: 294: if (c)
  4172  00D7  0832               	movf	LCDWriteInt@c,w
  4173  00D8  1903               	btfsc	3,2
  4174  00D9  28FB               	goto	l2033
  4175                           
  4176                           ;lcd_hd44780_pic16.c: 295: {
  4177                           ;lcd_hd44780_pic16.c: 296: val -= c * 1000 ;
  4178  00DA  0832               	movf	LCDWriteInt@c,w
  4179  00DB  00A5               	movwf	??_LCDWriteInt
  4180  00DC  01A6               	clrf	??_LCDWriteInt+1
  4181  00DD  0825               	movf	??_LCDWriteInt,w
  4182  00DE  00FA               	movwf	___wmul@multiplier
  4183  00DF  0826               	movf	??_LCDWriteInt+1,w
  4184  00E0  00FB               	movwf	___wmul@multiplier+1
  4185  00E1  30E8               	movlw	232
  4186  00E2  00FC               	movwf	___wmul@multiplicand
  4187  00E3  3003               	movlw	3
  4188  00E4  00FD               	movwf	___wmul@multiplicand+1
  4189  00E5  120A  158A  2250  120A  118A  	fcall	___wmul
  4190  00EA  087A               	movf	?___wmul,w
  4191  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  4192  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  4193  00ED  02A2               	subwf	LCDWriteInt@val,f
  4194  00EE  087B               	movf	?___wmul+1,w
  4195  00EF  1C03               	skipc
  4196  00F0  03A3               	decf	LCDWriteInt@val+1,f
  4197  00F1  02A3               	subwf	LCDWriteInt@val+1,f
  4198                           
  4199                           ;lcd_hd44780_pic16.c: 297: if (from == 5)
  4200  00F2  3005               	movlw	5
  4201  00F3  0630               	xorwf	LCDWriteInt@from,w
  4202  00F4  0431               	iorwf	LCDWriteInt@from+1,w
  4203  00F5  1D03               	btfss	3,2
  4204  00F6  28FB               	goto	l2033
  4205                           
  4206                           ;lcd_hd44780_pic16.c: 298: from = 1 ;
  4207  00F7  3001               	movlw	1
  4208  00F8  00B0               	movwf	LCDWriteInt@from
  4209  00F9  3000               	movlw	0
  4210  00FA  00B1               	movwf	LCDWriteInt@from+1
  4211  00FB                     l2033:	
  4212                           
  4213                           ;lcd_hd44780_pic16.c: 299: }
  4214                           ;lcd_hd44780_pic16.c: 300: str[1] = c + 0x30 ;
  4215  00FB  0832               	movf	LCDWriteInt@c,w
  4216  00FC  3E30               	addlw	48
  4217  00FD  00A5               	movwf	??_LCDWriteInt
  4218  00FE  0825               	movf	??_LCDWriteInt,w
  4219  00FF  00AB               	movwf	LCDWriteInt@str+1
  4220                           
  4221                           ;lcd_hd44780_pic16.c: 301: c = val / 100 ;
  4222  0100  3064               	movlw	100
  4223  0101  00F1               	movwf	___awdiv@divisor
  4224  0102  3000               	movlw	0
  4225  0103  00F2               	movwf	___awdiv@divisor+1
  4226  0104  0823               	movf	LCDWriteInt@val+1,w
  4227  0105  00F4               	movwf	___awdiv@dividend+1
  4228  0106  0822               	movf	LCDWriteInt@val,w
  4229  0107  00F3               	movwf	___awdiv@dividend
  4230  0108  120A  158A  2561  120A  118A  	fcall	___awdiv
  4231  010D  0871               	movf	?___awdiv,w
  4232  010E  1283               	bcf	3,5	;RP0=0, select bank0
  4233  010F  1303               	bcf	3,6	;RP1=0, select bank0
  4234  0110  00A5               	movwf	??_LCDWriteInt
  4235  0111  0825               	movf	??_LCDWriteInt,w
  4236  0112  00B2               	movwf	LCDWriteInt@c
  4237                           
  4238                           ;lcd_hd44780_pic16.c: 302: if (c)
  4239  0113  0832               	movf	LCDWriteInt@c,w
  4240  0114  1903               	btfsc	3,2
  4241  0115  2937               	goto	l2045
  4242                           
  4243                           ;lcd_hd44780_pic16.c: 303: {
  4244                           ;lcd_hd44780_pic16.c: 304: val -= c * 100 ;
  4245  0116  0832               	movf	LCDWriteInt@c,w
  4246  0117  00A5               	movwf	??_LCDWriteInt
  4247  0118  01A6               	clrf	??_LCDWriteInt+1
  4248  0119  0825               	movf	??_LCDWriteInt,w
  4249  011A  00FA               	movwf	___wmul@multiplier
  4250  011B  0826               	movf	??_LCDWriteInt+1,w
  4251  011C  00FB               	movwf	___wmul@multiplier+1
  4252  011D  3064               	movlw	100
  4253  011E  00FC               	movwf	___wmul@multiplicand
  4254  011F  3000               	movlw	0
  4255  0120  00FD               	movwf	___wmul@multiplicand+1
  4256  0121  120A  158A  2250  120A  118A  	fcall	___wmul
  4257  0126  087A               	movf	?___wmul,w
  4258  0127  1283               	bcf	3,5	;RP0=0, select bank0
  4259  0128  1303               	bcf	3,6	;RP1=0, select bank0
  4260  0129  02A2               	subwf	LCDWriteInt@val,f
  4261  012A  087B               	movf	?___wmul+1,w
  4262  012B  1C03               	skipc
  4263  012C  03A3               	decf	LCDWriteInt@val+1,f
  4264  012D  02A3               	subwf	LCDWriteInt@val+1,f
  4265                           
  4266                           ;lcd_hd44780_pic16.c: 305: if (from == 5)
  4267  012E  3005               	movlw	5
  4268  012F  0630               	xorwf	LCDWriteInt@from,w
  4269  0130  0431               	iorwf	LCDWriteInt@from+1,w
  4270  0131  1D03               	btfss	3,2
  4271  0132  2937               	goto	l2045
  4272                           
  4273                           ;lcd_hd44780_pic16.c: 306: from = 2 ;
  4274  0133  3002               	movlw	2
  4275  0134  00B0               	movwf	LCDWriteInt@from
  4276  0135  3000               	movlw	0
  4277  0136  00B1               	movwf	LCDWriteInt@from+1
  4278  0137                     l2045:	
  4279                           
  4280                           ;lcd_hd44780_pic16.c: 307: }
  4281                           ;lcd_hd44780_pic16.c: 308: str[2] = c + 0x30 ;
  4282  0137  0832               	movf	LCDWriteInt@c,w
  4283  0138  3E30               	addlw	48
  4284  0139  00A5               	movwf	??_LCDWriteInt
  4285  013A  0825               	movf	??_LCDWriteInt,w
  4286  013B  00AC               	movwf	LCDWriteInt@str+2
  4287                           
  4288                           ;lcd_hd44780_pic16.c: 309: c = val / 10 ;
  4289  013C  300A               	movlw	10
  4290  013D  00F1               	movwf	___awdiv@divisor
  4291  013E  3000               	movlw	0
  4292  013F  00F2               	movwf	___awdiv@divisor+1
  4293  0140  0823               	movf	LCDWriteInt@val+1,w
  4294  0141  00F4               	movwf	___awdiv@dividend+1
  4295  0142  0822               	movf	LCDWriteInt@val,w
  4296  0143  00F3               	movwf	___awdiv@dividend
  4297  0144  120A  158A  2561  120A  118A  	fcall	___awdiv
  4298  0149  0871               	movf	?___awdiv,w
  4299  014A  1283               	bcf	3,5	;RP0=0, select bank0
  4300  014B  1303               	bcf	3,6	;RP1=0, select bank0
  4301  014C  00A5               	movwf	??_LCDWriteInt
  4302  014D  0825               	movf	??_LCDWriteInt,w
  4303  014E  00B2               	movwf	LCDWriteInt@c
  4304                           
  4305                           ;lcd_hd44780_pic16.c: 310: if (c)
  4306  014F  0832               	movf	LCDWriteInt@c,w
  4307  0150  1903               	btfsc	3,2
  4308  0151  2973               	goto	l2057
  4309                           
  4310                           ;lcd_hd44780_pic16.c: 311: {
  4311                           ;lcd_hd44780_pic16.c: 312: val -= c * 10 ;
  4312  0152  0832               	movf	LCDWriteInt@c,w
  4313  0153  00A5               	movwf	??_LCDWriteInt
  4314  0154  01A6               	clrf	??_LCDWriteInt+1
  4315  0155  0825               	movf	??_LCDWriteInt,w
  4316  0156  00FA               	movwf	___wmul@multiplier
  4317  0157  0826               	movf	??_LCDWriteInt+1,w
  4318  0158  00FB               	movwf	___wmul@multiplier+1
  4319  0159  300A               	movlw	10
  4320  015A  00FC               	movwf	___wmul@multiplicand
  4321  015B  3000               	movlw	0
  4322  015C  00FD               	movwf	___wmul@multiplicand+1
  4323  015D  120A  158A  2250  120A  118A  	fcall	___wmul
  4324  0162  087A               	movf	?___wmul,w
  4325  0163  1283               	bcf	3,5	;RP0=0, select bank0
  4326  0164  1303               	bcf	3,6	;RP1=0, select bank0
  4327  0165  02A2               	subwf	LCDWriteInt@val,f
  4328  0166  087B               	movf	?___wmul+1,w
  4329  0167  1C03               	skipc
  4330  0168  03A3               	decf	LCDWriteInt@val+1,f
  4331  0169  02A3               	subwf	LCDWriteInt@val+1,f
  4332                           
  4333                           ;lcd_hd44780_pic16.c: 313: if (from == 5)
  4334  016A  3005               	movlw	5
  4335  016B  0630               	xorwf	LCDWriteInt@from,w
  4336  016C  0431               	iorwf	LCDWriteInt@from+1,w
  4337  016D  1D03               	btfss	3,2
  4338  016E  2973               	goto	l2057
  4339                           
  4340                           ;lcd_hd44780_pic16.c: 314: from = 3 ;
  4341  016F  3003               	movlw	3
  4342  0170  00B0               	movwf	LCDWriteInt@from
  4343  0171  3000               	movlw	0
  4344  0172  00B1               	movwf	LCDWriteInt@from+1
  4345  0173                     l2057:	
  4346                           
  4347                           ;lcd_hd44780_pic16.c: 315: }
  4348                           ;lcd_hd44780_pic16.c: 316: str[3] = c + 0x30 ;
  4349  0173  0832               	movf	LCDWriteInt@c,w
  4350  0174  3E30               	addlw	48
  4351  0175  00A5               	movwf	??_LCDWriteInt
  4352  0176  0825               	movf	??_LCDWriteInt,w
  4353  0177  00AD               	movwf	LCDWriteInt@str+3
  4354                           
  4355                           ;lcd_hd44780_pic16.c: 317: if (from == 5)
  4356  0178  3005               	movlw	5
  4357  0179  0630               	xorwf	LCDWriteInt@from,w
  4358  017A  0431               	iorwf	LCDWriteInt@from+1,w
  4359  017B  1D03               	btfss	3,2
  4360  017C  2981               	goto	l2063
  4361                           
  4362                           ;lcd_hd44780_pic16.c: 318: from = 4 ;
  4363  017D  3004               	movlw	4
  4364  017E  00B0               	movwf	LCDWriteInt@from
  4365  017F  3000               	movlw	0
  4366  0180  00B1               	movwf	LCDWriteInt@from+1
  4367  0181                     l2063:	
  4368                           
  4369                           ;lcd_hd44780_pic16.c: 319: str[4] = (char)(val + 0x30) ;
  4370  0181  0822               	movf	LCDWriteInt@val,w
  4371  0182  3E30               	addlw	48
  4372  0183  00A5               	movwf	??_LCDWriteInt
  4373  0184  0825               	movf	??_LCDWriteInt,w
  4374  0185  00AE               	movwf	LCDWriteInt@str+4
  4375                           
  4376                           ;lcd_hd44780_pic16.c: 321: if (from < field_length)
  4377  0186  0824               	movf	LCDWriteInt@field_length,w
  4378  0187  00A5               	movwf	??_LCDWriteInt
  4379  0188  01A6               	clrf	??_LCDWriteInt+1
  4380  0189  1BA5               	btfsc	??_LCDWriteInt,7
  4381  018A  03A6               	decf	??_LCDWriteInt+1,f
  4382  018B  0831               	movf	LCDWriteInt@from+1,w
  4383  018C  3A80               	xorlw	128
  4384  018D  00A7               	movwf	??_LCDWriteInt+2
  4385  018E  0826               	movf	??_LCDWriteInt+1,w
  4386  018F  3A80               	xorlw	128
  4387  0190  0227               	subwf	??_LCDWriteInt+2,w
  4388  0191  1D03               	skipz
  4389  0192  2995               	goto	u1695
  4390  0193  0825               	movf	??_LCDWriteInt,w
  4391  0194  0230               	subwf	LCDWriteInt@from,w
  4392  0195                     u1695:	
  4393  0195  1803               	skipnc
  4394  0196  299D               	goto	l2069
  4395                           
  4396                           ;lcd_hd44780_pic16.c: 322: field_length = from ;
  4397  0197  1283               	bcf	3,5	;RP0=0, select bank0
  4398  0198  1303               	bcf	3,6	;RP1=0, select bank0
  4399  0199  0830               	movf	LCDWriteInt@from,w
  4400  019A  00A5               	movwf	??_LCDWriteInt
  4401  019B  0825               	movf	??_LCDWriteInt,w
  4402  019C  00A4               	movwf	LCDWriteInt@field_length
  4403  019D                     l2069:	
  4404                           
  4405                           ;lcd_hd44780_pic16.c: 324: LCDWriteString(&str[field_length]) ;
  4406  019D  1283               	bcf	3,5	;RP0=0, select bank0
  4407  019E  1303               	bcf	3,6	;RP1=0, select bank0
  4408  019F  0824               	movf	LCDWriteInt@field_length,w
  4409  01A0  3E2A               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4410  01A1  00A0               	movwf	LCDWriteString@msg
  4411  01A2  3000               	movlw	0
  4412  01A3  00A1               	movwf	LCDWriteString@msg+1
  4413  01A4  120A  158A  2229   	fcall	_LCDWriteString
  4414  01A7  0008               	return
  4415  01A8                     __end_of_LCDWriteInt:	
  4416                           
  4417                           	psect	text11
  4418  0A50                     __ptext11:	
  4419 ;; *************** function ___wmul *****************
  4420 ;; Defined at:
  4421 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;  multiplier      2    9[COMMON] unsigned int 
  4424 ;;  multiplicand    2   11[COMMON] unsigned int 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;  product         2    0[BANK0 ] unsigned int 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  2    9[COMMON] unsigned int 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4436 ;;      Params:         4       0       0       0       0
  4437 ;;      Locals:         0       2       0       0       0
  4438 ;;      Temps:          0       0       0       0       0
  4439 ;;      Totals:         4       2       0       0       0
  4440 ;;Total ram usage:        6 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; This function calls:
  4443 ;;		Nothing
  4444 ;; This function is called by:
  4445 ;;		_LCDWriteInt
  4446 ;;		_main
  4447 ;;		_readClock
  4448 ;;		_showDate
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           
  4453                           ;psect for function ___wmul
  4454  0A50                     ___wmul:	
  4455                           
  4456                           ;incstack = 0
  4457                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4458  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  4459  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  4460  0A52  01A0               	clrf	___wmul@product
  4461  0A53  01A1               	clrf	___wmul@product+1
  4462  0A54                     l1925:	
  4463  0A54  1C7A               	btfss	___wmul@multiplier,0
  4464  0A55  2A5E               	goto	l471
  4465  0A56  087C               	movf	___wmul@multiplicand,w
  4466  0A57  1283               	bcf	3,5	;RP0=0, select bank0
  4467  0A58  1303               	bcf	3,6	;RP1=0, select bank0
  4468  0A59  07A0               	addwf	___wmul@product,f
  4469  0A5A  1803               	skipnc
  4470  0A5B  0AA1               	incf	___wmul@product+1,f
  4471  0A5C  087D               	movf	___wmul@multiplicand+1,w
  4472  0A5D  07A1               	addwf	___wmul@product+1,f
  4473  0A5E                     l471:	
  4474  0A5E  3001               	movlw	1
  4475  0A5F                     u1485:	
  4476  0A5F  1003               	clrc
  4477  0A60  0DFC               	rlf	___wmul@multiplicand,f
  4478  0A61  0DFD               	rlf	___wmul@multiplicand+1,f
  4479  0A62  3EFF               	addlw	-1
  4480  0A63  1D03               	skipz
  4481  0A64  2A5F               	goto	u1485
  4482  0A65  3001               	movlw	1
  4483  0A66                     u1495:	
  4484  0A66  1003               	clrc
  4485  0A67  0CFB               	rrf	___wmul@multiplier+1,f
  4486  0A68  0CFA               	rrf	___wmul@multiplier,f
  4487  0A69  3EFF               	addlw	-1
  4488  0A6A  1D03               	skipz
  4489  0A6B  2A66               	goto	u1495
  4490  0A6C  087A               	movf	___wmul@multiplier,w
  4491  0A6D  047B               	iorwf	___wmul@multiplier+1,w
  4492  0A6E  1D03               	btfss	3,2
  4493  0A6F  2A54               	goto	l1925
  4494  0A70  1283               	bcf	3,5	;RP0=0, select bank0
  4495  0A71  1303               	bcf	3,6	;RP1=0, select bank0
  4496  0A72  0821               	movf	___wmul@product+1,w
  4497  0A73  00FB               	movwf	?___wmul+1
  4498  0A74  0820               	movf	___wmul@product,w
  4499  0A75  00FA               	movwf	?___wmul
  4500  0A76  0008               	return
  4501  0A77                     __end_of___wmul:	
  4502                           
  4503                           	psect	text12
  4504  0D61                     __ptext12:	
  4505 ;; *************** function ___awdiv *****************
  4506 ;; Defined at:
  4507 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  divisor         2    0[COMMON] int 
  4510 ;;  dividend        2    2[COMMON] int 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  quotient        2    7[COMMON] int 
  4513 ;;  sign            1    6[COMMON] unsigned char 
  4514 ;;  counter         1    5[COMMON] unsigned char 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  2    0[COMMON] int 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, status,0
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4524 ;;      Params:         4       0       0       0       0
  4525 ;;      Locals:         4       0       0       0       0
  4526 ;;      Temps:          1       0       0       0       0
  4527 ;;      Totals:         9       0       0       0       0
  4528 ;;Total ram usage:        9 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_LCDWriteInt
  4534 ;;		_doMenu
  4535 ;;		_readClock
  4536 ;;		_showRunningTime
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           
  4541                           ;psect for function ___awdiv
  4542  0D61                     ___awdiv:	
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4546  0D61  01F7               	clrf	___awdiv@sign
  4547  0D62  1FF2               	btfss	___awdiv@divisor+1,7
  4548  0D63  2D6B               	goto	l1945
  4549  0D64  09F1               	comf	___awdiv@divisor,f
  4550  0D65  09F2               	comf	___awdiv@divisor+1,f
  4551  0D66  0AF1               	incf	___awdiv@divisor,f
  4552  0D67  1903               	skipnz
  4553  0D68  0AF2               	incf	___awdiv@divisor+1,f
  4554  0D69  01F7               	clrf	___awdiv@sign
  4555  0D6A  0AF7               	incf	___awdiv@sign,f
  4556  0D6B                     l1945:	
  4557  0D6B  1FF4               	btfss	___awdiv@dividend+1,7
  4558  0D6C  2D76               	goto	l1951
  4559  0D6D  09F3               	comf	___awdiv@dividend,f
  4560  0D6E  09F4               	comf	___awdiv@dividend+1,f
  4561  0D6F  0AF3               	incf	___awdiv@dividend,f
  4562  0D70  1903               	skipnz
  4563  0D71  0AF4               	incf	___awdiv@dividend+1,f
  4564  0D72  3001               	movlw	1
  4565  0D73  00F5               	movwf	??___awdiv
  4566  0D74  0875               	movf	??___awdiv,w
  4567  0D75  06F7               	xorwf	___awdiv@sign,f
  4568  0D76                     l1951:	
  4569  0D76  01F8               	clrf	___awdiv@quotient
  4570  0D77  01F9               	clrf	___awdiv@quotient+1
  4571  0D78  0871               	movf	___awdiv@divisor,w
  4572  0D79  0472               	iorwf	___awdiv@divisor+1,w
  4573  0D7A  1903               	btfsc	3,2
  4574  0D7B  2DAD               	goto	l1973
  4575  0D7C  01F6               	clrf	___awdiv@counter
  4576  0D7D  0AF6               	incf	___awdiv@counter,f
  4577  0D7E                     l1961:	
  4578  0D7E  1BF2               	btfsc	___awdiv@divisor+1,7
  4579  0D7F  2D8C               	goto	l1963
  4580  0D80  3001               	movlw	1
  4581  0D81                     u1545:	
  4582  0D81  1003               	clrc
  4583  0D82  0DF1               	rlf	___awdiv@divisor,f
  4584  0D83  0DF2               	rlf	___awdiv@divisor+1,f
  4585  0D84  3EFF               	addlw	-1
  4586  0D85  1D03               	skipz
  4587  0D86  2D81               	goto	u1545
  4588  0D87  3001               	movlw	1
  4589  0D88  00F5               	movwf	??___awdiv
  4590  0D89  0875               	movf	??___awdiv,w
  4591  0D8A  07F6               	addwf	___awdiv@counter,f
  4592  0D8B  2D7E               	goto	l1961
  4593  0D8C                     l1963:	
  4594  0D8C  3001               	movlw	1
  4595  0D8D                     u1565:	
  4596  0D8D  1003               	clrc
  4597  0D8E  0DF8               	rlf	___awdiv@quotient,f
  4598  0D8F  0DF9               	rlf	___awdiv@quotient+1,f
  4599  0D90  3EFF               	addlw	-1
  4600  0D91  1D03               	skipz
  4601  0D92  2D8D               	goto	u1565
  4602  0D93  0872               	movf	___awdiv@divisor+1,w
  4603  0D94  0274               	subwf	___awdiv@dividend+1,w
  4604  0D95  1D03               	skipz
  4605  0D96  2D99               	goto	u1575
  4606  0D97  0871               	movf	___awdiv@divisor,w
  4607  0D98  0273               	subwf	___awdiv@dividend,w
  4608  0D99                     u1575:	
  4609  0D99  1C03               	skipc
  4610  0D9A  2DA2               	goto	l1969
  4611  0D9B  0871               	movf	___awdiv@divisor,w
  4612  0D9C  02F3               	subwf	___awdiv@dividend,f
  4613  0D9D  0872               	movf	___awdiv@divisor+1,w
  4614  0D9E  1C03               	skipc
  4615  0D9F  03F4               	decf	___awdiv@dividend+1,f
  4616  0DA0  02F4               	subwf	___awdiv@dividend+1,f
  4617  0DA1  1478               	bsf	___awdiv@quotient,0
  4618  0DA2                     l1969:	
  4619  0DA2  3001               	movlw	1
  4620  0DA3                     u1585:	
  4621  0DA3  1003               	clrc
  4622  0DA4  0CF2               	rrf	___awdiv@divisor+1,f
  4623  0DA5  0CF1               	rrf	___awdiv@divisor,f
  4624  0DA6  3EFF               	addlw	-1
  4625  0DA7  1D03               	skipz
  4626  0DA8  2DA3               	goto	u1585
  4627  0DA9  3001               	movlw	1
  4628  0DAA  02F6               	subwf	___awdiv@counter,f
  4629  0DAB  1D03               	btfss	3,2
  4630  0DAC  2D8C               	goto	l1963
  4631  0DAD                     l1973:	
  4632  0DAD  0877               	movf	___awdiv@sign,w
  4633  0DAE  1903               	btfsc	3,2
  4634  0DAF  2DB5               	goto	l1977
  4635  0DB0  09F8               	comf	___awdiv@quotient,f
  4636  0DB1  09F9               	comf	___awdiv@quotient+1,f
  4637  0DB2  0AF8               	incf	___awdiv@quotient,f
  4638  0DB3  1903               	skipnz
  4639  0DB4  0AF9               	incf	___awdiv@quotient+1,f
  4640  0DB5                     l1977:	
  4641  0DB5  0879               	movf	___awdiv@quotient+1,w
  4642  0DB6  00F2               	movwf	?___awdiv+1
  4643  0DB7  0878               	movf	___awdiv@quotient,w
  4644  0DB8  00F1               	movwf	?___awdiv
  4645  0DB9  0008               	return
  4646  0DBA                     __end_of___awdiv:	
  4647                           
  4648                           	psect	text13
  4649  0AF7                     __ptext13:	
  4650 ;; *************** function _readInputs *****************
  4651 ;; Defined at:
  4652 ;;		line 408 in file "LCDTime.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;		None
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;  pinstate        1    3[COMMON] unsigned char 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      void 
  4659 ;; Registers used:
  4660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4666 ;;      Params:         0       0       0       0       0
  4667 ;;      Locals:         1       0       0       0       0
  4668 ;;      Temps:          3       0       0       0       0
  4669 ;;      Totals:         4       0       0       0       0
  4670 ;;Total ram usage:        4 bytes
  4671 ;; Hardware stack levels used:    2
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_main
  4676 ;;		_doMenu
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           
  4681                           ;psect for function _readInputs
  4682  0AF7                     _readInputs:	
  4683                           
  4684                           ;LCDTime.c: 410: bButton = 0 ;
  4685                           
  4686                           ;incstack = 0
  4687                           ; Regs used in _readInputs: [wreg-fsr0h+status,2+status,0+pclath]
  4688  0AF7  1283               	bcf	3,5	;RP0=0, select bank0
  4689  0AF8  1303               	bcf	3,6	;RP1=0, select bank0
  4690  0AF9  01E4               	clrf	_bButton
  4691                           
  4692                           ;LCDTime.c: 412: if (RB4 == 1)
  4693  0AFA  1E06               	btfss	6,4	;volatile
  4694  0AFB  2B08               	goto	l2223
  4695                           
  4696                           ;LCDTime.c: 413: {
  4697                           ;LCDTime.c: 414: _delay((unsigned long)((15)*(4000000/4000000.0))) ;
  4698  0AFC  3004               	movlw	4
  4699  0AFD  00F1               	movwf	??_readInputs
  4700  0AFE                     u2617:	
  4701  0AFE  0BF1               	decfsz	??_readInputs,f
  4702  0AFF  2AFE               	goto	u2617
  4703  0B00  2B01               	nop2	;nop
  4704                           
  4705                           ;LCDTime.c: 415: if (RB4 == 1)
  4706  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  4707  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  4708  0B03  1E06               	btfss	6,4	;volatile
  4709  0B04  2B08               	goto	l2223
  4710                           
  4711                           ;LCDTime.c: 416: {
  4712                           ;LCDTime.c: 417: bButton = 1 ;
  4713  0B05  01E4               	clrf	_bButton
  4714  0B06  0AE4               	incf	_bButton,f
  4715                           
  4716                           ;LCDTime.c: 418: return ;
  4717  0B07  0008               	return
  4718  0B08                     l2223:	
  4719                           
  4720                           ;LCDTime.c: 419: }
  4721                           ;LCDTime.c: 420: }
  4722                           ;LCDTime.c: 423: unsigned char pinstate = (RB1 << 1) | RB2 ;
  4723  0B08  3000               	movlw	0
  4724  0B09  1886               	btfsc	6,1	;volatile
  4725  0B0A  3002               	movlw	2
  4726  0B0B  1906               	btfsc	6,2	;volatile
  4727  0B0C  3801               	iorlw	1
  4728  0B0D  00F1               	movwf	??_readInputs
  4729  0B0E  0871               	movf	??_readInputs,w
  4730  0B0F  00F4               	movwf	readInputs@pinstate
  4731                           
  4732                           ;LCDTime.c: 425: state = ttable[state & 0xf][pinstate];
  4733  0B10  0865               	movf	_state,w
  4734  0B11  390F               	andlw	15
  4735  0B12  00F1               	movwf	??_readInputs
  4736  0B13  3002               	movlw	2
  4737  0B14                     u1835:	
  4738  0B14  1003               	clrc
  4739  0B15  0DF1               	rlf	??_readInputs,f
  4740  0B16  3EFF               	addlw	-1
  4741  0B17  1D03               	skipz
  4742  0B18  2B14               	goto	u1835
  4743  0B19  3001               	movlw	(low ((_ttable-__stringbase)| (0+32768)))& (0+255)
  4744  0B1A  0771               	addwf	??_readInputs,w
  4745  0B1B  00F2               	movwf	??_readInputs+1
  4746  0B1C  0874               	movf	readInputs@pinstate,w
  4747  0B1D  0772               	addwf	??_readInputs+1,w
  4748  0B1E  0084               	movwf	4
  4749  0B1F  120A  158A  200A   	fcall	stringdir
  4750  0B22  00F3               	movwf	??_readInputs+2
  4751  0B23  0873               	movf	??_readInputs+2,w
  4752  0B24  00E5               	movwf	_state
  4753  0B25  0008               	return
  4754  0B26                     __end_of_readInputs:	
  4755                           
  4756                           	psect	text14
  4757  0BD4                     __ptext14:	
  4758 ;; *************** function ___awmod *****************
  4759 ;; Defined at:
  4760 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  divisor         2    0[COMMON] int 
  4763 ;;  dividend        2    2[COMMON] int 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  sign            1    6[COMMON] unsigned char 
  4766 ;;  counter         1    5[COMMON] unsigned char 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  2    0[COMMON] int 
  4769 ;; Registers used:
  4770 ;;		wreg, status,2, status,0
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4776 ;;      Params:         4       0       0       0       0
  4777 ;;      Locals:         2       0       0       0       0
  4778 ;;      Temps:          1       0       0       0       0
  4779 ;;      Totals:         7       0       0       0       0
  4780 ;;Total ram usage:        7 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_doMenu
  4786 ;;		_showRunningTime
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           
  4791                           ;psect for function ___awmod
  4792  0BD4                     ___awmod:	
  4793                           
  4794                           ;incstack = 0
  4795                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4796  0BD4  01F7               	clrf	___awmod@sign
  4797  0BD5  1FF4               	btfss	___awmod@dividend+1,7
  4798  0BD6  2BDE               	goto	l2093
  4799  0BD7  09F3               	comf	___awmod@dividend,f
  4800  0BD8  09F4               	comf	___awmod@dividend+1,f
  4801  0BD9  0AF3               	incf	___awmod@dividend,f
  4802  0BDA  1903               	skipnz
  4803  0BDB  0AF4               	incf	___awmod@dividend+1,f
  4804  0BDC  01F7               	clrf	___awmod@sign
  4805  0BDD  0AF7               	incf	___awmod@sign,f
  4806  0BDE                     l2093:	
  4807  0BDE  1FF2               	btfss	___awmod@divisor+1,7
  4808  0BDF  2BE5               	goto	l2097
  4809  0BE0  09F1               	comf	___awmod@divisor,f
  4810  0BE1  09F2               	comf	___awmod@divisor+1,f
  4811  0BE2  0AF1               	incf	___awmod@divisor,f
  4812  0BE3  1903               	skipnz
  4813  0BE4  0AF2               	incf	___awmod@divisor+1,f
  4814  0BE5                     l2097:	
  4815  0BE5  0871               	movf	___awmod@divisor,w
  4816  0BE6  0472               	iorwf	___awmod@divisor+1,w
  4817  0BE7  1903               	btfsc	3,2
  4818  0BE8  2C12               	goto	l2115
  4819  0BE9  01F6               	clrf	___awmod@counter
  4820  0BEA  0AF6               	incf	___awmod@counter,f
  4821  0BEB                     l2105:	
  4822  0BEB  1BF2               	btfsc	___awmod@divisor+1,7
  4823  0BEC  2BF9               	goto	l2107
  4824  0BED  3001               	movlw	1
  4825  0BEE                     u1745:	
  4826  0BEE  1003               	clrc
  4827  0BEF  0DF1               	rlf	___awmod@divisor,f
  4828  0BF0  0DF2               	rlf	___awmod@divisor+1,f
  4829  0BF1  3EFF               	addlw	-1
  4830  0BF2  1D03               	skipz
  4831  0BF3  2BEE               	goto	u1745
  4832  0BF4  3001               	movlw	1
  4833  0BF5  00F5               	movwf	??___awmod
  4834  0BF6  0875               	movf	??___awmod,w
  4835  0BF7  07F6               	addwf	___awmod@counter,f
  4836  0BF8  2BEB               	goto	l2105
  4837  0BF9                     l2107:	
  4838  0BF9  0872               	movf	___awmod@divisor+1,w
  4839  0BFA  0274               	subwf	___awmod@dividend+1,w
  4840  0BFB  1D03               	skipz
  4841  0BFC  2BFF               	goto	u1765
  4842  0BFD  0871               	movf	___awmod@divisor,w
  4843  0BFE  0273               	subwf	___awmod@dividend,w
  4844  0BFF                     u1765:	
  4845  0BFF  1C03               	skipc
  4846  0C00  2C07               	goto	l2111
  4847  0C01  0871               	movf	___awmod@divisor,w
  4848  0C02  02F3               	subwf	___awmod@dividend,f
  4849  0C03  0872               	movf	___awmod@divisor+1,w
  4850  0C04  1C03               	skipc
  4851  0C05  03F4               	decf	___awmod@dividend+1,f
  4852  0C06  02F4               	subwf	___awmod@dividend+1,f
  4853  0C07                     l2111:	
  4854  0C07  3001               	movlw	1
  4855  0C08                     u1775:	
  4856  0C08  1003               	clrc
  4857  0C09  0CF2               	rrf	___awmod@divisor+1,f
  4858  0C0A  0CF1               	rrf	___awmod@divisor,f
  4859  0C0B  3EFF               	addlw	-1
  4860  0C0C  1D03               	skipz
  4861  0C0D  2C08               	goto	u1775
  4862  0C0E  3001               	movlw	1
  4863  0C0F  02F6               	subwf	___awmod@counter,f
  4864  0C10  1D03               	btfss	3,2
  4865  0C11  2BF9               	goto	l2107
  4866  0C12                     l2115:	
  4867  0C12  0877               	movf	___awmod@sign,w
  4868  0C13  1903               	btfsc	3,2
  4869  0C14  2C1A               	goto	l2119
  4870  0C15  09F3               	comf	___awmod@dividend,f
  4871  0C16  09F4               	comf	___awmod@dividend+1,f
  4872  0C17  0AF3               	incf	___awmod@dividend,f
  4873  0C18  1903               	skipnz
  4874  0C19  0AF4               	incf	___awmod@dividend+1,f
  4875  0C1A                     l2119:	
  4876  0C1A  0874               	movf	___awmod@dividend+1,w
  4877  0C1B  00F2               	movwf	?___awmod+1
  4878  0C1C  0873               	movf	___awmod@dividend,w
  4879  0C1D  00F1               	movwf	?___awmod
  4880  0C1E  0008               	return
  4881  0C1F                     __end_of___awmod:	
  4882                           
  4883                           	psect	text15
  4884  0A77                     __ptext15:	
  4885 ;; *************** function _DS1307_SetTime *****************
  4886 ;; Defined at:
  4887 ;;		line 43 in file "DS1307.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;  hh              1    wreg     unsigned char 
  4890 ;;  mm              1    5[COMMON] unsigned char 
  4891 ;;  ss              1    6[COMMON] unsigned char 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  hh              1    7[COMMON] unsigned char 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2, status,0, pclath, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4903 ;;      Params:         2       0       0       0       0
  4904 ;;      Locals:         1       0       0       0       0
  4905 ;;      Temps:          0       0       0       0       0
  4906 ;;      Totals:         3       0       0       0       0
  4907 ;;Total ram usage:        3 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    3
  4910 ;; This function calls:
  4911 ;;		_DS1307_Write
  4912 ;;		_I2C_Start
  4913 ;;		_I2C_Stop
  4914 ;; This function is called by:
  4915 ;;		_doMenu
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function _DS1307_SetTime
  4921  0A77                     _DS1307_SetTime:	
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in _DS1307_SetTime: [wreg+status,2+status,0+pclath+cstack]
  4925                           ;DS1307_SetTime@hh stored from wreg
  4926  0A77  00F8               	movwf	DS1307_SetTime@hh
  4927                           
  4928                           ;DS1307.c: 45: I2C_Start();
  4929  0A78  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  4930                           
  4931                           ;DS1307.c: 46: DS1307_Write(0xD0);
  4932  0A7D  30D0               	movlw	208
  4933  0A7E  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  4934                           
  4935                           ;DS1307.c: 47: DS1307_Write(0x00);
  4936  0A83  3000               	movlw	0
  4937  0A84  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  4938                           
  4939                           ;DS1307.c: 48: DS1307_Write(ss);
  4940  0A89  0877               	movf	DS1307_SetTime@ss,w
  4941  0A8A  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  4942                           
  4943                           ;DS1307.c: 49: DS1307_Write(mm);
  4944  0A8F  0876               	movf	DS1307_SetTime@mm,w
  4945  0A90  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  4946                           
  4947                           ;DS1307.c: 50: DS1307_Write(hh);
  4948  0A95  0878               	movf	DS1307_SetTime@hh,w
  4949  0A96  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  4950                           
  4951                           ;DS1307.c: 51: I2C_Stop();
  4952  0A9B  120A  158A  215A   	fcall	_I2C_Stop
  4953  0A9E  0008               	return
  4954  0A9F                     __end_of_DS1307_SetTime:	
  4955                           
  4956                           	psect	text16
  4957  0AC9                     __ptext16:	
  4958 ;; *************** function _DS1307_SetDate *****************
  4959 ;; Defined at:
  4960 ;;		line 54 in file "DS1307.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  nn              1    wreg     unsigned char 
  4963 ;;  dd              1    5[COMMON] unsigned char 
  4964 ;;  mm              1    6[COMMON] unsigned char 
  4965 ;;  yy              1    7[COMMON] unsigned char 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  nn              1    8[COMMON] unsigned char 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  1    wreg      void 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0, pclath, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4977 ;;      Params:         3       0       0       0       0
  4978 ;;      Locals:         1       0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0
  4980 ;;      Totals:         4       0       0       0       0
  4981 ;;Total ram usage:        4 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    3
  4984 ;; This function calls:
  4985 ;;		_DS1307_Write
  4986 ;;		_I2C_Start
  4987 ;;		_I2C_Stop
  4988 ;; This function is called by:
  4989 ;;		_doMenu
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           
  4994                           ;psect for function _DS1307_SetDate
  4995  0AC9                     _DS1307_SetDate:	
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _DS1307_SetDate: [wreg+status,2+status,0+pclath+cstack]
  4999                           ;DS1307_SetDate@nn stored from wreg
  5000  0AC9  00F9               	movwf	DS1307_SetDate@nn
  5001                           
  5002                           ;DS1307.c: 56: I2C_Start();
  5003  0ACA  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  5004                           
  5005                           ;DS1307.c: 57: DS1307_Write(0xD0);
  5006  0ACF  30D0               	movlw	208
  5007  0AD0  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  5008                           
  5009                           ;DS1307.c: 58: DS1307_Write(0x03);
  5010  0AD5  3003               	movlw	3
  5011  0AD6  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  5012                           
  5013                           ;DS1307.c: 59: DS1307_Write(nn);
  5014  0ADB  0879               	movf	DS1307_SetDate@nn,w
  5015  0ADC  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  5016                           
  5017                           ;DS1307.c: 60: DS1307_Write(dd);
  5018  0AE1  0876               	movf	DS1307_SetDate@dd,w
  5019  0AE2  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  5020                           
  5021                           ;DS1307.c: 61: DS1307_Write(mm);
  5022  0AE7  0877               	movf	DS1307_SetDate@mm,w
  5023  0AE8  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  5024                           
  5025                           ;DS1307.c: 62: DS1307_Write(yy);
  5026  0AED  0878               	movf	DS1307_SetDate@yy,w
  5027  0AEE  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  5028                           
  5029                           ;DS1307.c: 63: I2C_Stop();
  5030  0AF3  120A  158A  215A   	fcall	_I2C_Stop
  5031  0AF6  0008               	return
  5032  0AF7                     __end_of_DS1307_SetDate:	
  5033                           
  5034                           	psect	text17
  5035  098C                     __ptext17:	
  5036 ;; *************** function _clearPrompt *****************
  5037 ;; Defined at:
  5038 ;;		line 127 in file "LCDTime.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;		None
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5052 ;;      Params:         0       0       0       0       0
  5053 ;;      Locals:         0       0       0       0       0
  5054 ;;      Temps:          0       0       0       0       0
  5055 ;;      Totals:         0       0       0       0       0
  5056 ;;Total ram usage:        0 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    3
  5059 ;; This function calls:
  5060 ;;		_LCDGotoXY
  5061 ;;		_LCDWriteString
  5062 ;; This function is called by:
  5063 ;;		_main
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           
  5068                           ;psect for function _clearPrompt
  5069  098C                     _clearPrompt:	
  5070                           
  5071                           ;LCDTime.c: 129: next_menu_clear = 0 ;
  5072                           
  5073                           ;incstack = 0
  5074                           ; Regs used in _clearPrompt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5075  098C  1283               	bcf	3,5	;RP0=0, select bank0
  5076  098D  1303               	bcf	3,6	;RP1=0, select bank0
  5077  098E  01E2               	clrf	_next_menu_clear
  5078  098F  01E3               	clrf	_next_menu_clear+1
  5079                           
  5080                           ;LCDTime.c: 130: menuFunction = 1 ;
  5081  0990  01E1               	clrf	_menuFunction
  5082  0991  0AE1               	incf	_menuFunction,f
  5083                           
  5084                           ;LCDTime.c: 131: LCDGotoXY(9,0);
  5085  0992  01FD               	clrf	LCDGotoXY@y
  5086  0993  3009               	movlw	9
  5087  0994  120A  158A  2203  120A  158A  	fcall	_LCDGotoXY
  5088                           
  5089                           ;LCDTime.c: 132: LCDWriteString("       ");
  5090  0999  3044               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  5091  099A  1283               	bcf	3,5	;RP0=0, select bank0
  5092  099B  1303               	bcf	3,6	;RP1=0, select bank0
  5093  099C  00A0               	movwf	LCDWriteString@msg
  5094  099D  3080               	movlw	128
  5095  099E  00A1               	movwf	LCDWriteString@msg+1
  5096  099F  120A  158A  2229   	fcall	_LCDWriteString
  5097  09A2  0008               	return
  5098  09A3                     __end_of_clearPrompt:	
  5099                           
  5100                           	psect	text18
  5101  0A29                     __ptext18:	
  5102 ;; *************** function _LCDWriteString *****************
  5103 ;; Defined at:
  5104 ;;		line 225 in file "lcd_hd44780_pic16.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;  msg             2    0[BANK0 ] PTR const unsigned char 
  5107 ;;		 -> STR_10(6), STR_9(6), STR_8(6), STR_7(5), 
  5108 ;;		 -> STR_6(8), STR_5(8), STR_4(6), setText(5), 
  5109 ;;		 -> STR_3(8), STR_2(7), STR_1(7), LCDWriteInt@str(6), 
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;		None
  5112 ;; Return value:  Size  Location     Type
  5113 ;;                  1    wreg      void 
  5114 ;; Registers used:
  5115 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5116 ;; Tracked objects:
  5117 ;;		On entry : 0/0
  5118 ;;		On exit  : 0/0
  5119 ;;		Unchanged: 0/0
  5120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5121 ;;      Params:         0       2       0       0       0
  5122 ;;      Locals:         0       0       0       0       0
  5123 ;;      Temps:          0       0       0       0       0
  5124 ;;      Totals:         0       2       0       0       0
  5125 ;;Total ram usage:        2 bytes
  5126 ;; Hardware stack levels used:    1
  5127 ;; Hardware stack levels required when called:    2
  5128 ;; This function calls:
  5129 ;;		_LCDByte
  5130 ;; This function is called by:
  5131 ;;		_LCDWriteInt
  5132 ;;		_main
  5133 ;;		_clearPrompt
  5134 ;;		_doMenu
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function _LCDWriteString
  5140  0A29                     _LCDWriteString:	
  5141  0A29                     l1921:	
  5142                           ;lcd_hd44780_pic16.c: 227: while(*msg!='\0')
  5143                           
  5144                           ;incstack = 0
  5145                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5146                           
  5147  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  5148  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  5149  0A2B  0821               	movf	LCDWriteString@msg+1,w
  5150  0A2C  00FF               	movwf	127
  5151  0A2D  0820               	movf	LCDWriteString@msg,w
  5152  0A2E  0084               	movwf	4
  5153  0A2F  120A  158A  2000  120A  158A  	fcall	stringtab
  5154  0A34  3A00               	xorlw	0
  5155  0A35  1903               	btfsc	3,2
  5156  0A36  0008               	return
  5157                           
  5158                           ;lcd_hd44780_pic16.c: 228: {
  5159                           ;lcd_hd44780_pic16.c: 229: (LCDByte(*msg,1));
  5160  0A37  01F6               	clrf	LCDByte@isdata
  5161  0A38  0AF6               	incf	LCDByte@isdata,f
  5162  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  5163  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  5164  0A3B  0821               	movf	LCDWriteString@msg+1,w
  5165  0A3C  00FF               	movwf	127
  5166  0A3D  0820               	movf	LCDWriteString@msg,w
  5167  0A3E  0084               	movwf	4
  5168  0A3F  120A  158A  2000  120A  158A  	fcall	stringtab
  5169  0A44  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  5170                           
  5171                           ;lcd_hd44780_pic16.c: 230: msg++;
  5172  0A49  3001               	movlw	1
  5173  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  5174  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  5175  0A4C  07A0               	addwf	LCDWriteString@msg,f
  5176  0A4D  1803               	skipnc
  5177  0A4E  0AA1               	incf	LCDWriteString@msg+1,f
  5178  0A4F  2A29               	goto	l1921
  5179  0A50                     __end_of_LCDWriteString:	
  5180                           
  5181                           	psect	text19
  5182  0A03                     __ptext19:	
  5183 ;; *************** function _LCDGotoXY *****************
  5184 ;; Defined at:
  5185 ;;		line 332 in file "lcd_hd44780_pic16.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  x               1    wreg     unsigned char 
  5188 ;;  y               1   12[COMMON] unsigned char 
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;  x               1    1[BANK0 ] unsigned char 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  1    wreg      void 
  5193 ;; Registers used:
  5194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5200 ;;      Params:         1       0       0       0       0
  5201 ;;      Locals:         0       1       0       0       0
  5202 ;;      Temps:          0       1       0       0       0
  5203 ;;      Totals:         1       2       0       0       0
  5204 ;;Total ram usage:        3 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    2
  5207 ;; This function calls:
  5208 ;;		_LCDByte
  5209 ;; This function is called by:
  5210 ;;		_main
  5211 ;;		_clearPrompt
  5212 ;;		_doMenu
  5213 ;;		_showClock
  5214 ;;		_showRunningTime
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217                           
  5218                           
  5219                           ;psect for function _LCDGotoXY
  5220  0A03                     _LCDGotoXY:	
  5221                           
  5222                           ;incstack = 0
  5223                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5224                           ;LCDGotoXY@x stored from wreg
  5225  0A03  1283               	bcf	3,5	;RP0=0, select bank0
  5226  0A04  1303               	bcf	3,6	;RP1=0, select bank0
  5227  0A05  00A1               	movwf	LCDGotoXY@x
  5228                           
  5229                           ;lcd_hd44780_pic16.c: 334: if(x>=20) return;
  5230  0A06  3014               	movlw	20
  5231  0A07  0221               	subwf	LCDGotoXY@x,w
  5232  0A08  1803               	btfsc	3,0
  5233  0A09  0008               	return
  5234  0A0A  2A14               	goto	l2081
  5235  0A0B                     l151:	
  5236                           ;lcd_hd44780_pic16.c: 342: case 1:
  5237                           
  5238                           ;lcd_hd44780_pic16.c: 341: break;
  5239                           
  5240                           ;lcd_hd44780_pic16.c: 339: {
  5241                           ;lcd_hd44780_pic16.c: 340: case 0:
  5242                           
  5243                           ;lcd_hd44780_pic16.c: 338: switch(y)
  5244                           
  5245                           
  5246                           ;lcd_hd44780_pic16.c: 343: x|=0b01000000;
  5247  0A0B  1721               	bsf	LCDGotoXY@x,6
  5248                           
  5249                           ;lcd_hd44780_pic16.c: 344: break;
  5250  0A0C  2A22               	goto	l150
  5251  0A0D                     l2075:	
  5252                           ;lcd_hd44780_pic16.c: 345: case 2:
  5253                           
  5254                           
  5255                           ;lcd_hd44780_pic16.c: 346: x+=0x14;
  5256  0A0D  3014               	movlw	20
  5257  0A0E  2A10               	goto	L6
  5258  0A0F                     l2077:	
  5259                           ;lcd_hd44780_pic16.c: 348: case 3:
  5260                           
  5261                           ;lcd_hd44780_pic16.c: 347: break;
  5262                           
  5263                           
  5264                           ;lcd_hd44780_pic16.c: 349: x+=0x54;
  5265  0A0F  3054               	movlw	84
  5266  0A10                     L6:	
  5267  0A10  00A0               	movwf	??_LCDGotoXY
  5268  0A11  0820               	movf	??_LCDGotoXY,w
  5269  0A12  07A1               	addwf	LCDGotoXY@x,f
  5270                           
  5271                           ;lcd_hd44780_pic16.c: 351: }
  5272                           
  5273                           ;lcd_hd44780_pic16.c: 350: break;
  5274  0A13  2A22               	goto	l150
  5275  0A14                     l2081:	
  5276  0A14  087D               	movf	LCDGotoXY@y,w
  5277                           
  5278                           ; Switch size 1, requested type "space"
  5279                           ; Number of cases is 4, Range of values is 0 to 3
  5280                           ; switch strategies available:
  5281                           ; Name         Instructions Cycles
  5282                           ; simple_byte           13     7 (average)
  5283                           ; direct_byte           20     8 (fixed)
  5284                           ; jumptable            260     6 (fixed)
  5285                           ;	Chosen strategy is simple_byte
  5286  0A15  3A00               	xorlw	0	; case 0
  5287  0A16  1903               	skipnz
  5288  0A17  2A22               	goto	l150
  5289  0A18  3A01               	xorlw	1	; case 1
  5290  0A19  1903               	skipnz
  5291  0A1A  2A0B               	goto	l151
  5292  0A1B  3A03               	xorlw	3	; case 2
  5293  0A1C  1903               	skipnz
  5294  0A1D  2A0D               	goto	l2075
  5295  0A1E  3A01               	xorlw	1	; case 3
  5296  0A1F  1903               	skipnz
  5297  0A20  2A0F               	goto	l2077
  5298  0A21  2A22               	goto	l150
  5299  0A22                     l150:	
  5300                           
  5301                           ;lcd_hd44780_pic16.c: 373: x|=0b10000000;
  5302  0A22  17A1               	bsf	LCDGotoXY@x,7
  5303                           
  5304                           ;lcd_hd44780_pic16.c: 374: (LCDByte(x,0));
  5305  0A23  01F6               	clrf	LCDByte@isdata
  5306  0A24  0821               	movf	LCDGotoXY@x,w
  5307  0A25  120A  158A  24BB   	fcall	_LCDByte
  5308  0A28  0008               	return
  5309  0A29                     __end_of_LCDGotoXY:	
  5310                           
  5311                           	psect	text20
  5312  0B5D                     __ptext20:	
  5313 ;; *************** function _LCDInit *****************
  5314 ;; Defined at:
  5315 ;;		line 167 in file "lcd_hd44780_pic16.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  style           1    wreg     unsigned char 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  style           1   12[COMMON] unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0, pclath, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5329 ;;      Params:         0       0       0       0       0
  5330 ;;      Locals:         1       0       0       0       0
  5331 ;;      Temps:          0       2       0       0       0
  5332 ;;      Totals:         1       2       0       0       0
  5333 ;;Total ram usage:        3 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    2
  5336 ;; This function calls:
  5337 ;;		_LCDBusyLoop
  5338 ;;		_LCDByte
  5339 ;; This function is called by:
  5340 ;;		_main
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           
  5345                           ;psect for function _LCDInit
  5346  0B5D                     _LCDInit:	
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  5350                           ;LCDInit@style stored from wreg
  5351  0B5D  00FD               	movwf	LCDInit@style
  5352                           
  5353                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((30)*(4000000/4000.0)));
  5354  0B5E  3027               	movlw	39
  5355  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  5356  0B60  1303               	bcf	3,6	;RP1=0, select bank0
  5357  0B61  00A1               	movwf	??_LCDInit+1
  5358  0B62  30F5               	movlw	245
  5359  0B63  00A0               	movwf	??_LCDInit
  5360  0B64                     u2627:	
  5361  0B64  0BA0               	decfsz	??_LCDInit,f
  5362  0B65  2B64               	goto	u2627
  5363  0B66  0BA1               	decfsz	??_LCDInit+1,f
  5364  0B67  2B64               	goto	u2627
  5365                           
  5366                           ;lcd_hd44780_pic16.c: 186: TRISD&=(~(0x0F<<4));
  5367  0B68  300F               	movlw	15
  5368  0B69  1283               	bcf	3,5	;RP0=0, select bank0
  5369  0B6A  1303               	bcf	3,6	;RP1=0, select bank0
  5370  0B6B  00A0               	movwf	??_LCDInit
  5371  0B6C  0820               	movf	??_LCDInit,w
  5372  0B6D  1683               	bsf	3,5	;RP0=1, select bank1
  5373  0B6E  1303               	bcf	3,6	;RP1=0, select bank1
  5374  0B6F  0588               	andwf	8,f	;volatile
  5375                           
  5376                           ;lcd_hd44780_pic16.c: 188: TRISBbits.TRISB5=0;
  5377  0B70  1286               	bcf	6,5	;volatile
  5378                           
  5379                           ;lcd_hd44780_pic16.c: 189: TRISDbits.TRISD3=0;
  5380  0B71  1188               	bcf	8,3	;volatile
  5381                           
  5382                           ;lcd_hd44780_pic16.c: 190: TRISDbits.TRISD2=0;
  5383  0B72  1108               	bcf	8,2	;volatile
  5384                           
  5385                           ;lcd_hd44780_pic16.c: 192: PORTD&=(~(0x0F<<4));
  5386  0B73  300F               	movlw	15
  5387  0B74  1283               	bcf	3,5	;RP0=0, select bank0
  5388  0B75  1303               	bcf	3,6	;RP1=0, select bank0
  5389  0B76  00A0               	movwf	??_LCDInit
  5390  0B77  0820               	movf	??_LCDInit,w
  5391  0B78  0588               	andwf	8,f	;volatile
  5392                           
  5393                           ;lcd_hd44780_pic16.c: 194: (RB5=0);
  5394  0B79  1286               	bcf	6,5	;volatile
  5395                           
  5396                           ;lcd_hd44780_pic16.c: 195: (RD2=0);
  5397  0B7A  1108               	bcf	8,2	;volatile
  5398                           
  5399                           ;lcd_hd44780_pic16.c: 196: (RD3=0);
  5400  0B7B  1188               	bcf	8,3	;volatile
  5401                           
  5402                           ;lcd_hd44780_pic16.c: 201: (RB5=1);
  5403                           
  5404                           ;lcd_hd44780_pic16.c: 199: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5405  0B7C  1283               	bcf	3,5	;RP0=0, select bank0
  5406  0B7D  1303               	bcf	3,6	;RP1=0, select bank0
  5407  0B7E  1686               	bsf	6,5	;volatile
  5408                           
  5409                           ;lcd_hd44780_pic16.c: 202: PORTD|=((0b00000010)<<4);
  5410  0B7F  1688               	bsf	8,5	;volatile
  5411                           
  5412                           ;lcd_hd44780_pic16.c: 203: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5413  0B80  0000               	nop
  5414                           
  5415                           ;lcd_hd44780_pic16.c: 204: (RB5=0);
  5416  0B81  1283               	bcf	3,5	;RP0=0, select bank0
  5417  0B82  1303               	bcf	3,6	;RP1=0, select bank0
  5418  0B83  1286               	bcf	6,5	;volatile
  5419                           
  5420                           ;lcd_hd44780_pic16.c: 205: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5421  0B84  0000               	nop
  5422                           
  5423                           ;lcd_hd44780_pic16.c: 208: LCDBusyLoop();
  5424  0B85  120A  158A  25BA  120A  158A  	fcall	_LCDBusyLoop
  5425                           
  5426                           ;lcd_hd44780_pic16.c: 213: (LCDByte(0b00101000,0));
  5427  0B8A  01F6               	clrf	LCDByte@isdata
  5428  0B8B  3028               	movlw	40
  5429  0B8C  120A  158A  24BB  120A  158A  	fcall	_LCDByte
  5430                           
  5431                           ;lcd_hd44780_pic16.c: 214: (LCDByte(0b00001100|style,0));
  5432  0B91  01F6               	clrf	LCDByte@isdata
  5433  0B92  087D               	movf	LCDInit@style,w
  5434  0B93  380C               	iorlw	12
  5435  0B94  120A  158A  24BB   	fcall	_LCDByte
  5436  0B97  0008               	return
  5437  0B98                     __end_of_LCDInit:	
  5438                           
  5439                           	psect	text21
  5440  0CBB                     __ptext21:	
  5441 ;; *************** function _LCDByte *****************
  5442 ;; Defined at:
  5443 ;;		line 54 in file "lcd_hd44780_pic16.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;  c               1    wreg     unsigned char 
  5446 ;;  isdata          1    5[COMMON] unsigned char 
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;  c               1   10[COMMON] unsigned char 
  5449 ;;  temp            1   11[COMMON] unsigned char 
  5450 ;;  ln              1    9[COMMON] unsigned char 
  5451 ;;  hn              1    8[COMMON] unsigned char 
  5452 ;; Return value:  Size  Location     Type
  5453 ;;                  1    wreg      void 
  5454 ;; Registers used:
  5455 ;;		wreg, status,2, status,0, pclath, cstack
  5456 ;; Tracked objects:
  5457 ;;		On entry : 0/0
  5458 ;;		On exit  : 0/0
  5459 ;;		Unchanged: 0/0
  5460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5461 ;;      Params:         1       0       0       0       0
  5462 ;;      Locals:         4       0       0       0       0
  5463 ;;      Temps:          2       0       0       0       0
  5464 ;;      Totals:         7       0       0       0       0
  5465 ;;Total ram usage:        7 bytes
  5466 ;; Hardware stack levels used:    1
  5467 ;; Hardware stack levels required when called:    1
  5468 ;; This function calls:
  5469 ;;		_LCDBusyLoop
  5470 ;; This function is called by:
  5471 ;;		_LCDInit
  5472 ;;		_LCDWriteString
  5473 ;;		_LCDGotoXY
  5474 ;;		_main
  5475 ;;		_doMenu
  5476 ;;		_showTime
  5477 ;;		_showDate
  5478 ;;		_showRunningTime
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           
  5483                           ;psect for function _LCDByte
  5484  0CBB                     _LCDByte:	
  5485                           
  5486                           ;incstack = 0
  5487                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  5488                           ;LCDByte@c stored from wreg
  5489  0CBB  00FB               	movwf	LCDByte@c
  5490                           
  5491                           ;lcd_hd44780_pic16.c: 63: uint8_t hn,ln;
  5492                           ;lcd_hd44780_pic16.c: 64: uint8_t temp;
  5493                           ;lcd_hd44780_pic16.c: 66: hn=c>>4;
  5494  0CBC  087B               	movf	LCDByte@c,w
  5495  0CBD  00F7               	movwf	??_LCDByte
  5496  0CBE  3004               	movlw	4
  5497  0CBF                     u1355:	
  5498  0CBF  1003               	clrc
  5499  0CC0  0CF7               	rrf	??_LCDByte,f
  5500  0CC1  3EFF               	addlw	-1
  5501  0CC2  1D03               	skipz
  5502  0CC3  2CBF               	goto	u1355
  5503  0CC4  0877               	movf	??_LCDByte,w
  5504  0CC5  00F8               	movwf	??_LCDByte+1
  5505  0CC6  0878               	movf	??_LCDByte+1,w
  5506  0CC7  00F9               	movwf	LCDByte@hn
  5507                           
  5508                           ;lcd_hd44780_pic16.c: 67: ln=(c & 0x0F);
  5509  0CC8  087B               	movf	LCDByte@c,w
  5510  0CC9  390F               	andlw	15
  5511  0CCA  00F7               	movwf	??_LCDByte
  5512  0CCB  0877               	movf	??_LCDByte,w
  5513  0CCC  00FA               	movwf	LCDByte@ln
  5514                           
  5515                           ;lcd_hd44780_pic16.c: 69: if(isdata==0)
  5516  0CCD  0876               	movf	LCDByte@isdata,w
  5517  0CCE  1D03               	btfss	3,2
  5518  0CCF  2CD4               	goto	l113
  5519                           
  5520                           ;lcd_hd44780_pic16.c: 70: (RD3=0);
  5521  0CD0  1283               	bcf	3,5	;RP0=0, select bank0
  5522  0CD1  1303               	bcf	3,6	;RP1=0, select bank0
  5523  0CD2  1188               	bcf	8,3	;volatile
  5524  0CD3  2CD7               	goto	l114
  5525  0CD4                     l113:	
  5526                           
  5527                           ;lcd_hd44780_pic16.c: 71: else
  5528                           ;lcd_hd44780_pic16.c: 72: (RD3=1);
  5529  0CD4  1283               	bcf	3,5	;RP0=0, select bank0
  5530  0CD5  1303               	bcf	3,6	;RP1=0, select bank0
  5531  0CD6  1588               	bsf	8,3	;volatile
  5532  0CD7                     l114:	
  5533                           
  5534                           ;lcd_hd44780_pic16.c: 74: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5535                           ;lcd_hd44780_pic16.c: 76: (RB5=1);
  5536  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  5537  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  5538  0CD9  1686               	bsf	6,5	;volatile
  5539                           
  5540                           ;lcd_hd44780_pic16.c: 80: temp=(PORTD & (~(0X0F<<4)))|((hn<<4));
  5541  0CDA  0879               	movf	LCDByte@hn,w
  5542  0CDB  00F7               	movwf	??_LCDByte
  5543  0CDC  3004               	movlw	4
  5544  0CDD                     u1375:	
  5545  0CDD  1003               	clrc
  5546  0CDE  0DF7               	rlf	??_LCDByte,f
  5547  0CDF  3EFF               	addlw	-1
  5548  0CE0  1D03               	skipz
  5549  0CE1  2CDD               	goto	u1375
  5550  0CE2  0808               	movf	8,w	;volatile
  5551  0CE3  390F               	andlw	15
  5552  0CE4  0477               	iorwf	??_LCDByte,w
  5553  0CE5  00F8               	movwf	??_LCDByte+1
  5554  0CE6  0878               	movf	??_LCDByte+1,w
  5555  0CE7  00FC               	movwf	LCDByte@temp
  5556                           
  5557                           ;lcd_hd44780_pic16.c: 81: PORTD=temp;
  5558  0CE8  087C               	movf	LCDByte@temp,w
  5559  0CE9  0088               	movwf	8	;volatile
  5560                           
  5561                           ;lcd_hd44780_pic16.c: 83: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5562  0CEA  0000               	nop
  5563                           
  5564                           ;lcd_hd44780_pic16.c: 87: (RB5=0);
  5565  0CEB  1283               	bcf	3,5	;RP0=0, select bank0
  5566  0CEC  1303               	bcf	3,6	;RP1=0, select bank0
  5567  0CED  1286               	bcf	6,5	;volatile
  5568                           
  5569                           ;lcd_hd44780_pic16.c: 89: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5570  0CEE  0000               	nop
  5571                           
  5572                           ;lcd_hd44780_pic16.c: 92: (RB5=1);
  5573  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  5574  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  5575  0CF1  1686               	bsf	6,5	;volatile
  5576                           
  5577                           ;lcd_hd44780_pic16.c: 94: temp=(PORTD & (~(0X0F<<4)))|((ln<<4));
  5578  0CF2  087A               	movf	LCDByte@ln,w
  5579  0CF3  00F7               	movwf	??_LCDByte
  5580  0CF4  3004               	movlw	4
  5581  0CF5                     u1385:	
  5582  0CF5  1003               	clrc
  5583  0CF6  0DF7               	rlf	??_LCDByte,f
  5584  0CF7  3EFF               	addlw	-1
  5585  0CF8  1D03               	skipz
  5586  0CF9  2CF5               	goto	u1385
  5587  0CFA  0808               	movf	8,w	;volatile
  5588  0CFB  390F               	andlw	15
  5589  0CFC  0477               	iorwf	??_LCDByte,w
  5590  0CFD  00F8               	movwf	??_LCDByte+1
  5591  0CFE  0878               	movf	??_LCDByte+1,w
  5592  0CFF  00FC               	movwf	LCDByte@temp
  5593                           
  5594                           ;lcd_hd44780_pic16.c: 96: PORTD=temp;
  5595  0D00  087C               	movf	LCDByte@temp,w
  5596  0D01  0088               	movwf	8	;volatile
  5597                           
  5598                           ;lcd_hd44780_pic16.c: 98: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5599  0D02  0000               	nop
  5600                           
  5601                           ;lcd_hd44780_pic16.c: 102: (RB5=0);
  5602  0D03  1283               	bcf	3,5	;RP0=0, select bank0
  5603  0D04  1303               	bcf	3,6	;RP1=0, select bank0
  5604  0D05  1286               	bcf	6,5	;volatile
  5605                           
  5606                           ;lcd_hd44780_pic16.c: 104: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5607  0D06  0000               	nop
  5608                           
  5609                           ;lcd_hd44780_pic16.c: 106: LCDBusyLoop();
  5610  0D07  120A  158A  25BA   	fcall	_LCDBusyLoop
  5611  0D0A  0008               	return
  5612  0D0B                     __end_of_LCDByte:	
  5613                           
  5614                           	psect	text22
  5615  0DBA                     __ptext22:	
  5616 ;; *************** function _LCDBusyLoop *****************
  5617 ;; Defined at:
  5618 ;;		line 109 in file "lcd_hd44780_pic16.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;		None
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  status          1    4[COMMON] unsigned char 
  5623 ;;  temp            1    3[COMMON] unsigned char 
  5624 ;;  busy            1    2[COMMON] unsigned char 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5634 ;;      Params:         0       0       0       0       0
  5635 ;;      Locals:         3       0       0       0       0
  5636 ;;      Temps:          2       0       0       0       0
  5637 ;;      Totals:         5       0       0       0       0
  5638 ;;Total ram usage:        5 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; This function calls:
  5641 ;;		Nothing
  5642 ;; This function is called by:
  5643 ;;		_LCDByte
  5644 ;;		_LCDInit
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _LCDBusyLoop
  5650  0DBA                     _LCDBusyLoop:	
  5651                           
  5652                           ;lcd_hd44780_pic16.c: 113: uint8_t busy,status=0x00,temp;
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  5656  0DBA  01F5               	clrf	LCDBusyLoop@status
  5657                           
  5658                           ;lcd_hd44780_pic16.c: 116: TRISD|=(0x0f<<4);
  5659  0DBB  30F0               	movlw	240
  5660  0DBC  00F1               	movwf	??_LCDBusyLoop
  5661  0DBD  0871               	movf	??_LCDBusyLoop,w
  5662  0DBE  1683               	bsf	3,5	;RP0=1, select bank1
  5663  0DBF  1303               	bcf	3,6	;RP1=0, select bank1
  5664  0DC0  0488               	iorwf	8,f	;volatile
  5665                           
  5666                           ;lcd_hd44780_pic16.c: 119: (RD2=1);
  5667  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
  5668  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
  5669  0DC3  1508               	bsf	8,2	;volatile
  5670                           
  5671                           ;lcd_hd44780_pic16.c: 120: (RD3=0);
  5672  0DC4  1188               	bcf	8,3	;volatile
  5673  0DC5                     l1809:	
  5674                           ;lcd_hd44780_pic16.c: 127: do
  5675                           
  5676                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5677                           
  5678                           
  5679                           ;lcd_hd44780_pic16.c: 128: {
  5680                           ;lcd_hd44780_pic16.c: 130: (RB5=1);
  5681  0DC5  1283               	bcf	3,5	;RP0=0, select bank0
  5682  0DC6  1303               	bcf	3,6	;RP1=0, select bank0
  5683  0DC7  1686               	bsf	6,5	;volatile
  5684                           
  5685                           ;lcd_hd44780_pic16.c: 135: status=(PORTD>>4);
  5686                           
  5687                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5688  0DC8  1283               	bcf	3,5	;RP0=0, select bank0
  5689  0DC9  1303               	bcf	3,6	;RP1=0, select bank0
  5690  0DCA  0808               	movf	8,w	;volatile
  5691  0DCB  00F1               	movwf	??_LCDBusyLoop
  5692  0DCC  3004               	movlw	4
  5693  0DCD                     u1315:	
  5694  0DCD  1003               	clrc
  5695  0DCE  0CF1               	rrf	??_LCDBusyLoop,f
  5696  0DCF  3EFF               	addlw	-1
  5697  0DD0  1D03               	skipz
  5698  0DD1  2DCD               	goto	u1315
  5699  0DD2  0871               	movf	??_LCDBusyLoop,w
  5700  0DD3  00F2               	movwf	??_LCDBusyLoop+1
  5701  0DD4  0872               	movf	??_LCDBusyLoop+1,w
  5702  0DD5  00F5               	movwf	LCDBusyLoop@status
  5703                           
  5704                           ;lcd_hd44780_pic16.c: 136: status=status<<4;
  5705  0DD6  0875               	movf	LCDBusyLoop@status,w
  5706  0DD7  00F1               	movwf	??_LCDBusyLoop
  5707  0DD8  3003               	movlw	3
  5708  0DD9                     u1325:	
  5709  0DD9  1003               	clrc
  5710  0DDA  0DF1               	rlf	??_LCDBusyLoop,f
  5711  0DDB  3EFF               	addlw	-1
  5712  0DDC  1D03               	skipz
  5713  0DDD  2DD9               	goto	u1325
  5714  0DDE  1003               	clrc
  5715  0DDF  0D71               	rlf	??_LCDBusyLoop,w
  5716  0DE0  00F2               	movwf	??_LCDBusyLoop+1
  5717  0DE1  0872               	movf	??_LCDBusyLoop+1,w
  5718  0DE2  00F5               	movwf	LCDBusyLoop@status
  5719                           
  5720                           ;lcd_hd44780_pic16.c: 141: (RB5=0);
  5721                           
  5722                           ;lcd_hd44780_pic16.c: 138: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5723  0DE3  1283               	bcf	3,5	;RP0=0, select bank0
  5724  0DE4  1303               	bcf	3,6	;RP1=0, select bank0
  5725  0DE5  1286               	bcf	6,5	;volatile
  5726                           
  5727                           ;lcd_hd44780_pic16.c: 142: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5728  0DE6  0000               	nop
  5729                           
  5730                           ;lcd_hd44780_pic16.c: 144: (RB5=1);
  5731  0DE7  1283               	bcf	3,5	;RP0=0, select bank0
  5732  0DE8  1303               	bcf	3,6	;RP1=0, select bank0
  5733  0DE9  1686               	bsf	6,5	;volatile
  5734                           
  5735                           ;lcd_hd44780_pic16.c: 147: temp=(PORTD>>4);
  5736                           
  5737                           ;lcd_hd44780_pic16.c: 145: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5738  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  5739  0DEB  1303               	bcf	3,6	;RP1=0, select bank0
  5740  0DEC  0808               	movf	8,w	;volatile
  5741  0DED  00F1               	movwf	??_LCDBusyLoop
  5742  0DEE  3004               	movlw	4
  5743  0DEF                     u1335:	
  5744  0DEF  1003               	clrc
  5745  0DF0  0CF1               	rrf	??_LCDBusyLoop,f
  5746  0DF1  3EFF               	addlw	-1
  5747  0DF2  1D03               	skipz
  5748  0DF3  2DEF               	goto	u1335
  5749  0DF4  0871               	movf	??_LCDBusyLoop,w
  5750  0DF5  00F2               	movwf	??_LCDBusyLoop+1
  5751  0DF6  0872               	movf	??_LCDBusyLoop+1,w
  5752  0DF7  00F4               	movwf	LCDBusyLoop@temp
  5753                           
  5754                           ;lcd_hd44780_pic16.c: 148: temp&=0x0F;
  5755  0DF8  300F               	movlw	15
  5756  0DF9  00F1               	movwf	??_LCDBusyLoop
  5757  0DFA  0871               	movf	??_LCDBusyLoop,w
  5758  0DFB  05F4               	andwf	LCDBusyLoop@temp,f
  5759                           
  5760                           ;lcd_hd44780_pic16.c: 150: status=status|temp;
  5761  0DFC  0875               	movf	LCDBusyLoop@status,w
  5762  0DFD  0474               	iorwf	LCDBusyLoop@temp,w
  5763  0DFE  00F1               	movwf	??_LCDBusyLoop
  5764  0DFF  0871               	movf	??_LCDBusyLoop,w
  5765  0E00  00F5               	movwf	LCDBusyLoop@status
  5766                           
  5767                           ;lcd_hd44780_pic16.c: 152: busy=status & 0b10000000;
  5768  0E01  0875               	movf	LCDBusyLoop@status,w
  5769  0E02  3980               	andlw	128
  5770  0E03  00F1               	movwf	??_LCDBusyLoop
  5771  0E04  0871               	movf	??_LCDBusyLoop,w
  5772  0E05  00F3               	movwf	LCDBusyLoop@busy
  5773                           
  5774                           ;lcd_hd44780_pic16.c: 156: (RB5=0);
  5775                           
  5776                           ;lcd_hd44780_pic16.c: 154: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5777  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  5778  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  5779  0E08  1286               	bcf	6,5	;volatile
  5780                           
  5781                           ;lcd_hd44780_pic16.c: 157: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5782  0E09  0000               	nop
  5783                           
  5784                           ;lcd_hd44780_pic16.c: 158: }while(busy);
  5785  0E0A  0873               	movf	LCDBusyLoop@busy,w
  5786  0E0B  1D03               	btfss	3,2
  5787  0E0C  2DC5               	goto	l1809
  5788                           
  5789                           ;lcd_hd44780_pic16.c: 160: (RD2=0);
  5790  0E0D  1283               	bcf	3,5	;RP0=0, select bank0
  5791  0E0E  1303               	bcf	3,6	;RP1=0, select bank0
  5792  0E0F  1108               	bcf	8,2	;volatile
  5793                           
  5794                           ;lcd_hd44780_pic16.c: 163: TRISD&=(~(0x0F<<4));
  5795  0E10  300F               	movlw	15
  5796  0E11  00F1               	movwf	??_LCDBusyLoop
  5797  0E12  0871               	movf	??_LCDBusyLoop,w
  5798  0E13  1683               	bsf	3,5	;RP0=1, select bank1
  5799  0E14  1303               	bcf	3,6	;RP1=0, select bank1
  5800  0E15  0588               	andwf	8,f	;volatile
  5801  0E16  0008               	return
  5802  0E17                     __end_of_LCDBusyLoop:	
  5803                           
  5804                           	psect	text23
  5805  092D                     __ptext23:	
  5806 ;; *************** function _I2C_Init *****************
  5807 ;; Defined at:
  5808 ;;		line 3 in file "i2c.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;		None
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;		None
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      void 
  5815 ;; Registers used:
  5816 ;;		None
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5822 ;;      Params:         0       0       0       0       0
  5823 ;;      Locals:         0       0       0       0       0
  5824 ;;      Temps:          0       0       0       0       0
  5825 ;;      Totals:         0       0       0       0       0
  5826 ;;Total ram usage:        0 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; This function calls:
  5829 ;;		Nothing
  5830 ;; This function is called by:
  5831 ;;		_main
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           
  5836                           ;psect for function _I2C_Init
  5837  092D                     _I2C_Init:	
  5838                           
  5839                           ;i2c.c: 5: TRISD1 = 0 ;
  5840                           
  5841                           ;incstack = 0
  5842                           ; Regs used in _I2C_Init: []
  5843  092D  1683               	bsf	3,5	;RP0=1, select bank1
  5844  092E  1303               	bcf	3,6	;RP1=0, select bank1
  5845  092F  1088               	bcf	8,1	;volatile
  5846                           
  5847                           ;i2c.c: 6: TRISD0 = 0 ;
  5848  0930  1008               	bcf	8,0	;volatile
  5849  0931  0008               	return
  5850  0932                     __end_of_I2C_Init:	
  5851                           
  5852                           	psect	text24
  5853  0E17                     __ptext24:	
  5854 ;; *************** function _DS1307_readRam *****************
  5855 ;; Defined at:
  5856 ;;		line 95 in file "DS1307.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  ptr             2    5[COMMON] PTR unsigned char 
  5859 ;;		 -> runningTime(2), RAM(512), 
  5860 ;;  offset          2    7[COMMON] int 
  5861 ;;  length          2    9[COMMON] int 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5873 ;;      Params:         6       0       0       0       0
  5874 ;;      Locals:         0       0       0       0       0
  5875 ;;      Temps:          2       0       0       0       0
  5876 ;;      Totals:         8       0       0       0       0
  5877 ;;Total ram usage:        8 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    3
  5880 ;; This function calls:
  5881 ;;		_DS1307_Read
  5882 ;;		_DS1307_Write
  5883 ;;		_I2C_Ack
  5884 ;;		_I2C_NoAck
  5885 ;;		_I2C_Start
  5886 ;;		_I2C_Stop
  5887 ;; This function is called by:
  5888 ;;		_main
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           
  5893                           ;psect for function _DS1307_readRam
  5894  0E17                     _DS1307_readRam:	
  5895                           
  5896                           ;DS1307.c: 97: I2C_Start();
  5897                           
  5898                           ;incstack = 0
  5899                           ; Regs used in _DS1307_readRam: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5900  0E17  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  5901                           
  5902                           ;DS1307.c: 98: DS1307_Write(0xD0);
  5903  0E1C  30D0               	movlw	208
  5904  0E1D  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  5905                           
  5906                           ;DS1307.c: 99: DS1307_Write(0x08 + offset);
  5907  0E22  0878               	movf	DS1307_readRam@offset,w
  5908  0E23  3E08               	addlw	8
  5909  0E24  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  5910                           
  5911                           ;DS1307.c: 100: I2C_Stop();
  5912  0E29  120A  158A  215A  120A  158A  	fcall	_I2C_Stop
  5913                           
  5914                           ;DS1307.c: 101: I2C_Start();
  5915  0E2E  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  5916                           
  5917                           ;DS1307.c: 102: DS1307_Write(0xD1);
  5918  0E33  30D1               	movlw	209
  5919  0E34  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  5920  0E39                     l2319:	
  5921                           ;DS1307.c: 103: while(length-- > 1)
  5922                           
  5923  0E39  087B               	movf	DS1307_readRam@length+1,w
  5924  0E3A  00FD               	movwf	??_DS1307_readRam+1
  5925  0E3B  03FA               	decf	DS1307_readRam@length,f
  5926  0E3C  0A7A               	incf	DS1307_readRam@length,w
  5927  0E3D  00FC               	movwf	??_DS1307_readRam
  5928  0E3E  1903               	skipnz
  5929  0E3F  03FB               	decf	DS1307_readRam@length+1,f
  5930  0E40  087D               	movf	??_DS1307_readRam+1,w
  5931  0E41  3A80               	xorlw	128
  5932  0E42  00FF               	movwf	127
  5933  0E43  3080               	movlw	128
  5934  0E44  027F               	subwf	127,w
  5935  0E45  1D03               	skipz
  5936  0E46  2E49               	goto	u1855
  5937  0E47  3002               	movlw	2
  5938  0E48  027C               	subwf	??_DS1307_readRam,w
  5939  0E49                     u1855:	
  5940  0E49  1C03               	btfss	3,0
  5941  0E4A  2E5F               	goto	l2321
  5942                           
  5943                           ;DS1307.c: 104: *ptr++ = DS1307_Read(); I2C_Ack();
  5944  0E4B  120A  158A  2129  120A  158A  	fcall	_DS1307_Read
  5945  0E50  00FC               	movwf	??_DS1307_readRam
  5946  0E51  0876               	movf	DS1307_readRam@ptr,w
  5947  0E52  0084               	movwf	4
  5948  0E53  1383               	bcf	3,7
  5949  0E54  1877               	btfsc	DS1307_readRam@ptr+1,0
  5950  0E55  1783               	bsf	3,7
  5951  0E56  087C               	movf	??_DS1307_readRam,w
  5952  0E57  0080               	movwf	0
  5953  0E58  3001               	movlw	1
  5954  0E59  07F6               	addwf	DS1307_readRam@ptr,f
  5955  0E5A  1803               	skipnc
  5956  0E5B  0AF7               	incf	DS1307_readRam@ptr+1,f
  5957  0E5C  3000               	movlw	0
  5958  0E5D  07F7               	addwf	DS1307_readRam@ptr+1,f
  5959  0E5E  2E39               	goto	l2319
  5960  0E5F                     l2321:	
  5961  0E5F  120A  158A  2145  120A  158A  	fcall	_I2C_Ack
  5962                           
  5963                           ;DS1307.c: 105: ptr = DS1307_Read(); I2C_NoAck();
  5964  0E64  120A  158A  2129  120A  158A  	fcall	_DS1307_Read
  5965  0E69  00FC               	movwf	??_DS1307_readRam
  5966  0E6A  01FD               	clrf	??_DS1307_readRam+1
  5967  0E6B  087C               	movf	??_DS1307_readRam,w
  5968  0E6C  00F6               	movwf	DS1307_readRam@ptr
  5969  0E6D  087D               	movf	??_DS1307_readRam+1,w
  5970  0E6E  00F7               	movwf	DS1307_readRam@ptr+1
  5971  0E6F  120A  158A  213B  120A  158A  	fcall	_I2C_NoAck
  5972                           
  5973                           ;DS1307.c: 106: I2C_Stop();
  5974  0E74  120A  158A  215A   	fcall	_I2C_Stop
  5975  0E77  0008               	return
  5976  0E78                     __end_of_DS1307_readRam:	
  5977                           
  5978                           	psect	text25
  5979  0945                     __ptext25:	
  5980 ;; *************** function _I2C_Ack *****************
  5981 ;; Defined at:
  5982 ;;		line 81 in file "i2c.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		status,2, status,0, pclath, cstack
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5996 ;;      Params:         0       0       0       0       0
  5997 ;;      Locals:         0       0       0       0       0
  5998 ;;      Temps:          0       0       0       0       0
  5999 ;;      Totals:         0       0       0       0       0
  6000 ;;Total ram usage:        0 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; Hardware stack levels required when called:    1
  6003 ;; This function calls:
  6004 ;;		_I2C_Clock
  6005 ;; This function is called by:
  6006 ;;		_DS1307_GetTime
  6007 ;;		_DS1307_GetDate
  6008 ;;		_DS1307_readRam
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _I2C_Ack
  6014  0945                     _I2C_Ack:	
  6015                           
  6016                           ;i2c.c: 83: RD0 = 0;
  6017                           
  6018                           ;incstack = 0
  6019                           ; Regs used in _I2C_Ack: [status,2+status,0+pclath+cstack]
  6020  0945  1283               	bcf	3,5	;RP0=0, select bank0
  6021  0946  1303               	bcf	3,6	;RP1=0, select bank0
  6022  0947  1008               	bcf	8,0	;volatile
  6023                           
  6024                           ;i2c.c: 84: I2C_Clock();
  6025  0948  120A  158A  2132   	fcall	_I2C_Clock
  6026                           
  6027                           ;i2c.c: 85: RD0 = 1;
  6028  094B  1283               	bcf	3,5	;RP0=0, select bank0
  6029  094C  1303               	bcf	3,6	;RP1=0, select bank0
  6030  094D  1408               	bsf	8,0	;volatile
  6031  094E  0008               	return
  6032  094F                     __end_of_I2C_Ack:	
  6033                           
  6034                           	psect	text26
  6035  0C6B                     __ptext26:	
  6036 ;; *************** function _DS1307_Init *****************
  6037 ;; Defined at:
  6038 ;;		line 4 in file "DS1307.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;		None
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;  s               1    6[COMMON] unsigned char 
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  2   20[None  ] int 
  6045 ;; Registers used:
  6046 ;;		wreg, status,2, status,0, pclath, cstack
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6052 ;;      Params:         0       0       0       0       0
  6053 ;;      Locals:         1       0       0       0       0
  6054 ;;      Temps:          1       0       0       0       0
  6055 ;;      Totals:         2       0       0       0       0
  6056 ;;Total ram usage:        2 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    3
  6059 ;; This function calls:
  6060 ;;		_DS1307_Read
  6061 ;;		_DS1307_Write
  6062 ;;		_I2C_NoAck
  6063 ;;		_I2C_Start
  6064 ;;		_I2C_Stop
  6065 ;; This function is called by:
  6066 ;;		_main
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           
  6071                           ;psect for function _DS1307_Init
  6072  0C6B                     _DS1307_Init:	
  6073                           
  6074                           ;DS1307.c: 6: unsigned char s = 0 ;
  6075                           
  6076                           ;incstack = 0
  6077                           ; Regs used in _DS1307_Init: [wreg+status,2+status,0+pclath+cstack]
  6078  0C6B  01F7               	clrf	DS1307_Init@s
  6079                           
  6080                           ;DS1307.c: 8: I2C_Start();
  6081  0C6C  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  6082                           
  6083                           ;DS1307.c: 9: DS1307_Write(0xd0);
  6084  0C71  30D0               	movlw	208
  6085  0C72  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  6086                           
  6087                           ;DS1307.c: 10: DS1307_Write(0x00);
  6088  0C77  3000               	movlw	0
  6089  0C78  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  6090                           
  6091                           ;DS1307.c: 11: I2C_Start();
  6092  0C7D  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  6093                           
  6094                           ;DS1307.c: 12: DS1307_Write(0xd1);
  6095  0C82  30D1               	movlw	209
  6096  0C83  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  6097                           
  6098                           ;DS1307.c: 13: s = DS1307_Read();
  6099  0C88  120A  158A  2129  120A  158A  	fcall	_DS1307_Read
  6100  0C8D  00F6               	movwf	??_DS1307_Init
  6101  0C8E  0876               	movf	??_DS1307_Init,w
  6102  0C8F  00F7               	movwf	DS1307_Init@s
  6103                           
  6104                           ;DS1307.c: 14: I2C_NoAck();
  6105  0C90  120A  158A  213B  120A  158A  	fcall	_I2C_NoAck
  6106                           
  6107                           ;DS1307.c: 16: if (s & 0x80)
  6108  0C95  1FF7               	btfss	DS1307_Init@s,7
  6109  0C96  2CB7               	goto	l2303
  6110                           
  6111                           ;DS1307.c: 17: {
  6112                           ;DS1307.c: 18: s = s & 0x7f ;
  6113  0C97  0877               	movf	DS1307_Init@s,w
  6114  0C98  397F               	andlw	127
  6115  0C99  00F6               	movwf	??_DS1307_Init
  6116  0C9A  0876               	movf	??_DS1307_Init,w
  6117  0C9B  00F7               	movwf	DS1307_Init@s
  6118                           
  6119                           ;DS1307.c: 19: I2C_Start();
  6120  0C9C  120A  158A  216A  120A  158A  	fcall	_I2C_Start
  6121                           
  6122                           ;DS1307.c: 20: DS1307_Write(0xD0);
  6123  0CA1  30D0               	movlw	208
  6124  0CA2  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  6125                           
  6126                           ;DS1307.c: 21: DS1307_Write(0x00);
  6127  0CA7  3000               	movlw	0
  6128  0CA8  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  6129                           
  6130                           ;DS1307.c: 22: DS1307_Write(s);
  6131  0CAD  0877               	movf	DS1307_Init@s,w
  6132  0CAE  120A  158A  214F  120A  158A  	fcall	_DS1307_Write
  6133                           
  6134                           ;DS1307.c: 23: I2C_Stop();
  6135  0CB3  120A  158A  215A   	fcall	_I2C_Stop
  6136                           
  6137                           ;DS1307.c: 25: }
  6138                           
  6139                           ;DS1307.c: 24: return 1 ;
  6140                           ;	Return value of _DS1307_Init is never used
  6141  0CB6  0008               	return
  6142  0CB7                     l2303:	
  6143                           
  6144                           ;DS1307.c: 26: else
  6145                           ;DS1307.c: 27: I2C_Stop();
  6146  0CB7  120A  158A  215A   	fcall	_I2C_Stop
  6147  0CBA  0008               	return
  6148  0CBB                     __end_of_DS1307_Init:	
  6149                           ;DS1307.c: 29: return 0 ;
  6150                           ;	Return value of _DS1307_Init is never used
  6151                           
  6152                           
  6153                           	psect	text27
  6154  095A                     __ptext27:	
  6155 ;; *************** function _I2C_Stop *****************
  6156 ;; Defined at:
  6157 ;;		line 29 in file "i2c.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;		None
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;		None
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      void 
  6164 ;; Registers used:
  6165 ;;		None
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6171 ;;      Params:         0       0       0       0       0
  6172 ;;      Locals:         0       0       0       0       0
  6173 ;;      Temps:          0       0       0       0       0
  6174 ;;      Totals:         0       0       0       0       0
  6175 ;;Total ram usage:        0 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; This function calls:
  6178 ;;		Nothing
  6179 ;; This function is called by:
  6180 ;;		_DS1307_Init
  6181 ;;		_DS1307_SetTime
  6182 ;;		_DS1307_SetDate
  6183 ;;		_DS1307_GetTime
  6184 ;;		_DS1307_GetDate
  6185 ;;		_DS1307_readRam
  6186 ;;		_DS1307_writeRam
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           
  6191                           ;psect for function _I2C_Stop
  6192  095A                     _I2C_Stop:	
  6193                           
  6194                           ;i2c.c: 31: RD1 = 0;
  6195                           
  6196                           ;incstack = 0
  6197                           ; Regs used in _I2C_Stop: []
  6198  095A  1283               	bcf	3,5	;RP0=0, select bank0
  6199  095B  1303               	bcf	3,6	;RP1=0, select bank0
  6200  095C  1088               	bcf	8,1	;volatile
  6201                           
  6202                           ;i2c.c: 32: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6203  095D  0000               	nop
  6204                           
  6205                           ;i2c.c: 33: RD0 = 0;
  6206  095E  1283               	bcf	3,5	;RP0=0, select bank0
  6207  095F  1303               	bcf	3,6	;RP1=0, select bank0
  6208  0960  1008               	bcf	8,0	;volatile
  6209                           
  6210                           ;i2c.c: 34: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6211  0961  0000               	nop
  6212                           
  6213                           ;i2c.c: 35: RD1 = 1;
  6214  0962  1283               	bcf	3,5	;RP0=0, select bank0
  6215  0963  1303               	bcf	3,6	;RP1=0, select bank0
  6216  0964  1488               	bsf	8,1	;volatile
  6217                           
  6218                           ;i2c.c: 36: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6219  0965  0000               	nop
  6220                           
  6221                           ;i2c.c: 37: RD0 = 1;
  6222  0966  1283               	bcf	3,5	;RP0=0, select bank0
  6223  0967  1303               	bcf	3,6	;RP1=0, select bank0
  6224  0968  1408               	bsf	8,0	;volatile
  6225  0969  0008               	return
  6226  096A                     __end_of_I2C_Stop:	
  6227                           
  6228                           	psect	text28
  6229  096A                     __ptext28:	
  6230 ;; *************** function _I2C_Start *****************
  6231 ;; Defined at:
  6232 ;;		line 17 in file "i2c.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;		None
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;		None
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  1    wreg      void 
  6239 ;; Registers used:
  6240 ;;		None
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6246 ;;      Params:         0       0       0       0       0
  6247 ;;      Locals:         0       0       0       0       0
  6248 ;;      Temps:          0       0       0       0       0
  6249 ;;      Totals:         0       0       0       0       0
  6250 ;;Total ram usage:        0 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; This function calls:
  6253 ;;		Nothing
  6254 ;; This function is called by:
  6255 ;;		_DS1307_Init
  6256 ;;		_DS1307_SetTime
  6257 ;;		_DS1307_SetDate
  6258 ;;		_DS1307_GetTime
  6259 ;;		_DS1307_GetDate
  6260 ;;		_DS1307_readRam
  6261 ;;		_DS1307_writeRam
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           
  6266                           ;psect for function _I2C_Start
  6267  096A                     _I2C_Start:	
  6268                           
  6269                           ;i2c.c: 19: RD1 = 0;
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _I2C_Start: []
  6273  096A  1283               	bcf	3,5	;RP0=0, select bank0
  6274  096B  1303               	bcf	3,6	;RP1=0, select bank0
  6275  096C  1088               	bcf	8,1	;volatile
  6276                           
  6277                           ;i2c.c: 20: RD0 = 1;
  6278  096D  1408               	bsf	8,0	;volatile
  6279                           
  6280                           ;i2c.c: 21: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6281  096E  0000               	nop
  6282                           
  6283                           ;i2c.c: 22: RD1 = 1;
  6284  096F  1283               	bcf	3,5	;RP0=0, select bank0
  6285  0970  1303               	bcf	3,6	;RP1=0, select bank0
  6286  0971  1488               	bsf	8,1	;volatile
  6287                           
  6288                           ;i2c.c: 23: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6289  0972  0000               	nop
  6290                           
  6291                           ;i2c.c: 24: RD0 = 0;
  6292  0973  1283               	bcf	3,5	;RP0=0, select bank0
  6293  0974  1303               	bcf	3,6	;RP1=0, select bank0
  6294  0975  1008               	bcf	8,0	;volatile
  6295                           
  6296                           ;i2c.c: 25: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6297  0976  0000               	nop
  6298                           
  6299                           ;i2c.c: 26: RD1 = 0;
  6300  0977  1283               	bcf	3,5	;RP0=0, select bank0
  6301  0978  1303               	bcf	3,6	;RP1=0, select bank0
  6302  0979  1088               	bcf	8,1	;volatile
  6303  097A  0008               	return
  6304  097B                     __end_of_I2C_Start:	
  6305                           
  6306                           	psect	text29
  6307  093B                     __ptext29:	
  6308 ;; *************** function _I2C_NoAck *****************
  6309 ;; Defined at:
  6310 ;;		line 88 in file "i2c.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;		None
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;		None
  6315 ;; Return value:  Size  Location     Type
  6316 ;;                  1    wreg      void 
  6317 ;; Registers used:
  6318 ;;		status,2, status,0, pclath, cstack
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6324 ;;      Params:         0       0       0       0       0
  6325 ;;      Locals:         0       0       0       0       0
  6326 ;;      Temps:          0       0       0       0       0
  6327 ;;      Totals:         0       0       0       0       0
  6328 ;;Total ram usage:        0 bytes
  6329 ;; Hardware stack levels used:    1
  6330 ;; Hardware stack levels required when called:    1
  6331 ;; This function calls:
  6332 ;;		_I2C_Clock
  6333 ;; This function is called by:
  6334 ;;		_DS1307_Init
  6335 ;;		_DS1307_GetTime
  6336 ;;		_DS1307_GetDate
  6337 ;;		_DS1307_readRam
  6338 ;; This function uses a non-reentrant model
  6339 ;;
  6340                           
  6341                           
  6342                           ;psect for function _I2C_NoAck
  6343  093B                     _I2C_NoAck:	
  6344                           
  6345                           ;i2c.c: 90: RD0 = 1;
  6346                           
  6347                           ;incstack = 0
  6348                           ; Regs used in _I2C_NoAck: [status,2+status,0+pclath+cstack]
  6349  093B  1283               	bcf	3,5	;RP0=0, select bank0
  6350  093C  1303               	bcf	3,6	;RP1=0, select bank0
  6351  093D  1408               	bsf	8,0	;volatile
  6352                           
  6353                           ;i2c.c: 91: I2C_Clock();
  6354  093E  120A  158A  2132   	fcall	_I2C_Clock
  6355                           
  6356                           ;i2c.c: 92: RD1 = 1;
  6357  0941  1283               	bcf	3,5	;RP0=0, select bank0
  6358  0942  1303               	bcf	3,6	;RP1=0, select bank0
  6359  0943  1488               	bsf	8,1	;volatile
  6360  0944  0008               	return
  6361  0945                     __end_of_I2C_NoAck:	
  6362                           
  6363                           	psect	text30
  6364  094F                     __ptext30:	
  6365 ;; *************** function _DS1307_Write *****************
  6366 ;; Defined at:
  6367 ;;		line 32 in file "DS1307.c"
  6368 ;; Parameters:    Size  Location     Type
  6369 ;;  dat             1    wreg     unsigned char 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  dat             1    4[COMMON] unsigned char 
  6372 ;; Return value:  Size  Location     Type
  6373 ;;                  1    wreg      void 
  6374 ;; Registers used:
  6375 ;;		wreg, status,2, status,0, pclath, cstack
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6381 ;;      Params:         0       0       0       0       0
  6382 ;;      Locals:         1       0       0       0       0
  6383 ;;      Temps:          0       0       0       0       0
  6384 ;;      Totals:         1       0       0       0       0
  6385 ;;Total ram usage:        1 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:    2
  6388 ;; This function calls:
  6389 ;;		_I2C_Clock
  6390 ;;		_I2C_Write
  6391 ;; This function is called by:
  6392 ;;		_DS1307_Init
  6393 ;;		_DS1307_SetTime
  6394 ;;		_DS1307_SetDate
  6395 ;;		_DS1307_GetTime
  6396 ;;		_DS1307_GetDate
  6397 ;;		_DS1307_readRam
  6398 ;;		_DS1307_writeRam
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           
  6403                           ;psect for function _DS1307_Write
  6404  094F                     _DS1307_Write:	
  6405                           
  6406                           ;incstack = 0
  6407                           ; Regs used in _DS1307_Write: [wreg+status,2+status,0+pclath+cstack]
  6408                           ;DS1307_Write@dat stored from wreg
  6409  094F  00F5               	movwf	DS1307_Write@dat
  6410                           
  6411                           ;DS1307.c: 34: I2C_Write(dat);
  6412  0950  0875               	movf	DS1307_Write@dat,w
  6413  0951  120A  158A  21DD  120A  158A  	fcall	_I2C_Write
  6414                           
  6415                           ;DS1307.c: 35: I2C_Clock();
  6416  0956  120A  158A  2132   	fcall	_I2C_Clock
  6417  0959  0008               	return
  6418  095A                     __end_of_DS1307_Write:	
  6419                           
  6420                           	psect	text31
  6421  09DD                     __ptext31:	
  6422 ;; *************** function _I2C_Write *****************
  6423 ;; Defined at:
  6424 ;;		line 40 in file "i2c.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  dat             1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  dat             1    2[COMMON] unsigned char 
  6429 ;;  i               1    3[COMMON] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  1    wreg      void 
  6432 ;; Registers used:
  6433 ;;		wreg, status,2, status,0, pclath, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6439 ;;      Params:         0       0       0       0       0
  6440 ;;      Locals:         2       0       0       0       0
  6441 ;;      Temps:          2       0       0       0       0
  6442 ;;      Totals:         4       0       0       0       0
  6443 ;;Total ram usage:        4 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    1
  6446 ;; This function calls:
  6447 ;;		_I2C_Clock
  6448 ;; This function is called by:
  6449 ;;		_DS1307_Write
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           
  6454                           ;psect for function _I2C_Write
  6455  09DD                     _I2C_Write:	
  6456                           
  6457                           ;incstack = 0
  6458                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  6459                           ;I2C_Write@dat stored from wreg
  6460  09DD  00F3               	movwf	I2C_Write@dat
  6461                           
  6462                           ;i2c.c: 42: unsigned char i ;
  6463                           ;i2c.c: 43: for(i=0;i<8;i++)
  6464  09DE  01F4               	clrf	I2C_Write@i
  6465  09DF  3008               	movlw	8
  6466  09E0  0274               	subwf	I2C_Write@i,w
  6467  09E1  1803               	btfsc	3,0
  6468  09E2  29FF               	goto	l79
  6469  09E3                     l78:	
  6470                           
  6471                           ;i2c.c: 44: {
  6472                           ;i2c.c: 45: RD0 = (dat & 0x80) ? 1 : 0 ;
  6473  09E3  1FF3               	btfss	I2C_Write@dat,7
  6474  09E4  29E9               	goto	u1400
  6475  09E5  1283               	bcf	3,5	;RP0=0, select bank0
  6476  09E6  1303               	bcf	3,6	;RP1=0, select bank0
  6477  09E7  1408               	bsf	8,0	;volatile
  6478  09E8  29EC               	goto	l1883
  6479  09E9                     u1400:	
  6480  09E9  1283               	bcf	3,5	;RP0=0, select bank0
  6481  09EA  1303               	bcf	3,6	;RP1=0, select bank0
  6482  09EB  1008               	bcf	8,0	;volatile
  6483  09EC                     l1883:	
  6484                           
  6485                           ;i2c.c: 47: I2C_Clock();
  6486  09EC  120A  158A  2132  120A  158A  	fcall	_I2C_Clock
  6487                           
  6488                           ;i2c.c: 49: dat = dat << 1;
  6489  09F1  0873               	movf	I2C_Write@dat,w
  6490  09F2  00F1               	movwf	??_I2C_Write
  6491  09F3  0771               	addwf	??_I2C_Write,w
  6492  09F4  00F2               	movwf	??_I2C_Write+1
  6493  09F5  0872               	movf	??_I2C_Write+1,w
  6494  09F6  00F3               	movwf	I2C_Write@dat
  6495  09F7  3001               	movlw	1
  6496  09F8  00F1               	movwf	??_I2C_Write
  6497  09F9  0871               	movf	??_I2C_Write,w
  6498  09FA  07F4               	addwf	I2C_Write@i,f
  6499  09FB  3008               	movlw	8
  6500  09FC  0274               	subwf	I2C_Write@i,w
  6501  09FD  1C03               	skipc
  6502  09FE  29E3               	goto	l78
  6503  09FF                     l79:	
  6504                           
  6505                           ;i2c.c: 50: }
  6506                           ;i2c.c: 51: RD0 = 1;
  6507  09FF  1283               	bcf	3,5	;RP0=0, select bank0
  6508  0A00  1303               	bcf	3,6	;RP1=0, select bank0
  6509  0A01  1408               	bsf	8,0	;volatile
  6510  0A02  0008               	return
  6511  0A03                     __end_of_I2C_Write:	
  6512                           
  6513                           	psect	text32
  6514  0932                     __ptext32:	
  6515 ;; *************** function _I2C_Clock *****************
  6516 ;; Defined at:
  6517 ;;		line 9 in file "i2c.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;		None
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;		None
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  1    wreg      void 
  6524 ;; Registers used:
  6525 ;;		None
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6531 ;;      Params:         0       0       0       0       0
  6532 ;;      Locals:         0       0       0       0       0
  6533 ;;      Temps:          0       0       0       0       0
  6534 ;;      Totals:         0       0       0       0       0
  6535 ;;Total ram usage:        0 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; This function calls:
  6538 ;;		Nothing
  6539 ;; This function is called by:
  6540 ;;		_DS1307_Write
  6541 ;;		_I2C_Write
  6542 ;;		_I2C_Ack
  6543 ;;		_I2C_NoAck
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           
  6548                           ;psect for function _I2C_Clock
  6549  0932                     _I2C_Clock:	
  6550                           
  6551                           ;i2c.c: 11: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6552                           
  6553                           ;incstack = 0
  6554                           ; Regs used in _I2C_Clock: []
  6555  0932  0000               	nop
  6556                           
  6557                           ;i2c.c: 12: RD1 = 1;
  6558  0933  1283               	bcf	3,5	;RP0=0, select bank0
  6559  0934  1303               	bcf	3,6	;RP1=0, select bank0
  6560  0935  1488               	bsf	8,1	;volatile
  6561                           
  6562                           ;i2c.c: 13: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6563  0936  0000               	nop
  6564                           
  6565                           ;i2c.c: 14: RD1 = 0;
  6566  0937  1283               	bcf	3,5	;RP0=0, select bank0
  6567  0938  1303               	bcf	3,6	;RP1=0, select bank0
  6568  0939  1088               	bcf	8,1	;volatile
  6569  093A  0008               	return
  6570  093B                     __end_of_I2C_Clock:	
  6571                           
  6572                           	psect	text33
  6573  0929                     __ptext33:	
  6574 ;; *************** function _DS1307_Read *****************
  6575 ;; Defined at:
  6576 ;;		line 38 in file "DS1307.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;		None
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;		None
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      unsigned char 
  6583 ;; Registers used:
  6584 ;;		wreg, status,2, status,0, pclath, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6590 ;;      Params:         0       0       0       0       0
  6591 ;;      Locals:         0       0       0       0       0
  6592 ;;      Temps:          0       0       0       0       0
  6593 ;;      Totals:         0       0       0       0       0
  6594 ;;Total ram usage:        0 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    1
  6597 ;; This function calls:
  6598 ;;		_I2C_Read
  6599 ;; This function is called by:
  6600 ;;		_DS1307_Init
  6601 ;;		_DS1307_GetTime
  6602 ;;		_DS1307_GetDate
  6603 ;;		_DS1307_readRam
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           
  6608                           ;psect for function _DS1307_Read
  6609  0929                     _DS1307_Read:	
  6610                           
  6611                           ;DS1307.c: 40: return I2C_Read();
  6612                           
  6613                           ;incstack = 0
  6614                           ; Regs used in _DS1307_Read: [wreg+status,2+status,0+pclath+cstack]
  6615  0929  120A  158A  229F   	fcall	_I2C_Read
  6616  092C  0008               	return
  6617  092D                     __end_of_DS1307_Read:	
  6618                           
  6619                           	psect	text34
  6620  0A9F                     __ptext34:	
  6621 ;; *************** function _I2C_Read *****************
  6622 ;; Defined at:
  6623 ;;		line 54 in file "i2c.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;		None
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  dat             1    3[COMMON] unsigned char 
  6628 ;;  i               1    2[COMMON] unsigned char 
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  1    wreg      unsigned char 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6638 ;;      Params:         0       0       0       0       0
  6639 ;;      Locals:         2       0       0       0       0
  6640 ;;      Temps:          2       0       0       0       0
  6641 ;;      Totals:         4       0       0       0       0
  6642 ;;Total ram usage:        4 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; This function calls:
  6645 ;;		Nothing
  6646 ;; This function is called by:
  6647 ;;		_DS1307_Read
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           
  6652                           ;psect for function _I2C_Read
  6653  0A9F                     _I2C_Read:	
  6654                           
  6655                           ;i2c.c: 56: unsigned char i, dat=0x00;
  6656                           
  6657                           ;incstack = 0
  6658                           ; Regs used in _I2C_Read: [wreg+status,2+status,0]
  6659  0A9F  01F4               	clrf	I2C_Read@dat
  6660                           
  6661                           ;i2c.c: 58: TRISD0 = 1 ;
  6662  0AA0  1683               	bsf	3,5	;RP0=1, select bank1
  6663  0AA1  1303               	bcf	3,6	;RP1=0, select bank1
  6664  0AA2  1408               	bsf	8,0	;volatile
  6665                           
  6666                           ;i2c.c: 60: for(i=0;i<8;i++)
  6667  0AA3  01F3               	clrf	I2C_Read@i
  6668  0AA4  3008               	movlw	8
  6669  0AA5  0273               	subwf	I2C_Read@i,w
  6670  0AA6  1803               	btfsc	3,0
  6671  0AA7  2AC4               	goto	l84
  6672  0AA8                     l83:	
  6673                           
  6674                           ;i2c.c: 61: {
  6675                           ;i2c.c: 62: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6676  0AA8  0000               	nop
  6677                           
  6678                           ;i2c.c: 64: RD1 = 1;
  6679  0AA9  1283               	bcf	3,5	;RP0=0, select bank0
  6680  0AAA  1303               	bcf	3,6	;RP1=0, select bank0
  6681  0AAB  1488               	bsf	8,1	;volatile
  6682                           
  6683                           ;i2c.c: 66: dat = dat << 1;
  6684  0AAC  0874               	movf	I2C_Read@dat,w
  6685  0AAD  00F1               	movwf	??_I2C_Read
  6686  0AAE  0771               	addwf	??_I2C_Read,w
  6687  0AAF  00F2               	movwf	??_I2C_Read+1
  6688  0AB0  0872               	movf	??_I2C_Read+1,w
  6689  0AB1  00F4               	movwf	I2C_Read@dat
  6690                           
  6691                           ;i2c.c: 68: if (RD0 == 1)
  6692  0AB2  1C08               	btfss	8,0	;volatile
  6693  0AB3  2AB8               	goto	l1905
  6694                           
  6695                           ;i2c.c: 69: dat++;
  6696  0AB4  3001               	movlw	1
  6697  0AB5  00F1               	movwf	??_I2C_Read
  6698  0AB6  0871               	movf	??_I2C_Read,w
  6699  0AB7  07F4               	addwf	I2C_Read@dat,f
  6700  0AB8                     l1905:	
  6701                           
  6702                           ;i2c.c: 71: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6703  0AB8  0000               	nop
  6704                           
  6705                           ;i2c.c: 73: RD1 = 0;
  6706  0AB9  1283               	bcf	3,5	;RP0=0, select bank0
  6707  0ABA  1303               	bcf	3,6	;RP1=0, select bank0
  6708  0ABB  1088               	bcf	8,1	;volatile
  6709  0ABC  3001               	movlw	1
  6710  0ABD  00F1               	movwf	??_I2C_Read
  6711  0ABE  0871               	movf	??_I2C_Read,w
  6712  0ABF  07F3               	addwf	I2C_Read@i,f
  6713  0AC0  3008               	movlw	8
  6714  0AC1  0273               	subwf	I2C_Read@i,w
  6715  0AC2  1C03               	skipc
  6716  0AC3  2AA8               	goto	l83
  6717  0AC4                     l84:	
  6718                           
  6719                           ;i2c.c: 74: }
  6720                           ;i2c.c: 76: TRISD0 = 0 ;
  6721  0AC4  1683               	bsf	3,5	;RP0=1, select bank1
  6722  0AC5  1303               	bcf	3,6	;RP1=0, select bank1
  6723  0AC6  1008               	bcf	8,0	;volatile
  6724                           
  6725                           ;i2c.c: 78: return dat;
  6726  0AC7  0874               	movf	I2C_Read@dat,w
  6727  0AC8  0008               	return
  6728  0AC9                     __end_of_I2C_Read:	
  6729  007E                     btemp	set	126	;btemp
  6730  007E                     wtemp	set	126
  6731  007E                     wtemp0	set	126
  6732  0080                     wtemp1	set	128
  6733  0082                     wtemp2	set	130
  6734  0084                     wtemp3	set	132
  6735  0086                     wtemp4	set	134
  6736  0088                     wtemp5	set	136
  6737  007F                     wtemp6	set	127
  6738  007E                     ttemp	set	126
  6739  007E                     ttemp0	set	126
  6740  0081                     ttemp1	set	129
  6741  0084                     ttemp2	set	132
  6742  0087                     ttemp3	set	135
  6743  007F                     ttemp4	set	127
  6744  007E                     ltemp	set	126
  6745  007E                     ltemp0	set	126
  6746  0082                     ltemp1	set	130
  6747  0086                     ltemp2	set	134
  6748  0080                     ltemp3	set	128


Data Sizes:
    Strings     67
    Constant    67
    Data        24
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     42      72
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_10(CODE[6]), STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[5]), 
		 -> STR_6(CODE[8]), STR_5(CODE[8]), STR_4(CODE[6]), setText(CODE[5]), 
		 -> STR_3(CODE[8]), STR_2(CODE[7]), STR_1(CODE[7]), LCDWriteInt@str(BANK0[6]), 

    DS1307_writeRam@ptr	PTR unsigned char  size(1) Largest target is 2
		 -> runningTime(BANK0[2]), 

    DS1307_readRam@ptr	PTR unsigned char  size(2) Largest target is 512
		 -> runningTime(BANK0[2]), RAM(DATA[512]), 

    DS1307_GetDate@y_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 

    DS1307_GetDate@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetDate@d_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetDate@n_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@n(BANK0[1]), 

    DS1307_GetTime@h_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetTime@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetTime@s_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_DS1307_readRam
    _main->_LCDGotoXY
    _main->_LCDInit
    _main->___wmul
    _showClock->_LCDGotoXY
    _showRunningTime->_LCDGotoXY
    _readClock->___wmul
    _DS1307_writeRam->_DS1307_Write
    _DS1307_GetTime->_DS1307_Write
    _DS1307_GetDate->_DS1307_Write
    _doMenu->_LCDGotoXY
    _showDate->___wmul
    _LCDWriteInt->___wmul
    ___wmul->___awdiv
    _DS1307_SetTime->_DS1307_Write
    _DS1307_SetDate->_DS1307_Write
    _clearPrompt->_LCDGotoXY
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _DS1307_readRam->_DS1307_Write
    _DS1307_Init->_DS1307_Write
    _DS1307_Write->_I2C_Write
    _DS1307_Read->_I2C_Read

Critical Paths under _main in BANK0

    _main->_doMenu
    _showClock->_showDate
    _showClock->_showRunningTime
    _showRunningTime->_LCDWriteInt
    _readClock->___wmul
    _doMenu->_showDate
    _showTime->_LCDWriteInt
    _showDate->_LCDWriteInt
    _LCDWriteInt->_LCDWriteString
    _LCDWriteInt->___wmul
    _clearPrompt->_LCDGotoXY
    _clearPrompt->_LCDWriteString

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   84949
                                             39 BANK0      3     3      0
                        _DS1307_Init
                     _DS1307_readRam
                           _I2C_Init
                            _LCDByte
                          _LCDGotoXY
                            _LCDInit
                     _LCDWriteString
                             ___wmul
                        _clearPrompt
                             _doMenu
                          _readClock
                         _readInputs
                          _showClock
 ---------------------------------------------------------------------------------
 (1) _showClock                                            0     0      0   36032
                          _LCDGotoXY
                           _showDate
                    _showRunningTime
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showRunningTime                                      3     3      0   14534
                                             19 BANK0      3     3      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _readClock                                            7     7      0    5330
                                              2 BANK0      7     7      0
                     _DS1307_GetDate
                     _DS1307_GetTime
                    _DS1307_writeRam
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _DS1307_writeRam                                      7     3      4     313
                                              5 COMMON     7     3      4
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetTime                                       4     2      2     405
                                              5 COMMON     4     2      2
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetDate                                       5     2      3     480
                                              5 COMMON     5     2      3
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _doMenu                                              17    17      0   29403
                                             22 BANK0     17    17      0
                     _DS1307_SetDate
                     _DS1307_SetTime
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            ___awdiv
                            ___awmod
                         _readInputs
                           _showDate
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showTime                                             1     1      0    8800
                                             19 BANK0      1     1      0
                            _LCDByte
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (2) _showDate                                             3     3      0   10339
                                             19 BANK0      3     3      0
                            _LCDByte
                        _LCDWriteInt
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _LCDWriteInt                                         17    14      3    7518
                                              2 BANK0     17    14      3
                     _LCDWriteString
                            ___awdiv
                            ___awmod (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1470
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    2208
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _readInputs                                           4     4      0      23
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1144
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetTime                                       3     1      2     285
                                              5 COMMON     3     1      2
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetDate                                       4     1      3     360
                                              5 COMMON     4     1      3
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _clearPrompt                                          0     0      0    4640
                          _LCDGotoXY
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (4) _LCDWriteString                                       2     0      2    2281
                                              0 BANK0      2     0      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDGotoXY                                            3     2      1    2359
                                             12 COMMON     1     0      1
                                              0 BANK0      2     2      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1421
                                             12 COMMON     1     1      0
                                              0 BANK0      2     2      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDByte                                              7     6      1    1282
                                              5 COMMON     7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (6) _LCDBusyLoop                                          5     5      0     117
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS1307_readRam                                       8     2      6     433
                                              5 COMMON     8     2      6
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (1) _DS1307_Init                                          2     2      0     275
                                              5 COMMON     2     2      0
                        _DS1307_Read
                       _DS1307_Write
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_NoAck                                            0     0      0       0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (3) _DS1307_Write                                         1     1      0     113
                                              4 COMMON     1     1      0
                          _I2C_Clock
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            4     4      0      91
                                              0 COMMON     4     4      0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (5) _I2C_Clock                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DS1307_Read                                          0     0      0      93
                           _I2C_Read
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             4     4      0      93
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1307_Init
     _DS1307_Read
       _I2C_Read
     _DS1307_Write
       _I2C_Clock
       _I2C_Write
         _I2C_Clock
     _I2C_NoAck
       _I2C_Clock
     _I2C_Start
     _I2C_Stop
   _DS1307_readRam
     _DS1307_Read
       _I2C_Read
     _DS1307_Write
       _I2C_Clock
       _I2C_Write
         _I2C_Clock
     _I2C_Ack
       _I2C_Clock
     _I2C_NoAck
       _I2C_Clock
     _I2C_Start
     _I2C_Stop
   _I2C_Init
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   ___wmul
     ___awdiv (ARG)
   _clearPrompt
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _doMenu
     _DS1307_SetDate
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_SetTime
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     ___awdiv
     ___awmod
     _readInputs
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _readClock
     _DS1307_GetDate
       _DS1307_Read
         _I2C_Read
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Ack
         _I2C_Clock
       _I2C_NoAck
         _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_GetTime
       _DS1307_Read
         _I2C_Read
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Ack
         _I2C_Clock
       _I2C_NoAck
         _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_writeRam
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _readInputs
   _showClock
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     _showRunningTime
       _LCDByte
         _LCDBusyLoop
       _LCDGotoXY
         _LCDByte
           _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___awdiv
       ___awmod
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      48       5       90.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      D       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      55      12        0.0%
ABS                  0      0      55       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon May 16 19:37:33 2016

            ?_LCDBusyLoop 0071        __size_of_I2C_Clock 0009        __size_of_I2C_NoAck 000A  
                       pc 0002        __size_of_I2C_Start 0011               __CFG_CP$OFF 0000  
      __size_of_I2C_Write 0026                        l83 0AA8                        l84 0AC4  
                      l78 09E3                        l79 09FF              ___awdiv@sign 0077  
                      fsr 0004       ___wmul@multiplicand 007C               __CFG_LVP$ON 0000  
                     l113 0CD4                       l114 0CD7                       l150 0A22  
                     l151 0A0B                       l315 0571                       l246 0F65  
                     l351 06BF                       l327 05D0                       l273 0357  
                     l339 0648                       l285 03B3                       l471 0A5E  
                     l297 041C                       _RB1 0031                       _RB2 0032  
                     _RD0 0040                       _RB4 0034                       _RD1 0041  
                     _RB5 0035                       _RD2 0042                       _RD3 0043  
            __CFG_CPD$OFF 0000               __CFG_WRT$ON 0000                       _day 0052  
         __end_of_I2C_Ack 094F                       fsr0 0004                       indf 0000  
            ___awmod@sign 0077              __CFG_FOSC$XT 0000              _DS1307_Write 094F  
 LCDWriteInt@field_length 0024           __end_of_LCDByte 0D0B           __end_of_LCDInit 0B98  
            ?_LCDWriteInt 0022               LCDByte@temp 007C                      l2021 00BF  
                    l2111 0C07                      l2105 0BEB                      l2033 00FB  
                    l2107 0BF9                      l2115 0C12                      l2211 0B59  
                    l2045 0137                      l2303 0CB7                      l2119 0C1A  
                    l2223 0B08                      l2063 0181                      l2321 0E5F  
                    l2081 0A14                      l2057 0173                      l2209 0B39  
                    l2075 0A0D                      l2411 02F8                      l2077 0A0F  
                    l2093 0BDE                      l2069 019D                      l2319 0E39  
                    l2511 0428                      l2415 02FF                      l2097 0BE5  
                    l2441 0361                      l2409 02ED                      l2531 0501  
                    l2451 036A                      l2443 0363                      l2605 05AD  
                    l2525 0454                      l2509 0426                      l2517 03FA  
                    l2453 036F                      l2533 050C                      l2607 05F4  
                    l2519 043C                      l1905 0AB8                      l1809 0DC5  
                    l1921 0A29                      l2641 0675                      l2633 0661  
                    l2609 05F9                      l2537 0513                      l2449 0335  
                    l2643 067A                      l2571 054D                      l2475 03BD  
                    l2483 0391                      l2715 0F52                      l2707 0FB7  
                    l1925 0A54                      l2573 0586                      l2565 057F  
                    l2485 03D3                      l2477 03BF                      l2389 02CF  
                    l1951 0D76                      l2639 061B                      l2575 058B  
                    l2487 03D8                      l2743 0FFA                      l2719 0F58  
                    l1961 0D7E                      l1945 0D6B                      l2673 069C  
                    l2729 0F70                      l1883 09EC                      l1963 0D8C  
                    l2683 0701                      l2675 06E1                      l2667 06CD  
                    l2739 0FA8                      l1973 0DAD                      l2687 07DF  
                    l2599 05E0                      l1977 0DB5                      l1969 0DA2  
                    STR_1 086B                      STR_2 0872                      STR_3 0853  
                    STR_4 088B                      STR_5 0863                      STR_6 085B  
                    STR_7 0891                      STR_8 0885                      STR_9 087F  
                    u2005 03AE                      u1400 09E9                      u1315 0DCD  
                    u1325 0DD9                      u2125 0442                      u1335 0DEF  
                    u2135 044A                      u2145 0452                      u1355 0CBF  
                    u2075 0417                      u2405 06B9                      u1375 0CDD  
                    u2335 0640                      u1385 0CF5                      u1545 0D81  
                    u2265 05CA                      u2195 056A                      u1565 0D8D  
                    u1485 0A5F                      u1805 0B49                      u2605 0FF8  
                    u1575 0D99                      u1495 0A66                      u2455 06E7  
                    u1745 0BEE                      u2617 0AFE                      u1585 0DA3  
                    u2465 06EF                      u2627 0B64                      u1835 0B14  
                    u2475 06F7                      u1765 0BFF                      u2485 06FF  
                    u1855 0E49                      u1775 0C08                      u1695 0195  
                    u1935 0352                      u1865 0238                      u1875 02D5  
                    _date 0050                      _main 0F2A                      _hour 0054  
      __size_of_LCDGotoXY 0026          __end_of_I2C_Init 0932          __end_of_I2C_Read 0AC9  
                    _year 005E                      btemp 007E               _runningTime 0066  
        __end_of_I2C_Stop 096A                      ltemp 007E                      start 0001  
                    ttemp 007E                      wtemp 007E          DS1307_SetDate@dd 0076  
        DS1307_SetDate@mm 0077          DS1307_SetDate@nn 0079          DS1307_SetDate@yy 0078  
       ??_DS1307_writeRam 007A                     ?_main 0071           __end_of___awdiv 0DBA  
                   STR_10 0879             __CFG_WDTE$OFF 0000           __end_of___awmod 0C1F  
            LCDInit@style 007D           ___awdiv@divisor 0071           ___awdiv@counter 0076  
                   _PORTD 0008                     _TRISD 0088             __CFG_PWRTE$ON 0000  
        DS1307_SetTime@hh 0078          DS1307_SetTime@mm 0076          DS1307_SetTime@ss 0077  
          _DS1307_GetDate 0007            _DS1307_GetTime 0D0B         __end_of_I2C_Clock 093B  
       __end_of_I2C_NoAck 0945                     _month 0058                     _state 0065  
       __end_of_I2C_Start 097B           __end_of_setText 0853         __end_of_I2C_Write 0A03  
          __CFG_BOREN$OFF 0000                     pclath 000A                     ltemp0 007E  
                   ltemp1 0082                     ltemp2 0086                     ltemp3 0080  
          _DS1307_SetDate 0AC9            _DS1307_SetTime 0A77                     ttemp0 007E  
                   ttemp1 0081                     ttemp2 0084                     ttemp3 0087  
                   ttemp4 007F                     status 0003                     wtemp0 007E  
                   wtemp1 0080                     wtemp2 0082                     wtemp3 0084  
                   wtemp4 0086                     wtemp5 0088                     wtemp6 007F  
         __initialization 07EA      __size_of_clearPrompt 0017              __end_of_main 1000  
__size_of_showRunningTime 004C            _DS1307_readRam 0E17                 ??_I2C_Ack 0071  
                  ??_main 0047         __end_of_LCDGotoXY 0A29             LCDByte@isdata 0076  
               ??_LCDByte 0077                 ??_LCDInit 0020    __end_of_DS1307_GetDate 006D  
  __end_of_DS1307_GetTime 0D61                 I2C_Read@i 0073    __end_of_DS1307_SetDate 0AF7  
        ___awdiv@dividend 0073    __end_of_DS1307_SetTime 0A9F                    _TRISD0 0440  
                  _TRISD1 0441              DS1307_Init@s 0077      DS1307_readRam@length 007A  
    DS1307_readRam@offset 0078            _LCDWriteString 0A29    __end_of_DS1307_readRam 0E78  
                  ___wmul 0A50                 ??___awdiv 0075                    _doMenu 02ED  
               ??___awmod 0075      __size_of_LCDBusyLoop 005D          ___awdiv@quotient 0078  
                  _minute 0056           ___awmod@divisor 0071     __end_of_daysOfTheWeek 0842  
         ___awmod@counter 0076                    _ttable 0810             _runningMinute 005A  
               ?_I2C_Init 0071                 ?_I2C_Read 0071          __end_of_showDate 0F2A  
         ?_DS1307_GetDate 0076                 ?_I2C_Stop 0071              LCDWriteInt@c 0032  
        __end_of_showTime 0BD4           ?_DS1307_GetTime 0076           ?_DS1307_SetDate 0076  
         ?_DS1307_SetTime 0076      __size_of_LCDWriteInt 013B   __end_of__initialization 07FC  
  __end_of_LCDWriteString 0A50                 LCDByte@hn 0079                 LCDByte@ln 007A  
          __pcstackCOMMON 0071           ?_DS1307_readRam 0076              __pidataBANK0 09A3  
       ??_showRunningTime 0033                ??_I2C_Init 0071                ??_I2C_Read 0071  
              ??_I2C_Stop 0071             ??_DS1307_Init 0076             ??_DS1307_Read 0075  
              __pbssBANK0 0062        __size_of_readClock 0145           ?_LCDWriteString 0020  
         _DS1307_writeRam 0B26                __pmaintext 0F2A                   ?___wmul 007A  
                 ?_doMenu 0071                   _I2C_Ack 0945                I2C_Write@i 0074  
      __size_of_showClock 0022                   _LCDByte 0CBB                   _LCDInit 0B5D  
              __stringtab 0800                 _I2C_Clock 0932                 _I2C_NoAck 093B  
               _I2C_Start 096A                 _I2C_Write 09DD       __end_of_DS1307_Init 0CBB  
     __end_of_DS1307_Read 092D                   _bButton 0064           _next_menu_clear 0062  
               ?_showDate 0071                 ?_showTime 0071              I2C_Write@dat 0073  
                 ___awdiv 0D61                   ___awmod 0BD4           __size_of___wmul 0027  
              _readInputs 0AF7           __size_of_doMenu 04FD                   __ptext1 09BB  
                 __ptext2 0C1F                   __ptext3 01A8                   __ptext4 0B26  
                 __ptext5 0D0B                   __ptext6 0007                   __ptext7 02ED  
                 __ptext8 0B98                   __ptext9 0E78         __end_of_readClock 02ED  
                 doMenu@d 0041                   doMenu@h 0039                   doMenu@m 003B  
                 doMenu@n 003F                   doMenu@s 003D                   doMenu@y 0045  
        ___awmod@dividend 0073                   _seconds 005C                   _setText 084E  
               _LCDGotoXY 0A03   __end_of_DS1307_writeRam 0B5D      end_of_initialization 07FC  
       __end_of_monthDays 084E                ?_I2C_Clock 0071                ?_I2C_NoAck 0071  
              ?_I2C_Start 0071         __end_of_showClock 09DD             ??_clearPrompt 007E  
              ?_I2C_Write 0071                ??_showDate 0033                ??_showTime 0033  
   LCDWriteInt@characters 0028          ??_DS1307_GetDate 0079          ??_DS1307_GetTime 0078  
       LCDWriteString@msg 0020          ??_DS1307_SetDate 0079          ??_DS1307_SetTime 0078  
               _TRISBbits 0086                 _TRISDbits 0088                ?_LCDGotoXY 007D  
       __size_of_I2C_Init 0005         __size_of_I2C_Read 002A         __size_of_I2C_Stop 0010  
             _DS1307_Init 0C6B               _DS1307_Read 0929       _showRunningTime$725 0034  
              LCDGotoXY@x 0021                LCDGotoXY@y 007D          ??_DS1307_readRam 007C  
         _showRunningTime 0C1F             ??_LCDBusyLoop 0071               ?_readInputs 0071  
     __end_of_clearPrompt 09A3            __end_of___wmul 0A77            __end_of_doMenu 07EA  
          __end_of_ttable 082C       start_initialization 07EA             ?_DS1307_Write 0071  
           ??_LCDWriteInt 0025          ??_LCDWriteString 007D          ?_DS1307_writeRam 0076  
             ??_I2C_Clock 0071               ??_I2C_NoAck 0071                readClock@a 0026  
              readClock@b 0027                readClock@c 0028                readClock@n 0025  
             ??_I2C_Start 0071               ??_I2C_Write 0071           DS1307_Write@dat 0075  
                ??___wmul 007E                  ??_doMenu 0036                init_fetch0 097B  
             __pdataBANK0 004A                  ?_I2C_Ack 0071       __end_of_LCDBusyLoop 0E17  
                ?_LCDByte 0076                  ?_LCDInit 0071            ??_DS1307_Write 0075  
                LCDByte@c 007B                 ___latbits 0002             __pcstackBANK0 0020  
             ??_LCDGotoXY 0020              _menuFunction 0061       __size_of_readInputs 002F  
       DS1307_readRam@ptr 0076   __end_of_showRunningTime 0C6B          LCDWriteInt@F1143 004A  
     __end_of_LCDWriteInt 01A8               _clearPrompt 098C               I2C_Read@dat 0074  
                ?___awdiv 0071                  ?___awmod 0071         __size_of_showDate 00B2  
       __size_of_showTime 003C                 __pstrings 0800             _daysOfTheWeek 082C  
                _I2C_Init 092D                  _I2C_Read 0A9F                  _I2C_Stop 095A  
               _readClock 01A8           LCDBusyLoop@busy 0073           LCDBusyLoop@temp 0074  
               _last_hour 0060            ___wmul@product 0020                 _monthDays 0842  
               _showClock 09BB               _LCDBusyLoop 0DBA          __size_of_I2C_Ack 000A  
             __stringbase 080F         ___wmul@multiplier 007A          __size_of_LCDByte 0050  
        __size_of_LCDInit 003B                ?_readClock 0071               _LCDWriteInt 006D  
   DS1307_writeRam@length 0078     DS1307_writeRam@offset 0076              ?_DS1307_Init 0071  
            ?_DS1307_Read 0071               doMenu@m_296 0043          ?_showRunningTime 0071  
    __end_of_DS1307_Write 095A                ?_showClock 0071              ??_readInputs 0071  
        __size_of___awdiv 0059          __size_of___awmod 004B         LCDBusyLoop@status 0075  
      __end_of__stringtab 0810       DS1307_GetDate@d_ptr 0076       DS1307_GetDate@m_ptr 0077  
     DS1307_GetDate@n_ptr 007A       DS1307_GetDate@y_ptr 0078           LCDWriteInt@from 0030  
                __ptext10 006D                  __ptext11 0A50                  __ptext20 0B5D  
                __ptext12 0D61                  __ptext21 0CBB                  __ptext13 0AF7  
                __ptext30 094F                  __ptext22 0DBA                  __ptext14 0BD4  
                __ptext31 09DD                  __ptext23 092D                  __ptext15 0A77  
                __ptext32 0932                  __ptext24 0E17                  __ptext16 0AC9  
                __ptext33 0929                  __ptext25 0945                  __ptext17 098C  
                __ptext34 0A9F                  __ptext26 0C6B                  __ptext18 0A29  
                __ptext27 095A                  __ptext19 0A03                  __ptext28 096A  
                __ptext29 093B        DS1307_writeRam@ptr 007C        __end_of_readInputs 0B26  
           __size_of_main 00D6                 showDate@d 0034                  _showDate 0E78  
                _showTime 0B98               ??_readClock 0022                  init_ram0 097F  
 __size_of_DS1307_GetDate 0066   __size_of_DS1307_GetTime 0056   __size_of_DS1307_SetDate 002E  
          LCDWriteInt@val 0022            LCDWriteInt@str 002A   __size_of_DS1307_SetTime 0028  
            ?_clearPrompt 0071                 stringcode 080A  __size_of_DS1307_writeRam 0037  
             ??_showClock 007E   __size_of_DS1307_readRam 0061                  stringdir 080A  
                stringtab 0800     __size_of_DS1307_Write 000B       DS1307_GetTime@h_ptr 0079  
     DS1307_GetTime@m_ptr 0076       DS1307_GetTime@s_ptr 0077      __size_of_DS1307_Init 0050  
    __size_of_DS1307_Read 0004        readInputs@pinstate 0074   __size_of_LCDWriteString 0027  
