

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon May 16 20:02:26 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000D                     	;# 
   120  000E                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001B                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  0081                     	;# 
   142  0085                     	;# 
   143  0086                     	;# 
   144  0087                     	;# 
   145  0088                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009E                     	;# 
   157  009F                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  000E                     	;# 
   180  000F                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0014                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  0081                     	;# 
   200  0085                     	;# 
   201  0086                     	;# 
   202  0087                     	;# 
   203  0088                     	;# 
   204  0089                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  008E                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0093                     	;# 
   211  0094                     	;# 
   212  0098                     	;# 
   213  0099                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0088                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280                           
   281                           	psect	idataBANK0
   282  0943                     __pidataBANK0:	
   283                           
   284                           ;initializer for LCDWriteInt@F1143
   285  0943  342D               	retlw	45
   286  0944  342D               	retlw	45
   287  0945  342D               	retlw	45
   288  0946  342D               	retlw	45
   289  0947  342D               	retlw	45
   290  0948  3400               	retlw	0
   291                           
   292                           ;initializer for _date
   293  0949  3408               	retlw	8
   294  094A  3400               	retlw	0
   295                           
   296                           ;initializer for _day
   297  094B  3401               	retlw	1
   298  094C  3400               	retlw	0
   299                           
   300                           ;initializer for _hour
   301  094D  3406               	retlw	6
   302  094E  3400               	retlw	0
   303                           
   304                           ;initializer for _minute
   305  094F  3405               	retlw	5
   306  0950  3400               	retlw	0
   307                           
   308                           ;initializer for _month
   309  0951  3405               	retlw	5
   310  0952  3400               	retlw	0
   311                           
   312                           ;initializer for _runningMinute
   313  0953  34FF               	retlw	255
   314  0954  34FF               	retlw	255
   315                           
   316                           ;initializer for _seconds
   317  0955  3404               	retlw	4
   318  0956  3400               	retlw	0
   319                           
   320                           ;initializer for _year
   321  0957  3410               	retlw	16
   322  0958  3400               	retlw	0
   323                           
   324                           ;initializer for _last_hour
   325  0959  34EE               	retlw	238
   326                           
   327                           ;initializer for _menuFunction
   328  095A  3401               	retlw	1
   329                           
   330                           	psect	strings
   331  0800                     __pstrings:	
   332  0800                     stringtab:	
   333  0800                     __stringtab:	
   334                           
   335                           ;	String table - string pointers are 1 byte each
   336  0800  1BFF               	btfsc	btemp+1,7
   337  0801  280A               	ljmp	stringcode
   338  0802  1383               	bcf	3,7
   339  0803  187F               	btfsc	btemp+1,0
   340  0804  1783               	bsf	3,7
   341  0805  0800               	movf	0,w
   342  0806  0A84               	incf	4,f
   343  0807  1903               	skipnz
   344  0808  0AFF               	incf	btemp+1,f
   345  0809  0008               	return
   346  080A                     stringcode:	
   347  080A                     stringdir:	
   348  080A  3008               	movlw	high stringdir
   349  080B  008A               	movwf	10
   350  080C  0804               	movf	4,w
   351  080D  0A84               	incf	4,f
   352  080E  0782               	addwf	2,f
   353  080F                     __stringbase:	
   354  080F  3400               	retlw	0
   355  0810                     __end_of__stringtab:	
   356  0810                     _ttable:	
   357  0810  3400               	retlw	0
   358  0811  3402               	retlw	2
   359  0812  3404               	retlw	4
   360  0813  3400               	retlw	0
   361  0814  3403               	retlw	3
   362  0815  3400               	retlw	0
   363  0816  3401               	retlw	1
   364  0817  3410               	retlw	16
   365  0818  3403               	retlw	3
   366  0819  3402               	retlw	2
   367  081A  3400               	retlw	0
   368  081B  3400               	retlw	0
   369  081C  3403               	retlw	3
   370  081D  3402               	retlw	2
   371  081E  3401               	retlw	1
   372  081F  3400               	retlw	0
   373  0820  3406               	retlw	6
   374  0821  3400               	retlw	0
   375  0822  3404               	retlw	4
   376  0823  3400               	retlw	0
   377  0824  3406               	retlw	6
   378  0825  3405               	retlw	5
   379  0826  3400               	retlw	0
   380  0827  3420               	retlw	32
   381  0828  3406               	retlw	6
   382  0829  3405               	retlw	5
   383  082A  3404               	retlw	4
   384  082B  3400               	retlw	0
   385  082C                     __end_of_ttable:	
   386  082C                     _daysOfTheWeek:	
   387  082C  344D               	retlw	77
   388  082D  346F               	retlw	111
   389  082E  346E               	retlw	110
   390  082F  3454               	retlw	84
   391  0830  3475               	retlw	117
   392  0831  3465               	retlw	101
   393  0832  3457               	retlw	87
   394  0833  3465               	retlw	101
   395  0834  3464               	retlw	100
   396  0835  3454               	retlw	84
   397  0836  3468               	retlw	104
   398  0837  3475               	retlw	117
   399  0838  3446               	retlw	70
   400  0839  3472               	retlw	114
   401  083A  3469               	retlw	105
   402  083B  3453               	retlw	83
   403  083C  3461               	retlw	97
   404  083D  3474               	retlw	116
   405  083E  3453               	retlw	83
   406  083F  3475               	retlw	117
   407  0840  346E               	retlw	110
   408  0841  3400               	retlw	0
   409  0842                     __end_of_daysOfTheWeek:	
   410  0842                     _monthDays:	
   411  0842  341F               	retlw	31
   412  0843  341D               	retlw	29
   413  0844  341F               	retlw	31
   414  0845  341E               	retlw	30
   415  0846  341F               	retlw	31
   416  0847  341E               	retlw	30
   417  0848  341F               	retlw	31
   418  0849  341F               	retlw	31
   419  084A  341E               	retlw	30
   420  084B  341F               	retlw	31
   421  084C  341E               	retlw	30
   422  084D  341F               	retlw	31
   423  084E                     __end_of_monthDays:	
   424  084E                     _setText:	
   425  084E  3453               	retlw	83
   426  084F  3465               	retlw	101
   427  0850  3474               	retlw	116
   428  0851  3420               	retlw	32
   429  0852  3400               	retlw	0
   430  0853                     __end_of_setText:	
   431  0008                     _PORTD	set	8
   432  0031                     _RB1	set	49
   433  0032                     _RB2	set	50
   434  0034                     _RB4	set	52
   435  0035                     _RB5	set	53
   436  0040                     _RD0	set	64
   437  0041                     _RD1	set	65
   438  0042                     _RD2	set	66
   439  0043                     _RD3	set	67
   440  0086                     _TRISBbits	set	134
   441  0088                     _TRISD	set	136
   442  0088                     _TRISDbits	set	136
   443  0440                     _TRISD0	set	1088
   444  0441                     _TRISD1	set	1089
   445  0853                     STR_1:	
   446  0853  3453               	retlw	83	;'S'
   447  0854  3474               	retlw	116	;'t'
   448  0855  3461               	retlw	97	;'a'
   449  0856  3472               	retlw	114	;'r'
   450  0857  3474               	retlw	116	;'t'
   451  0858  3469               	retlw	105	;'i'
   452  0859  346E               	retlw	110	;'n'
   453  085A  3467               	retlw	103	;'g'
   454  085B  3420               	retlw	32	;' '
   455  085C  3463               	retlw	99	;'c'
   456  085D  346F               	retlw	111	;'o'
   457  085E  3475               	retlw	117	;'u'
   458  085F  346E               	retlw	110	;'n'
   459  0860  3474               	retlw	116	;'t'
   460  0861  3465               	retlw	101	;'e'
   461  0862  3472               	retlw	114	;'r'
   462  0863  3400               	retlw	0
   463  0864                     STR_3:	
   464  0864  3420               	retlw	32	;' '
   465  0865  346D               	retlw	109	;'m'
   466  0866  3469               	retlw	105	;'i'
   467  0867  346E               	retlw	110	;'n'
   468  0868  3475               	retlw	117	;'u'
   469  0869  3474               	retlw	116	;'t'
   470  086A  3465               	retlw	101	;'e'
   471  086B  3473               	retlw	115	;'s'
   472  086C  342E               	retlw	46	;'.'
   473  086D  3400               	retlw	0
   474  086E                     STR_6:	
   475  086E  3420               	retlw	32	;' '
   476  086F  3420               	retlw	32	;' '
   477  0870  3420               	retlw	32	;' '
   478  0871  3420               	retlw	32	;' '
   479  0872  3420               	retlw	32	;' '
   480  0873  3420               	retlw	32	;' '
   481  0874  3420               	retlw	32	;' '
   482  0875  3400               	retlw	0
   483  0876                     STR_9:	
   484  0876  3453               	retlw	83	;'S'
   485  0877  3465               	retlw	101	;'e'
   486  0878  3463               	retlw	99	;'c'
   487  0879  346F               	retlw	111	;'o'
   488  087A  346E               	retlw	110	;'n'
   489  087B  3464               	retlw	100	;'d'
   490  087C  3473               	retlw	115	;'s'
   491  087D  3400               	retlw	0
   492  087E                     STR_8:	
   493  087E  344D               	retlw	77	;'M'
   494  087F  3469               	retlw	105	;'i'
   495  0880  346E               	retlw	110	;'n'
   496  0881  3475               	retlw	117	;'u'
   497  0882  3474               	retlw	116	;'t'
   498  0883  3465               	retlw	101	;'e'
   499  0884  3473               	retlw	115	;'s'
   500  0885  3400               	retlw	0
   501  0886                     STR_4:	
   502  0886  3454               	retlw	84	;'T'
   503  0887  3469               	retlw	105	;'i'
   504  0888  346D               	retlw	109	;'m'
   505  0889  3465               	retlw	101	;'e'
   506  088A  3420               	retlw	32	;' '
   507  088B  343F               	retlw	63	;'?'
   508  088C  3400               	retlw	0
   509  088D                     STR_5:	
   510  088D  3444               	retlw	68	;'D'
   511  088E  3461               	retlw	97	;'a'
   512  088F  3474               	retlw	116	;'t'
   513  0890  3465               	retlw	101	;'e'
   514  0891  3420               	retlw	32	;' '
   515  0892  343F               	retlw	63	;'?'
   516  0893  3400               	retlw	0
   517  0894                     STR_13:	
   518  0894  3444               	retlw	68	;'D'
   519  0895  3461               	retlw	97	;'a'
   520  0896  3479               	retlw	121	;'y'
   521  0897  3420               	retlw	32	;' '
   522  0898  3420               	retlw	32	;' '
   523  0899  3400               	retlw	0
   524  089A                     STR_12:	
   525  089A  3444               	retlw	68	;'D'
   526  089B  3461               	retlw	97	;'a'
   527  089C  3474               	retlw	116	;'t'
   528  089D  3465               	retlw	101	;'e'
   529  089E  3420               	retlw	32	;' '
   530  089F  3400               	retlw	0
   531  08A0                     STR_11:	
   532  08A0  344D               	retlw	77	;'M'
   533  08A1  346F               	retlw	111	;'o'
   534  08A2  346E               	retlw	110	;'n'
   535  08A3  3474               	retlw	116	;'t'
   536  08A4  3468               	retlw	104	;'h'
   537  08A5  3400               	retlw	0
   538  08A6                     STR_7:	
   539  08A6  3448               	retlw	72	;'H'
   540  08A7  346F               	retlw	111	;'o'
   541  08A8  3475               	retlw	117	;'u'
   542  08A9  3472               	retlw	114	;'r'
   543  08AA  3473               	retlw	115	;'s'
   544  08AB  3400               	retlw	0
   545  08AC                     STR_10:	
   546  08AC  3459               	retlw	89	;'Y'
   547  08AD  3465               	retlw	101	;'e'
   548  08AE  3461               	retlw	97	;'a'
   549  08AF  3472               	retlw	114	;'r'
   550  08B0  3400               	retlw	0
   551  08B1                     STR_2:	
   552  08B1  3461               	retlw	97	;'a'
   553  08B2  3474               	retlw	116	;'t'
   554  08B3  3420               	retlw	32	;' '
   555  08B4  3400               	retlw	0
   556                           
   557                           ; #config settings
   558  0000                     
   559                           	psect	cinit
   560  07EA                     start_initialization:	
   561  07EA                     __initialization:	
   562                           
   563                           ; Clear objects allocated to BANK0
   564  07EA  01E2               	clrf	__pbssBANK0& (0+127)
   565  07EB  01E3               	clrf	(__pbssBANK0+1)& (0+127)
   566  07EC  01E4               	clrf	(__pbssBANK0+2)& (0+127)
   567  07ED  01E5               	clrf	(__pbssBANK0+3)& (0+127)
   568  07EE  01E6               	clrf	(__pbssBANK0+4)& (0+127)
   569  07EF  01E7               	clrf	(__pbssBANK0+5)& (0+127)
   570                           
   571                           ; Initialize objects allocated to BANK0
   572  07F0  1383               	bcf	3,7	;select IRP bank0
   573  07F1  3062               	movlw	low (__pdataBANK0+24)
   574  07F2  00FD               	movwf	btemp+-1
   575  07F3  3009               	movlw	high __pidataBANK0
   576  07F4  00FE               	movwf	btemp
   577  07F5  3043               	movlw	low __pidataBANK0
   578  07F6  00FF               	movwf	btemp+1
   579  07F7  304A               	movlw	low __pdataBANK0
   580  07F8  0084               	movwf	4
   581  07F9  120A  158A  2121   	fcall	init_ram0
   582  07FC                     end_of_initialization:	
   583                           ;End of C runtime variable initialization code
   584                           
   585  07FC                     __end_of__initialization:	
   586  07FC  0183               	clrf	3
   587  07FD  120A  118A  29B9   	ljmp	_main	;jump to C main() function
   588                           
   589                           	psect	bssBANK0
   590  0062                     __pbssBANK0:	
   591  0062                     _next_menu_clear:	
   592  0062                     	ds	2
   593  0064                     _bButton:	
   594  0064                     	ds	1
   595  0065                     _state:	
   596  0065                     	ds	1
   597  0066                     _runningTime:	
   598  0066                     	ds	2
   599                           
   600                           	psect	dataBANK0
   601  004A                     __pdataBANK0:	
   602  004A                     LCDWriteInt@F1143:	
   603  004A                     	ds	6
   604  0050                     _date:	
   605  0050                     	ds	2
   606  0052                     _day:	
   607  0052                     	ds	2
   608  0054                     _hour:	
   609  0054                     	ds	2
   610  0056                     _minute:	
   611  0056                     	ds	2
   612  0058                     _month:	
   613  0058                     	ds	2
   614  005A                     _runningMinute:	
   615  005A                     	ds	2
   616  005C                     _seconds:	
   617  005C                     	ds	2
   618  005E                     _year:	
   619  005E                     	ds	2
   620  0060                     _last_hour:	
   621  0060                     	ds	1
   622  0061                     _menuFunction:	
   623  0061                     	ds	1
   624                           
   625                           	psect	inittext
   626  091D                     init_fetch0:	
   627                           ;	Called with low address in FSR and high address in W
   628                           
   629  091D  087E               	movf	126,w
   630  091E  008A               	movwf	10
   631  091F  087F               	movf	127,w
   632  0920  0082               	movwf	2
   633  0921                     init_ram0:	
   634                           ;Called with:
   635                           ;	high address of idata address in btemp 
   636                           ;	low address of idata address in btemp+1 
   637                           ;	low address of data in FSR
   638                           ;	high address + 1 of data in btemp-1
   639                           
   640  0921  211D  120A  158A   	fcall	init_fetch0
   641  0924  0080               	movwf	0
   642  0925  0A84               	incf	4,f
   643  0926  0804               	movf	4,w
   644  0927  067D               	xorwf	125,w
   645  0928  1903               	btfsc	3,2
   646  0929  3400               	retlw	0
   647  092A  0AFF               	incf	127,f
   648  092B  1903               	btfsc	3,2
   649  092C  0AFE               	incf	126,f
   650  092D  2921               	goto	init_ram0
   651                           
   652                           	psect	cstackCOMMON
   653  0070                     __pcstackCOMMON:	
   654  0070                     ?_I2C_Start:	
   655  0070                     ??_I2C_Start:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ?_DS1307_Write:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?_DS1307_Read:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_I2C_NoAck:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ??_I2C_NoAck:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_I2C_Stop:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ??_I2C_Stop:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_I2C_Write:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ??_I2C_Write:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_I2C_Clock:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ??_I2C_Clock:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_I2C_Read:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ??_I2C_Read:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_I2C_Ack:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ??_I2C_Ack:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ?_LCDBusyLoop:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ??_LCDBusyLoop:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_readClock:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ?_showClock:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_readInputs:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ??_readInputs:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ?_doMenu:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_clearPrompt:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?_showTime:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_showDate:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?_showRunningTime:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?_I2C_Init:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ??_I2C_Init:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0070                     ?_LCDInit:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0070                     ?_main:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0070                     ?_DS1307_Init:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0070                     ?___awdiv:	
   749                           ; 2 bytes @ 0x0
   750                           
   751  0070                     ?___awmod:	
   752                           ; 2 bytes @ 0x0
   753                           
   754  0070                     ___awdiv@divisor:	
   755                           ; 2 bytes @ 0x0
   756                           
   757  0070                     ___awmod@divisor:	
   758                           ; 2 bytes @ 0x0
   759                           
   760                           
   761                           ; 2 bytes @ 0x0
   762  0070                     	ds	2
   763  0072                     I2C_Write@dat:	
   764  0072                     I2C_Read@i:	
   765                           ; 1 bytes @ 0x2
   766                           
   767  0072                     LCDBusyLoop@busy:	
   768                           ; 1 bytes @ 0x2
   769                           
   770  0072                     ___awdiv@dividend:	
   771                           ; 1 bytes @ 0x2
   772                           
   773  0072                     ___awmod@dividend:	
   774                           ; 2 bytes @ 0x2
   775                           
   776                           
   777                           ; 2 bytes @ 0x2
   778  0072                     	ds	1
   779  0073                     I2C_Write@i:	
   780  0073                     I2C_Read@dat:	
   781                           ; 1 bytes @ 0x3
   782                           
   783  0073                     LCDBusyLoop@temp:	
   784                           ; 1 bytes @ 0x3
   785                           
   786  0073                     readInputs@pinstate:	
   787                           ; 1 bytes @ 0x3
   788                           
   789                           
   790                           ; 1 bytes @ 0x3
   791  0073                     	ds	1
   792  0074                     ??_DS1307_Write:	
   793  0074                     ??_DS1307_Read:	
   794                           ; 1 bytes @ 0x4
   795                           
   796  0074                     ??___awdiv:	
   797                           ; 1 bytes @ 0x4
   798                           
   799  0074                     ??___awmod:	
   800                           ; 1 bytes @ 0x4
   801                           
   802  0074                     DS1307_Write@dat:	
   803                           ; 1 bytes @ 0x4
   804                           
   805  0074                     LCDBusyLoop@status:	
   806                           ; 1 bytes @ 0x4
   807                           
   808                           
   809                           ; 1 bytes @ 0x4
   810  0074                     	ds	1
   811  0075                     ??_DS1307_Init:	
   812  0075                     ?_DS1307_SetTime:	
   813                           ; 1 bytes @ 0x5
   814                           
   815  0075                     ?_DS1307_SetDate:	
   816                           ; 1 bytes @ 0x5
   817                           
   818  0075                     ?_DS1307_GetTime:	
   819                           ; 1 bytes @ 0x5
   820                           
   821  0075                     ?_DS1307_GetDate:	
   822                           ; 1 bytes @ 0x5
   823                           
   824  0075                     ?_DS1307_readRam:	
   825                           ; 1 bytes @ 0x5
   826                           
   827  0075                     ?_DS1307_writeRam:	
   828                           ; 1 bytes @ 0x5
   829                           
   830  0075                     ?_LCDByte:	
   831                           ; 1 bytes @ 0x5
   832                           
   833  0075                     DS1307_SetTime@mm:	
   834                           ; 1 bytes @ 0x5
   835                           
   836  0075                     DS1307_SetDate@dd:	
   837                           ; 1 bytes @ 0x5
   838                           
   839  0075                     DS1307_GetTime@m_ptr:	
   840                           ; 1 bytes @ 0x5
   841                           
   842  0075                     DS1307_GetDate@d_ptr:	
   843                           ; 1 bytes @ 0x5
   844                           
   845  0075                     LCDByte@isdata:	
   846                           ; 1 bytes @ 0x5
   847                           
   848  0075                     ___awdiv@counter:	
   849                           ; 1 bytes @ 0x5
   850                           
   851  0075                     ___awmod@counter:	
   852                           ; 1 bytes @ 0x5
   853                           
   854  0075                     DS1307_readRam@offset:	
   855                           ; 1 bytes @ 0x5
   856                           
   857  0075                     DS1307_writeRam@offset:	
   858                           ; 2 bytes @ 0x5
   859                           
   860                           
   861                           ; 2 bytes @ 0x5
   862  0075                     	ds	1
   863  0076                     ??_LCDByte:	
   864  0076                     DS1307_Init@s:	
   865                           ; 1 bytes @ 0x6
   866                           
   867  0076                     DS1307_SetTime@ss:	
   868                           ; 1 bytes @ 0x6
   869                           
   870  0076                     DS1307_SetDate@mm:	
   871                           ; 1 bytes @ 0x6
   872                           
   873  0076                     DS1307_GetTime@s_ptr:	
   874                           ; 1 bytes @ 0x6
   875                           
   876  0076                     DS1307_GetDate@m_ptr:	
   877                           ; 1 bytes @ 0x6
   878                           
   879  0076                     ___awdiv@sign:	
   880                           ; 1 bytes @ 0x6
   881                           
   882  0076                     ___awmod@sign:	
   883                           ; 1 bytes @ 0x6
   884                           
   885                           
   886                           ; 1 bytes @ 0x6
   887  0076                     	ds	1
   888  0077                     ??_DS1307_SetTime:	
   889  0077                     ??_DS1307_GetTime:	
   890                           ; 1 bytes @ 0x7
   891                           
   892  0077                     DS1307_SetTime@hh:	
   893                           ; 1 bytes @ 0x7
   894                           
   895  0077                     DS1307_SetDate@yy:	
   896                           ; 1 bytes @ 0x7
   897                           
   898  0077                     DS1307_GetDate@y_ptr:	
   899                           ; 1 bytes @ 0x7
   900                           
   901  0077                     DS1307_readRam@length:	
   902                           ; 1 bytes @ 0x7
   903                           
   904  0077                     DS1307_writeRam@length:	
   905                           ; 2 bytes @ 0x7
   906                           
   907  0077                     ___awdiv@quotient:	
   908                           ; 2 bytes @ 0x7
   909                           
   910                           
   911                           ; 2 bytes @ 0x7
   912  0077                     	ds	1
   913  0078                     ??_DS1307_SetDate:	
   914  0078                     ??_DS1307_GetDate:	
   915                           ; 1 bytes @ 0x8
   916                           
   917  0078                     DS1307_SetDate@nn:	
   918                           ; 1 bytes @ 0x8
   919                           
   920  0078                     DS1307_GetTime@h_ptr:	
   921                           ; 1 bytes @ 0x8
   922                           
   923  0078                     LCDByte@hn:	
   924                           ; 1 bytes @ 0x8
   925                           
   926                           
   927                           ; 1 bytes @ 0x8
   928  0078                     	ds	1
   929  0079                     ??_DS1307_readRam:	
   930  0079                     ??_DS1307_writeRam:	
   931                           ; 1 bytes @ 0x9
   932                           
   933  0079                     ?___wmul:	
   934                           ; 1 bytes @ 0x9
   935                           
   936  0079                     DS1307_GetDate@n_ptr:	
   937                           ; 2 bytes @ 0x9
   938                           
   939  0079                     LCDByte@ln:	
   940                           ; 1 bytes @ 0x9
   941                           
   942  0079                     ___wmul@multiplier:	
   943                           ; 1 bytes @ 0x9
   944                           
   945                           
   946                           ; 2 bytes @ 0x9
   947  0079                     	ds	1
   948  007A                     LCDByte@c:	
   949                           
   950                           ; 1 bytes @ 0xA
   951  007A                     	ds	1
   952  007B                     DS1307_readRam@ptr:	
   953  007B                     DS1307_writeRam@ptr:	
   954                           ; 1 bytes @ 0xB
   955                           
   956  007B                     LCDByte@temp:	
   957                           ; 1 bytes @ 0xB
   958                           
   959  007B                     ___wmul@multiplicand:	
   960                           ; 1 bytes @ 0xB
   961                           
   962                           
   963                           ; 2 bytes @ 0xB
   964  007B                     	ds	1
   965  007C                     ??_LCDInit:	
   966  007C                     ?_LCDWriteString:	
   967                           ; 1 bytes @ 0xC
   968                           
   969  007C                     ?_LCDGotoXY:	
   970                           ; 1 bytes @ 0xC
   971                           
   972  007C                     LCDGotoXY@y:	
   973                           ; 1 bytes @ 0xC
   974                           
   975  007C                     LCDWriteString@msg:	
   976                           ; 1 bytes @ 0xC
   977                           
   978                           
   979                           ; 2 bytes @ 0xC
   980  007C                     	ds	1
   981  007D                     ??_LCDGotoXY:	
   982  007D                     ??___wmul:	
   983                           ; 1 bytes @ 0xD
   984                           
   985                           
   986                           ; 1 bytes @ 0xD
   987  007D                     	ds	1
   988  007E                     ??_showClock:	
   989  007E                     ??_clearPrompt:	
   990                           ; 1 bytes @ 0xE
   991                           
   992  007E                     ??_LCDWriteString:	
   993                           ; 1 bytes @ 0xE
   994                           
   995                           
   996                           	psect	cstackBANK0
   997  0020                     __pcstackBANK0:	
   998                           ; 1 bytes @ 0xE
   999                           
  1000  0020                     LCDInit@style:	
  1001  0020                     LCDGotoXY@x:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0020                     ___wmul@product:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007                           
  1008                           ; 2 bytes @ 0x0
  1009  0020                     	ds	2
  1010  0022                     ??_readClock:	
  1011  0022                     ?_LCDWriteInt:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014  0022                     LCDWriteInt@val:	
  1015                           ; 1 bytes @ 0x2
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0x2
  1019  0022                     	ds	2
  1020  0024                     LCDWriteInt@field_length:	
  1021                           
  1022                           ; 1 bytes @ 0x4
  1023  0024                     	ds	1
  1024  0025                     ??_LCDWriteInt:	
  1025  0025                     readClock@n:	
  1026                           ; 1 bytes @ 0x5
  1027                           
  1028                           
  1029                           ; 1 bytes @ 0x5
  1030  0025                     	ds	1
  1031  0026                     readClock@a:	
  1032                           
  1033                           ; 1 bytes @ 0x6
  1034  0026                     	ds	1
  1035  0027                     readClock@b:	
  1036                           
  1037                           ; 1 bytes @ 0x7
  1038  0027                     	ds	1
  1039  0028                     readClock@c:	
  1040  0028                     LCDWriteInt@characters:	
  1041                           ; 1 bytes @ 0x8
  1042                           
  1043                           
  1044                           ; 2 bytes @ 0x8
  1045  0028                     	ds	2
  1046  002A                     LCDWriteInt@str:	
  1047                           
  1048                           ; 6 bytes @ 0xA
  1049  002A                     	ds	6
  1050  0030                     LCDWriteInt@from:	
  1051                           
  1052                           ; 2 bytes @ 0x10
  1053  0030                     	ds	2
  1054  0032                     LCDWriteInt@c:	
  1055                           
  1056                           ; 1 bytes @ 0x12
  1057  0032                     	ds	1
  1058  0033                     ??_showTime:	
  1059  0033                     ??_showDate:	
  1060                           ; 1 bytes @ 0x13
  1061                           
  1062  0033                     ??_showRunningTime:	
  1063                           ; 1 bytes @ 0x13
  1064                           
  1065                           
  1066                           ; 1 bytes @ 0x13
  1067  0033                     	ds	1
  1068  0034                     showDate@d:	
  1069  0034                     _showRunningTime$727:	
  1070                           ; 2 bytes @ 0x14
  1071                           
  1072                           
  1073                           ; 2 bytes @ 0x14
  1074  0034                     	ds	2
  1075  0036                     ??_doMenu:	
  1076                           
  1077                           ; 1 bytes @ 0x16
  1078  0036                     	ds	3
  1079  0039                     doMenu@h:	
  1080                           
  1081                           ; 2 bytes @ 0x19
  1082  0039                     	ds	2
  1083  003B                     doMenu@m:	
  1084                           
  1085                           ; 2 bytes @ 0x1B
  1086  003B                     	ds	2
  1087  003D                     doMenu@s:	
  1088                           
  1089                           ; 2 bytes @ 0x1D
  1090  003D                     	ds	2
  1091  003F                     doMenu@n:	
  1092                           
  1093                           ; 2 bytes @ 0x1F
  1094  003F                     	ds	2
  1095  0041                     doMenu@d:	
  1096                           
  1097                           ; 2 bytes @ 0x21
  1098  0041                     	ds	2
  1099  0043                     doMenu@m_299:	
  1100                           
  1101                           ; 2 bytes @ 0x23
  1102  0043                     	ds	2
  1103  0045                     doMenu@y:	
  1104                           
  1105                           ; 2 bytes @ 0x25
  1106  0045                     	ds	2
  1107  0047                     ??_main:	
  1108                           
  1109                           ; 1 bytes @ 0x27
  1110  0047                     	ds	3
  1111                           
  1112                           	psect	maintext
  1113  01B9                     __pmaintext:	
  1114 ;;
  1115 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1116 ;;
  1117 ;; *************** function _main *****************
  1118 ;; Defined at:
  1119 ;;		line 62 in file "LCDTime.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : B00/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1133 ;;      Params:         0       0       0       0       0
  1134 ;;      Locals:         0       0       0       0       0
  1135 ;;      Temps:          0       3       0       0       0
  1136 ;;      Totals:         0       3       0       0       0
  1137 ;;Total ram usage:        3 bytes
  1138 ;; Hardware stack levels required when called:    6
  1139 ;; This function calls:
  1140 ;;		_DS1307_Init
  1141 ;;		_DS1307_readRam
  1142 ;;		_I2C_Init
  1143 ;;		_LCDByte
  1144 ;;		_LCDGotoXY
  1145 ;;		_LCDInit
  1146 ;;		_LCDWriteInt
  1147 ;;		_LCDWriteString
  1148 ;;		___wmul
  1149 ;;		_clearPrompt
  1150 ;;		_doMenu
  1151 ;;		_readClock
  1152 ;;		_readInputs
  1153 ;;		_showClock
  1154 ;; This function is called by:
  1155 ;;		Startup code after reset
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           
  1160                           ;psect for function _main
  1161  01B9                     _main:	
  1162                           
  1163                           ;LCDTime.c: 65: I2C_Init() ;
  1164                           
  1165                           ;incstack = 0
  1166                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1167  01B9  120A  158A  20DA  120A  118A  	fcall	_I2C_Init
  1168                           
  1169                           ;LCDTime.c: 67: LCDInit(0B00000000);
  1170  01BE  3000               	movlw	0
  1171  01BF  120A  158A  22FB  120A  118A  	fcall	_LCDInit
  1172                           
  1173                           ;LCDTime.c: 69: DS1307_Init() ;
  1174  01C4  120A  158A  2409  120A  118A  	fcall	_DS1307_Init
  1175                           
  1176                           ;LCDTime.c: 72: (LCDByte(0b00000001,0));
  1177  01C9  01F5               	clrf	LCDByte@isdata
  1178  01CA  3001               	movlw	1
  1179  01CB  120A  158A  2459  120A  118A  	fcall	_LCDByte
  1180                           
  1181                           ;LCDTime.c: 75: DS1307_readRam(&runningTime,0,2) ;
  1182  01D0  3000               	movlw	0
  1183  01D1  00F5               	movwf	DS1307_readRam@offset
  1184  01D2  00F6               	movwf	DS1307_readRam@offset+1
  1185  01D3  3002               	movlw	2
  1186  01D4  00F7               	movwf	DS1307_readRam@length
  1187  01D5  3000               	movlw	0
  1188  01D6  00F8               	movwf	DS1307_readRam@length+1
  1189  01D7  3066               	movlw	(low (_runningTime| 0))& (0+255)
  1190  01D8  120A  158A  25B5  120A  118A  	fcall	_DS1307_readRam
  1191                           
  1192                           ;LCDTime.c: 77: LCDWriteString("Starting counter");
  1193  01DD  3044               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1194  01DE  00FC               	movwf	LCDWriteString@msg
  1195  01DF  3080               	movlw	128
  1196  01E0  00FD               	movwf	LCDWriteString@msg+1
  1197  01E1  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  1198                           
  1199                           ;LCDTime.c: 78: LCDGotoXY(0,1) ;
  1200  01E6  01FC               	clrf	LCDGotoXY@y
  1201  01E7  0AFC               	incf	LCDGotoXY@y,f
  1202  01E8  3000               	movlw	0
  1203  01E9  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  1204                           
  1205                           ;LCDTime.c: 79: LCDWriteString("at ");
  1206  01EE  30A2               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1207  01EF  00FC               	movwf	LCDWriteString@msg
  1208  01F0  3080               	movlw	128
  1209  01F1  00FD               	movwf	LCDWriteString@msg+1
  1210  01F2  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  1211                           
  1212                           ;LCDTime.c: 80: LCDWriteInt(runningTime,5);
  1213  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1214  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  1215  01F9  0867               	movf	_runningTime+1,w
  1216  01FA  00A3               	movwf	LCDWriteInt@val+1
  1217  01FB  0866               	movf	_runningTime,w
  1218  01FC  00A2               	movwf	LCDWriteInt@val
  1219  01FD  3005               	movlw	5
  1220  01FE  00C7               	movwf	??_main
  1221  01FF  0847               	movf	??_main,w
  1222  0200  00A4               	movwf	LCDWriteInt@field_length
  1223  0201  120A  158A  26C5  120A  118A  	fcall	_LCDWriteInt
  1224                           
  1225                           ;LCDTime.c: 81: LCDWriteString(" minutes.");
  1226  0206  3055               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1227  0207  00FC               	movwf	LCDWriteString@msg
  1228  0208  3080               	movlw	128
  1229  0209  00FD               	movwf	LCDWriteString@msg+1
  1230  020A  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  1231                           
  1232                           ;LCDTime.c: 82: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1233  020F  3004               	movlw	4
  1234  0210  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0211  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0212  00C9               	movwf	??_main+2
  1237  0213  30CF               	movlw	207
  1238  0214  00C8               	movwf	??_main+1
  1239  0215  3003               	movlw	3
  1240  0216  00C7               	movwf	??_main
  1241  0217                     u2617:	
  1242  0217  0BC7               	decfsz	??_main,f
  1243  0218  2A17               	goto	u2617
  1244  0219  0BC8               	decfsz	??_main+1,f
  1245  021A  2A17               	goto	u2617
  1246  021B  0BC9               	decfsz	??_main+2,f
  1247  021C  2A17               	goto	u2617
  1248  021D  2A1E               	nop2
  1249                           
  1250                           ;LCDTime.c: 83: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1251  021E  3004               	movlw	4
  1252  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1254  0221  00C9               	movwf	??_main+2
  1255  0222  30CF               	movlw	207
  1256  0223  00C8               	movwf	??_main+1
  1257  0224  3003               	movlw	3
  1258  0225  00C7               	movwf	??_main
  1259  0226                     u2627:	
  1260  0226  0BC7               	decfsz	??_main,f
  1261  0227  2A26               	goto	u2627
  1262  0228  0BC8               	decfsz	??_main+1,f
  1263  0229  2A26               	goto	u2627
  1264  022A  0BC9               	decfsz	??_main+2,f
  1265  022B  2A26               	goto	u2627
  1266  022C  2A2D               	nop2
  1267                           
  1268                           ;LCDTime.c: 84: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1269  022D  3004               	movlw	4
  1270  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1271  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1272  0230  00C9               	movwf	??_main+2
  1273  0231  30CF               	movlw	207
  1274  0232  00C8               	movwf	??_main+1
  1275  0233  3003               	movlw	3
  1276  0234  00C7               	movwf	??_main
  1277  0235                     u2637:	
  1278  0235  0BC7               	decfsz	??_main,f
  1279  0236  2A35               	goto	u2637
  1280  0237  0BC8               	decfsz	??_main+1,f
  1281  0238  2A35               	goto	u2637
  1282  0239  0BC9               	decfsz	??_main+2,f
  1283  023A  2A35               	goto	u2637
  1284  023B  2A3C               	nop2
  1285                           
  1286                           ;LCDTime.c: 85: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1287  023C  3004               	movlw	4
  1288  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1289  023E  1303               	bcf	3,6	;RP1=0, select bank0
  1290  023F  00C9               	movwf	??_main+2
  1291  0240  30CF               	movlw	207
  1292  0241  00C8               	movwf	??_main+1
  1293  0242  3003               	movlw	3
  1294  0243  00C7               	movwf	??_main
  1295  0244                     u2647:	
  1296  0244  0BC7               	decfsz	??_main,f
  1297  0245  2A44               	goto	u2647
  1298  0246  0BC8               	decfsz	??_main+1,f
  1299  0247  2A44               	goto	u2647
  1300  0248  0BC9               	decfsz	??_main+2,f
  1301  0249  2A44               	goto	u2647
  1302  024A  2A4B               	nop2
  1303                           
  1304                           ;LCDTime.c: 88: runningTime-- ;
  1305  024B  30FF               	movlw	255
  1306  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1307  024D  1303               	bcf	3,6	;RP1=0, select bank0
  1308  024E  07E6               	addwf	_runningTime,f
  1309  024F  1803               	skipnc
  1310  0250  0AE7               	incf	_runningTime+1,f
  1311  0251  30FF               	movlw	255
  1312  0252  07E7               	addwf	_runningTime+1,f
  1313                           
  1314                           ;LCDTime.c: 90: (LCDByte(0b00000001,0));
  1315  0253  01F5               	clrf	LCDByte@isdata
  1316  0254  3001               	movlw	1
  1317  0255  120A  158A  2459  120A  118A  	fcall	_LCDByte
  1318  025A  2AC0               	goto	l2751
  1319  025B                     l2759:	
  1320                           
  1321                           ;LCDTime.c: 101: doMenu();
  1322  025B  120A  118A  2309  120A  118A  	fcall	_doMenu
  1323  0260  2AC0               	goto	l2751
  1324  0261                     l2763:	
  1325                           
  1326                           ;LCDTime.c: 103: {
  1327                           ;LCDTime.c: 109: if (state & 0x10)
  1328  0261  1E65               	btfss	_state,4
  1329  0262  2A6E               	goto	l246
  1330                           
  1331                           ;LCDTime.c: 110: {
  1332                           ;LCDTime.c: 111: menuFunction++ ;
  1333  0263  3001               	movlw	1
  1334  0264  00C7               	movwf	??_main
  1335  0265  0847               	movf	??_main,w
  1336  0266  07E1               	addwf	_menuFunction,f
  1337                           
  1338                           ;LCDTime.c: 112: if (menuFunction == 4)
  1339  0267  3004               	movlw	4
  1340  0268  0661               	xorwf	_menuFunction,w
  1341  0269  1D03               	btfss	3,2
  1342  026A  2A79               	goto	l2773
  1343                           
  1344                           ;LCDTime.c: 113: menuFunction = 1 ;
  1345  026B  01E1               	clrf	_menuFunction
  1346  026C  0AE1               	incf	_menuFunction,f
  1347                           
  1348                           ;LCDTime.c: 114: }
  1349  026D  2A79               	goto	l2773
  1350  026E                     l246:	
  1351                           
  1352                           ;LCDTime.c: 115: else if (state & 0x20)
  1353  026E  1EE5               	btfss	_state,5
  1354  026F  2A79               	goto	l2773
  1355                           
  1356                           ;LCDTime.c: 116: {
  1357                           ;LCDTime.c: 117: menuFunction-- ;
  1358  0270  3001               	movlw	1
  1359  0271  02E1               	subwf	_menuFunction,f
  1360                           
  1361                           ;LCDTime.c: 118: if (menuFunction < 1)
  1362  0272  0861               	movf	_menuFunction,w
  1363  0273  1D03               	btfss	3,2
  1364  0274  2A79               	goto	l2773
  1365                           
  1366                           ;LCDTime.c: 119: menuFunction = 4-1 ;
  1367  0275  3003               	movlw	3
  1368  0276  00C7               	movwf	??_main
  1369  0277  0847               	movf	??_main,w
  1370  0278  00E1               	movwf	_menuFunction
  1371  0279                     l2773:	
  1372                           
  1373                           ;LCDTime.c: 120: }
  1374                           ;LCDTime.c: 122: if (menuFunction != 1)
  1375  0279  0361               	decf	_menuFunction,w
  1376  027A  1903               	btfsc	3,2
  1377  027B  2B03               	goto	l2787
  1378                           
  1379                           ;LCDTime.c: 123: {
  1380                           ;LCDTime.c: 124: next_menu_clear = minute * 60 + seconds + 20 ;
  1381  027C  0857               	movf	_minute+1,w
  1382  027D  00FA               	movwf	___wmul@multiplier+1
  1383  027E  0856               	movf	_minute,w
  1384  027F  00F9               	movwf	___wmul@multiplier
  1385  0280  303C               	movlw	60
  1386  0281  00FB               	movwf	___wmul@multiplicand
  1387  0282  3000               	movlw	0
  1388  0283  00FC               	movwf	___wmul@multiplicand+1
  1389  0284  120A  158A  21EE  120A  118A  	fcall	___wmul
  1390  0289  1283               	bcf	3,5	;RP0=0, select bank0
  1391  028A  1303               	bcf	3,6	;RP1=0, select bank0
  1392  028B  085C               	movf	_seconds,w
  1393  028C  0779               	addwf	?___wmul,w
  1394  028D  00C7               	movwf	??_main
  1395  028E  085D               	movf	_seconds+1,w
  1396  028F  1803               	skipnc
  1397  0290  0A5D               	incf	_seconds+1,w
  1398  0291  077A               	addwf	?___wmul+1,w
  1399  0292  00C8               	movwf	??_main+1
  1400  0293  0847               	movf	??_main,w
  1401  0294  3E14               	addlw	20
  1402  0295  00E2               	movwf	_next_menu_clear
  1403  0296  0848               	movf	??_main+1,w
  1404  0297  1803               	skipnc
  1405  0298  3E01               	addlw	1
  1406  0299  3E00               	addlw	0
  1407  029A  00E3               	movwf	_next_menu_clear+1
  1408                           
  1409                           ;LCDTime.c: 125: LCDGotoXY(9,0);
  1410  029B  01FC               	clrf	LCDGotoXY@y
  1411  029C  3009               	movlw	9
  1412  029D  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  1413                           
  1414                           ;LCDTime.c: 126: if (menuFunction == 2)
  1415  02A2  3002               	movlw	2
  1416  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  1417  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  1418  02A5  0661               	xorwf	_menuFunction,w
  1419  02A6  1D03               	btfss	3,2
  1420  02A7  2AB1               	goto	l2783
  1421                           
  1422                           ;LCDTime.c: 127: LCDWriteString("Time ?");
  1423  02A8  3077               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1424  02A9  00FC               	movwf	LCDWriteString@msg
  1425  02AA  3080               	movlw	128
  1426  02AB  00FD               	movwf	LCDWriteString@msg+1
  1427  02AC  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  1428  02B1                     l2783:	
  1429                           
  1430                           ;LCDTime.c: 128: if (menuFunction == 3)
  1431  02B1  3003               	movlw	3
  1432  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1433  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1434  02B4  0661               	xorwf	_menuFunction,w
  1435  02B5  1D03               	btfss	3,2
  1436  02B6  2AC0               	goto	l2751
  1437                           
  1438                           ;LCDTime.c: 129: LCDWriteString("Date ?");
  1439  02B7  307E               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1440  02B8  00FC               	movwf	LCDWriteString@msg
  1441  02B9  3080               	movlw	128
  1442  02BA  00FD               	movwf	LCDWriteString@msg+1
  1443  02BB  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  1444  02C0                     l2751:	
  1445                           ;LCDTime.c: 92: while(1)
  1446                           
  1447                           ;LCDTime.c: 133: }
  1448                           
  1449                           ;LCDTime.c: 130: }
  1450                           
  1451                           
  1452                           ;LCDTime.c: 93: {
  1453                           ;LCDTime.c: 94: readClock();
  1454  02C0  120A  118A  2074  120A  118A  	fcall	_readClock
  1455                           
  1456                           ;LCDTime.c: 96: showClock() ;
  1457  02C5  120A  158A  215B  120A  118A  	fcall	_showClock
  1458                           
  1459                           ;LCDTime.c: 98: readInputs() ;
  1460  02CA  120A  158A  2295  120A  118A  	fcall	_readInputs
  1461                           
  1462                           ;LCDTime.c: 100: if (bButton)
  1463  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  1464  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  1465  02D1  0864               	movf	_bButton,w
  1466  02D2  1D03               	btfss	3,2
  1467  02D3  2A5B               	goto	l2759
  1468                           
  1469                           ;LCDTime.c: 102: else if (state & 0x30)
  1470  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  1471  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  1472  02D6  0865               	movf	_state,w
  1473  02D7  3930               	andlw	48
  1474  02D8  1D03               	btfss	3,2
  1475  02D9  2A61               	goto	l2763
  1476                           
  1477                           ;LCDTime.c: 134: else if (next_menu_clear && ((minute * 60 + seconds) > next_menu_clear)
      +                          )
  1478  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  1479  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  1480  02DC  0862               	movf	_next_menu_clear,w
  1481  02DD  0463               	iorwf	_next_menu_clear+1,w
  1482  02DE  1903               	btfsc	3,2
  1483  02DF  2AC0               	goto	l2751
  1484  02E0  0857               	movf	_minute+1,w
  1485  02E1  00FA               	movwf	___wmul@multiplier+1
  1486  02E2  0856               	movf	_minute,w
  1487  02E3  00F9               	movwf	___wmul@multiplier
  1488  02E4  303C               	movlw	60
  1489  02E5  00FB               	movwf	___wmul@multiplicand
  1490  02E6  3000               	movlw	0
  1491  02E7  00FC               	movwf	___wmul@multiplicand+1
  1492  02E8  120A  158A  21EE  120A  118A  	fcall	___wmul
  1493  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  1494  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  1495  02EF  085C               	movf	_seconds,w
  1496  02F0  0779               	addwf	?___wmul,w
  1497  02F1  00C7               	movwf	??_main
  1498  02F2  085D               	movf	_seconds+1,w
  1499  02F3  1803               	skipnc
  1500  02F4  0A5D               	incf	_seconds+1,w
  1501  02F5  077A               	addwf	?___wmul+1,w
  1502  02F6  00C8               	movwf	??_main+1
  1503  02F7  0863               	movf	_next_menu_clear+1,w
  1504  02F8  3A80               	xorlw	128
  1505  02F9  00C9               	movwf	??_main+2
  1506  02FA  0848               	movf	??_main+1,w
  1507  02FB  3A80               	xorlw	128
  1508  02FC  0249               	subwf	??_main+2,w
  1509  02FD  1D03               	skipz
  1510  02FE  2B01               	goto	u2605
  1511  02FF  0847               	movf	??_main,w
  1512  0300  0262               	subwf	_next_menu_clear,w
  1513  0301                     u2605:	
  1514  0301  1803               	skipnc
  1515  0302  2AC0               	goto	l2751
  1516  0303                     l2787:	
  1517                           
  1518                           ;LCDTime.c: 131: else
  1519                           ;LCDTime.c: 132: clearPrompt();
  1520  0303  120A  158A  212E  120A  118A  	fcall	_clearPrompt
  1521  0308  2AC0               	goto	l2751
  1522  0309                     __end_of_main:	
  1523                           ;LCDTime.c: 135: {
  1524                           ;LCDTime.c: 136: clearPrompt();
  1525                           
  1526                           
  1527                           	psect	text1
  1528  095B                     __ptext1:	
  1529 ;; *************** function _showClock *****************
  1530 ;; Defined at:
  1531 ;;		line 475 in file "LCDTime.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;		None
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;		None
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      void 
  1538 ;; Registers used:
  1539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1545 ;;      Params:         0       0       0       0       0
  1546 ;;      Locals:         0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0
  1548 ;;      Totals:         0       0       0       0       0
  1549 ;;Total ram usage:        0 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    5
  1552 ;; This function calls:
  1553 ;;		_LCDGotoXY
  1554 ;;		_showDate
  1555 ;;		_showRunningTime
  1556 ;;		_showTime
  1557 ;; This function is called by:
  1558 ;;		_main
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function _showClock
  1564  095B                     _showClock:	
  1565                           
  1566                           ;LCDTime.c: 477: LCDGotoXY(0,0) ;
  1567                           
  1568                           ;incstack = 0
  1569                           ; Regs used in _showClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1570  095B  01FC               	clrf	LCDGotoXY@y
  1571  095C  3000               	movlw	0
  1572  095D  120A  158A  21C8  120A  158A  	fcall	_LCDGotoXY
  1573                           
  1574                           ;LCDTime.c: 478: showTime() ;
  1575  0962  120A  158A  2336  120A  158A  	fcall	_showTime
  1576                           
  1577                           ;LCDTime.c: 480: LCDGotoXY(0,1) ;
  1578  0967  01FC               	clrf	LCDGotoXY@y
  1579  0968  0AFC               	incf	LCDGotoXY@y,f
  1580  0969  3000               	movlw	0
  1581  096A  120A  158A  21C8  120A  158A  	fcall	_LCDGotoXY
  1582                           
  1583                           ;LCDTime.c: 481: showDate() ;
  1584  096F  120A  158A  2613  120A  158A  	fcall	_showDate
  1585                           
  1586                           ;LCDTime.c: 484: if (menuFunction == 1)
  1587  0974  1283               	bcf	3,5	;RP0=0, select bank0
  1588  0975  1303               	bcf	3,6	;RP1=0, select bank0
  1589  0976  0361               	decf	_menuFunction,w
  1590  0977  1D03               	btfss	3,2
  1591  0978  0008               	return
  1592                           
  1593                           ;LCDTime.c: 485: showRunningTime();
  1594  0979  120A  158A  23BD   	fcall	_showRunningTime
  1595  097C  0008               	return
  1596  097D                     __end_of_showClock:	
  1597                           
  1598                           	psect	text2
  1599  0BBD                     __ptext2:	
  1600 ;; *************** function _showRunningTime *****************
  1601 ;; Defined at:
  1602 ;;		line 521 in file "LCDTime.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1616 ;;      Params:         0       0       0       0       0
  1617 ;;      Locals:         0       2       0       0       0
  1618 ;;      Temps:          0       1       0       0       0
  1619 ;;      Totals:         0       3       0       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    4
  1623 ;; This function calls:
  1624 ;;		_LCDByte
  1625 ;;		_LCDGotoXY
  1626 ;;		_LCDWriteInt
  1627 ;;		___awdiv
  1628 ;;		___awmod
  1629 ;; This function is called by:
  1630 ;;		_showClock
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           
  1635                           ;psect for function _showRunningTime
  1636  0BBD                     _showRunningTime:	
  1637                           
  1638                           ;LCDTime.c: 523: LCDGotoXY(10,0) ;
  1639                           
  1640                           ;incstack = 0
  1641                           ; Regs used in _showRunningTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1642  0BBD  01FC               	clrf	LCDGotoXY@y
  1643  0BBE  300A               	movlw	10
  1644  0BBF  120A  158A  21C8  120A  158A  	fcall	_LCDGotoXY
  1645                           
  1646                           ;LCDTime.c: 524: LCDWriteInt(runningTime / 60,1);
  1647  0BC4  303C               	movlw	60
  1648  0BC5  00F0               	movwf	___awdiv@divisor
  1649  0BC6  3000               	movlw	0
  1650  0BC7  00F1               	movwf	___awdiv@divisor+1
  1651  0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  1652  0BC9  1303               	bcf	3,6	;RP1=0, select bank0
  1653  0BCA  0867               	movf	_runningTime+1,w
  1654  0BCB  00F3               	movwf	___awdiv@dividend+1
  1655  0BCC  0866               	movf	_runningTime,w
  1656  0BCD  00F2               	movwf	___awdiv@dividend
  1657  0BCE  120A  158A  24FF  120A  158A  	fcall	___awdiv
  1658  0BD3  0871               	movf	?___awdiv+1,w
  1659  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  1660  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  1661  0BD6  00B5               	movwf	_showRunningTime$727+1
  1662  0BD7  0870               	movf	?___awdiv,w
  1663  0BD8  00B4               	movwf	_showRunningTime$727
  1664                           
  1665                           ;LCDTime.c: 524: LCDWriteInt(runningTime / 60,1);
  1666  0BD9  0835               	movf	_showRunningTime$727+1,w
  1667  0BDA  00A3               	movwf	LCDWriteInt@val+1
  1668  0BDB  0834               	movf	_showRunningTime$727,w
  1669  0BDC  00A2               	movwf	LCDWriteInt@val
  1670  0BDD  01A4               	clrf	LCDWriteInt@field_length
  1671  0BDE  0AA4               	incf	LCDWriteInt@field_length,f
  1672  0BDF  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  1673                           
  1674                           ;LCDTime.c: 525: (LCDByte(':',1)) ;
  1675  0BE4  01F5               	clrf	LCDByte@isdata
  1676  0BE5  0AF5               	incf	LCDByte@isdata,f
  1677  0BE6  303A               	movlw	58
  1678  0BE7  120A  158A  2459  120A  158A  	fcall	_LCDByte
  1679                           
  1680                           ;LCDTime.c: 526: LCDWriteInt(runningTime % 60,2);
  1681  0BEC  303C               	movlw	60
  1682  0BED  00F0               	movwf	___awmod@divisor
  1683  0BEE  3000               	movlw	0
  1684  0BEF  00F1               	movwf	___awmod@divisor+1
  1685  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
  1686  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
  1687  0BF2  0867               	movf	_runningTime+1,w
  1688  0BF3  00F3               	movwf	___awmod@dividend+1
  1689  0BF4  0866               	movf	_runningTime,w
  1690  0BF5  00F2               	movwf	___awmod@dividend
  1691  0BF6  120A  158A  2372  120A  158A  	fcall	___awmod
  1692  0BFB  0871               	movf	?___awmod+1,w
  1693  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
  1694  0BFD  1303               	bcf	3,6	;RP1=0, select bank0
  1695  0BFE  00A3               	movwf	LCDWriteInt@val+1
  1696  0BFF  0870               	movf	?___awmod,w
  1697  0C00  00A2               	movwf	LCDWriteInt@val
  1698  0C01  3002               	movlw	2
  1699  0C02  00B3               	movwf	??_showRunningTime
  1700  0C03  0833               	movf	??_showRunningTime,w
  1701  0C04  00A4               	movwf	LCDWriteInt@field_length
  1702  0C05  120A  158A  26C5   	fcall	_LCDWriteInt
  1703  0C08  0008               	return
  1704  0C09                     __end_of_showRunningTime:	
  1705                           
  1706                           	psect	text3
  1707  0074                     __ptext3:	
  1708 ;; *************** function _readClock *****************
  1709 ;; Defined at:
  1710 ;;		line 442 in file "LCDTime.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;		None
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  c               1    8[BANK0 ] unsigned char 
  1715 ;;  b               1    7[BANK0 ] unsigned char 
  1716 ;;  a               1    6[BANK0 ] unsigned char 
  1717 ;;  n               1    5[BANK0 ] unsigned char 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  1    wreg      void 
  1720 ;; Registers used:
  1721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1727 ;;      Params:         0       0       0       0       0
  1728 ;;      Locals:         0       4       0       0       0
  1729 ;;      Temps:          0       3       0       0       0
  1730 ;;      Totals:         0       7       0       0       0
  1731 ;;Total ram usage:        7 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:    4
  1734 ;; This function calls:
  1735 ;;		_DS1307_GetDate
  1736 ;;		_DS1307_GetTime
  1737 ;;		_DS1307_writeRam
  1738 ;;		___awdiv
  1739 ;;		___wmul
  1740 ;; This function is called by:
  1741 ;;		_main
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           
  1746                           ;psect for function _readClock
  1747  0074                     _readClock:	
  1748                           
  1749                           ;LCDTime.c: 444: unsigned char a,b,c,n ;
  1750                           ;LCDTime.c: 446: DS1307_GetTime(&a,&b,&c);
  1751                           
  1752                           ;incstack = 0
  1753                           ; Regs used in _readClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1754  0074  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1755  0075  1283               	bcf	3,5	;RP0=0, select bank0
  1756  0076  1303               	bcf	3,6	;RP1=0, select bank0
  1757  0077  00A2               	movwf	??_readClock
  1758  0078  0822               	movf	??_readClock,w
  1759  0079  00F5               	movwf	DS1307_GetTime@m_ptr
  1760  007A  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1761  007B  00A3               	movwf	??_readClock+1
  1762  007C  0823               	movf	??_readClock+1,w
  1763  007D  00F6               	movwf	DS1307_GetTime@s_ptr
  1764  007E  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1765  007F  120A  158A  24A9  120A  118A  	fcall	_DS1307_GetTime
  1766                           
  1767                           ;LCDTime.c: 449: hour = (a % 16) + ((a / 16 ) * 10) ;
  1768  0084  3010               	movlw	16
  1769  0085  00F0               	movwf	___awdiv@divisor
  1770  0086  3000               	movlw	0
  1771  0087  00F1               	movwf	___awdiv@divisor+1
  1772  0088  1283               	bcf	3,5	;RP0=0, select bank0
  1773  0089  1303               	bcf	3,6	;RP1=0, select bank0
  1774  008A  0826               	movf	readClock@a,w
  1775  008B  00A2               	movwf	??_readClock
  1776  008C  01A3               	clrf	??_readClock+1
  1777  008D  0822               	movf	??_readClock,w
  1778  008E  00F2               	movwf	___awdiv@dividend
  1779  008F  0823               	movf	??_readClock+1,w
  1780  0090  00F3               	movwf	___awdiv@dividend+1
  1781  0091  120A  158A  24FF  120A  118A  	fcall	___awdiv
  1782  0096  0871               	movf	?___awdiv+1,w
  1783  0097  00FA               	movwf	___wmul@multiplier+1
  1784  0098  0870               	movf	?___awdiv,w
  1785  0099  00F9               	movwf	___wmul@multiplier
  1786  009A  300A               	movlw	10
  1787  009B  00FB               	movwf	___wmul@multiplicand
  1788  009C  3000               	movlw	0
  1789  009D  00FC               	movwf	___wmul@multiplicand+1
  1790  009E  120A  158A  21EE  120A  118A  	fcall	___wmul
  1791  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1792  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  1793  00A5  0826               	movf	readClock@a,w
  1794  00A6  390F               	andlw	15
  1795  00A7  0779               	addwf	?___wmul,w
  1796  00A8  00D4               	movwf	_hour
  1797  00A9  087A               	movf	?___wmul+1,w
  1798  00AA  1803               	skipnc
  1799  00AB  0A7A               	incf	?___wmul+1,w
  1800  00AC  00D5               	movwf	_hour+1
  1801                           
  1802                           ;LCDTime.c: 450: minute = (b % 16) + ((b / 16 ) * 10) ;
  1803  00AD  3010               	movlw	16
  1804  00AE  00F0               	movwf	___awdiv@divisor
  1805  00AF  3000               	movlw	0
  1806  00B0  00F1               	movwf	___awdiv@divisor+1
  1807  00B1  0827               	movf	readClock@b,w
  1808  00B2  00A2               	movwf	??_readClock
  1809  00B3  01A3               	clrf	??_readClock+1
  1810  00B4  0822               	movf	??_readClock,w
  1811  00B5  00F2               	movwf	___awdiv@dividend
  1812  00B6  0823               	movf	??_readClock+1,w
  1813  00B7  00F3               	movwf	___awdiv@dividend+1
  1814  00B8  120A  158A  24FF  120A  118A  	fcall	___awdiv
  1815  00BD  0871               	movf	?___awdiv+1,w
  1816  00BE  00FA               	movwf	___wmul@multiplier+1
  1817  00BF  0870               	movf	?___awdiv,w
  1818  00C0  00F9               	movwf	___wmul@multiplier
  1819  00C1  300A               	movlw	10
  1820  00C2  00FB               	movwf	___wmul@multiplicand
  1821  00C3  3000               	movlw	0
  1822  00C4  00FC               	movwf	___wmul@multiplicand+1
  1823  00C5  120A  158A  21EE  120A  118A  	fcall	___wmul
  1824  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  1825  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  1826  00CC  0827               	movf	readClock@b,w
  1827  00CD  390F               	andlw	15
  1828  00CE  0779               	addwf	?___wmul,w
  1829  00CF  00D6               	movwf	_minute
  1830  00D0  087A               	movf	?___wmul+1,w
  1831  00D1  1803               	skipnc
  1832  00D2  0A7A               	incf	?___wmul+1,w
  1833  00D3  00D7               	movwf	_minute+1
  1834                           
  1835                           ;LCDTime.c: 451: seconds = (c % 16) + ((c / 16 ) * 10) ;
  1836  00D4  3010               	movlw	16
  1837  00D5  00F0               	movwf	___awdiv@divisor
  1838  00D6  3000               	movlw	0
  1839  00D7  00F1               	movwf	___awdiv@divisor+1
  1840  00D8  0828               	movf	readClock@c,w
  1841  00D9  00A2               	movwf	??_readClock
  1842  00DA  01A3               	clrf	??_readClock+1
  1843  00DB  0822               	movf	??_readClock,w
  1844  00DC  00F2               	movwf	___awdiv@dividend
  1845  00DD  0823               	movf	??_readClock+1,w
  1846  00DE  00F3               	movwf	___awdiv@dividend+1
  1847  00DF  120A  158A  24FF  120A  118A  	fcall	___awdiv
  1848  00E4  0871               	movf	?___awdiv+1,w
  1849  00E5  00FA               	movwf	___wmul@multiplier+1
  1850  00E6  0870               	movf	?___awdiv,w
  1851  00E7  00F9               	movwf	___wmul@multiplier
  1852  00E8  300A               	movlw	10
  1853  00E9  00FB               	movwf	___wmul@multiplicand
  1854  00EA  3000               	movlw	0
  1855  00EB  00FC               	movwf	___wmul@multiplicand+1
  1856  00EC  120A  158A  21EE  120A  118A  	fcall	___wmul
  1857  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1858  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1859  00F3  0828               	movf	readClock@c,w
  1860  00F4  390F               	andlw	15
  1861  00F5  0779               	addwf	?___wmul,w
  1862  00F6  00DC               	movwf	_seconds
  1863  00F7  087A               	movf	?___wmul+1,w
  1864  00F8  1803               	skipnc
  1865  00F9  0A7A               	incf	?___wmul+1,w
  1866  00FA  00DD               	movwf	_seconds+1
  1867                           
  1868                           ;LCDTime.c: 453: if (hour != last_hour)
  1869  00FB  0860               	movf	_last_hour,w
  1870  00FC  00A2               	movwf	??_readClock
  1871  00FD  01A3               	clrf	??_readClock+1
  1872  00FE  0855               	movf	_hour+1,w
  1873  00FF  0623               	xorwf	??_readClock+1,w
  1874  0100  1D03               	skipz
  1875  0101  2904               	goto	u1865
  1876  0102  0854               	movf	_hour,w
  1877  0103  0622               	xorwf	??_readClock,w
  1878  0104                     u1865:	
  1879  0104  1903               	skipnz
  1880  0105  299B               	goto	l2411
  1881                           
  1882                           ;LCDTime.c: 454: {
  1883                           ;LCDTime.c: 455: last_hour = hour ;
  1884  0106  0854               	movf	_hour,w
  1885  0107  00A2               	movwf	??_readClock
  1886  0108  0822               	movf	??_readClock,w
  1887  0109  00E0               	movwf	_last_hour
  1888                           
  1889                           ;LCDTime.c: 457: DS1307_GetDate(&n,&a,&b,&c) ;
  1890  010A  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1891  010B  00A2               	movwf	??_readClock
  1892  010C  0822               	movf	??_readClock,w
  1893  010D  00F5               	movwf	DS1307_GetDate@d_ptr
  1894  010E  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1895  010F  00A3               	movwf	??_readClock+1
  1896  0110  0823               	movf	??_readClock+1,w
  1897  0111  00F6               	movwf	DS1307_GetDate@m_ptr
  1898  0112  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1899  0113  00A4               	movwf	??_readClock+2
  1900  0114  0824               	movf	??_readClock+2,w
  1901  0115  00F7               	movwf	DS1307_GetDate@y_ptr
  1902  0116  3025               	movlw	(low (readClock@n| 0))& (0+255)
  1903  0117  120A  118A  200E  120A  118A  	fcall	_DS1307_GetDate
  1904                           
  1905                           ;LCDTime.c: 459: day = (n % 16) ;
  1906  011C  1283               	bcf	3,5	;RP0=0, select bank0
  1907  011D  1303               	bcf	3,6	;RP1=0, select bank0
  1908  011E  0825               	movf	readClock@n,w
  1909  011F  390F               	andlw	15
  1910  0120  00A2               	movwf	??_readClock
  1911  0121  01A3               	clrf	??_readClock+1
  1912  0122  0822               	movf	??_readClock,w
  1913  0123  00D2               	movwf	_day
  1914  0124  0823               	movf	??_readClock+1,w
  1915  0125  00D3               	movwf	_day+1
  1916                           
  1917                           ;LCDTime.c: 460: date = (a % 16) + ((a / 16 ) * 10) ;
  1918  0126  3010               	movlw	16
  1919  0127  00F0               	movwf	___awdiv@divisor
  1920  0128  3000               	movlw	0
  1921  0129  00F1               	movwf	___awdiv@divisor+1
  1922  012A  0826               	movf	readClock@a,w
  1923  012B  00A2               	movwf	??_readClock
  1924  012C  01A3               	clrf	??_readClock+1
  1925  012D  0822               	movf	??_readClock,w
  1926  012E  00F2               	movwf	___awdiv@dividend
  1927  012F  0823               	movf	??_readClock+1,w
  1928  0130  00F3               	movwf	___awdiv@dividend+1
  1929  0131  120A  158A  24FF  120A  118A  	fcall	___awdiv
  1930  0136  0871               	movf	?___awdiv+1,w
  1931  0137  00FA               	movwf	___wmul@multiplier+1
  1932  0138  0870               	movf	?___awdiv,w
  1933  0139  00F9               	movwf	___wmul@multiplier
  1934  013A  300A               	movlw	10
  1935  013B  00FB               	movwf	___wmul@multiplicand
  1936  013C  3000               	movlw	0
  1937  013D  00FC               	movwf	___wmul@multiplicand+1
  1938  013E  120A  158A  21EE  120A  118A  	fcall	___wmul
  1939  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1940  0144  1303               	bcf	3,6	;RP1=0, select bank0
  1941  0145  0826               	movf	readClock@a,w
  1942  0146  390F               	andlw	15
  1943  0147  0779               	addwf	?___wmul,w
  1944  0148  00D0               	movwf	_date
  1945  0149  087A               	movf	?___wmul+1,w
  1946  014A  1803               	skipnc
  1947  014B  0A7A               	incf	?___wmul+1,w
  1948  014C  00D1               	movwf	_date+1
  1949                           
  1950                           ;LCDTime.c: 461: month = (b % 16) + ((b / 16 ) * 10) ;
  1951  014D  3010               	movlw	16
  1952  014E  00F0               	movwf	___awdiv@divisor
  1953  014F  3000               	movlw	0
  1954  0150  00F1               	movwf	___awdiv@divisor+1
  1955  0151  0827               	movf	readClock@b,w
  1956  0152  00A2               	movwf	??_readClock
  1957  0153  01A3               	clrf	??_readClock+1
  1958  0154  0822               	movf	??_readClock,w
  1959  0155  00F2               	movwf	___awdiv@dividend
  1960  0156  0823               	movf	??_readClock+1,w
  1961  0157  00F3               	movwf	___awdiv@dividend+1
  1962  0158  120A  158A  24FF  120A  118A  	fcall	___awdiv
  1963  015D  0871               	movf	?___awdiv+1,w
  1964  015E  00FA               	movwf	___wmul@multiplier+1
  1965  015F  0870               	movf	?___awdiv,w
  1966  0160  00F9               	movwf	___wmul@multiplier
  1967  0161  300A               	movlw	10
  1968  0162  00FB               	movwf	___wmul@multiplicand
  1969  0163  3000               	movlw	0
  1970  0164  00FC               	movwf	___wmul@multiplicand+1
  1971  0165  120A  158A  21EE  120A  118A  	fcall	___wmul
  1972  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1973  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1974  016C  0827               	movf	readClock@b,w
  1975  016D  390F               	andlw	15
  1976  016E  0779               	addwf	?___wmul,w
  1977  016F  00D8               	movwf	_month
  1978  0170  087A               	movf	?___wmul+1,w
  1979  0171  1803               	skipnc
  1980  0172  0A7A               	incf	?___wmul+1,w
  1981  0173  00D9               	movwf	_month+1
  1982                           
  1983                           ;LCDTime.c: 462: year = (c % 16) + ((c / 16 ) * 10) ;
  1984  0174  3010               	movlw	16
  1985  0175  00F0               	movwf	___awdiv@divisor
  1986  0176  3000               	movlw	0
  1987  0177  00F1               	movwf	___awdiv@divisor+1
  1988  0178  0828               	movf	readClock@c,w
  1989  0179  00A2               	movwf	??_readClock
  1990  017A  01A3               	clrf	??_readClock+1
  1991  017B  0822               	movf	??_readClock,w
  1992  017C  00F2               	movwf	___awdiv@dividend
  1993  017D  0823               	movf	??_readClock+1,w
  1994  017E  00F3               	movwf	___awdiv@dividend+1
  1995  017F  120A  158A  24FF  120A  118A  	fcall	___awdiv
  1996  0184  0871               	movf	?___awdiv+1,w
  1997  0185  00FA               	movwf	___wmul@multiplier+1
  1998  0186  0870               	movf	?___awdiv,w
  1999  0187  00F9               	movwf	___wmul@multiplier
  2000  0188  300A               	movlw	10
  2001  0189  00FB               	movwf	___wmul@multiplicand
  2002  018A  3000               	movlw	0
  2003  018B  00FC               	movwf	___wmul@multiplicand+1
  2004  018C  120A  158A  21EE  120A  118A  	fcall	___wmul
  2005  0191  1283               	bcf	3,5	;RP0=0, select bank0
  2006  0192  1303               	bcf	3,6	;RP1=0, select bank0
  2007  0193  0828               	movf	readClock@c,w
  2008  0194  390F               	andlw	15
  2009  0195  0779               	addwf	?___wmul,w
  2010  0196  00DE               	movwf	_year
  2011  0197  087A               	movf	?___wmul+1,w
  2012  0198  1803               	skipnc
  2013  0199  0A7A               	incf	?___wmul+1,w
  2014  019A  00DF               	movwf	_year+1
  2015  019B                     l2411:	
  2016                           
  2017                           ;LCDTime.c: 463: }
  2018                           ;LCDTime.c: 465: if (minute != runningMinute)
  2019  019B  085B               	movf	_runningMinute+1,w
  2020  019C  0657               	xorwf	_minute+1,w
  2021  019D  1D03               	skipz
  2022  019E  29A1               	goto	u1875
  2023  019F  085A               	movf	_runningMinute,w
  2024  01A0  0656               	xorwf	_minute,w
  2025  01A1                     u1875:	
  2026  01A1  1903               	skipnz
  2027  01A2  0008               	return
  2028                           
  2029                           ;LCDTime.c: 466: {
  2030                           ;LCDTime.c: 467: runningMinute = minute ;
  2031  01A3  0857               	movf	_minute+1,w
  2032  01A4  00DB               	movwf	_runningMinute+1
  2033  01A5  0856               	movf	_minute,w
  2034  01A6  00DA               	movwf	_runningMinute
  2035                           
  2036                           ;LCDTime.c: 468: runningTime++ ;
  2037  01A7  3001               	movlw	1
  2038  01A8  07E6               	addwf	_runningTime,f
  2039  01A9  1803               	skipnc
  2040  01AA  0AE7               	incf	_runningTime+1,f
  2041  01AB  3000               	movlw	0
  2042  01AC  07E7               	addwf	_runningTime+1,f
  2043                           
  2044                           ;LCDTime.c: 471: DS1307_writeRam(&runningTime,0,2) ;
  2045  01AD  3000               	movlw	0
  2046  01AE  00F5               	movwf	DS1307_writeRam@offset
  2047  01AF  00F6               	movwf	DS1307_writeRam@offset+1
  2048  01B0  3002               	movlw	2
  2049  01B1  00F7               	movwf	DS1307_writeRam@length
  2050  01B2  3000               	movlw	0
  2051  01B3  00F8               	movwf	DS1307_writeRam@length+1
  2052  01B4  3066               	movlw	(low (_runningTime| 0))& (0+255)
  2053  01B5  120A  158A  22C4   	fcall	_DS1307_writeRam
  2054  01B8  0008               	return
  2055  01B9                     __end_of_readClock:	
  2056                           
  2057                           	psect	text4
  2058  0AC4                     __ptext4:	
  2059 ;; *************** function _DS1307_writeRam *****************
  2060 ;; Defined at:
  2061 ;;		line 109 in file "DS1307.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  ptr             1    wreg     PTR unsigned char 
  2064 ;;		 -> runningTime(2), 
  2065 ;;  offset          2    5[COMMON] int 
  2066 ;;  length          2    7[COMMON] int 
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;  ptr             1   11[COMMON] PTR unsigned char 
  2069 ;;		 -> runningTime(2), 
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2079 ;;      Params:         4       0       0       0       0
  2080 ;;      Locals:         1       0       0       0       0
  2081 ;;      Temps:          2       0       0       0       0
  2082 ;;      Totals:         7       0       0       0       0
  2083 ;;Total ram usage:        7 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    3
  2086 ;; This function calls:
  2087 ;;		_DS1307_Write
  2088 ;;		_I2C_Start
  2089 ;;		_I2C_Stop
  2090 ;; This function is called by:
  2091 ;;		_readClock
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           
  2096                           ;psect for function _DS1307_writeRam
  2097  0AC4                     _DS1307_writeRam:	
  2098                           
  2099                           ;incstack = 0
  2100                           ; Regs used in _DS1307_writeRam: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2101                           ;DS1307_writeRam@ptr stored from wreg
  2102  0AC4  00FB               	movwf	DS1307_writeRam@ptr
  2103                           
  2104                           ;DS1307.c: 111: I2C_Start();
  2105  0AC5  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  2106                           
  2107                           ;DS1307.c: 112: DS1307_Write(0xD0);
  2108  0ACA  30D0               	movlw	208
  2109  0ACB  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  2110                           
  2111                           ;DS1307.c: 113: DS1307_Write(0x08 + offset);
  2112  0AD0  0875               	movf	DS1307_writeRam@offset,w
  2113  0AD1  3E08               	addlw	8
  2114  0AD2  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  2115  0AD7                     l2231:	
  2116                           ;DS1307.c: 115: while(length-- > 0)
  2117                           
  2118  0AD7  0878               	movf	DS1307_writeRam@length+1,w
  2119  0AD8  00FA               	movwf	??_DS1307_writeRam+1
  2120  0AD9  03F7               	decf	DS1307_writeRam@length,f
  2121  0ADA  0A77               	incf	DS1307_writeRam@length,w
  2122  0ADB  00F9               	movwf	??_DS1307_writeRam
  2123  0ADC  1903               	skipnz
  2124  0ADD  03F8               	decf	DS1307_writeRam@length+1,f
  2125  0ADE  087A               	movf	??_DS1307_writeRam+1,w
  2126  0ADF  3A80               	xorlw	128
  2127  0AE0  00FF               	movwf	127
  2128  0AE1  3080               	movlw	128
  2129  0AE2  027F               	subwf	127,w
  2130  0AE3  1D03               	skipz
  2131  0AE4  2AE7               	goto	u1805
  2132  0AE5  3001               	movlw	1
  2133  0AE6  0279               	subwf	??_DS1307_writeRam,w
  2134  0AE7                     u1805:	
  2135  0AE7  1C03               	btfss	3,0
  2136  0AE8  2AF7               	goto	l2233
  2137                           
  2138                           ;DS1307.c: 116: DS1307_Write(*ptr++);
  2139  0AE9  087B               	movf	DS1307_writeRam@ptr,w
  2140  0AEA  0084               	movwf	4
  2141  0AEB  1383               	bcf	3,7	;select IRP bank0
  2142  0AEC  0800               	movf	0,w
  2143  0AED  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  2144  0AF2  3001               	movlw	1
  2145  0AF3  00F9               	movwf	??_DS1307_writeRam
  2146  0AF4  0879               	movf	??_DS1307_writeRam,w
  2147  0AF5  07FB               	addwf	DS1307_writeRam@ptr,f
  2148  0AF6  2AD7               	goto	l2231
  2149  0AF7                     l2233:	
  2150                           
  2151                           ;DS1307.c: 118: I2C_Stop();
  2152  0AF7  120A  158A  20FC   	fcall	_I2C_Stop
  2153  0AFA  0008               	return
  2154  0AFB                     __end_of_DS1307_writeRam:	
  2155                           
  2156                           	psect	text5
  2157  0CA9                     __ptext5:	
  2158 ;; *************** function _DS1307_GetTime *****************
  2159 ;; Defined at:
  2160 ;;		line 66 in file "DS1307.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  h_ptr           1    wreg     PTR unsigned char 
  2163 ;;		 -> readClock@a(1), 
  2164 ;;  m_ptr           1    5[COMMON] PTR unsigned char 
  2165 ;;		 -> readClock@b(1), 
  2166 ;;  s_ptr           1    6[COMMON] PTR unsigned char 
  2167 ;;		 -> readClock@c(1), 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  h_ptr           1    8[COMMON] PTR unsigned char 
  2170 ;;		 -> readClock@a(1), 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2180 ;;      Params:         2       0       0       0       0
  2181 ;;      Locals:         1       0       0       0       0
  2182 ;;      Temps:          1       0       0       0       0
  2183 ;;      Totals:         4       0       0       0       0
  2184 ;;Total ram usage:        4 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    3
  2187 ;; This function calls:
  2188 ;;		_DS1307_Read
  2189 ;;		_DS1307_Write
  2190 ;;		_I2C_Ack
  2191 ;;		_I2C_NoAck
  2192 ;;		_I2C_Start
  2193 ;;		_I2C_Stop
  2194 ;; This function is called by:
  2195 ;;		_readClock
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           
  2200                           ;psect for function _DS1307_GetTime
  2201  0CA9                     _DS1307_GetTime:	
  2202                           
  2203                           ;incstack = 0
  2204                           ; Regs used in _DS1307_GetTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2205                           ;DS1307_GetTime@h_ptr stored from wreg
  2206  0CA9  00F8               	movwf	DS1307_GetTime@h_ptr
  2207                           
  2208                           ;DS1307.c: 68: I2C_Start();
  2209  0CAA  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  2210                           
  2211                           ;DS1307.c: 69: DS1307_Write(0xD0);
  2212  0CAF  30D0               	movlw	208
  2213  0CB0  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  2214                           
  2215                           ;DS1307.c: 70: DS1307_Write(0x00);
  2216  0CB5  3000               	movlw	0
  2217  0CB6  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  2218                           
  2219                           ;DS1307.c: 71: I2C_Stop();
  2220  0CBB  120A  158A  20FC  120A  158A  	fcall	_I2C_Stop
  2221                           
  2222                           ;DS1307.c: 72: I2C_Start();
  2223  0CC0  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  2224                           
  2225                           ;DS1307.c: 73: DS1307_Write(0xD1);
  2226  0CC5  30D1               	movlw	209
  2227  0CC6  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  2228                           
  2229                           ;DS1307.c: 74: *s_ptr = DS1307_Read(); I2C_Ack();
  2230  0CCB  120A  158A  20D6  120A  158A  	fcall	_DS1307_Read
  2231  0CD0  00F7               	movwf	??_DS1307_GetTime
  2232  0CD1  0876               	movf	DS1307_GetTime@s_ptr,w
  2233  0CD2  0084               	movwf	4
  2234  0CD3  0877               	movf	??_DS1307_GetTime,w
  2235  0CD4  1383               	bcf	3,7	;select IRP bank0
  2236  0CD5  0080               	movwf	0
  2237  0CD6  120A  158A  20F2  120A  158A  	fcall	_I2C_Ack
  2238                           
  2239                           ;DS1307.c: 75: *m_ptr = DS1307_Read(); I2C_Ack();
  2240  0CDB  120A  158A  20D6  120A  158A  	fcall	_DS1307_Read
  2241  0CE0  00F7               	movwf	??_DS1307_GetTime
  2242  0CE1  0875               	movf	DS1307_GetTime@m_ptr,w
  2243  0CE2  0084               	movwf	4
  2244  0CE3  0877               	movf	??_DS1307_GetTime,w
  2245  0CE4  1383               	bcf	3,7	;select IRP bank0
  2246  0CE5  0080               	movwf	0
  2247  0CE6  120A  158A  20F2  120A  158A  	fcall	_I2C_Ack
  2248                           
  2249                           ;DS1307.c: 76: *h_ptr = DS1307_Read(); I2C_NoAck();
  2250  0CEB  120A  158A  20D6  120A  158A  	fcall	_DS1307_Read
  2251  0CF0  00F7               	movwf	??_DS1307_GetTime
  2252  0CF1  0878               	movf	DS1307_GetTime@h_ptr,w
  2253  0CF2  0084               	movwf	4
  2254  0CF3  0877               	movf	??_DS1307_GetTime,w
  2255  0CF4  1383               	bcf	3,7	;select IRP bank0
  2256  0CF5  0080               	movwf	0
  2257  0CF6  120A  158A  20E8  120A  158A  	fcall	_I2C_NoAck
  2258                           
  2259                           ;DS1307.c: 77: I2C_Stop();
  2260  0CFB  120A  158A  20FC   	fcall	_I2C_Stop
  2261  0CFE  0008               	return
  2262  0CFF                     __end_of_DS1307_GetTime:	
  2263                           
  2264                           	psect	text6
  2265  000E                     __ptext6:	
  2266 ;; *************** function _DS1307_GetDate *****************
  2267 ;; Defined at:
  2268 ;;		line 80 in file "DS1307.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  n_ptr           1    wreg     PTR unsigned char 
  2271 ;;		 -> readClock@n(1), 
  2272 ;;  d_ptr           1    5[COMMON] PTR unsigned char 
  2273 ;;		 -> readClock@a(1), 
  2274 ;;  m_ptr           1    6[COMMON] PTR unsigned char 
  2275 ;;		 -> readClock@b(1), 
  2276 ;;  y_ptr           1    7[COMMON] PTR unsigned char 
  2277 ;;		 -> readClock@c(1), 
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  n_ptr           1    9[COMMON] PTR unsigned char 
  2280 ;;		 -> readClock@n(1), 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2290 ;;      Params:         3       0       0       0       0
  2291 ;;      Locals:         1       0       0       0       0
  2292 ;;      Temps:          1       0       0       0       0
  2293 ;;      Totals:         5       0       0       0       0
  2294 ;;Total ram usage:        5 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    3
  2297 ;; This function calls:
  2298 ;;		_DS1307_Read
  2299 ;;		_DS1307_Write
  2300 ;;		_I2C_Ack
  2301 ;;		_I2C_NoAck
  2302 ;;		_I2C_Start
  2303 ;;		_I2C_Stop
  2304 ;; This function is called by:
  2305 ;;		_readClock
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           
  2310                           ;psect for function _DS1307_GetDate
  2311  000E                     _DS1307_GetDate:	
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _DS1307_GetDate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2315                           ;DS1307_GetDate@n_ptr stored from wreg
  2316  000E  00F9               	movwf	DS1307_GetDate@n_ptr
  2317                           
  2318                           ;DS1307.c: 82: I2C_Start();
  2319  000F  120A  158A  210C  120A  118A  	fcall	_I2C_Start
  2320                           
  2321                           ;DS1307.c: 83: DS1307_Write(0xD0);
  2322  0014  30D0               	movlw	208
  2323  0015  120A  118A  2003  120A  118A  	fcall	_DS1307_Write
  2324                           
  2325                           ;DS1307.c: 84: DS1307_Write(0x03);
  2326  001A  3003               	movlw	3
  2327  001B  120A  118A  2003  120A  118A  	fcall	_DS1307_Write
  2328                           
  2329                           ;DS1307.c: 85: I2C_Stop();
  2330  0020  120A  158A  20FC  120A  118A  	fcall	_I2C_Stop
  2331                           
  2332                           ;DS1307.c: 86: I2C_Start();
  2333  0025  120A  158A  210C  120A  118A  	fcall	_I2C_Start
  2334                           
  2335                           ;DS1307.c: 87: DS1307_Write(0xD1);
  2336  002A  30D1               	movlw	209
  2337  002B  120A  118A  2003  120A  118A  	fcall	_DS1307_Write
  2338                           
  2339                           ;DS1307.c: 88: *n_ptr = DS1307_Read(); I2C_Ack();
  2340  0030  120A  158A  20D6  120A  118A  	fcall	_DS1307_Read
  2341  0035  00F8               	movwf	??_DS1307_GetDate
  2342  0036  0879               	movf	DS1307_GetDate@n_ptr,w
  2343  0037  0084               	movwf	4
  2344  0038  0878               	movf	??_DS1307_GetDate,w
  2345  0039  1383               	bcf	3,7	;select IRP bank0
  2346  003A  0080               	movwf	0
  2347  003B  120A  158A  20F2  120A  118A  	fcall	_I2C_Ack
  2348                           
  2349                           ;DS1307.c: 89: *d_ptr = DS1307_Read(); I2C_Ack();
  2350  0040  120A  158A  20D6  120A  118A  	fcall	_DS1307_Read
  2351  0045  00F8               	movwf	??_DS1307_GetDate
  2352  0046  0875               	movf	DS1307_GetDate@d_ptr,w
  2353  0047  0084               	movwf	4
  2354  0048  0878               	movf	??_DS1307_GetDate,w
  2355  0049  1383               	bcf	3,7	;select IRP bank0
  2356  004A  0080               	movwf	0
  2357  004B  120A  158A  20F2  120A  118A  	fcall	_I2C_Ack
  2358                           
  2359                           ;DS1307.c: 90: *m_ptr = DS1307_Read(); I2C_Ack();
  2360  0050  120A  158A  20D6  120A  118A  	fcall	_DS1307_Read
  2361  0055  00F8               	movwf	??_DS1307_GetDate
  2362  0056  0876               	movf	DS1307_GetDate@m_ptr,w
  2363  0057  0084               	movwf	4
  2364  0058  0878               	movf	??_DS1307_GetDate,w
  2365  0059  1383               	bcf	3,7	;select IRP bank0
  2366  005A  0080               	movwf	0
  2367  005B  120A  158A  20F2  120A  118A  	fcall	_I2C_Ack
  2368                           
  2369                           ;DS1307.c: 91: *y_ptr = DS1307_Read(); I2C_NoAck();
  2370  0060  120A  158A  20D6  120A  118A  	fcall	_DS1307_Read
  2371  0065  00F8               	movwf	??_DS1307_GetDate
  2372  0066  0877               	movf	DS1307_GetDate@y_ptr,w
  2373  0067  0084               	movwf	4
  2374  0068  0878               	movf	??_DS1307_GetDate,w
  2375  0069  1383               	bcf	3,7	;select IRP bank0
  2376  006A  0080               	movwf	0
  2377  006B  120A  158A  20E8  120A  118A  	fcall	_I2C_NoAck
  2378                           
  2379                           ;DS1307.c: 92: I2C_Stop();
  2380  0070  120A  158A  20FC   	fcall	_I2C_Stop
  2381  0073  0008               	return
  2382  0074                     __end_of_DS1307_GetDate:	
  2383                           
  2384                           	psect	text7
  2385  0309                     __ptext7:	
  2386 ;; *************** function _doMenu *****************
  2387 ;; Defined at:
  2388 ;;		line 149 in file "LCDTime.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;		None
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  y               2   37[BANK0 ] int 
  2393 ;;  m               2   35[BANK0 ] int 
  2394 ;;  d               2   33[BANK0 ] int 
  2395 ;;  n               2   31[BANK0 ] int 
  2396 ;;  s               2   29[BANK0 ] int 
  2397 ;;  m               2   27[BANK0 ] int 
  2398 ;;  h               2   25[BANK0 ] int 
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2408 ;;      Params:         0       0       0       0       0
  2409 ;;      Locals:         0      14       0       0       0
  2410 ;;      Temps:          0       3       0       0       0
  2411 ;;      Totals:         0      17       0       0       0
  2412 ;;Total ram usage:       17 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    5
  2415 ;; This function calls:
  2416 ;;		_DS1307_SetDate
  2417 ;;		_DS1307_SetTime
  2418 ;;		_LCDByte
  2419 ;;		_LCDGotoXY
  2420 ;;		_LCDWriteString
  2421 ;;		___awdiv
  2422 ;;		___awmod
  2423 ;;		_readInputs
  2424 ;;		_showDate
  2425 ;;		_showTime
  2426 ;; This function is called by:
  2427 ;;		_main
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           
  2432                           ;psect for function _doMenu
  2433  0309                     _doMenu:	
  2434  0309                     l2431:	
  2435                           ;LCDTime.c: 151: while(bButton)
  2436                           
  2437                           ;incstack = 0
  2438                           ; Regs used in _doMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2439                           
  2440  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2441  030A  1303               	bcf	3,6	;RP1=0, select bank0
  2442  030B  0864               	movf	_bButton,w
  2443  030C  1903               	btfsc	3,2
  2444  030D  2B14               	goto	l2433
  2445                           
  2446                           ;LCDTime.c: 152: readInputs();
  2447  030E  120A  158A  2295  120A  118A  	fcall	_readInputs
  2448  0313  2B09               	goto	l2431
  2449  0314                     l2433:	
  2450                           
  2451                           ;LCDTime.c: 155: if (menuFunction == 1 | menuFunction == 2)
  2452  0314  0361               	decf	_menuFunction,w
  2453  0315  1903               	btfsc	3,2
  2454  0316  2B1B               	goto	l2437
  2455  0317  3002               	movlw	2
  2456  0318  0661               	xorwf	_menuFunction,w
  2457  0319  1D03               	btfss	3,2
  2458  031A  2D1C               	goto	l2555
  2459  031B                     l2437:	
  2460                           
  2461                           ;LCDTime.c: 156: {
  2462                           ;LCDTime.c: 157: int h,m,s ;
  2463                           ;LCDTime.c: 159: h = hour ;
  2464  031B  0855               	movf	_hour+1,w
  2465  031C  00BA               	movwf	doMenu@h+1
  2466  031D  0854               	movf	_hour,w
  2467  031E  00B9               	movwf	doMenu@h
  2468                           
  2469                           ;LCDTime.c: 160: m = minute ;
  2470  031F  0857               	movf	_minute+1,w
  2471  0320  00BC               	movwf	doMenu@m+1
  2472  0321  0856               	movf	_minute,w
  2473  0322  00BB               	movwf	doMenu@m
  2474                           
  2475                           ;LCDTime.c: 161: s = seconds ;
  2476  0323  085D               	movf	_seconds+1,w
  2477  0324  00BE               	movwf	doMenu@s+1
  2478  0325  085C               	movf	_seconds,w
  2479  0326  00BD               	movwf	doMenu@s
  2480                           
  2481                           ;LCDTime.c: 163: (LCDByte(0b00000001,0));
  2482  0327  01F5               	clrf	LCDByte@isdata
  2483  0328  3001               	movlw	1
  2484  0329  120A  158A  2459  120A  118A  	fcall	_LCDByte
  2485                           
  2486                           ;LCDTime.c: 164: LCDWriteString(setText);
  2487  032E  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2488  032F  00FC               	movwf	LCDWriteString@msg
  2489  0330  3080               	movlw	128
  2490  0331  00FD               	movwf	LCDWriteString@msg+1
  2491  0332  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  2492                           
  2493                           ;LCDTime.c: 165: LCDWriteString("Hours");
  2494  0337  3097               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2495  0338  00FC               	movwf	LCDWriteString@msg
  2496  0339  3080               	movlw	128
  2497  033A  00FD               	movwf	LCDWriteString@msg+1
  2498  033B  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  2499  0340                     L4:	
  2500                           
  2501                           ;LCDTime.c: 167: LCDGotoXY(0,1) ;
  2502  0340  01FC               	clrf	LCDGotoXY@y
  2503  0341  0AFC               	incf	LCDGotoXY@y,f
  2504  0342  3000               	movlw	0
  2505  0343  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  2506                           
  2507                           ;LCDTime.c: 168: showTime();
  2508  0348  120A  158A  2336  120A  118A  	fcall	_showTime
  2509  034D                     l2471:	
  2510                           ;LCDTime.c: 170: while(!bButton)
  2511                           
  2512  034D  1283               	bcf	3,5	;RP0=0, select bank0
  2513  034E  1303               	bcf	3,6	;RP1=0, select bank0
  2514  034F  0864               	movf	_bButton,w
  2515  0350  1D03               	btfss	3,2
  2516  0351  2B87               	goto	l2475
  2517                           
  2518                           ;LCDTime.c: 171: {
  2519                           ;LCDTime.c: 172: readInputs();
  2520  0352  120A  158A  2295  120A  118A  	fcall	_readInputs
  2521                           
  2522                           ;LCDTime.c: 174: if (state & 0x10)
  2523  0357  1283               	bcf	3,5	;RP0=0, select bank0
  2524  0358  1303               	bcf	3,6	;RP1=0, select bank0
  2525  0359  1E65               	btfss	_state,4
  2526  035A  2B6F               	goto	l273
  2527                           
  2528                           ;LCDTime.c: 175: {
  2529                           ;LCDTime.c: 176: hour++;
  2530  035B  3001               	movlw	1
  2531  035C  07D4               	addwf	_hour,f
  2532  035D  1803               	skipnc
  2533  035E  0AD5               	incf	_hour+1,f
  2534  035F  3000               	movlw	0
  2535  0360  07D5               	addwf	_hour+1,f
  2536                           
  2537                           ;LCDTime.c: 177: if (hour > 23)
  2538  0361  0855               	movf	_hour+1,w
  2539  0362  3A80               	xorlw	128
  2540  0363  00FF               	movwf	127
  2541  0364  3080               	movlw	128
  2542  0365  027F               	subwf	127,w
  2543  0366  1D03               	skipz
  2544  0367  2B6A               	goto	u1935
  2545  0368  3018               	movlw	24
  2546  0369  0254               	subwf	_hour,w
  2547  036A                     u1935:	
  2548  036A  1C03               	skipc
  2549  036B  2B7B               	goto	l2465
  2550                           
  2551                           ;LCDTime.c: 178: hour = 0 ;
  2552  036C  1283               	bcf	3,5	;RP0=0, select bank0
  2553  036D  1303               	bcf	3,6	;RP1=0, select bank0
  2554  036E  2B79               	goto	l2463
  2555  036F                     l273:	
  2556                           ;LCDTime.c: 179: }
  2557                           
  2558                           
  2559                           ;LCDTime.c: 180: else if (state & 0x20)
  2560  036F  1EE5               	btfss	_state,5
  2561  0370  2B7B               	goto	l2465
  2562                           
  2563                           ;LCDTime.c: 181: {
  2564                           ;LCDTime.c: 182: hour--;
  2565  0371  30FF               	movlw	255
  2566  0372  07D4               	addwf	_hour,f
  2567  0373  1803               	skipnc
  2568  0374  0AD5               	incf	_hour+1,f
  2569  0375  30FF               	movlw	255
  2570  0376  07D5               	addwf	_hour+1,f
  2571                           
  2572                           ;LCDTime.c: 183: if (hour < 0)
  2573  0377  1FD5               	btfss	_hour+1,7
  2574  0378  2B7B               	goto	l2465
  2575  0379                     l2463:	
  2576                           
  2577                           ;LCDTime.c: 184: hour = 0 ;
  2578  0379  01D4               	clrf	_hour
  2579  037A  01D5               	clrf	_hour+1
  2580  037B                     l2465:	
  2581                           
  2582                           ;LCDTime.c: 185: }
  2583                           ;LCDTime.c: 187: if (state & 0x30)
  2584  037B  1283               	bcf	3,5	;RP0=0, select bank0
  2585  037C  1303               	bcf	3,6	;RP1=0, select bank0
  2586  037D  0865               	movf	_state,w
  2587  037E  3930               	andlw	48
  2588  037F  1903               	btfsc	3,2
  2589  0380  2B4D               	goto	l2471
  2590  0381  2B40               	goto	L4
  2591  0382                     l2473:	
  2592                           ;LCDTime.c: 191: }
  2593                           ;LCDTime.c: 192: }
  2594                           ;LCDTime.c: 194: while(bButton)
  2595                           
  2596                           ;LCDTime.c: 190: showTime();
  2597                           
  2598                           ;LCDTime.c: 188: {
  2599                           ;LCDTime.c: 189: LCDGotoXY(0,1) ;
  2600                           
  2601                           
  2602                           ;LCDTime.c: 195: readInputs();
  2603  0382  120A  158A  2295  120A  118A  	fcall	_readInputs
  2604  0387                     l2475:	
  2605  0387  1283               	bcf	3,5	;RP0=0, select bank0
  2606  0388  1303               	bcf	3,6	;RP1=0, select bank0
  2607  0389  0864               	movf	_bButton,w
  2608  038A  1D03               	btfss	3,2
  2609  038B  2B82               	goto	l2473
  2610                           
  2611                           ;LCDTime.c: 197: LCDGotoXY(0,0) ;
  2612  038C  01FC               	clrf	LCDGotoXY@y
  2613  038D  3000               	movlw	0
  2614  038E  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  2615                           
  2616                           ;LCDTime.c: 198: LCDWriteString(setText);
  2617  0393  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2618  0394  00FC               	movwf	LCDWriteString@msg
  2619  0395  3080               	movlw	128
  2620  0396  00FD               	movwf	LCDWriteString@msg+1
  2621  0397  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  2622                           
  2623                           ;LCDTime.c: 199: LCDWriteString("Minutes");
  2624  039C  306F               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2625  039D  00FC               	movwf	LCDWriteString@msg
  2626  039E  3080               	movlw	128
  2627  039F  00FD               	movwf	LCDWriteString@msg+1
  2628  03A0  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  2629  03A5                     l2505:	
  2630                           ;LCDTime.c: 201: while(!bButton)
  2631                           
  2632  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2633  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2634  03A7  0864               	movf	_bButton,w
  2635  03A8  1D03               	btfss	3,2
  2636  03A9  2BEC               	goto	l2509
  2637                           
  2638                           ;LCDTime.c: 202: {
  2639                           ;LCDTime.c: 203: readInputs();
  2640  03AA  120A  158A  2295  120A  118A  	fcall	_readInputs
  2641                           
  2642                           ;LCDTime.c: 205: if (state & 0x10)
  2643  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  2644  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  2645  03B1  1E65               	btfss	_state,4
  2646  03B2  2BC7               	goto	l285
  2647                           
  2648                           ;LCDTime.c: 206: {
  2649                           ;LCDTime.c: 207: minute++;
  2650  03B3  3001               	movlw	1
  2651  03B4  07D6               	addwf	_minute,f
  2652  03B5  1803               	skipnc
  2653  03B6  0AD7               	incf	_minute+1,f
  2654  03B7  3000               	movlw	0
  2655  03B8  07D7               	addwf	_minute+1,f
  2656                           
  2657                           ;LCDTime.c: 208: if (minute > 59)
  2658  03B9  0857               	movf	_minute+1,w
  2659  03BA  3A80               	xorlw	128
  2660  03BB  00FF               	movwf	127
  2661  03BC  3080               	movlw	128
  2662  03BD  027F               	subwf	127,w
  2663  03BE  1D03               	skipz
  2664  03BF  2BC2               	goto	u2005
  2665  03C0  303C               	movlw	60
  2666  03C1  0256               	subwf	_minute,w
  2667  03C2                     u2005:	
  2668  03C2  1C03               	skipc
  2669  03C3  2BD3               	goto	l2499
  2670                           
  2671                           ;LCDTime.c: 209: minute = 0 ;
  2672  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2673  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2674  03C6  2BD1               	goto	l2497
  2675  03C7                     l285:	
  2676                           ;LCDTime.c: 210: }
  2677                           
  2678                           
  2679                           ;LCDTime.c: 211: else if (state & 0x20)
  2680  03C7  1EE5               	btfss	_state,5
  2681  03C8  2BD3               	goto	l2499
  2682                           
  2683                           ;LCDTime.c: 212: {
  2684                           ;LCDTime.c: 213: minute--;
  2685  03C9  30FF               	movlw	255
  2686  03CA  07D6               	addwf	_minute,f
  2687  03CB  1803               	skipnc
  2688  03CC  0AD7               	incf	_minute+1,f
  2689  03CD  30FF               	movlw	255
  2690  03CE  07D7               	addwf	_minute+1,f
  2691                           
  2692                           ;LCDTime.c: 214: if (minute < 0)
  2693  03CF  1FD7               	btfss	_minute+1,7
  2694  03D0  2BD3               	goto	l2499
  2695  03D1                     l2497:	
  2696                           
  2697                           ;LCDTime.c: 215: minute = 0 ;
  2698  03D1  01D6               	clrf	_minute
  2699  03D2  01D7               	clrf	_minute+1
  2700  03D3                     l2499:	
  2701                           
  2702                           ;LCDTime.c: 216: }
  2703                           ;LCDTime.c: 218: if (state & 0x30)
  2704  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2705  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2706  03D5  0865               	movf	_state,w
  2707  03D6  3930               	andlw	48
  2708  03D7  1903               	btfsc	3,2
  2709  03D8  2BA5               	goto	l2505
  2710                           
  2711                           ;LCDTime.c: 219: {
  2712                           ;LCDTime.c: 220: LCDGotoXY(0,1) ;
  2713  03D9  01FC               	clrf	LCDGotoXY@y
  2714  03DA  0AFC               	incf	LCDGotoXY@y,f
  2715  03DB  3000               	movlw	0
  2716  03DC  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  2717                           
  2718                           ;LCDTime.c: 221: showTime();
  2719  03E1  120A  158A  2336  120A  118A  	fcall	_showTime
  2720  03E6  2BA5               	goto	l2505
  2721  03E7                     l2507:	
  2722                           ;LCDTime.c: 222: }
  2723                           ;LCDTime.c: 223: }
  2724                           ;LCDTime.c: 225: while(bButton)
  2725                           
  2726                           
  2727                           ;LCDTime.c: 226: readInputs();
  2728  03E7  120A  158A  2295  120A  118A  	fcall	_readInputs
  2729  03EC                     l2509:	
  2730  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2731  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2732  03EE  0864               	movf	_bButton,w
  2733  03EF  1D03               	btfss	3,2
  2734  03F0  2BE7               	goto	l2507
  2735                           
  2736                           ;LCDTime.c: 228: LCDGotoXY(0,0) ;
  2737  03F1  01FC               	clrf	LCDGotoXY@y
  2738  03F2  3000               	movlw	0
  2739  03F3  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  2740                           
  2741                           ;LCDTime.c: 229: LCDWriteString(setText);
  2742  03F8  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2743  03F9  00FC               	movwf	LCDWriteString@msg
  2744  03FA  3080               	movlw	128
  2745  03FB  00FD               	movwf	LCDWriteString@msg+1
  2746  03FC  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  2747                           
  2748                           ;LCDTime.c: 230: LCDWriteString("Seconds");
  2749  0401  3067               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2750  0402  00FC               	movwf	LCDWriteString@msg
  2751  0403  3080               	movlw	128
  2752  0404  00FD               	movwf	LCDWriteString@msg+1
  2753  0405  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  2754  040A                     l2539:	
  2755                           ;LCDTime.c: 232: while(!bButton)
  2756                           
  2757  040A  1283               	bcf	3,5	;RP0=0, select bank0
  2758  040B  1303               	bcf	3,6	;RP1=0, select bank0
  2759  040C  0864               	movf	_bButton,w
  2760  040D  1D03               	btfss	3,2
  2761  040E  2C4C               	goto	l2541
  2762                           
  2763                           ;LCDTime.c: 233: {
  2764                           ;LCDTime.c: 234: readInputs();
  2765  040F  120A  158A  2295  120A  118A  	fcall	_readInputs
  2766                           
  2767                           ;LCDTime.c: 236: if (state & 0x10)
  2768  0414  1283               	bcf	3,5	;RP0=0, select bank0
  2769  0415  1303               	bcf	3,6	;RP1=0, select bank0
  2770  0416  1E65               	btfss	_state,4
  2771  0417  2C2C               	goto	l297
  2772                           
  2773                           ;LCDTime.c: 237: {
  2774                           ;LCDTime.c: 238: seconds++;
  2775  0418  3001               	movlw	1
  2776  0419  07DC               	addwf	_seconds,f
  2777  041A  1803               	skipnc
  2778  041B  0ADD               	incf	_seconds+1,f
  2779  041C  3000               	movlw	0
  2780  041D  07DD               	addwf	_seconds+1,f
  2781                           
  2782                           ;LCDTime.c: 239: if (seconds > 59)
  2783  041E  085D               	movf	_seconds+1,w
  2784  041F  3A80               	xorlw	128
  2785  0420  00FF               	movwf	127
  2786  0421  3080               	movlw	128
  2787  0422  027F               	subwf	127,w
  2788  0423  1D03               	skipz
  2789  0424  2C27               	goto	u2075
  2790  0425  303C               	movlw	60
  2791  0426  025C               	subwf	_seconds,w
  2792  0427                     u2075:	
  2793  0427  1C03               	skipc
  2794  0428  2C38               	goto	l2533
  2795                           
  2796                           ;LCDTime.c: 240: seconds = 0 ;
  2797  0429  1283               	bcf	3,5	;RP0=0, select bank0
  2798  042A  1303               	bcf	3,6	;RP1=0, select bank0
  2799  042B  2C36               	goto	l2531
  2800  042C                     l297:	
  2801                           ;LCDTime.c: 241: }
  2802                           
  2803                           
  2804                           ;LCDTime.c: 242: else if (state & 0x20)
  2805  042C  1EE5               	btfss	_state,5
  2806  042D  2C38               	goto	l2533
  2807                           
  2808                           ;LCDTime.c: 243: {
  2809                           ;LCDTime.c: 244: seconds--;
  2810  042E  30FF               	movlw	255
  2811  042F  07DC               	addwf	_seconds,f
  2812  0430  1803               	skipnc
  2813  0431  0ADD               	incf	_seconds+1,f
  2814  0432  30FF               	movlw	255
  2815  0433  07DD               	addwf	_seconds+1,f
  2816                           
  2817                           ;LCDTime.c: 245: if (seconds < 0)
  2818  0434  1FDD               	btfss	_seconds+1,7
  2819  0435  2C38               	goto	l2533
  2820  0436                     l2531:	
  2821                           
  2822                           ;LCDTime.c: 246: seconds = 0 ;
  2823  0436  01DC               	clrf	_seconds
  2824  0437  01DD               	clrf	_seconds+1
  2825  0438                     l2533:	
  2826                           
  2827                           ;LCDTime.c: 247: }
  2828                           ;LCDTime.c: 249: if (state & 0x30)
  2829  0438  1283               	bcf	3,5	;RP0=0, select bank0
  2830  0439  1303               	bcf	3,6	;RP1=0, select bank0
  2831  043A  0865               	movf	_state,w
  2832  043B  3930               	andlw	48
  2833  043C  1903               	btfsc	3,2
  2834  043D  2C0A               	goto	l2539
  2835                           
  2836                           ;LCDTime.c: 250: {
  2837                           ;LCDTime.c: 251: LCDGotoXY(0,1) ;
  2838  043E  01FC               	clrf	LCDGotoXY@y
  2839  043F  0AFC               	incf	LCDGotoXY@y,f
  2840  0440  3000               	movlw	0
  2841  0441  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  2842                           
  2843                           ;LCDTime.c: 252: showTime();
  2844  0446  120A  158A  2336  120A  118A  	fcall	_showTime
  2845  044B  2C0A               	goto	l2539
  2846  044C                     l2541:	
  2847                           
  2848                           ;LCDTime.c: 253: }
  2849                           ;LCDTime.c: 254: }
  2850                           ;LCDTime.c: 257: if (h != hour || m != minute || s != seconds)
  2851  044C  0855               	movf	_hour+1,w
  2852  044D  063A               	xorwf	doMenu@h+1,w
  2853  044E  1D03               	skipz
  2854  044F  2C52               	goto	u2125
  2855  0450  0854               	movf	_hour,w
  2856  0451  0639               	xorwf	doMenu@h,w
  2857  0452                     u2125:	
  2858  0452  1D03               	skipz
  2859  0453  2C64               	goto	l2547
  2860  0454  0857               	movf	_minute+1,w
  2861  0455  063C               	xorwf	doMenu@m+1,w
  2862  0456  1D03               	skipz
  2863  0457  2C5A               	goto	u2135
  2864  0458  0856               	movf	_minute,w
  2865  0459  063B               	xorwf	doMenu@m,w
  2866  045A                     u2135:	
  2867  045A  1D03               	skipz
  2868  045B  2C64               	goto	l2547
  2869  045C  085D               	movf	_seconds+1,w
  2870  045D  063E               	xorwf	doMenu@s+1,w
  2871  045E  1D03               	skipz
  2872  045F  2C62               	goto	u2145
  2873  0460  085C               	movf	_seconds,w
  2874  0461  063D               	xorwf	doMenu@s,w
  2875  0462                     u2145:	
  2876  0462  1903               	skipnz
  2877  0463  2D11               	goto	l2553
  2878  0464                     l2547:	
  2879                           
  2880                           ;LCDTime.c: 258: {
  2881                           ;LCDTime.c: 259: h = ((hour / 10) << 4) + hour % 10 ;
  2882  0464  300A               	movlw	10
  2883  0465  00F0               	movwf	___awdiv@divisor
  2884  0466  3000               	movlw	0
  2885  0467  00F1               	movwf	___awdiv@divisor+1
  2886  0468  0855               	movf	_hour+1,w
  2887  0469  00F3               	movwf	___awdiv@dividend+1
  2888  046A  0854               	movf	_hour,w
  2889  046B  00F2               	movwf	___awdiv@dividend
  2890  046C  120A  158A  24FF  120A  118A  	fcall	___awdiv
  2891  0471  0870               	movf	?___awdiv,w
  2892  0472  1283               	bcf	3,5	;RP0=0, select bank0
  2893  0473  1303               	bcf	3,6	;RP1=0, select bank0
  2894  0474  00B6               	movwf	??_doMenu
  2895  0475  0871               	movf	?___awdiv+1,w
  2896  0476  00B7               	movwf	??_doMenu+1
  2897  0477  0EB6               	swapf	??_doMenu,f
  2898  0478  0EB7               	swapf	??_doMenu+1,f
  2899  0479  30F0               	movlw	240
  2900  047A  05B7               	andwf	??_doMenu+1,f
  2901  047B  0836               	movf	??_doMenu,w
  2902  047C  390F               	andlw	15
  2903  047D  04B7               	iorwf	??_doMenu+1,f
  2904  047E  30F0               	movlw	240
  2905  047F  05B6               	andwf	??_doMenu,f
  2906  0480  300A               	movlw	10
  2907  0481  00F0               	movwf	___awmod@divisor
  2908  0482  3000               	movlw	0
  2909  0483  00F1               	movwf	___awmod@divisor+1
  2910  0484  0855               	movf	_hour+1,w
  2911  0485  00F3               	movwf	___awmod@dividend+1
  2912  0486  0854               	movf	_hour,w
  2913  0487  00F2               	movwf	___awmod@dividend
  2914  0488  120A  158A  2372  120A  118A  	fcall	___awmod
  2915  048D  0870               	movf	?___awmod,w
  2916  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2917  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2918  0490  0736               	addwf	??_doMenu,w
  2919  0491  00B9               	movwf	doMenu@h
  2920  0492  0871               	movf	?___awmod+1,w
  2921  0493  1803               	skipnc
  2922  0494  0A71               	incf	?___awmod+1,w
  2923  0495  0737               	addwf	??_doMenu+1,w
  2924  0496  00BA               	movwf	doMenu@h+1
  2925                           
  2926                           ;LCDTime.c: 260: m = ((minute / 10) << 4) + minute % 10 ;
  2927  0497  300A               	movlw	10
  2928  0498  00F0               	movwf	___awdiv@divisor
  2929  0499  3000               	movlw	0
  2930  049A  00F1               	movwf	___awdiv@divisor+1
  2931  049B  0857               	movf	_minute+1,w
  2932  049C  00F3               	movwf	___awdiv@dividend+1
  2933  049D  0856               	movf	_minute,w
  2934  049E  00F2               	movwf	___awdiv@dividend
  2935  049F  120A  158A  24FF  120A  118A  	fcall	___awdiv
  2936  04A4  0870               	movf	?___awdiv,w
  2937  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  2938  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  2939  04A7  00B6               	movwf	??_doMenu
  2940  04A8  0871               	movf	?___awdiv+1,w
  2941  04A9  00B7               	movwf	??_doMenu+1
  2942  04AA  0EB6               	swapf	??_doMenu,f
  2943  04AB  0EB7               	swapf	??_doMenu+1,f
  2944  04AC  30F0               	movlw	240
  2945  04AD  05B7               	andwf	??_doMenu+1,f
  2946  04AE  0836               	movf	??_doMenu,w
  2947  04AF  390F               	andlw	15
  2948  04B0  04B7               	iorwf	??_doMenu+1,f
  2949  04B1  30F0               	movlw	240
  2950  04B2  05B6               	andwf	??_doMenu,f
  2951  04B3  300A               	movlw	10
  2952  04B4  00F0               	movwf	___awmod@divisor
  2953  04B5  3000               	movlw	0
  2954  04B6  00F1               	movwf	___awmod@divisor+1
  2955  04B7  0857               	movf	_minute+1,w
  2956  04B8  00F3               	movwf	___awmod@dividend+1
  2957  04B9  0856               	movf	_minute,w
  2958  04BA  00F2               	movwf	___awmod@dividend
  2959  04BB  120A  158A  2372  120A  118A  	fcall	___awmod
  2960  04C0  0870               	movf	?___awmod,w
  2961  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2962  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2963  04C3  0736               	addwf	??_doMenu,w
  2964  04C4  00BB               	movwf	doMenu@m
  2965  04C5  0871               	movf	?___awmod+1,w
  2966  04C6  1803               	skipnc
  2967  04C7  0A71               	incf	?___awmod+1,w
  2968  04C8  0737               	addwf	??_doMenu+1,w
  2969  04C9  00BC               	movwf	doMenu@m+1
  2970                           
  2971                           ;LCDTime.c: 261: s = ((seconds / 10) << 4) + seconds % 10 ;
  2972  04CA  300A               	movlw	10
  2973  04CB  00F0               	movwf	___awdiv@divisor
  2974  04CC  3000               	movlw	0
  2975  04CD  00F1               	movwf	___awdiv@divisor+1
  2976  04CE  085D               	movf	_seconds+1,w
  2977  04CF  00F3               	movwf	___awdiv@dividend+1
  2978  04D0  085C               	movf	_seconds,w
  2979  04D1  00F2               	movwf	___awdiv@dividend
  2980  04D2  120A  158A  24FF  120A  118A  	fcall	___awdiv
  2981  04D7  0870               	movf	?___awdiv,w
  2982  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2983  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2984  04DA  00B6               	movwf	??_doMenu
  2985  04DB  0871               	movf	?___awdiv+1,w
  2986  04DC  00B7               	movwf	??_doMenu+1
  2987  04DD  0EB6               	swapf	??_doMenu,f
  2988  04DE  0EB7               	swapf	??_doMenu+1,f
  2989  04DF  30F0               	movlw	240
  2990  04E0  05B7               	andwf	??_doMenu+1,f
  2991  04E1  0836               	movf	??_doMenu,w
  2992  04E2  390F               	andlw	15
  2993  04E3  04B7               	iorwf	??_doMenu+1,f
  2994  04E4  30F0               	movlw	240
  2995  04E5  05B6               	andwf	??_doMenu,f
  2996  04E6  300A               	movlw	10
  2997  04E7  00F0               	movwf	___awmod@divisor
  2998  04E8  3000               	movlw	0
  2999  04E9  00F1               	movwf	___awmod@divisor+1
  3000  04EA  085D               	movf	_seconds+1,w
  3001  04EB  00F3               	movwf	___awmod@dividend+1
  3002  04EC  085C               	movf	_seconds,w
  3003  04ED  00F2               	movwf	___awmod@dividend
  3004  04EE  120A  158A  2372  120A  118A  	fcall	___awmod
  3005  04F3  0870               	movf	?___awmod,w
  3006  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  3007  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  3008  04F6  0736               	addwf	??_doMenu,w
  3009  04F7  00BD               	movwf	doMenu@s
  3010  04F8  0871               	movf	?___awmod+1,w
  3011  04F9  1803               	skipnc
  3012  04FA  0A71               	incf	?___awmod+1,w
  3013  04FB  0737               	addwf	??_doMenu+1,w
  3014  04FC  00BE               	movwf	doMenu@s+1
  3015                           
  3016                           ;LCDTime.c: 263: DS1307_SetTime(h,m,s) ;
  3017  04FD  083B               	movf	doMenu@m,w
  3018  04FE  00B6               	movwf	??_doMenu
  3019  04FF  0836               	movf	??_doMenu,w
  3020  0500  00F5               	movwf	DS1307_SetTime@mm
  3021  0501  083D               	movf	doMenu@s,w
  3022  0502  00B7               	movwf	??_doMenu+1
  3023  0503  0837               	movf	??_doMenu+1,w
  3024  0504  00F6               	movwf	DS1307_SetTime@ss
  3025  0505  0839               	movf	doMenu@h,w
  3026  0506  120A  158A  2215  120A  118A  	fcall	_DS1307_SetTime
  3027                           
  3028                           ;LCDTime.c: 265: runningMinute = minute ;
  3029  050B  1283               	bcf	3,5	;RP0=0, select bank0
  3030  050C  1303               	bcf	3,6	;RP1=0, select bank0
  3031  050D  0857               	movf	_minute+1,w
  3032  050E  00DB               	movwf	_runningMinute+1
  3033  050F  0856               	movf	_minute,w
  3034  0510  00DA               	movwf	_runningMinute
  3035  0511                     l2553:	
  3036                           ;LCDTime.c: 266: }
  3037                           ;LCDTime.c: 268: while(bButton)
  3038                           
  3039  0511  1283               	bcf	3,5	;RP0=0, select bank0
  3040  0512  1303               	bcf	3,6	;RP1=0, select bank0
  3041  0513  0864               	movf	_bButton,w
  3042  0514  1903               	btfsc	3,2
  3043  0515  2D1C               	goto	l2555
  3044                           
  3045                           ;LCDTime.c: 269: readInputs();
  3046  0516  120A  158A  2295  120A  118A  	fcall	_readInputs
  3047  051B  2D11               	goto	l2553
  3048  051C                     l2555:	
  3049                           
  3050                           ;LCDTime.c: 270: }
  3051                           ;LCDTime.c: 273: if (menuFunction == 1 | menuFunction == 3)
  3052  051C  0361               	decf	_menuFunction,w
  3053  051D  1903               	btfsc	3,2
  3054  051E  2D23               	goto	l2559
  3055  051F  3003               	movlw	3
  3056  0520  0661               	xorwf	_menuFunction,w
  3057  0521  1D03               	btfss	3,2
  3058  0522  0008               	return
  3059  0523                     l2559:	
  3060                           
  3061                           ;LCDTime.c: 274: {
  3062                           ;LCDTime.c: 275: int n,d,m,y ;
  3063                           ;LCDTime.c: 277: n = day ;
  3064  0523  0853               	movf	_day+1,w
  3065  0524  00C0               	movwf	doMenu@n+1
  3066  0525  0852               	movf	_day,w
  3067  0526  00BF               	movwf	doMenu@n
  3068                           
  3069                           ;LCDTime.c: 278: d = date ;
  3070  0527  0851               	movf	_date+1,w
  3071  0528  00C2               	movwf	doMenu@d+1
  3072  0529  0850               	movf	_date,w
  3073  052A  00C1               	movwf	doMenu@d
  3074                           
  3075                           ;LCDTime.c: 279: m = month ;
  3076  052B  0859               	movf	_month+1,w
  3077  052C  00C4               	movwf	doMenu@m_299+1
  3078  052D  0858               	movf	_month,w
  3079  052E  00C3               	movwf	doMenu@m_299
  3080                           
  3081                           ;LCDTime.c: 280: y = year ;
  3082  052F  085F               	movf	_year+1,w
  3083  0530  00C6               	movwf	doMenu@y+1
  3084  0531  085E               	movf	_year,w
  3085  0532  00C5               	movwf	doMenu@y
  3086                           
  3087                           ;LCDTime.c: 282: (LCDByte(0b00000001,0));
  3088  0533  01F5               	clrf	LCDByte@isdata
  3089  0534  3001               	movlw	1
  3090  0535  120A  158A  2459  120A  118A  	fcall	_LCDByte
  3091                           
  3092                           ;LCDTime.c: 283: LCDWriteString(setText);
  3093  053A  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3094  053B  00FC               	movwf	LCDWriteString@msg
  3095  053C  3080               	movlw	128
  3096  053D  00FD               	movwf	LCDWriteString@msg+1
  3097  053E  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  3098                           
  3099                           ;LCDTime.c: 284: LCDWriteString("Year");
  3100  0543  309D               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3101  0544  00FC               	movwf	LCDWriteString@msg
  3102  0545  3080               	movlw	128
  3103  0546  00FD               	movwf	LCDWriteString@msg+1
  3104  0547  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  3105  054C                     L5:	
  3106                           
  3107                           ;LCDTime.c: 286: LCDGotoXY(0,1) ;
  3108  054C  01FC               	clrf	LCDGotoXY@y
  3109  054D  0AFC               	incf	LCDGotoXY@y,f
  3110  054E  3000               	movlw	0
  3111  054F  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  3112                           
  3113                           ;LCDTime.c: 287: showDate();
  3114  0554  120A  158A  2613  120A  118A  	fcall	_showDate
  3115  0559                     l2593:	
  3116                           ;LCDTime.c: 289: while(!bButton)
  3117                           
  3118  0559  1283               	bcf	3,5	;RP0=0, select bank0
  3119  055A  1303               	bcf	3,6	;RP1=0, select bank0
  3120  055B  0864               	movf	_bButton,w
  3121  055C  1D03               	btfss	3,2
  3122  055D  2D97               	goto	l2597
  3123                           
  3124                           ;LCDTime.c: 290: {
  3125                           ;LCDTime.c: 291: readInputs();
  3126  055E  120A  158A  2295  120A  118A  	fcall	_readInputs
  3127                           
  3128                           ;LCDTime.c: 293: if (state & 0x10)
  3129  0563  1283               	bcf	3,5	;RP0=0, select bank0
  3130  0564  1303               	bcf	3,6	;RP1=0, select bank0
  3131  0565  1E65               	btfss	_state,4
  3132  0566  2D7D               	goto	l315
  3133                           
  3134                           ;LCDTime.c: 294: {
  3135                           ;LCDTime.c: 295: year++;
  3136  0567  3001               	movlw	1
  3137  0568  07DE               	addwf	_year,f
  3138  0569  1803               	skipnc
  3139  056A  0ADF               	incf	_year+1,f
  3140  056B  3000               	movlw	0
  3141  056C  07DF               	addwf	_year+1,f
  3142                           
  3143                           ;LCDTime.c: 296: if (year > 99)
  3144  056D  085F               	movf	_year+1,w
  3145  056E  3A80               	xorlw	128
  3146  056F  00FF               	movwf	127
  3147  0570  3080               	movlw	128
  3148  0571  027F               	subwf	127,w
  3149  0572  1D03               	skipz
  3150  0573  2D76               	goto	u2195
  3151  0574  3064               	movlw	100
  3152  0575  025E               	subwf	_year,w
  3153  0576                     u2195:	
  3154  0576  1C03               	skipc
  3155  0577  2D8B               	goto	l2587
  3156                           
  3157                           ;LCDTime.c: 297: year = 0 ;
  3158  0578  1283               	bcf	3,5	;RP0=0, select bank0
  3159  0579  1303               	bcf	3,6	;RP1=0, select bank0
  3160  057A  01DE               	clrf	_year
  3161  057B  01DF               	clrf	_year+1
  3162                           
  3163                           ;LCDTime.c: 298: }
  3164  057C  2D8B               	goto	l2587
  3165  057D                     l315:	
  3166                           
  3167                           ;LCDTime.c: 299: else if (state & 0x20)
  3168  057D  1EE5               	btfss	_state,5
  3169  057E  2D8B               	goto	l2587
  3170                           
  3171                           ;LCDTime.c: 300: {
  3172                           ;LCDTime.c: 301: year--;
  3173  057F  30FF               	movlw	255
  3174  0580  07DE               	addwf	_year,f
  3175  0581  1803               	skipnc
  3176  0582  0ADF               	incf	_year+1,f
  3177  0583  30FF               	movlw	255
  3178  0584  07DF               	addwf	_year+1,f
  3179                           
  3180                           ;LCDTime.c: 302: if (year < 0)
  3181  0585  1FDF               	btfss	_year+1,7
  3182  0586  2D8B               	goto	l2587
  3183                           
  3184                           ;LCDTime.c: 303: date = 99 ;
  3185  0587  3063               	movlw	99
  3186  0588  00D0               	movwf	_date
  3187  0589  3000               	movlw	0
  3188  058A  00D1               	movwf	_date+1
  3189  058B                     l2587:	
  3190                           
  3191                           ;LCDTime.c: 304: }
  3192                           ;LCDTime.c: 306: if (state & 0x30)
  3193  058B  1283               	bcf	3,5	;RP0=0, select bank0
  3194  058C  1303               	bcf	3,6	;RP1=0, select bank0
  3195  058D  0865               	movf	_state,w
  3196  058E  3930               	andlw	48
  3197  058F  1903               	btfsc	3,2
  3198  0590  2D59               	goto	l2593
  3199  0591  2D4C               	goto	L5
  3200  0592                     l2595:	
  3201                           ;LCDTime.c: 310: }
  3202                           ;LCDTime.c: 311: }
  3203                           ;LCDTime.c: 313: while(bButton)
  3204                           
  3205                           ;LCDTime.c: 309: showDate();
  3206                           
  3207                           ;LCDTime.c: 307: {
  3208                           ;LCDTime.c: 308: LCDGotoXY(0,1) ;
  3209                           
  3210                           
  3211                           ;LCDTime.c: 314: readInputs();
  3212  0592  120A  158A  2295  120A  118A  	fcall	_readInputs
  3213  0597                     l2597:	
  3214  0597  1283               	bcf	3,5	;RP0=0, select bank0
  3215  0598  1303               	bcf	3,6	;RP1=0, select bank0
  3216  0599  0864               	movf	_bButton,w
  3217  059A  1D03               	btfss	3,2
  3218  059B  2D92               	goto	l2595
  3219                           
  3220                           ;LCDTime.c: 316: LCDGotoXY(0,0) ;
  3221  059C  01FC               	clrf	LCDGotoXY@y
  3222  059D  3000               	movlw	0
  3223  059E  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  3224                           
  3225                           ;LCDTime.c: 317: LCDWriteString(setText);
  3226  05A3  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3227  05A4  00FC               	movwf	LCDWriteString@msg
  3228  05A5  3080               	movlw	128
  3229  05A6  00FD               	movwf	LCDWriteString@msg+1
  3230  05A7  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  3231                           
  3232                           ;LCDTime.c: 318: LCDWriteString("Month");
  3233  05AC  3091               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3234  05AD  00FC               	movwf	LCDWriteString@msg
  3235  05AE  3080               	movlw	128
  3236  05AF  00FD               	movwf	LCDWriteString@msg+1
  3237  05B0  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  3238  05B5                     l2627:	
  3239                           ;LCDTime.c: 320: while(!bButton)
  3240                           
  3241  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  3242  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  3243  05B7  0864               	movf	_bButton,w
  3244  05B8  1D03               	btfss	3,2
  3245  05B9  2E01               	goto	l2631
  3246                           
  3247                           ;LCDTime.c: 321: {
  3248                           ;LCDTime.c: 322: readInputs();
  3249  05BA  120A  158A  2295  120A  118A  	fcall	_readInputs
  3250                           
  3251                           ;LCDTime.c: 324: if (state & 0x10)
  3252  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  3253  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  3254  05C1  1E65               	btfss	_state,4
  3255  05C2  2DD8               	goto	l327
  3256                           
  3257                           ;LCDTime.c: 325: {
  3258                           ;LCDTime.c: 326: month++;
  3259  05C3  3001               	movlw	1
  3260  05C4  07D8               	addwf	_month,f
  3261  05C5  1803               	skipnc
  3262  05C6  0AD9               	incf	_month+1,f
  3263  05C7  3000               	movlw	0
  3264  05C8  07D9               	addwf	_month+1,f
  3265                           
  3266                           ;LCDTime.c: 327: if (month > 12)
  3267  05C9  0859               	movf	_month+1,w
  3268  05CA  3A80               	xorlw	128
  3269  05CB  00FF               	movwf	127
  3270  05CC  3080               	movlw	128
  3271  05CD  027F               	subwf	127,w
  3272  05CE  1D03               	skipz
  3273  05CF  2DD2               	goto	u2265
  3274  05D0  300D               	movlw	13
  3275  05D1  0258               	subwf	_month,w
  3276  05D2                     u2265:	
  3277  05D2  1C03               	skipc
  3278  05D3  2DE8               	goto	l2621
  3279                           
  3280                           ;LCDTime.c: 328: month = 1 ;
  3281  05D4  3001               	movlw	1
  3282  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  3283  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  3284  05D7  2DE5               	goto	L1
  3285  05D8                     l327:	
  3286                           ;LCDTime.c: 329: }
  3287                           
  3288                           
  3289                           ;LCDTime.c: 330: else if (state & 0x20)
  3290  05D8  1EE5               	btfss	_state,5
  3291  05D9  2DE8               	goto	l2621
  3292                           
  3293                           ;LCDTime.c: 331: {
  3294                           ;LCDTime.c: 332: month--;
  3295  05DA  30FF               	movlw	255
  3296  05DB  07D8               	addwf	_month,f
  3297  05DC  1803               	skipnc
  3298  05DD  0AD9               	incf	_month+1,f
  3299  05DE  30FF               	movlw	255
  3300  05DF  07D9               	addwf	_month+1,f
  3301                           
  3302                           ;LCDTime.c: 333: if (!month)
  3303  05E0  0858               	movf	_month,w
  3304  05E1  0459               	iorwf	_month+1,w
  3305  05E2  1D03               	btfss	3,2
  3306  05E3  2DE8               	goto	l2621
  3307                           
  3308                           ;LCDTime.c: 334: month = 12 ;
  3309  05E4  300C               	movlw	12
  3310  05E5                     L1:	
  3311  05E5  00D8               	movwf	_month
  3312  05E6  3000               	movlw	0
  3313  05E7  00D9               	movwf	_month+1
  3314  05E8                     l2621:	
  3315                           
  3316                           ;LCDTime.c: 335: }
  3317                           ;LCDTime.c: 337: if (state & 0x30)
  3318  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  3319  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  3320  05EA  0865               	movf	_state,w
  3321  05EB  3930               	andlw	48
  3322  05EC  1903               	btfsc	3,2
  3323  05ED  2DB5               	goto	l2627
  3324                           
  3325                           ;LCDTime.c: 338: {
  3326                           ;LCDTime.c: 339: LCDGotoXY(0,1) ;
  3327  05EE  01FC               	clrf	LCDGotoXY@y
  3328  05EF  0AFC               	incf	LCDGotoXY@y,f
  3329  05F0  3000               	movlw	0
  3330  05F1  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  3331                           
  3332                           ;LCDTime.c: 340: showDate();
  3333  05F6  120A  158A  2613  120A  118A  	fcall	_showDate
  3334  05FB  2DB5               	goto	l2627
  3335  05FC                     l2629:	
  3336                           ;LCDTime.c: 341: }
  3337                           ;LCDTime.c: 342: }
  3338                           ;LCDTime.c: 344: while(bButton)
  3339                           
  3340                           
  3341                           ;LCDTime.c: 345: readInputs();
  3342  05FC  120A  158A  2295  120A  118A  	fcall	_readInputs
  3343  0601                     l2631:	
  3344  0601  1283               	bcf	3,5	;RP0=0, select bank0
  3345  0602  1303               	bcf	3,6	;RP1=0, select bank0
  3346  0603  0864               	movf	_bButton,w
  3347  0604  1D03               	btfss	3,2
  3348  0605  2DFC               	goto	l2629
  3349                           
  3350                           ;LCDTime.c: 347: LCDGotoXY(0,0) ;
  3351  0606  01FC               	clrf	LCDGotoXY@y
  3352  0607  3000               	movlw	0
  3353  0608  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  3354                           
  3355                           ;LCDTime.c: 348: LCDWriteString(setText);
  3356  060D  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3357  060E  00FC               	movwf	LCDWriteString@msg
  3358  060F  3080               	movlw	128
  3359  0610  00FD               	movwf	LCDWriteString@msg+1
  3360  0611  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  3361                           
  3362                           ;LCDTime.c: 349: LCDWriteString("Date ");
  3363  0616  308B               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  3364  0617  00FC               	movwf	LCDWriteString@msg
  3365  0618  3080               	movlw	128
  3366  0619  00FD               	movwf	LCDWriteString@msg+1
  3367  061A  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  3368  061F                     l2661:	
  3369                           ;LCDTime.c: 351: while(!bButton)
  3370                           
  3371  061F  1283               	bcf	3,5	;RP0=0, select bank0
  3372  0620  1303               	bcf	3,6	;RP1=0, select bank0
  3373  0621  0864               	movf	_bButton,w
  3374  0622  1D03               	btfss	3,2
  3375  0623  2E7E               	goto	l2665
  3376                           
  3377                           ;LCDTime.c: 352: {
  3378                           ;LCDTime.c: 353: readInputs();
  3379  0624  120A  158A  2295  120A  118A  	fcall	_readInputs
  3380                           
  3381                           ;LCDTime.c: 355: if (state & 0x10)
  3382  0629  1283               	bcf	3,5	;RP0=0, select bank0
  3383  062A  1303               	bcf	3,6	;RP1=0, select bank0
  3384  062B  1E65               	btfss	_state,4
  3385  062C  2E4C               	goto	l339
  3386                           
  3387                           ;LCDTime.c: 356: {
  3388                           ;LCDTime.c: 357: date++;
  3389  062D  3001               	movlw	1
  3390  062E  07D0               	addwf	_date,f
  3391  062F  1803               	skipnc
  3392  0630  0AD1               	incf	_date+1,f
  3393  0631  3000               	movlw	0
  3394  0632  07D1               	addwf	_date+1,f
  3395                           
  3396                           ;LCDTime.c: 358: if (date > monthDays[month-1])
  3397  0633  0858               	movf	_month,w
  3398  0634  3EFF               	addlw	255
  3399  0635  3E33               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3400  0636  0084               	movwf	4
  3401  0637  120A  158A  200A  120A  118A  	fcall	stringdir
  3402  063C  00B6               	movwf	??_doMenu
  3403  063D  0851               	movf	_date+1,w
  3404  063E  3A80               	xorlw	128
  3405  063F  3C80               	sublw	128
  3406  0640  1D03               	skipz
  3407  0641  2E44               	goto	u2335
  3408  0642  0850               	movf	_date,w
  3409  0643  0236               	subwf	??_doMenu,w
  3410  0644                     u2335:	
  3411  0644  1803               	skipnc
  3412  0645  2E65               	goto	l2655
  3413                           
  3414                           ;LCDTime.c: 359: date = 1 ;
  3415  0646  3001               	movlw	1
  3416  0647  1283               	bcf	3,5	;RP0=0, select bank0
  3417  0648  1303               	bcf	3,6	;RP1=0, select bank0
  3418  0649  00D0               	movwf	_date
  3419  064A  3000               	movlw	0
  3420  064B  2E64               	goto	L2
  3421  064C                     l339:	
  3422                           ;LCDTime.c: 360: }
  3423                           
  3424                           
  3425                           ;LCDTime.c: 361: else if (state & 0x20)
  3426  064C  1EE5               	btfss	_state,5
  3427  064D  2E65               	goto	l2655
  3428                           
  3429                           ;LCDTime.c: 362: {
  3430                           ;LCDTime.c: 363: date--;
  3431  064E  30FF               	movlw	255
  3432  064F  07D0               	addwf	_date,f
  3433  0650  1803               	skipnc
  3434  0651  0AD1               	incf	_date+1,f
  3435  0652  30FF               	movlw	255
  3436  0653  07D1               	addwf	_date+1,f
  3437                           
  3438                           ;LCDTime.c: 364: if (date < 0)
  3439  0654  1FD1               	btfss	_date+1,7
  3440  0655  2E65               	goto	l2655
  3441                           
  3442                           ;LCDTime.c: 365: date = monthDays[month-1] ;
  3443  0656  0858               	movf	_month,w
  3444  0657  3EFF               	addlw	255
  3445  0658  3E33               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3446  0659  0084               	movwf	4
  3447  065A  120A  158A  200A  120A  118A  	fcall	stringdir
  3448  065F  00B6               	movwf	??_doMenu
  3449  0660  01B7               	clrf	??_doMenu+1
  3450  0661  0836               	movf	??_doMenu,w
  3451  0662  00D0               	movwf	_date
  3452  0663  0837               	movf	??_doMenu+1,w
  3453  0664                     L2:	
  3454  0664  00D1               	movwf	_date+1
  3455  0665                     l2655:	
  3456                           
  3457                           ;LCDTime.c: 366: }
  3458                           ;LCDTime.c: 368: if (state & 0x30)
  3459  0665  1283               	bcf	3,5	;RP0=0, select bank0
  3460  0666  1303               	bcf	3,6	;RP1=0, select bank0
  3461  0667  0865               	movf	_state,w
  3462  0668  3930               	andlw	48
  3463  0669  1903               	btfsc	3,2
  3464  066A  2E1F               	goto	l2661
  3465                           
  3466                           ;LCDTime.c: 369: {
  3467                           ;LCDTime.c: 370: LCDGotoXY(0,1) ;
  3468  066B  01FC               	clrf	LCDGotoXY@y
  3469  066C  0AFC               	incf	LCDGotoXY@y,f
  3470  066D  3000               	movlw	0
  3471  066E  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  3472                           
  3473                           ;LCDTime.c: 371: showDate();
  3474  0673  120A  158A  2613  120A  118A  	fcall	_showDate
  3475  0678  2E1F               	goto	l2661
  3476  0679                     l2663:	
  3477                           ;LCDTime.c: 372: }
  3478                           ;LCDTime.c: 373: }
  3479                           ;LCDTime.c: 375: while(bButton)
  3480                           
  3481                           
  3482                           ;LCDTime.c: 376: readInputs();
  3483  0679  120A  158A  2295  120A  118A  	fcall	_readInputs
  3484  067E                     l2665:	
  3485  067E  1283               	bcf	3,5	;RP0=0, select bank0
  3486  067F  1303               	bcf	3,6	;RP1=0, select bank0
  3487  0680  0864               	movf	_bButton,w
  3488  0681  1D03               	btfss	3,2
  3489  0682  2E79               	goto	l2663
  3490                           
  3491                           ;LCDTime.c: 378: LCDGotoXY(0,0) ;
  3492  0683  01FC               	clrf	LCDGotoXY@y
  3493  0684  3000               	movlw	0
  3494  0685  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  3495                           
  3496                           ;LCDTime.c: 379: LCDWriteString(setText);
  3497  068A  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3498  068B  00FC               	movwf	LCDWriteString@msg
  3499  068C  3080               	movlw	128
  3500  068D  00FD               	movwf	LCDWriteString@msg+1
  3501  068E  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  3502                           
  3503                           ;LCDTime.c: 380: LCDWriteString("Day  ");
  3504  0693  3085               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  3505  0694  00FC               	movwf	LCDWriteString@msg
  3506  0695  3080               	movlw	128
  3507  0696  00FD               	movwf	LCDWriteString@msg+1
  3508  0697  120A  158A  217D  120A  118A  	fcall	_LCDWriteString
  3509  069C                     l2695:	
  3510                           ;LCDTime.c: 382: while(!bButton)
  3511                           
  3512  069C  1283               	bcf	3,5	;RP0=0, select bank0
  3513  069D  1303               	bcf	3,6	;RP1=0, select bank0
  3514  069E  0864               	movf	_bButton,w
  3515  069F  1D03               	btfss	3,2
  3516  06A0  2EE1               	goto	l2697
  3517                           
  3518                           ;LCDTime.c: 383: {
  3519                           ;LCDTime.c: 384: readInputs();
  3520  06A1  120A  158A  2295  120A  118A  	fcall	_readInputs
  3521                           
  3522                           ;LCDTime.c: 386: if (state & 0x10)
  3523  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  3524  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  3525  06A8  1E65               	btfss	_state,4
  3526  06A9  2EBF               	goto	l351
  3527                           
  3528                           ;LCDTime.c: 387: {
  3529                           ;LCDTime.c: 388: day++;
  3530  06AA  3001               	movlw	1
  3531  06AB  07D2               	addwf	_day,f
  3532  06AC  1803               	skipnc
  3533  06AD  0AD3               	incf	_day+1,f
  3534  06AE  3000               	movlw	0
  3535  06AF  07D3               	addwf	_day+1,f
  3536                           
  3537                           ;LCDTime.c: 389: if (day > 7)
  3538  06B0  0853               	movf	_day+1,w
  3539  06B1  3A80               	xorlw	128
  3540  06B2  00FF               	movwf	127
  3541  06B3  3080               	movlw	128
  3542  06B4  027F               	subwf	127,w
  3543  06B5  1D03               	skipz
  3544  06B6  2EB9               	goto	u2405
  3545  06B7  3008               	movlw	8
  3546  06B8  0252               	subwf	_day,w
  3547  06B9                     u2405:	
  3548  06B9  1C03               	skipc
  3549  06BA  2ECD               	goto	l2689
  3550                           
  3551                           ;LCDTime.c: 390: day = 1 ;
  3552  06BB  3001               	movlw	1
  3553  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  3554  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  3555  06BE  2ECA               	goto	L3
  3556  06BF                     l351:	
  3557                           ;LCDTime.c: 391: }
  3558                           
  3559                           
  3560                           ;LCDTime.c: 392: else if (state & 0x20)
  3561  06BF  1EE5               	btfss	_state,5
  3562  06C0  2ECD               	goto	l2689
  3563                           
  3564                           ;LCDTime.c: 393: {
  3565                           ;LCDTime.c: 394: day--;
  3566  06C1  30FF               	movlw	255
  3567  06C2  07D2               	addwf	_day,f
  3568  06C3  1803               	skipnc
  3569  06C4  0AD3               	incf	_day+1,f
  3570  06C5  30FF               	movlw	255
  3571  06C6  07D3               	addwf	_day+1,f
  3572                           
  3573                           ;LCDTime.c: 395: if (day < 0)
  3574  06C7  1FD3               	btfss	_day+1,7
  3575  06C8  2ECD               	goto	l2689
  3576                           
  3577                           ;LCDTime.c: 396: day = 7 ;
  3578  06C9  3007               	movlw	7
  3579  06CA                     L3:	
  3580  06CA  00D2               	movwf	_day
  3581  06CB  3000               	movlw	0
  3582  06CC  00D3               	movwf	_day+1
  3583  06CD                     l2689:	
  3584                           
  3585                           ;LCDTime.c: 397: }
  3586                           ;LCDTime.c: 399: if (state & 0x30)
  3587  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  3588  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  3589  06CF  0865               	movf	_state,w
  3590  06D0  3930               	andlw	48
  3591  06D1  1903               	btfsc	3,2
  3592  06D2  2E9C               	goto	l2695
  3593                           
  3594                           ;LCDTime.c: 400: {
  3595                           ;LCDTime.c: 401: LCDGotoXY(0,1) ;
  3596  06D3  01FC               	clrf	LCDGotoXY@y
  3597  06D4  0AFC               	incf	LCDGotoXY@y,f
  3598  06D5  3000               	movlw	0
  3599  06D6  120A  158A  21C8  120A  118A  	fcall	_LCDGotoXY
  3600                           
  3601                           ;LCDTime.c: 402: showDate();
  3602  06DB  120A  158A  2613  120A  118A  	fcall	_showDate
  3603  06E0  2E9C               	goto	l2695
  3604  06E1                     l2697:	
  3605                           
  3606                           ;LCDTime.c: 403: }
  3607                           ;LCDTime.c: 404: }
  3608                           ;LCDTime.c: 406: if (n != day || d != date || m != month || y != year)
  3609  06E1  0853               	movf	_day+1,w
  3610  06E2  0640               	xorwf	doMenu@n+1,w
  3611  06E3  1D03               	skipz
  3612  06E4  2EE7               	goto	u2455
  3613  06E5  0852               	movf	_day,w
  3614  06E6  063F               	xorwf	doMenu@n,w
  3615  06E7                     u2455:	
  3616  06E7  1D03               	skipz
  3617  06E8  2F01               	goto	l2705
  3618  06E9  0851               	movf	_date+1,w
  3619  06EA  0642               	xorwf	doMenu@d+1,w
  3620  06EB  1D03               	skipz
  3621  06EC  2EEF               	goto	u2465
  3622  06ED  0850               	movf	_date,w
  3623  06EE  0641               	xorwf	doMenu@d,w
  3624  06EF                     u2465:	
  3625  06EF  1D03               	skipz
  3626  06F0  2F01               	goto	l2705
  3627  06F1  0859               	movf	_month+1,w
  3628  06F2  0644               	xorwf	doMenu@m_299+1,w
  3629  06F3  1D03               	skipz
  3630  06F4  2EF7               	goto	u2475
  3631  06F5  0858               	movf	_month,w
  3632  06F6  0643               	xorwf	doMenu@m_299,w
  3633  06F7                     u2475:	
  3634  06F7  1D03               	skipz
  3635  06F8  2F01               	goto	l2705
  3636  06F9  085F               	movf	_year+1,w
  3637  06FA  0646               	xorwf	doMenu@y+1,w
  3638  06FB  1D03               	skipz
  3639  06FC  2EFF               	goto	u2485
  3640  06FD  085E               	movf	_year,w
  3641  06FE  0645               	xorwf	doMenu@y,w
  3642  06FF                     u2485:	
  3643  06FF  1903               	skipnz
  3644  0700  2FDF               	goto	l2709
  3645  0701                     l2705:	
  3646                           
  3647                           ;LCDTime.c: 407: {
  3648                           ;LCDTime.c: 408: n = ((day / 10) << 4) + day % 10 ;
  3649  0701  300A               	movlw	10
  3650  0702  00F0               	movwf	___awdiv@divisor
  3651  0703  3000               	movlw	0
  3652  0704  00F1               	movwf	___awdiv@divisor+1
  3653  0705  0853               	movf	_day+1,w
  3654  0706  00F3               	movwf	___awdiv@dividend+1
  3655  0707  0852               	movf	_day,w
  3656  0708  00F2               	movwf	___awdiv@dividend
  3657  0709  120A  158A  24FF  120A  118A  	fcall	___awdiv
  3658  070E  0870               	movf	?___awdiv,w
  3659  070F  1283               	bcf	3,5	;RP0=0, select bank0
  3660  0710  1303               	bcf	3,6	;RP1=0, select bank0
  3661  0711  00B6               	movwf	??_doMenu
  3662  0712  0871               	movf	?___awdiv+1,w
  3663  0713  00B7               	movwf	??_doMenu+1
  3664  0714  0EB6               	swapf	??_doMenu,f
  3665  0715  0EB7               	swapf	??_doMenu+1,f
  3666  0716  30F0               	movlw	240
  3667  0717  05B7               	andwf	??_doMenu+1,f
  3668  0718  0836               	movf	??_doMenu,w
  3669  0719  390F               	andlw	15
  3670  071A  04B7               	iorwf	??_doMenu+1,f
  3671  071B  30F0               	movlw	240
  3672  071C  05B6               	andwf	??_doMenu,f
  3673  071D  300A               	movlw	10
  3674  071E  00F0               	movwf	___awmod@divisor
  3675  071F  3000               	movlw	0
  3676  0720  00F1               	movwf	___awmod@divisor+1
  3677  0721  0853               	movf	_day+1,w
  3678  0722  00F3               	movwf	___awmod@dividend+1
  3679  0723  0852               	movf	_day,w
  3680  0724  00F2               	movwf	___awmod@dividend
  3681  0725  120A  158A  2372  120A  118A  	fcall	___awmod
  3682  072A  0870               	movf	?___awmod,w
  3683  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3684  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3685  072D  0736               	addwf	??_doMenu,w
  3686  072E  00BF               	movwf	doMenu@n
  3687  072F  0871               	movf	?___awmod+1,w
  3688  0730  1803               	skipnc
  3689  0731  0A71               	incf	?___awmod+1,w
  3690  0732  0737               	addwf	??_doMenu+1,w
  3691  0733  00C0               	movwf	doMenu@n+1
  3692                           
  3693                           ;LCDTime.c: 409: d = ((date / 10) << 4) + date % 10 ;
  3694  0734  300A               	movlw	10
  3695  0735  00F0               	movwf	___awdiv@divisor
  3696  0736  3000               	movlw	0
  3697  0737  00F1               	movwf	___awdiv@divisor+1
  3698  0738  0851               	movf	_date+1,w
  3699  0739  00F3               	movwf	___awdiv@dividend+1
  3700  073A  0850               	movf	_date,w
  3701  073B  00F2               	movwf	___awdiv@dividend
  3702  073C  120A  158A  24FF  120A  118A  	fcall	___awdiv
  3703  0741  0870               	movf	?___awdiv,w
  3704  0742  1283               	bcf	3,5	;RP0=0, select bank0
  3705  0743  1303               	bcf	3,6	;RP1=0, select bank0
  3706  0744  00B6               	movwf	??_doMenu
  3707  0745  0871               	movf	?___awdiv+1,w
  3708  0746  00B7               	movwf	??_doMenu+1
  3709  0747  0EB6               	swapf	??_doMenu,f
  3710  0748  0EB7               	swapf	??_doMenu+1,f
  3711  0749  30F0               	movlw	240
  3712  074A  05B7               	andwf	??_doMenu+1,f
  3713  074B  0836               	movf	??_doMenu,w
  3714  074C  390F               	andlw	15
  3715  074D  04B7               	iorwf	??_doMenu+1,f
  3716  074E  30F0               	movlw	240
  3717  074F  05B6               	andwf	??_doMenu,f
  3718  0750  300A               	movlw	10
  3719  0751  00F0               	movwf	___awmod@divisor
  3720  0752  3000               	movlw	0
  3721  0753  00F1               	movwf	___awmod@divisor+1
  3722  0754  0851               	movf	_date+1,w
  3723  0755  00F3               	movwf	___awmod@dividend+1
  3724  0756  0850               	movf	_date,w
  3725  0757  00F2               	movwf	___awmod@dividend
  3726  0758  120A  158A  2372  120A  118A  	fcall	___awmod
  3727  075D  0870               	movf	?___awmod,w
  3728  075E  1283               	bcf	3,5	;RP0=0, select bank0
  3729  075F  1303               	bcf	3,6	;RP1=0, select bank0
  3730  0760  0736               	addwf	??_doMenu,w
  3731  0761  00C1               	movwf	doMenu@d
  3732  0762  0871               	movf	?___awmod+1,w
  3733  0763  1803               	skipnc
  3734  0764  0A71               	incf	?___awmod+1,w
  3735  0765  0737               	addwf	??_doMenu+1,w
  3736  0766  00C2               	movwf	doMenu@d+1
  3737                           
  3738                           ;LCDTime.c: 410: m = ((month / 10) << 4) + month % 10 ;
  3739  0767  300A               	movlw	10
  3740  0768  00F0               	movwf	___awdiv@divisor
  3741  0769  3000               	movlw	0
  3742  076A  00F1               	movwf	___awdiv@divisor+1
  3743  076B  0859               	movf	_month+1,w
  3744  076C  00F3               	movwf	___awdiv@dividend+1
  3745  076D  0858               	movf	_month,w
  3746  076E  00F2               	movwf	___awdiv@dividend
  3747  076F  120A  158A  24FF  120A  118A  	fcall	___awdiv
  3748  0774  0870               	movf	?___awdiv,w
  3749  0775  1283               	bcf	3,5	;RP0=0, select bank0
  3750  0776  1303               	bcf	3,6	;RP1=0, select bank0
  3751  0777  00B6               	movwf	??_doMenu
  3752  0778  0871               	movf	?___awdiv+1,w
  3753  0779  00B7               	movwf	??_doMenu+1
  3754  077A  0EB6               	swapf	??_doMenu,f
  3755  077B  0EB7               	swapf	??_doMenu+1,f
  3756  077C  30F0               	movlw	240
  3757  077D  05B7               	andwf	??_doMenu+1,f
  3758  077E  0836               	movf	??_doMenu,w
  3759  077F  390F               	andlw	15
  3760  0780  04B7               	iorwf	??_doMenu+1,f
  3761  0781  30F0               	movlw	240
  3762  0782  05B6               	andwf	??_doMenu,f
  3763  0783  300A               	movlw	10
  3764  0784  00F0               	movwf	___awmod@divisor
  3765  0785  3000               	movlw	0
  3766  0786  00F1               	movwf	___awmod@divisor+1
  3767  0787  0859               	movf	_month+1,w
  3768  0788  00F3               	movwf	___awmod@dividend+1
  3769  0789  0858               	movf	_month,w
  3770  078A  00F2               	movwf	___awmod@dividend
  3771  078B  120A  158A  2372  120A  118A  	fcall	___awmod
  3772  0790  0870               	movf	?___awmod,w
  3773  0791  1283               	bcf	3,5	;RP0=0, select bank0
  3774  0792  1303               	bcf	3,6	;RP1=0, select bank0
  3775  0793  0736               	addwf	??_doMenu,w
  3776  0794  00C3               	movwf	doMenu@m_299
  3777  0795  0871               	movf	?___awmod+1,w
  3778  0796  1803               	skipnc
  3779  0797  0A71               	incf	?___awmod+1,w
  3780  0798  0737               	addwf	??_doMenu+1,w
  3781  0799  00C4               	movwf	doMenu@m_299+1
  3782                           
  3783                           ;LCDTime.c: 411: y = ((year / 10) << 4) + year % 10 ;
  3784  079A  300A               	movlw	10
  3785  079B  00F0               	movwf	___awdiv@divisor
  3786  079C  3000               	movlw	0
  3787  079D  00F1               	movwf	___awdiv@divisor+1
  3788  079E  085F               	movf	_year+1,w
  3789  079F  00F3               	movwf	___awdiv@dividend+1
  3790  07A0  085E               	movf	_year,w
  3791  07A1  00F2               	movwf	___awdiv@dividend
  3792  07A2  120A  158A  24FF  120A  118A  	fcall	___awdiv
  3793  07A7  0870               	movf	?___awdiv,w
  3794  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  3795  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  3796  07AA  00B6               	movwf	??_doMenu
  3797  07AB  0871               	movf	?___awdiv+1,w
  3798  07AC  00B7               	movwf	??_doMenu+1
  3799  07AD  0EB6               	swapf	??_doMenu,f
  3800  07AE  0EB7               	swapf	??_doMenu+1,f
  3801  07AF  30F0               	movlw	240
  3802  07B0  05B7               	andwf	??_doMenu+1,f
  3803  07B1  0836               	movf	??_doMenu,w
  3804  07B2  390F               	andlw	15
  3805  07B3  04B7               	iorwf	??_doMenu+1,f
  3806  07B4  30F0               	movlw	240
  3807  07B5  05B6               	andwf	??_doMenu,f
  3808  07B6  300A               	movlw	10
  3809  07B7  00F0               	movwf	___awmod@divisor
  3810  07B8  3000               	movlw	0
  3811  07B9  00F1               	movwf	___awmod@divisor+1
  3812  07BA  085F               	movf	_year+1,w
  3813  07BB  00F3               	movwf	___awmod@dividend+1
  3814  07BC  085E               	movf	_year,w
  3815  07BD  00F2               	movwf	___awmod@dividend
  3816  07BE  120A  158A  2372  120A  118A  	fcall	___awmod
  3817  07C3  0870               	movf	?___awmod,w
  3818  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  3819  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  3820  07C6  0736               	addwf	??_doMenu,w
  3821  07C7  00C5               	movwf	doMenu@y
  3822  07C8  0871               	movf	?___awmod+1,w
  3823  07C9  1803               	skipnc
  3824  07CA  0A71               	incf	?___awmod+1,w
  3825  07CB  0737               	addwf	??_doMenu+1,w
  3826  07CC  00C6               	movwf	doMenu@y+1
  3827                           
  3828                           ;LCDTime.c: 413: DS1307_SetDate(n,d,m,y) ;
  3829  07CD  0841               	movf	doMenu@d,w
  3830  07CE  00B6               	movwf	??_doMenu
  3831  07CF  0836               	movf	??_doMenu,w
  3832  07D0  00F5               	movwf	DS1307_SetDate@dd
  3833  07D1  0843               	movf	doMenu@m_299,w
  3834  07D2  00B7               	movwf	??_doMenu+1
  3835  07D3  0837               	movf	??_doMenu+1,w
  3836  07D4  00F6               	movwf	DS1307_SetDate@mm
  3837  07D5  0845               	movf	doMenu@y,w
  3838  07D6  00B8               	movwf	??_doMenu+2
  3839  07D7  0838               	movf	??_doMenu+2,w
  3840  07D8  00F7               	movwf	DS1307_SetDate@yy
  3841  07D9  083F               	movf	doMenu@n,w
  3842  07DA  120A  158A  2267  120A  118A  	fcall	_DS1307_SetDate
  3843  07DF                     l2709:	
  3844                           ;LCDTime.c: 414: }
  3845                           ;LCDTime.c: 417: while(bButton)
  3846                           
  3847  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  3848  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  3849  07E1  0864               	movf	_bButton,w
  3850  07E2  1903               	btfsc	3,2
  3851  07E3  0008               	return
  3852                           
  3853                           ;LCDTime.c: 418: readInputs();
  3854  07E4  120A  158A  2295  120A  118A  	fcall	_readInputs
  3855  07E9  2FDF               	goto	l2709
  3856  07EA                     __end_of_doMenu:	
  3857                           
  3858                           	psect	text8
  3859  0B36                     __ptext8:	
  3860 ;; *************** function _showTime *****************
  3861 ;; Defined at:
  3862 ;;		line 489 in file "LCDTime.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;		None
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;		None
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  1    wreg      void 
  3869 ;; Registers used:
  3870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3876 ;;      Params:         0       0       0       0       0
  3877 ;;      Locals:         0       0       0       0       0
  3878 ;;      Temps:          0       1       0       0       0
  3879 ;;      Totals:         0       1       0       0       0
  3880 ;;Total ram usage:        1 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    4
  3883 ;; This function calls:
  3884 ;;		_LCDByte
  3885 ;;		_LCDWriteInt
  3886 ;; This function is called by:
  3887 ;;		_doMenu
  3888 ;;		_showClock
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _showTime
  3894  0B36                     _showTime:	
  3895                           
  3896                           ;LCDTime.c: 491: LCDWriteInt(hour,2);
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _showTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3900  0B36  1283               	bcf	3,5	;RP0=0, select bank0
  3901  0B37  1303               	bcf	3,6	;RP1=0, select bank0
  3902  0B38  0855               	movf	_hour+1,w
  3903  0B39  00A3               	movwf	LCDWriteInt@val+1
  3904  0B3A  0854               	movf	_hour,w
  3905  0B3B  00A2               	movwf	LCDWriteInt@val
  3906  0B3C  3002               	movlw	2
  3907  0B3D  00B3               	movwf	??_showTime
  3908  0B3E  0833               	movf	??_showTime,w
  3909  0B3F  00A4               	movwf	LCDWriteInt@field_length
  3910  0B40  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  3911                           
  3912                           ;LCDTime.c: 492: (LCDByte(':',1)) ;
  3913  0B45  01F5               	clrf	LCDByte@isdata
  3914  0B46  0AF5               	incf	LCDByte@isdata,f
  3915  0B47  303A               	movlw	58
  3916  0B48  120A  158A  2459  120A  158A  	fcall	_LCDByte
  3917                           
  3918                           ;LCDTime.c: 493: LCDWriteInt(minute,2);
  3919  0B4D  1283               	bcf	3,5	;RP0=0, select bank0
  3920  0B4E  1303               	bcf	3,6	;RP1=0, select bank0
  3921  0B4F  0857               	movf	_minute+1,w
  3922  0B50  00A3               	movwf	LCDWriteInt@val+1
  3923  0B51  0856               	movf	_minute,w
  3924  0B52  00A2               	movwf	LCDWriteInt@val
  3925  0B53  3002               	movlw	2
  3926  0B54  00B3               	movwf	??_showTime
  3927  0B55  0833               	movf	??_showTime,w
  3928  0B56  00A4               	movwf	LCDWriteInt@field_length
  3929  0B57  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  3930                           
  3931                           ;LCDTime.c: 494: (LCDByte(':',1)) ;
  3932  0B5C  01F5               	clrf	LCDByte@isdata
  3933  0B5D  0AF5               	incf	LCDByte@isdata,f
  3934  0B5E  303A               	movlw	58
  3935  0B5F  120A  158A  2459  120A  158A  	fcall	_LCDByte
  3936                           
  3937                           ;LCDTime.c: 495: LCDWriteInt(seconds,2);
  3938  0B64  1283               	bcf	3,5	;RP0=0, select bank0
  3939  0B65  1303               	bcf	3,6	;RP1=0, select bank0
  3940  0B66  085D               	movf	_seconds+1,w
  3941  0B67  00A3               	movwf	LCDWriteInt@val+1
  3942  0B68  085C               	movf	_seconds,w
  3943  0B69  00A2               	movwf	LCDWriteInt@val
  3944  0B6A  3002               	movlw	2
  3945  0B6B  00B3               	movwf	??_showTime
  3946  0B6C  0833               	movf	??_showTime,w
  3947  0B6D  00A4               	movwf	LCDWriteInt@field_length
  3948  0B6E  120A  158A  26C5   	fcall	_LCDWriteInt
  3949  0B71  0008               	return
  3950  0B72                     __end_of_showTime:	
  3951                           
  3952                           	psect	text9
  3953  0E13                     __ptext9:	
  3954 ;; *************** function _showDate *****************
  3955 ;; Defined at:
  3956 ;;		line 503 in file "LCDTime.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;		None
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  d               2   20[BANK0 ] int 
  3961 ;; Return value:  Size  Location     Type
  3962 ;;                  1    wreg      void 
  3963 ;; Registers used:
  3964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3970 ;;      Params:         0       0       0       0       0
  3971 ;;      Locals:         0       2       0       0       0
  3972 ;;      Temps:          0       1       0       0       0
  3973 ;;      Totals:         0       3       0       0       0
  3974 ;;Total ram usage:        3 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:    4
  3977 ;; This function calls:
  3978 ;;		_LCDByte
  3979 ;;		_LCDWriteInt
  3980 ;;		___wmul
  3981 ;; This function is called by:
  3982 ;;		_doMenu
  3983 ;;		_showClock
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           
  3988                           ;psect for function _showDate
  3989  0E13                     _showDate:	
  3990                           
  3991                           ;LCDTime.c: 505: int d = (day-1) * 3 ;
  3992                           
  3993                           ;incstack = 0
  3994                           ; Regs used in _showDate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3995  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  3996  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  3997  0E15  0852               	movf	_day,w
  3998  0E16  3EFF               	addlw	255
  3999  0E17  00F9               	movwf	___wmul@multiplier
  4000  0E18  0853               	movf	_day+1,w
  4001  0E19  1803               	skipnc
  4002  0E1A  3E01               	addlw	1
  4003  0E1B  3EFF               	addlw	255
  4004  0E1C  00FA               	movwf	___wmul@multiplier+1
  4005  0E1D  3003               	movlw	3
  4006  0E1E  00FB               	movwf	___wmul@multiplicand
  4007  0E1F  3000               	movlw	0
  4008  0E20  00FC               	movwf	___wmul@multiplicand+1
  4009  0E21  120A  158A  21EE  120A  158A  	fcall	___wmul
  4010  0E26  087A               	movf	?___wmul+1,w
  4011  0E27  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0E28  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0E29  00B5               	movwf	showDate@d+1
  4014  0E2A  0879               	movf	?___wmul,w
  4015  0E2B  00B4               	movwf	showDate@d
  4016                           
  4017                           ;LCDTime.c: 507: LCDWriteInt(date,2);
  4018  0E2C  0851               	movf	_date+1,w
  4019  0E2D  00A3               	movwf	LCDWriteInt@val+1
  4020  0E2E  0850               	movf	_date,w
  4021  0E2F  00A2               	movwf	LCDWriteInt@val
  4022  0E30  3002               	movlw	2
  4023  0E31  00B3               	movwf	??_showDate
  4024  0E32  0833               	movf	??_showDate,w
  4025  0E33  00A4               	movwf	LCDWriteInt@field_length
  4026  0E34  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4027                           
  4028                           ;LCDTime.c: 508: (LCDByte('/',1)) ;
  4029  0E39  01F5               	clrf	LCDByte@isdata
  4030  0E3A  0AF5               	incf	LCDByte@isdata,f
  4031  0E3B  302F               	movlw	47
  4032  0E3C  120A  158A  2459  120A  158A  	fcall	_LCDByte
  4033                           
  4034                           ;LCDTime.c: 509: LCDWriteInt(month,2);
  4035  0E41  1283               	bcf	3,5	;RP0=0, select bank0
  4036  0E42  1303               	bcf	3,6	;RP1=0, select bank0
  4037  0E43  0859               	movf	_month+1,w
  4038  0E44  00A3               	movwf	LCDWriteInt@val+1
  4039  0E45  0858               	movf	_month,w
  4040  0E46  00A2               	movwf	LCDWriteInt@val
  4041  0E47  3002               	movlw	2
  4042  0E48  00B3               	movwf	??_showDate
  4043  0E49  0833               	movf	??_showDate,w
  4044  0E4A  00A4               	movwf	LCDWriteInt@field_length
  4045  0E4B  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4046                           
  4047                           ;LCDTime.c: 510: (LCDByte('/',1)) ;
  4048  0E50  01F5               	clrf	LCDByte@isdata
  4049  0E51  0AF5               	incf	LCDByte@isdata,f
  4050  0E52  302F               	movlw	47
  4051  0E53  120A  158A  2459  120A  158A  	fcall	_LCDByte
  4052                           
  4053                           ;LCDTime.c: 511: (LCDByte('2',1)) ;
  4054  0E58  01F5               	clrf	LCDByte@isdata
  4055  0E59  0AF5               	incf	LCDByte@isdata,f
  4056  0E5A  3032               	movlw	50
  4057  0E5B  120A  158A  2459  120A  158A  	fcall	_LCDByte
  4058                           
  4059                           ;LCDTime.c: 512: (LCDByte('0',1)) ;
  4060  0E60  01F5               	clrf	LCDByte@isdata
  4061  0E61  0AF5               	incf	LCDByte@isdata,f
  4062  0E62  3030               	movlw	48
  4063  0E63  120A  158A  2459  120A  158A  	fcall	_LCDByte
  4064                           
  4065                           ;LCDTime.c: 513: LCDWriteInt(year,2);
  4066  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  4067  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  4068  0E6A  085F               	movf	_year+1,w
  4069  0E6B  00A3               	movwf	LCDWriteInt@val+1
  4070  0E6C  085E               	movf	_year,w
  4071  0E6D  00A2               	movwf	LCDWriteInt@val
  4072  0E6E  3002               	movlw	2
  4073  0E6F  00B3               	movwf	??_showDate
  4074  0E70  0833               	movf	??_showDate,w
  4075  0E71  00A4               	movwf	LCDWriteInt@field_length
  4076  0E72  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4077                           
  4078                           ;LCDTime.c: 514: (LCDByte(32,1)) ;
  4079  0E77  01F5               	clrf	LCDByte@isdata
  4080  0E78  0AF5               	incf	LCDByte@isdata,f
  4081  0E79  3020               	movlw	32
  4082  0E7A  120A  158A  2459  120A  158A  	fcall	_LCDByte
  4083                           
  4084                           ;LCDTime.c: 515: (LCDByte(32,1)) ;
  4085  0E7F  01F5               	clrf	LCDByte@isdata
  4086  0E80  0AF5               	incf	LCDByte@isdata,f
  4087  0E81  3020               	movlw	32
  4088  0E82  120A  158A  2459  120A  158A  	fcall	_LCDByte
  4089                           
  4090                           ;LCDTime.c: 516: (LCDByte(daysOfTheWeek[d++],1)) ;
  4091  0E87  01F5               	clrf	LCDByte@isdata
  4092  0E88  0AF5               	incf	LCDByte@isdata,f
  4093  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  4094  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  4095  0E8B  0834               	movf	showDate@d,w
  4096  0E8C  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4097  0E8D  0084               	movwf	4
  4098  0E8E  120A  158A  200A  120A  158A  	fcall	stringdir
  4099  0E93  120A  158A  2459  120A  158A  	fcall	_LCDByte
  4100  0E98  3001               	movlw	1
  4101  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  4102  0E9A  1303               	bcf	3,6	;RP1=0, select bank0
  4103  0E9B  07B4               	addwf	showDate@d,f
  4104  0E9C  1803               	skipnc
  4105  0E9D  0AB5               	incf	showDate@d+1,f
  4106  0E9E  3000               	movlw	0
  4107  0E9F  07B5               	addwf	showDate@d+1,f
  4108                           
  4109                           ;LCDTime.c: 517: (LCDByte(daysOfTheWeek[d++],1)) ;
  4110  0EA0  01F5               	clrf	LCDByte@isdata
  4111  0EA1  0AF5               	incf	LCDByte@isdata,f
  4112  0EA2  0834               	movf	showDate@d,w
  4113  0EA3  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4114  0EA4  0084               	movwf	4
  4115  0EA5  120A  158A  200A  120A  158A  	fcall	stringdir
  4116  0EAA  120A  158A  2459  120A  158A  	fcall	_LCDByte
  4117  0EAF  3001               	movlw	1
  4118  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  4119  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  4120  0EB2  07B4               	addwf	showDate@d,f
  4121  0EB3  1803               	skipnc
  4122  0EB4  0AB5               	incf	showDate@d+1,f
  4123  0EB5  3000               	movlw	0
  4124  0EB6  07B5               	addwf	showDate@d+1,f
  4125                           
  4126                           ;LCDTime.c: 518: (LCDByte(daysOfTheWeek[d],1)) ;
  4127  0EB7  01F5               	clrf	LCDByte@isdata
  4128  0EB8  0AF5               	incf	LCDByte@isdata,f
  4129  0EB9  0834               	movf	showDate@d,w
  4130  0EBA  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4131  0EBB  0084               	movwf	4
  4132  0EBC  120A  158A  200A  120A  158A  	fcall	stringdir
  4133  0EC1  120A  158A  2459   	fcall	_LCDByte
  4134  0EC4  0008               	return
  4135  0EC5                     __end_of_showDate:	
  4136                           
  4137                           	psect	text10
  4138  0EC5                     __ptext10:	
  4139 ;; *************** function _LCDWriteInt *****************
  4140 ;; Defined at:
  4141 ;;		line 277 in file "lcd_hd44780_pic16.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  val             2    2[BANK0 ] int 
  4144 ;;  field_length    1    4[BANK0 ] char 
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  str             6   10[BANK0 ] unsigned char [6]
  4147 ;;  from            2   16[BANK0 ] int 
  4148 ;;  characters      2    8[BANK0 ] int 
  4149 ;;  c               1   18[BANK0 ] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  1    wreg      void 
  4152 ;; Registers used:
  4153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4159 ;;      Params:         0       3       0       0       0
  4160 ;;      Locals:         0      11       0       0       0
  4161 ;;      Temps:          0       3       0       0       0
  4162 ;;      Totals:         0      17       0       0       0
  4163 ;;Total ram usage:       17 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:    3
  4166 ;; This function calls:
  4167 ;;		_LCDWriteString
  4168 ;;		___awdiv
  4169 ;;		___wmul
  4170 ;; This function is called by:
  4171 ;;		_main
  4172 ;;		_showTime
  4173 ;;		_showDate
  4174 ;;		_showRunningTime
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           
  4179                           ;psect for function _LCDWriteInt
  4180  0EC5                     _LCDWriteInt:	
  4181                           
  4182                           ;lcd_hd44780_pic16.c: 279: char str[6] = { "-----\0" } ;
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _LCDWriteInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4186  0EC5  302A               	movlw	LCDWriteInt@str& (0+255)
  4187  0EC6  0084               	movwf	4
  4188  0EC7  1283               	bcf	3,5	;RP0=0, select bank0
  4189  0EC8  1303               	bcf	3,6	;RP1=0, select bank0
  4190  0EC9  084A               	movf	LCDWriteInt@F1143,w
  4191  0ECA  1383               	bcf	3,7	;select IRP bank0
  4192  0ECB  0080               	movwf	0
  4193  0ECC  0A84               	incf	4,f
  4194  0ECD  084B               	movf	LCDWriteInt@F1143+1,w
  4195  0ECE  0080               	movwf	0
  4196  0ECF  0A84               	incf	4,f
  4197  0ED0  084C               	movf	LCDWriteInt@F1143+2,w
  4198  0ED1  0080               	movwf	0
  4199  0ED2  0A84               	incf	4,f
  4200  0ED3  084D               	movf	LCDWriteInt@F1143+3,w
  4201  0ED4  0080               	movwf	0
  4202  0ED5  0A84               	incf	4,f
  4203  0ED6  084E               	movf	LCDWriteInt@F1143+4,w
  4204  0ED7  0080               	movwf	0
  4205  0ED8  0A84               	incf	4,f
  4206  0ED9  084F               	movf	LCDWriteInt@F1143+5,w
  4207  0EDA  0080               	movwf	0
  4208                           
  4209                           ;lcd_hd44780_pic16.c: 280: int characters = 0 ;
  4210  0EDB  01A8               	clrf	LCDWriteInt@characters
  4211  0EDC  01A9               	clrf	LCDWriteInt@characters+1
  4212                           
  4213                           ;lcd_hd44780_pic16.c: 281: int from = 5 ;
  4214  0EDD  3005               	movlw	5
  4215  0EDE  00B0               	movwf	LCDWriteInt@from
  4216  0EDF  3000               	movlw	0
  4217  0EE0  00B1               	movwf	LCDWriteInt@from+1
  4218                           
  4219                           ;lcd_hd44780_pic16.c: 282: char c ;
  4220                           ;lcd_hd44780_pic16.c: 284: field_length = 5 - field_length ;
  4221  0EE1  0324               	decf	LCDWriteInt@field_length,w
  4222  0EE2  3AFF               	xorlw	255
  4223  0EE3  3E05               	addlw	5
  4224  0EE4  00A5               	movwf	??_LCDWriteInt
  4225  0EE5  0825               	movf	??_LCDWriteInt,w
  4226  0EE6  00A4               	movwf	LCDWriteInt@field_length
  4227                           
  4228                           ;lcd_hd44780_pic16.c: 286: c = val / 10000 ;
  4229  0EE7  3010               	movlw	16
  4230  0EE8  00F0               	movwf	___awdiv@divisor
  4231  0EE9  3027               	movlw	39
  4232  0EEA  00F1               	movwf	___awdiv@divisor+1
  4233  0EEB  0823               	movf	LCDWriteInt@val+1,w
  4234  0EEC  00F3               	movwf	___awdiv@dividend+1
  4235  0EED  0822               	movf	LCDWriteInt@val,w
  4236  0EEE  00F2               	movwf	___awdiv@dividend
  4237  0EEF  120A  158A  24FF  120A  158A  	fcall	___awdiv
  4238  0EF4  0870               	movf	?___awdiv,w
  4239  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  4240  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  4241  0EF7  00A5               	movwf	??_LCDWriteInt
  4242  0EF8  0825               	movf	??_LCDWriteInt,w
  4243  0EF9  00B2               	movwf	LCDWriteInt@c
  4244                           
  4245                           ;lcd_hd44780_pic16.c: 287: if (c)
  4246  0EFA  0832               	movf	LCDWriteInt@c,w
  4247  0EFB  1903               	btfsc	3,2
  4248  0EFC  2F17               	goto	l2043
  4249                           
  4250                           ;lcd_hd44780_pic16.c: 288: {
  4251                           ;lcd_hd44780_pic16.c: 289: val -= c * 10000 ;
  4252  0EFD  0832               	movf	LCDWriteInt@c,w
  4253  0EFE  00A5               	movwf	??_LCDWriteInt
  4254  0EFF  01A6               	clrf	??_LCDWriteInt+1
  4255  0F00  0825               	movf	??_LCDWriteInt,w
  4256  0F01  00F9               	movwf	___wmul@multiplier
  4257  0F02  0826               	movf	??_LCDWriteInt+1,w
  4258  0F03  00FA               	movwf	___wmul@multiplier+1
  4259  0F04  3010               	movlw	16
  4260  0F05  00FB               	movwf	___wmul@multiplicand
  4261  0F06  3027               	movlw	39
  4262  0F07  00FC               	movwf	___wmul@multiplicand+1
  4263  0F08  120A  158A  21EE  120A  158A  	fcall	___wmul
  4264  0F0D  0879               	movf	?___wmul,w
  4265  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  4266  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  4267  0F10  02A2               	subwf	LCDWriteInt@val,f
  4268  0F11  087A               	movf	?___wmul+1,w
  4269  0F12  1C03               	skipc
  4270  0F13  03A3               	decf	LCDWriteInt@val+1,f
  4271  0F14  02A3               	subwf	LCDWriteInt@val+1,f
  4272                           
  4273                           ;lcd_hd44780_pic16.c: 290: from = 0 ;
  4274  0F15  01B0               	clrf	LCDWriteInt@from
  4275  0F16  01B1               	clrf	LCDWriteInt@from+1
  4276  0F17                     l2043:	
  4277                           
  4278                           ;lcd_hd44780_pic16.c: 291: }
  4279                           ;lcd_hd44780_pic16.c: 292: str[0] = c + 0x30 ;
  4280  0F17  0832               	movf	LCDWriteInt@c,w
  4281  0F18  3E30               	addlw	48
  4282  0F19  00A5               	movwf	??_LCDWriteInt
  4283  0F1A  0825               	movf	??_LCDWriteInt,w
  4284  0F1B  00AA               	movwf	LCDWriteInt@str
  4285                           
  4286                           ;lcd_hd44780_pic16.c: 293: c = val / 1000 ;
  4287  0F1C  30E8               	movlw	232
  4288  0F1D  00F0               	movwf	___awdiv@divisor
  4289  0F1E  3003               	movlw	3
  4290  0F1F  00F1               	movwf	___awdiv@divisor+1
  4291  0F20  0823               	movf	LCDWriteInt@val+1,w
  4292  0F21  00F3               	movwf	___awdiv@dividend+1
  4293  0F22  0822               	movf	LCDWriteInt@val,w
  4294  0F23  00F2               	movwf	___awdiv@dividend
  4295  0F24  120A  158A  24FF  120A  158A  	fcall	___awdiv
  4296  0F29  0870               	movf	?___awdiv,w
  4297  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  4298  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  4299  0F2C  00A5               	movwf	??_LCDWriteInt
  4300  0F2D  0825               	movf	??_LCDWriteInt,w
  4301  0F2E  00B2               	movwf	LCDWriteInt@c
  4302                           
  4303                           ;lcd_hd44780_pic16.c: 294: if (c)
  4304  0F2F  0832               	movf	LCDWriteInt@c,w
  4305  0F30  1903               	btfsc	3,2
  4306  0F31  2F53               	goto	l2055
  4307                           
  4308                           ;lcd_hd44780_pic16.c: 295: {
  4309                           ;lcd_hd44780_pic16.c: 296: val -= c * 1000 ;
  4310  0F32  0832               	movf	LCDWriteInt@c,w
  4311  0F33  00A5               	movwf	??_LCDWriteInt
  4312  0F34  01A6               	clrf	??_LCDWriteInt+1
  4313  0F35  0825               	movf	??_LCDWriteInt,w
  4314  0F36  00F9               	movwf	___wmul@multiplier
  4315  0F37  0826               	movf	??_LCDWriteInt+1,w
  4316  0F38  00FA               	movwf	___wmul@multiplier+1
  4317  0F39  30E8               	movlw	232
  4318  0F3A  00FB               	movwf	___wmul@multiplicand
  4319  0F3B  3003               	movlw	3
  4320  0F3C  00FC               	movwf	___wmul@multiplicand+1
  4321  0F3D  120A  158A  21EE  120A  158A  	fcall	___wmul
  4322  0F42  0879               	movf	?___wmul,w
  4323  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  4324  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  4325  0F45  02A2               	subwf	LCDWriteInt@val,f
  4326  0F46  087A               	movf	?___wmul+1,w
  4327  0F47  1C03               	skipc
  4328  0F48  03A3               	decf	LCDWriteInt@val+1,f
  4329  0F49  02A3               	subwf	LCDWriteInt@val+1,f
  4330                           
  4331                           ;lcd_hd44780_pic16.c: 297: if (from == 5)
  4332  0F4A  3005               	movlw	5
  4333  0F4B  0630               	xorwf	LCDWriteInt@from,w
  4334  0F4C  0431               	iorwf	LCDWriteInt@from+1,w
  4335  0F4D  1D03               	btfss	3,2
  4336  0F4E  2F53               	goto	l2055
  4337                           
  4338                           ;lcd_hd44780_pic16.c: 298: from = 1 ;
  4339  0F4F  3001               	movlw	1
  4340  0F50  00B0               	movwf	LCDWriteInt@from
  4341  0F51  3000               	movlw	0
  4342  0F52  00B1               	movwf	LCDWriteInt@from+1
  4343  0F53                     l2055:	
  4344                           
  4345                           ;lcd_hd44780_pic16.c: 299: }
  4346                           ;lcd_hd44780_pic16.c: 300: str[1] = c + 0x30 ;
  4347  0F53  0832               	movf	LCDWriteInt@c,w
  4348  0F54  3E30               	addlw	48
  4349  0F55  00A5               	movwf	??_LCDWriteInt
  4350  0F56  0825               	movf	??_LCDWriteInt,w
  4351  0F57  00AB               	movwf	LCDWriteInt@str+1
  4352                           
  4353                           ;lcd_hd44780_pic16.c: 301: c = val / 100 ;
  4354  0F58  3064               	movlw	100
  4355  0F59  00F0               	movwf	___awdiv@divisor
  4356  0F5A  3000               	movlw	0
  4357  0F5B  00F1               	movwf	___awdiv@divisor+1
  4358  0F5C  0823               	movf	LCDWriteInt@val+1,w
  4359  0F5D  00F3               	movwf	___awdiv@dividend+1
  4360  0F5E  0822               	movf	LCDWriteInt@val,w
  4361  0F5F  00F2               	movwf	___awdiv@dividend
  4362  0F60  120A  158A  24FF  120A  158A  	fcall	___awdiv
  4363  0F65  0870               	movf	?___awdiv,w
  4364  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  4365  0F67  1303               	bcf	3,6	;RP1=0, select bank0
  4366  0F68  00A5               	movwf	??_LCDWriteInt
  4367  0F69  0825               	movf	??_LCDWriteInt,w
  4368  0F6A  00B2               	movwf	LCDWriteInt@c
  4369                           
  4370                           ;lcd_hd44780_pic16.c: 302: if (c)
  4371  0F6B  0832               	movf	LCDWriteInt@c,w
  4372  0F6C  1903               	btfsc	3,2
  4373  0F6D  2F8F               	goto	l2067
  4374                           
  4375                           ;lcd_hd44780_pic16.c: 303: {
  4376                           ;lcd_hd44780_pic16.c: 304: val -= c * 100 ;
  4377  0F6E  0832               	movf	LCDWriteInt@c,w
  4378  0F6F  00A5               	movwf	??_LCDWriteInt
  4379  0F70  01A6               	clrf	??_LCDWriteInt+1
  4380  0F71  0825               	movf	??_LCDWriteInt,w
  4381  0F72  00F9               	movwf	___wmul@multiplier
  4382  0F73  0826               	movf	??_LCDWriteInt+1,w
  4383  0F74  00FA               	movwf	___wmul@multiplier+1
  4384  0F75  3064               	movlw	100
  4385  0F76  00FB               	movwf	___wmul@multiplicand
  4386  0F77  3000               	movlw	0
  4387  0F78  00FC               	movwf	___wmul@multiplicand+1
  4388  0F79  120A  158A  21EE  120A  158A  	fcall	___wmul
  4389  0F7E  0879               	movf	?___wmul,w
  4390  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4391  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4392  0F81  02A2               	subwf	LCDWriteInt@val,f
  4393  0F82  087A               	movf	?___wmul+1,w
  4394  0F83  1C03               	skipc
  4395  0F84  03A3               	decf	LCDWriteInt@val+1,f
  4396  0F85  02A3               	subwf	LCDWriteInt@val+1,f
  4397                           
  4398                           ;lcd_hd44780_pic16.c: 305: if (from == 5)
  4399  0F86  3005               	movlw	5
  4400  0F87  0630               	xorwf	LCDWriteInt@from,w
  4401  0F88  0431               	iorwf	LCDWriteInt@from+1,w
  4402  0F89  1D03               	btfss	3,2
  4403  0F8A  2F8F               	goto	l2067
  4404                           
  4405                           ;lcd_hd44780_pic16.c: 306: from = 2 ;
  4406  0F8B  3002               	movlw	2
  4407  0F8C  00B0               	movwf	LCDWriteInt@from
  4408  0F8D  3000               	movlw	0
  4409  0F8E  00B1               	movwf	LCDWriteInt@from+1
  4410  0F8F                     l2067:	
  4411                           
  4412                           ;lcd_hd44780_pic16.c: 307: }
  4413                           ;lcd_hd44780_pic16.c: 308: str[2] = c + 0x30 ;
  4414  0F8F  0832               	movf	LCDWriteInt@c,w
  4415  0F90  3E30               	addlw	48
  4416  0F91  00A5               	movwf	??_LCDWriteInt
  4417  0F92  0825               	movf	??_LCDWriteInt,w
  4418  0F93  00AC               	movwf	LCDWriteInt@str+2
  4419                           
  4420                           ;lcd_hd44780_pic16.c: 309: c = val / 10 ;
  4421  0F94  300A               	movlw	10
  4422  0F95  00F0               	movwf	___awdiv@divisor
  4423  0F96  3000               	movlw	0
  4424  0F97  00F1               	movwf	___awdiv@divisor+1
  4425  0F98  0823               	movf	LCDWriteInt@val+1,w
  4426  0F99  00F3               	movwf	___awdiv@dividend+1
  4427  0F9A  0822               	movf	LCDWriteInt@val,w
  4428  0F9B  00F2               	movwf	___awdiv@dividend
  4429  0F9C  120A  158A  24FF  120A  158A  	fcall	___awdiv
  4430  0FA1  0870               	movf	?___awdiv,w
  4431  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  4432  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  4433  0FA4  00A5               	movwf	??_LCDWriteInt
  4434  0FA5  0825               	movf	??_LCDWriteInt,w
  4435  0FA6  00B2               	movwf	LCDWriteInt@c
  4436                           
  4437                           ;lcd_hd44780_pic16.c: 310: if (c)
  4438  0FA7  0832               	movf	LCDWriteInt@c,w
  4439  0FA8  1903               	btfsc	3,2
  4440  0FA9  2FCB               	goto	l2079
  4441                           
  4442                           ;lcd_hd44780_pic16.c: 311: {
  4443                           ;lcd_hd44780_pic16.c: 312: val -= c * 10 ;
  4444  0FAA  0832               	movf	LCDWriteInt@c,w
  4445  0FAB  00A5               	movwf	??_LCDWriteInt
  4446  0FAC  01A6               	clrf	??_LCDWriteInt+1
  4447  0FAD  0825               	movf	??_LCDWriteInt,w
  4448  0FAE  00F9               	movwf	___wmul@multiplier
  4449  0FAF  0826               	movf	??_LCDWriteInt+1,w
  4450  0FB0  00FA               	movwf	___wmul@multiplier+1
  4451  0FB1  300A               	movlw	10
  4452  0FB2  00FB               	movwf	___wmul@multiplicand
  4453  0FB3  3000               	movlw	0
  4454  0FB4  00FC               	movwf	___wmul@multiplicand+1
  4455  0FB5  120A  158A  21EE  120A  158A  	fcall	___wmul
  4456  0FBA  0879               	movf	?___wmul,w
  4457  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  4458  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0FBD  02A2               	subwf	LCDWriteInt@val,f
  4460  0FBE  087A               	movf	?___wmul+1,w
  4461  0FBF  1C03               	skipc
  4462  0FC0  03A3               	decf	LCDWriteInt@val+1,f
  4463  0FC1  02A3               	subwf	LCDWriteInt@val+1,f
  4464                           
  4465                           ;lcd_hd44780_pic16.c: 313: if (from == 5)
  4466  0FC2  3005               	movlw	5
  4467  0FC3  0630               	xorwf	LCDWriteInt@from,w
  4468  0FC4  0431               	iorwf	LCDWriteInt@from+1,w
  4469  0FC5  1D03               	btfss	3,2
  4470  0FC6  2FCB               	goto	l2079
  4471                           
  4472                           ;lcd_hd44780_pic16.c: 314: from = 3 ;
  4473  0FC7  3003               	movlw	3
  4474  0FC8  00B0               	movwf	LCDWriteInt@from
  4475  0FC9  3000               	movlw	0
  4476  0FCA  00B1               	movwf	LCDWriteInt@from+1
  4477  0FCB                     l2079:	
  4478                           
  4479                           ;lcd_hd44780_pic16.c: 315: }
  4480                           ;lcd_hd44780_pic16.c: 316: str[3] = c + 0x30 ;
  4481  0FCB  0832               	movf	LCDWriteInt@c,w
  4482  0FCC  3E30               	addlw	48
  4483  0FCD  00A5               	movwf	??_LCDWriteInt
  4484  0FCE  0825               	movf	??_LCDWriteInt,w
  4485  0FCF  00AD               	movwf	LCDWriteInt@str+3
  4486                           
  4487                           ;lcd_hd44780_pic16.c: 317: if (from == 5)
  4488  0FD0  3005               	movlw	5
  4489  0FD1  0630               	xorwf	LCDWriteInt@from,w
  4490  0FD2  0431               	iorwf	LCDWriteInt@from+1,w
  4491  0FD3  1D03               	btfss	3,2
  4492  0FD4  2FD9               	goto	l2085
  4493                           
  4494                           ;lcd_hd44780_pic16.c: 318: from = 4 ;
  4495  0FD5  3004               	movlw	4
  4496  0FD6  00B0               	movwf	LCDWriteInt@from
  4497  0FD7  3000               	movlw	0
  4498  0FD8  00B1               	movwf	LCDWriteInt@from+1
  4499  0FD9                     l2085:	
  4500                           
  4501                           ;lcd_hd44780_pic16.c: 319: str[4] = (char)(val + 0x30) ;
  4502  0FD9  0822               	movf	LCDWriteInt@val,w
  4503  0FDA  3E30               	addlw	48
  4504  0FDB  00A5               	movwf	??_LCDWriteInt
  4505  0FDC  0825               	movf	??_LCDWriteInt,w
  4506  0FDD  00AE               	movwf	LCDWriteInt@str+4
  4507                           
  4508                           ;lcd_hd44780_pic16.c: 321: if (from < field_length)
  4509  0FDE  0824               	movf	LCDWriteInt@field_length,w
  4510  0FDF  00A5               	movwf	??_LCDWriteInt
  4511  0FE0  01A6               	clrf	??_LCDWriteInt+1
  4512  0FE1  1BA5               	btfsc	??_LCDWriteInt,7
  4513  0FE2  03A6               	decf	??_LCDWriteInt+1,f
  4514  0FE3  0831               	movf	LCDWriteInt@from+1,w
  4515  0FE4  3A80               	xorlw	128
  4516  0FE5  00A7               	movwf	??_LCDWriteInt+2
  4517  0FE6  0826               	movf	??_LCDWriteInt+1,w
  4518  0FE7  3A80               	xorlw	128
  4519  0FE8  0227               	subwf	??_LCDWriteInt+2,w
  4520  0FE9  1D03               	skipz
  4521  0FEA  2FED               	goto	u1695
  4522  0FEB  0825               	movf	??_LCDWriteInt,w
  4523  0FEC  0230               	subwf	LCDWriteInt@from,w
  4524  0FED                     u1695:	
  4525  0FED  1803               	skipnc
  4526  0FEE  2FF5               	goto	l2091
  4527                           
  4528                           ;lcd_hd44780_pic16.c: 322: field_length = from ;
  4529  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  4530  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  4531  0FF1  0830               	movf	LCDWriteInt@from,w
  4532  0FF2  00A5               	movwf	??_LCDWriteInt
  4533  0FF3  0825               	movf	??_LCDWriteInt,w
  4534  0FF4  00A4               	movwf	LCDWriteInt@field_length
  4535  0FF5                     l2091:	
  4536                           
  4537                           ;lcd_hd44780_pic16.c: 324: LCDWriteString(&str[field_length]) ;
  4538  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  4539  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  4540  0FF7  0824               	movf	LCDWriteInt@field_length,w
  4541  0FF8  3E2A               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4542  0FF9  00FC               	movwf	LCDWriteString@msg
  4543  0FFA  3000               	movlw	0
  4544  0FFB  00FD               	movwf	LCDWriteString@msg+1
  4545  0FFC  120A  158A  217D   	fcall	_LCDWriteString
  4546  0FFF  0008               	return
  4547  1000                     __end_of_LCDWriteInt:	
  4548                           
  4549                           	psect	text11
  4550  09EE                     __ptext11:	
  4551 ;; *************** function ___wmul *****************
  4552 ;; Defined at:
  4553 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  multiplier      2    9[COMMON] unsigned int 
  4556 ;;  multiplicand    2   11[COMMON] unsigned int 
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;  product         2    0[BANK0 ] unsigned int 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  2    9[COMMON] unsigned int 
  4561 ;; Registers used:
  4562 ;;		wreg, status,2, status,0
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4568 ;;      Params:         4       0       0       0       0
  4569 ;;      Locals:         0       2       0       0       0
  4570 ;;      Temps:          0       0       0       0       0
  4571 ;;      Totals:         4       2       0       0       0
  4572 ;;Total ram usage:        6 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; This function calls:
  4575 ;;		Nothing
  4576 ;; This function is called by:
  4577 ;;		_LCDWriteInt
  4578 ;;		_main
  4579 ;;		_readClock
  4580 ;;		_showDate
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           
  4585                           ;psect for function ___wmul
  4586  09EE                     ___wmul:	
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4590  09EE  1283               	bcf	3,5	;RP0=0, select bank0
  4591  09EF  1303               	bcf	3,6	;RP1=0, select bank0
  4592  09F0  01A0               	clrf	___wmul@product
  4593  09F1  01A1               	clrf	___wmul@product+1
  4594  09F2                     l1947:	
  4595  09F2  1C79               	btfss	___wmul@multiplier,0
  4596  09F3  29FC               	goto	l471
  4597  09F4  087B               	movf	___wmul@multiplicand,w
  4598  09F5  1283               	bcf	3,5	;RP0=0, select bank0
  4599  09F6  1303               	bcf	3,6	;RP1=0, select bank0
  4600  09F7  07A0               	addwf	___wmul@product,f
  4601  09F8  1803               	skipnc
  4602  09F9  0AA1               	incf	___wmul@product+1,f
  4603  09FA  087C               	movf	___wmul@multiplicand+1,w
  4604  09FB  07A1               	addwf	___wmul@product+1,f
  4605  09FC                     l471:	
  4606  09FC  3001               	movlw	1
  4607  09FD                     u1485:	
  4608  09FD  1003               	clrc
  4609  09FE  0DFB               	rlf	___wmul@multiplicand,f
  4610  09FF  0DFC               	rlf	___wmul@multiplicand+1,f
  4611  0A00  3EFF               	addlw	-1
  4612  0A01  1D03               	skipz
  4613  0A02  29FD               	goto	u1485
  4614  0A03  3001               	movlw	1
  4615  0A04                     u1495:	
  4616  0A04  1003               	clrc
  4617  0A05  0CFA               	rrf	___wmul@multiplier+1,f
  4618  0A06  0CF9               	rrf	___wmul@multiplier,f
  4619  0A07  3EFF               	addlw	-1
  4620  0A08  1D03               	skipz
  4621  0A09  2A04               	goto	u1495
  4622  0A0A  0879               	movf	___wmul@multiplier,w
  4623  0A0B  047A               	iorwf	___wmul@multiplier+1,w
  4624  0A0C  1D03               	btfss	3,2
  4625  0A0D  29F2               	goto	l1947
  4626  0A0E  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0A0F  1303               	bcf	3,6	;RP1=0, select bank0
  4628  0A10  0821               	movf	___wmul@product+1,w
  4629  0A11  00FA               	movwf	?___wmul+1
  4630  0A12  0820               	movf	___wmul@product,w
  4631  0A13  00F9               	movwf	?___wmul
  4632  0A14  0008               	return
  4633  0A15                     __end_of___wmul:	
  4634                           
  4635                           	psect	text12
  4636  0CFF                     __ptext12:	
  4637 ;; *************** function ___awdiv *****************
  4638 ;; Defined at:
  4639 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  divisor         2    0[COMMON] int 
  4642 ;;  dividend        2    2[COMMON] int 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  quotient        2    7[COMMON] int 
  4645 ;;  sign            1    6[COMMON] unsigned char 
  4646 ;;  counter         1    5[COMMON] unsigned char 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  2    0[COMMON] int 
  4649 ;; Registers used:
  4650 ;;		wreg, status,2, status,0
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4656 ;;      Params:         4       0       0       0       0
  4657 ;;      Locals:         4       0       0       0       0
  4658 ;;      Temps:          1       0       0       0       0
  4659 ;;      Totals:         9       0       0       0       0
  4660 ;;Total ram usage:        9 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; This function calls:
  4663 ;;		Nothing
  4664 ;; This function is called by:
  4665 ;;		_LCDWriteInt
  4666 ;;		_doMenu
  4667 ;;		_readClock
  4668 ;;		_showRunningTime
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function ___awdiv
  4674  0CFF                     ___awdiv:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4678  0CFF  01F6               	clrf	___awdiv@sign
  4679  0D00  1FF1               	btfss	___awdiv@divisor+1,7
  4680  0D01  2D09               	goto	l1967
  4681  0D02  09F0               	comf	___awdiv@divisor,f
  4682  0D03  09F1               	comf	___awdiv@divisor+1,f
  4683  0D04  0AF0               	incf	___awdiv@divisor,f
  4684  0D05  1903               	skipnz
  4685  0D06  0AF1               	incf	___awdiv@divisor+1,f
  4686  0D07  01F6               	clrf	___awdiv@sign
  4687  0D08  0AF6               	incf	___awdiv@sign,f
  4688  0D09                     l1967:	
  4689  0D09  1FF3               	btfss	___awdiv@dividend+1,7
  4690  0D0A  2D14               	goto	l1973
  4691  0D0B  09F2               	comf	___awdiv@dividend,f
  4692  0D0C  09F3               	comf	___awdiv@dividend+1,f
  4693  0D0D  0AF2               	incf	___awdiv@dividend,f
  4694  0D0E  1903               	skipnz
  4695  0D0F  0AF3               	incf	___awdiv@dividend+1,f
  4696  0D10  3001               	movlw	1
  4697  0D11  00F4               	movwf	??___awdiv
  4698  0D12  0874               	movf	??___awdiv,w
  4699  0D13  06F6               	xorwf	___awdiv@sign,f
  4700  0D14                     l1973:	
  4701  0D14  01F7               	clrf	___awdiv@quotient
  4702  0D15  01F8               	clrf	___awdiv@quotient+1
  4703  0D16  0870               	movf	___awdiv@divisor,w
  4704  0D17  0471               	iorwf	___awdiv@divisor+1,w
  4705  0D18  1903               	btfsc	3,2
  4706  0D19  2D4B               	goto	l1995
  4707  0D1A  01F5               	clrf	___awdiv@counter
  4708  0D1B  0AF5               	incf	___awdiv@counter,f
  4709  0D1C                     l1983:	
  4710  0D1C  1BF1               	btfsc	___awdiv@divisor+1,7
  4711  0D1D  2D2A               	goto	l1985
  4712  0D1E  3001               	movlw	1
  4713  0D1F                     u1545:	
  4714  0D1F  1003               	clrc
  4715  0D20  0DF0               	rlf	___awdiv@divisor,f
  4716  0D21  0DF1               	rlf	___awdiv@divisor+1,f
  4717  0D22  3EFF               	addlw	-1
  4718  0D23  1D03               	skipz
  4719  0D24  2D1F               	goto	u1545
  4720  0D25  3001               	movlw	1
  4721  0D26  00F4               	movwf	??___awdiv
  4722  0D27  0874               	movf	??___awdiv,w
  4723  0D28  07F5               	addwf	___awdiv@counter,f
  4724  0D29  2D1C               	goto	l1983
  4725  0D2A                     l1985:	
  4726  0D2A  3001               	movlw	1
  4727  0D2B                     u1565:	
  4728  0D2B  1003               	clrc
  4729  0D2C  0DF7               	rlf	___awdiv@quotient,f
  4730  0D2D  0DF8               	rlf	___awdiv@quotient+1,f
  4731  0D2E  3EFF               	addlw	-1
  4732  0D2F  1D03               	skipz
  4733  0D30  2D2B               	goto	u1565
  4734  0D31  0871               	movf	___awdiv@divisor+1,w
  4735  0D32  0273               	subwf	___awdiv@dividend+1,w
  4736  0D33  1D03               	skipz
  4737  0D34  2D37               	goto	u1575
  4738  0D35  0870               	movf	___awdiv@divisor,w
  4739  0D36  0272               	subwf	___awdiv@dividend,w
  4740  0D37                     u1575:	
  4741  0D37  1C03               	skipc
  4742  0D38  2D40               	goto	l1991
  4743  0D39  0870               	movf	___awdiv@divisor,w
  4744  0D3A  02F2               	subwf	___awdiv@dividend,f
  4745  0D3B  0871               	movf	___awdiv@divisor+1,w
  4746  0D3C  1C03               	skipc
  4747  0D3D  03F3               	decf	___awdiv@dividend+1,f
  4748  0D3E  02F3               	subwf	___awdiv@dividend+1,f
  4749  0D3F  1477               	bsf	___awdiv@quotient,0
  4750  0D40                     l1991:	
  4751  0D40  3001               	movlw	1
  4752  0D41                     u1585:	
  4753  0D41  1003               	clrc
  4754  0D42  0CF1               	rrf	___awdiv@divisor+1,f
  4755  0D43  0CF0               	rrf	___awdiv@divisor,f
  4756  0D44  3EFF               	addlw	-1
  4757  0D45  1D03               	skipz
  4758  0D46  2D41               	goto	u1585
  4759  0D47  3001               	movlw	1
  4760  0D48  02F5               	subwf	___awdiv@counter,f
  4761  0D49  1D03               	btfss	3,2
  4762  0D4A  2D2A               	goto	l1985
  4763  0D4B                     l1995:	
  4764  0D4B  0876               	movf	___awdiv@sign,w
  4765  0D4C  1903               	btfsc	3,2
  4766  0D4D  2D53               	goto	l1999
  4767  0D4E  09F7               	comf	___awdiv@quotient,f
  4768  0D4F  09F8               	comf	___awdiv@quotient+1,f
  4769  0D50  0AF7               	incf	___awdiv@quotient,f
  4770  0D51  1903               	skipnz
  4771  0D52  0AF8               	incf	___awdiv@quotient+1,f
  4772  0D53                     l1999:	
  4773  0D53  0878               	movf	___awdiv@quotient+1,w
  4774  0D54  00F1               	movwf	?___awdiv+1
  4775  0D55  0877               	movf	___awdiv@quotient,w
  4776  0D56  00F0               	movwf	?___awdiv
  4777  0D57  0008               	return
  4778  0D58                     __end_of___awdiv:	
  4779                           
  4780                           	psect	text13
  4781  0A95                     __ptext13:	
  4782 ;; *************** function _readInputs *****************
  4783 ;; Defined at:
  4784 ;;		line 422 in file "LCDTime.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  pinstate        1    3[COMMON] unsigned char 
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  1    wreg      void 
  4791 ;; Registers used:
  4792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4798 ;;      Params:         0       0       0       0       0
  4799 ;;      Locals:         1       0       0       0       0
  4800 ;;      Temps:          3       0       0       0       0
  4801 ;;      Totals:         4       0       0       0       0
  4802 ;;Total ram usage:        4 bytes
  4803 ;; Hardware stack levels used:    2
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_main
  4808 ;;		_doMenu
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           
  4813                           ;psect for function _readInputs
  4814  0A95                     _readInputs:	
  4815                           
  4816                           ;LCDTime.c: 424: bButton = 0 ;
  4817                           
  4818                           ;incstack = 0
  4819                           ; Regs used in _readInputs: [wreg-fsr0h+status,2+status,0+pclath]
  4820  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  4821  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  4822  0A97  01E4               	clrf	_bButton
  4823                           
  4824                           ;LCDTime.c: 426: if (RB4 == 1)
  4825  0A98  1E06               	btfss	6,4	;volatile
  4826  0A99  2AA6               	goto	l2245
  4827                           
  4828                           ;LCDTime.c: 427: {
  4829                           ;LCDTime.c: 428: _delay((unsigned long)((15)*(4000000/4000000.0))) ;
  4830  0A9A  3004               	movlw	4
  4831  0A9B  00F0               	movwf	??_readInputs
  4832  0A9C                     u2657:	
  4833  0A9C  0BF0               	decfsz	??_readInputs,f
  4834  0A9D  2A9C               	goto	u2657
  4835  0A9E  2A9F               	nop2	;nop
  4836                           
  4837                           ;LCDTime.c: 429: if (RB4 == 1)
  4838  0A9F  1283               	bcf	3,5	;RP0=0, select bank0
  4839  0AA0  1303               	bcf	3,6	;RP1=0, select bank0
  4840  0AA1  1E06               	btfss	6,4	;volatile
  4841  0AA2  2AA6               	goto	l2245
  4842                           
  4843                           ;LCDTime.c: 430: {
  4844                           ;LCDTime.c: 431: bButton = 1 ;
  4845  0AA3  01E4               	clrf	_bButton
  4846  0AA4  0AE4               	incf	_bButton,f
  4847                           
  4848                           ;LCDTime.c: 432: return ;
  4849  0AA5  0008               	return
  4850  0AA6                     l2245:	
  4851                           
  4852                           ;LCDTime.c: 433: }
  4853                           ;LCDTime.c: 434: }
  4854                           ;LCDTime.c: 437: unsigned char pinstate = (RB1 << 1) | RB2 ;
  4855  0AA6  3000               	movlw	0
  4856  0AA7  1886               	btfsc	6,1	;volatile
  4857  0AA8  3002               	movlw	2
  4858  0AA9  1906               	btfsc	6,2	;volatile
  4859  0AAA  3801               	iorlw	1
  4860  0AAB  00F0               	movwf	??_readInputs
  4861  0AAC  0870               	movf	??_readInputs,w
  4862  0AAD  00F3               	movwf	readInputs@pinstate
  4863                           
  4864                           ;LCDTime.c: 439: state = ttable[state & 0xf][pinstate];
  4865  0AAE  0865               	movf	_state,w
  4866  0AAF  390F               	andlw	15
  4867  0AB0  00F0               	movwf	??_readInputs
  4868  0AB1  3002               	movlw	2
  4869  0AB2                     u1835:	
  4870  0AB2  1003               	clrc
  4871  0AB3  0DF0               	rlf	??_readInputs,f
  4872  0AB4  3EFF               	addlw	-1
  4873  0AB5  1D03               	skipz
  4874  0AB6  2AB2               	goto	u1835
  4875  0AB7  3001               	movlw	(low ((_ttable-__stringbase)| (0+32768)))& (0+255)
  4876  0AB8  0770               	addwf	??_readInputs,w
  4877  0AB9  00F1               	movwf	??_readInputs+1
  4878  0ABA  0873               	movf	readInputs@pinstate,w
  4879  0ABB  0771               	addwf	??_readInputs+1,w
  4880  0ABC  0084               	movwf	4
  4881  0ABD  120A  158A  200A   	fcall	stringdir
  4882  0AC0  00F2               	movwf	??_readInputs+2
  4883  0AC1  0872               	movf	??_readInputs+2,w
  4884  0AC2  00E5               	movwf	_state
  4885  0AC3  0008               	return
  4886  0AC4                     __end_of_readInputs:	
  4887                           
  4888                           	psect	text14
  4889  0B72                     __ptext14:	
  4890 ;; *************** function ___awmod *****************
  4891 ;; Defined at:
  4892 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  divisor         2    0[COMMON] int 
  4895 ;;  dividend        2    2[COMMON] int 
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  sign            1    6[COMMON] unsigned char 
  4898 ;;  counter         1    5[COMMON] unsigned char 
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  2    0[COMMON] int 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4908 ;;      Params:         4       0       0       0       0
  4909 ;;      Locals:         2       0       0       0       0
  4910 ;;      Temps:          1       0       0       0       0
  4911 ;;      Totals:         7       0       0       0       0
  4912 ;;Total ram usage:        7 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_doMenu
  4918 ;;		_showRunningTime
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function ___awmod
  4924  0B72                     ___awmod:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4928  0B72  01F6               	clrf	___awmod@sign
  4929  0B73  1FF3               	btfss	___awmod@dividend+1,7
  4930  0B74  2B7C               	goto	l2115
  4931  0B75  09F2               	comf	___awmod@dividend,f
  4932  0B76  09F3               	comf	___awmod@dividend+1,f
  4933  0B77  0AF2               	incf	___awmod@dividend,f
  4934  0B78  1903               	skipnz
  4935  0B79  0AF3               	incf	___awmod@dividend+1,f
  4936  0B7A  01F6               	clrf	___awmod@sign
  4937  0B7B  0AF6               	incf	___awmod@sign,f
  4938  0B7C                     l2115:	
  4939  0B7C  1FF1               	btfss	___awmod@divisor+1,7
  4940  0B7D  2B83               	goto	l2119
  4941  0B7E  09F0               	comf	___awmod@divisor,f
  4942  0B7F  09F1               	comf	___awmod@divisor+1,f
  4943  0B80  0AF0               	incf	___awmod@divisor,f
  4944  0B81  1903               	skipnz
  4945  0B82  0AF1               	incf	___awmod@divisor+1,f
  4946  0B83                     l2119:	
  4947  0B83  0870               	movf	___awmod@divisor,w
  4948  0B84  0471               	iorwf	___awmod@divisor+1,w
  4949  0B85  1903               	btfsc	3,2
  4950  0B86  2BB0               	goto	l2137
  4951  0B87  01F5               	clrf	___awmod@counter
  4952  0B88  0AF5               	incf	___awmod@counter,f
  4953  0B89                     l2127:	
  4954  0B89  1BF1               	btfsc	___awmod@divisor+1,7
  4955  0B8A  2B97               	goto	l2129
  4956  0B8B  3001               	movlw	1
  4957  0B8C                     u1745:	
  4958  0B8C  1003               	clrc
  4959  0B8D  0DF0               	rlf	___awmod@divisor,f
  4960  0B8E  0DF1               	rlf	___awmod@divisor+1,f
  4961  0B8F  3EFF               	addlw	-1
  4962  0B90  1D03               	skipz
  4963  0B91  2B8C               	goto	u1745
  4964  0B92  3001               	movlw	1
  4965  0B93  00F4               	movwf	??___awmod
  4966  0B94  0874               	movf	??___awmod,w
  4967  0B95  07F5               	addwf	___awmod@counter,f
  4968  0B96  2B89               	goto	l2127
  4969  0B97                     l2129:	
  4970  0B97  0871               	movf	___awmod@divisor+1,w
  4971  0B98  0273               	subwf	___awmod@dividend+1,w
  4972  0B99  1D03               	skipz
  4973  0B9A  2B9D               	goto	u1765
  4974  0B9B  0870               	movf	___awmod@divisor,w
  4975  0B9C  0272               	subwf	___awmod@dividend,w
  4976  0B9D                     u1765:	
  4977  0B9D  1C03               	skipc
  4978  0B9E  2BA5               	goto	l2133
  4979  0B9F  0870               	movf	___awmod@divisor,w
  4980  0BA0  02F2               	subwf	___awmod@dividend,f
  4981  0BA1  0871               	movf	___awmod@divisor+1,w
  4982  0BA2  1C03               	skipc
  4983  0BA3  03F3               	decf	___awmod@dividend+1,f
  4984  0BA4  02F3               	subwf	___awmod@dividend+1,f
  4985  0BA5                     l2133:	
  4986  0BA5  3001               	movlw	1
  4987  0BA6                     u1775:	
  4988  0BA6  1003               	clrc
  4989  0BA7  0CF1               	rrf	___awmod@divisor+1,f
  4990  0BA8  0CF0               	rrf	___awmod@divisor,f
  4991  0BA9  3EFF               	addlw	-1
  4992  0BAA  1D03               	skipz
  4993  0BAB  2BA6               	goto	u1775
  4994  0BAC  3001               	movlw	1
  4995  0BAD  02F5               	subwf	___awmod@counter,f
  4996  0BAE  1D03               	btfss	3,2
  4997  0BAF  2B97               	goto	l2129
  4998  0BB0                     l2137:	
  4999  0BB0  0876               	movf	___awmod@sign,w
  5000  0BB1  1903               	btfsc	3,2
  5001  0BB2  2BB8               	goto	l2141
  5002  0BB3  09F2               	comf	___awmod@dividend,f
  5003  0BB4  09F3               	comf	___awmod@dividend+1,f
  5004  0BB5  0AF2               	incf	___awmod@dividend,f
  5005  0BB6  1903               	skipnz
  5006  0BB7  0AF3               	incf	___awmod@dividend+1,f
  5007  0BB8                     l2141:	
  5008  0BB8  0873               	movf	___awmod@dividend+1,w
  5009  0BB9  00F1               	movwf	?___awmod+1
  5010  0BBA  0872               	movf	___awmod@dividend,w
  5011  0BBB  00F0               	movwf	?___awmod
  5012  0BBC  0008               	return
  5013  0BBD                     __end_of___awmod:	
  5014                           
  5015                           	psect	text15
  5016  0A15                     __ptext15:	
  5017 ;; *************** function _DS1307_SetTime *****************
  5018 ;; Defined at:
  5019 ;;		line 43 in file "DS1307.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  hh              1    wreg     unsigned char 
  5022 ;;  mm              1    5[COMMON] unsigned char 
  5023 ;;  ss              1    6[COMMON] unsigned char 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  hh              1    7[COMMON] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, status,2, status,0, pclath, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5035 ;;      Params:         2       0       0       0       0
  5036 ;;      Locals:         1       0       0       0       0
  5037 ;;      Temps:          0       0       0       0       0
  5038 ;;      Totals:         3       0       0       0       0
  5039 ;;Total ram usage:        3 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    3
  5042 ;; This function calls:
  5043 ;;		_DS1307_Write
  5044 ;;		_I2C_Start
  5045 ;;		_I2C_Stop
  5046 ;; This function is called by:
  5047 ;;		_doMenu
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           
  5052                           ;psect for function _DS1307_SetTime
  5053  0A15                     _DS1307_SetTime:	
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in _DS1307_SetTime: [wreg+status,2+status,0+pclath+cstack]
  5057                           ;DS1307_SetTime@hh stored from wreg
  5058  0A15  00F7               	movwf	DS1307_SetTime@hh
  5059                           
  5060                           ;DS1307.c: 45: I2C_Start();
  5061  0A16  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  5062                           
  5063                           ;DS1307.c: 46: DS1307_Write(0xD0);
  5064  0A1B  30D0               	movlw	208
  5065  0A1C  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5066                           
  5067                           ;DS1307.c: 47: DS1307_Write(0x00);
  5068  0A21  3000               	movlw	0
  5069  0A22  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5070                           
  5071                           ;DS1307.c: 48: DS1307_Write(ss);
  5072  0A27  0876               	movf	DS1307_SetTime@ss,w
  5073  0A28  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5074                           
  5075                           ;DS1307.c: 49: DS1307_Write(mm);
  5076  0A2D  0875               	movf	DS1307_SetTime@mm,w
  5077  0A2E  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5078                           
  5079                           ;DS1307.c: 50: DS1307_Write(hh);
  5080  0A33  0877               	movf	DS1307_SetTime@hh,w
  5081  0A34  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5082                           
  5083                           ;DS1307.c: 51: I2C_Stop();
  5084  0A39  120A  158A  20FC   	fcall	_I2C_Stop
  5085  0A3C  0008               	return
  5086  0A3D                     __end_of_DS1307_SetTime:	
  5087                           
  5088                           	psect	text16
  5089  0A67                     __ptext16:	
  5090 ;; *************** function _DS1307_SetDate *****************
  5091 ;; Defined at:
  5092 ;;		line 54 in file "DS1307.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;  nn              1    wreg     unsigned char 
  5095 ;;  dd              1    5[COMMON] unsigned char 
  5096 ;;  mm              1    6[COMMON] unsigned char 
  5097 ;;  yy              1    7[COMMON] unsigned char 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;  nn              1    8[COMMON] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  1    wreg      void 
  5102 ;; Registers used:
  5103 ;;		wreg, status,2, status,0, pclath, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5109 ;;      Params:         3       0       0       0       0
  5110 ;;      Locals:         1       0       0       0       0
  5111 ;;      Temps:          0       0       0       0       0
  5112 ;;      Totals:         4       0       0       0       0
  5113 ;;Total ram usage:        4 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    3
  5116 ;; This function calls:
  5117 ;;		_DS1307_Write
  5118 ;;		_I2C_Start
  5119 ;;		_I2C_Stop
  5120 ;; This function is called by:
  5121 ;;		_doMenu
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           
  5126                           ;psect for function _DS1307_SetDate
  5127  0A67                     _DS1307_SetDate:	
  5128                           
  5129                           ;incstack = 0
  5130                           ; Regs used in _DS1307_SetDate: [wreg+status,2+status,0+pclath+cstack]
  5131                           ;DS1307_SetDate@nn stored from wreg
  5132  0A67  00F8               	movwf	DS1307_SetDate@nn
  5133                           
  5134                           ;DS1307.c: 56: I2C_Start();
  5135  0A68  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  5136                           
  5137                           ;DS1307.c: 57: DS1307_Write(0xD0);
  5138  0A6D  30D0               	movlw	208
  5139  0A6E  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5140                           
  5141                           ;DS1307.c: 58: DS1307_Write(0x03);
  5142  0A73  3003               	movlw	3
  5143  0A74  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5144                           
  5145                           ;DS1307.c: 59: DS1307_Write(nn);
  5146  0A79  0878               	movf	DS1307_SetDate@nn,w
  5147  0A7A  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5148                           
  5149                           ;DS1307.c: 60: DS1307_Write(dd);
  5150  0A7F  0875               	movf	DS1307_SetDate@dd,w
  5151  0A80  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5152                           
  5153                           ;DS1307.c: 61: DS1307_Write(mm);
  5154  0A85  0876               	movf	DS1307_SetDate@mm,w
  5155  0A86  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5156                           
  5157                           ;DS1307.c: 62: DS1307_Write(yy);
  5158  0A8B  0877               	movf	DS1307_SetDate@yy,w
  5159  0A8C  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  5160                           
  5161                           ;DS1307.c: 63: I2C_Stop();
  5162  0A91  120A  158A  20FC   	fcall	_I2C_Stop
  5163  0A94  0008               	return
  5164  0A95                     __end_of_DS1307_SetDate:	
  5165                           
  5166                           	psect	text17
  5167  092E                     __ptext17:	
  5168 ;; *************** function _clearPrompt *****************
  5169 ;; Defined at:
  5170 ;;		line 141 in file "LCDTime.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;		None
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  1    wreg      void 
  5177 ;; Registers used:
  5178 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5184 ;;      Params:         0       0       0       0       0
  5185 ;;      Locals:         0       0       0       0       0
  5186 ;;      Temps:          0       0       0       0       0
  5187 ;;      Totals:         0       0       0       0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    3
  5191 ;; This function calls:
  5192 ;;		_LCDGotoXY
  5193 ;;		_LCDWriteString
  5194 ;; This function is called by:
  5195 ;;		_main
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           
  5200                           ;psect for function _clearPrompt
  5201  092E                     _clearPrompt:	
  5202                           
  5203                           ;LCDTime.c: 143: next_menu_clear = 0 ;
  5204                           
  5205                           ;incstack = 0
  5206                           ; Regs used in _clearPrompt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5207  092E  1283               	bcf	3,5	;RP0=0, select bank0
  5208  092F  1303               	bcf	3,6	;RP1=0, select bank0
  5209  0930  01E2               	clrf	_next_menu_clear
  5210  0931  01E3               	clrf	_next_menu_clear+1
  5211                           
  5212                           ;LCDTime.c: 144: menuFunction = 1 ;
  5213  0932  01E1               	clrf	_menuFunction
  5214  0933  0AE1               	incf	_menuFunction,f
  5215                           
  5216                           ;LCDTime.c: 145: LCDGotoXY(9,0);
  5217  0934  01FC               	clrf	LCDGotoXY@y
  5218  0935  3009               	movlw	9
  5219  0936  120A  158A  21C8  120A  158A  	fcall	_LCDGotoXY
  5220                           
  5221                           ;LCDTime.c: 146: LCDWriteString("       ");
  5222  093B  305F               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  5223  093C  00FC               	movwf	LCDWriteString@msg
  5224  093D  3080               	movlw	128
  5225  093E  00FD               	movwf	LCDWriteString@msg+1
  5226  093F  120A  158A  217D   	fcall	_LCDWriteString
  5227  0942  0008               	return
  5228  0943                     __end_of_clearPrompt:	
  5229                           
  5230                           	psect	text18
  5231  097D                     __ptext18:	
  5232 ;; *************** function _LCDWriteString *****************
  5233 ;; Defined at:
  5234 ;;		line 225 in file "lcd_hd44780_pic16.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  msg             2   12[COMMON] PTR const unsigned char 
  5237 ;;		 -> STR_13(6), STR_12(6), STR_11(6), STR_10(5), 
  5238 ;;		 -> STR_9(8), STR_8(8), STR_7(6), setText(5), 
  5239 ;;		 -> STR_6(8), STR_5(7), STR_4(7), STR_3(10), 
  5240 ;;		 -> STR_2(4), STR_1(17), LCDWriteInt@str(6), 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;		None
  5243 ;; Return value:  Size  Location     Type
  5244 ;;                  1    wreg      void 
  5245 ;; Registers used:
  5246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5252 ;;      Params:         2       0       0       0       0
  5253 ;;      Locals:         0       0       0       0       0
  5254 ;;      Temps:          0       0       0       0       0
  5255 ;;      Totals:         2       0       0       0       0
  5256 ;;Total ram usage:        2 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    2
  5259 ;; This function calls:
  5260 ;;		_LCDByte
  5261 ;; This function is called by:
  5262 ;;		_LCDWriteInt
  5263 ;;		_main
  5264 ;;		_clearPrompt
  5265 ;;		_doMenu
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           
  5270                           ;psect for function _LCDWriteString
  5271  097D                     _LCDWriteString:	
  5272  097D                     l1943:	
  5273                           ;lcd_hd44780_pic16.c: 227: while(*msg!='\0')
  5274                           
  5275                           ;incstack = 0
  5276                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5277                           
  5278  097D  087D               	movf	LCDWriteString@msg+1,w
  5279  097E  1283               	bcf	3,5	;RP0=0, select bank0
  5280  097F  1303               	bcf	3,6	;RP1=0, select bank0
  5281  0980  00FF               	movwf	127
  5282  0981  087C               	movf	LCDWriteString@msg,w
  5283  0982  0084               	movwf	4
  5284  0983  120A  158A  2000  120A  158A  	fcall	stringtab
  5285  0988  3A00               	xorlw	0
  5286  0989  1903               	btfsc	3,2
  5287  098A  0008               	return
  5288                           
  5289                           ;lcd_hd44780_pic16.c: 228: {
  5290                           ;lcd_hd44780_pic16.c: 229: (LCDByte(*msg,1));
  5291  098B  01F5               	clrf	LCDByte@isdata
  5292  098C  0AF5               	incf	LCDByte@isdata,f
  5293  098D  087D               	movf	LCDWriteString@msg+1,w
  5294  098E  1283               	bcf	3,5	;RP0=0, select bank0
  5295  098F  1303               	bcf	3,6	;RP1=0, select bank0
  5296  0990  00FF               	movwf	127
  5297  0991  087C               	movf	LCDWriteString@msg,w
  5298  0992  0084               	movwf	4
  5299  0993  120A  158A  2000  120A  158A  	fcall	stringtab
  5300  0998  120A  158A  2459  120A  158A  	fcall	_LCDByte
  5301                           
  5302                           ;lcd_hd44780_pic16.c: 230: msg++;
  5303  099D  3001               	movlw	1
  5304  099E  07FC               	addwf	LCDWriteString@msg,f
  5305  099F  1803               	skipnc
  5306  09A0  0AFD               	incf	LCDWriteString@msg+1,f
  5307  09A1  297D               	goto	l1943
  5308  09A2                     __end_of_LCDWriteString:	
  5309                           
  5310                           	psect	text19
  5311  09C8                     __ptext19:	
  5312 ;; *************** function _LCDGotoXY *****************
  5313 ;; Defined at:
  5314 ;;		line 332 in file "lcd_hd44780_pic16.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  x               1    wreg     unsigned char 
  5317 ;;  y               1   12[COMMON] unsigned char 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  x               1    0[BANK0 ] unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5329 ;;      Params:         1       0       0       0       0
  5330 ;;      Locals:         0       1       0       0       0
  5331 ;;      Temps:          1       0       0       0       0
  5332 ;;      Totals:         2       1       0       0       0
  5333 ;;Total ram usage:        3 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    2
  5336 ;; This function calls:
  5337 ;;		_LCDByte
  5338 ;; This function is called by:
  5339 ;;		_main
  5340 ;;		_clearPrompt
  5341 ;;		_doMenu
  5342 ;;		_showClock
  5343 ;;		_showRunningTime
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           
  5348                           ;psect for function _LCDGotoXY
  5349  09C8                     _LCDGotoXY:	
  5350                           
  5351                           ;incstack = 0
  5352                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5353                           ;LCDGotoXY@x stored from wreg
  5354  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  5355  09C9  1303               	bcf	3,6	;RP1=0, select bank0
  5356  09CA  00A0               	movwf	LCDGotoXY@x
  5357                           
  5358                           ;lcd_hd44780_pic16.c: 334: if(x>=20) return;
  5359  09CB  3014               	movlw	20
  5360  09CC  0220               	subwf	LCDGotoXY@x,w
  5361  09CD  1803               	btfsc	3,0
  5362  09CE  0008               	return
  5363  09CF  29D9               	goto	l2103
  5364  09D0                     l151:	
  5365                           ;lcd_hd44780_pic16.c: 342: case 1:
  5366                           
  5367                           ;lcd_hd44780_pic16.c: 341: break;
  5368                           
  5369                           ;lcd_hd44780_pic16.c: 339: {
  5370                           ;lcd_hd44780_pic16.c: 340: case 0:
  5371                           
  5372                           ;lcd_hd44780_pic16.c: 338: switch(y)
  5373                           
  5374                           
  5375                           ;lcd_hd44780_pic16.c: 343: x|=0b01000000;
  5376  09D0  1720               	bsf	LCDGotoXY@x,6
  5377                           
  5378                           ;lcd_hd44780_pic16.c: 344: break;
  5379  09D1  29E7               	goto	l150
  5380  09D2                     l2097:	
  5381                           ;lcd_hd44780_pic16.c: 345: case 2:
  5382                           
  5383                           
  5384                           ;lcd_hd44780_pic16.c: 346: x+=0x14;
  5385  09D2  3014               	movlw	20
  5386  09D3  29D5               	goto	L6
  5387  09D4                     l2099:	
  5388                           ;lcd_hd44780_pic16.c: 348: case 3:
  5389                           
  5390                           ;lcd_hd44780_pic16.c: 347: break;
  5391                           
  5392                           
  5393                           ;lcd_hd44780_pic16.c: 349: x+=0x54;
  5394  09D4  3054               	movlw	84
  5395  09D5                     L6:	
  5396  09D5  00FD               	movwf	??_LCDGotoXY
  5397  09D6  087D               	movf	??_LCDGotoXY,w
  5398  09D7  07A0               	addwf	LCDGotoXY@x,f
  5399                           
  5400                           ;lcd_hd44780_pic16.c: 351: }
  5401                           
  5402                           ;lcd_hd44780_pic16.c: 350: break;
  5403  09D8  29E7               	goto	l150
  5404  09D9                     l2103:	
  5405  09D9  087C               	movf	LCDGotoXY@y,w
  5406                           
  5407                           ; Switch size 1, requested type "space"
  5408                           ; Number of cases is 4, Range of values is 0 to 3
  5409                           ; switch strategies available:
  5410                           ; Name         Instructions Cycles
  5411                           ; simple_byte           13     7 (average)
  5412                           ; direct_byte           20     8 (fixed)
  5413                           ; jumptable            260     6 (fixed)
  5414                           ;	Chosen strategy is simple_byte
  5415  09DA  3A00               	xorlw	0	; case 0
  5416  09DB  1903               	skipnz
  5417  09DC  29E7               	goto	l150
  5418  09DD  3A01               	xorlw	1	; case 1
  5419  09DE  1903               	skipnz
  5420  09DF  29D0               	goto	l151
  5421  09E0  3A03               	xorlw	3	; case 2
  5422  09E1  1903               	skipnz
  5423  09E2  29D2               	goto	l2097
  5424  09E3  3A01               	xorlw	1	; case 3
  5425  09E4  1903               	skipnz
  5426  09E5  29D4               	goto	l2099
  5427  09E6  29E7               	goto	l150
  5428  09E7                     l150:	
  5429                           
  5430                           ;lcd_hd44780_pic16.c: 373: x|=0b10000000;
  5431  09E7  17A0               	bsf	LCDGotoXY@x,7
  5432                           
  5433                           ;lcd_hd44780_pic16.c: 374: (LCDByte(x,0));
  5434  09E8  01F5               	clrf	LCDByte@isdata
  5435  09E9  0820               	movf	LCDGotoXY@x,w
  5436  09EA  120A  158A  2459   	fcall	_LCDByte
  5437  09ED  0008               	return
  5438  09EE                     __end_of_LCDGotoXY:	
  5439                           
  5440                           	psect	text20
  5441  0AFB                     __ptext20:	
  5442 ;; *************** function _LCDInit *****************
  5443 ;; Defined at:
  5444 ;;		line 167 in file "lcd_hd44780_pic16.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;  style           1    wreg     unsigned char 
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;  style           1    0[BANK0 ] unsigned char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      void 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0, pclath, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5458 ;;      Params:         0       0       0       0       0
  5459 ;;      Locals:         0       1       0       0       0
  5460 ;;      Temps:          2       0       0       0       0
  5461 ;;      Totals:         2       1       0       0       0
  5462 ;;Total ram usage:        3 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    2
  5465 ;; This function calls:
  5466 ;;		_LCDBusyLoop
  5467 ;;		_LCDByte
  5468 ;; This function is called by:
  5469 ;;		_main
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           
  5474                           ;psect for function _LCDInit
  5475  0AFB                     _LCDInit:	
  5476                           
  5477                           ;incstack = 0
  5478                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  5479                           ;LCDInit@style stored from wreg
  5480  0AFB  1283               	bcf	3,5	;RP0=0, select bank0
  5481  0AFC  1303               	bcf	3,6	;RP1=0, select bank0
  5482  0AFD  00A0               	movwf	LCDInit@style
  5483                           
  5484                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((30)*(4000000/4000.0)));
  5485  0AFE  3027               	movlw	39
  5486  0AFF  00FD               	movwf	??_LCDInit+1
  5487  0B00  30F5               	movlw	245
  5488  0B01  00FC               	movwf	??_LCDInit
  5489  0B02                     u2667:	
  5490  0B02  0BFC               	decfsz	??_LCDInit,f
  5491  0B03  2B02               	goto	u2667
  5492  0B04  0BFD               	decfsz	??_LCDInit+1,f
  5493  0B05  2B02               	goto	u2667
  5494                           
  5495                           ;lcd_hd44780_pic16.c: 186: TRISD&=(~(0x0F<<4));
  5496  0B06  300F               	movlw	15
  5497  0B07  00FC               	movwf	??_LCDInit
  5498  0B08  087C               	movf	??_LCDInit,w
  5499  0B09  1683               	bsf	3,5	;RP0=1, select bank1
  5500  0B0A  1303               	bcf	3,6	;RP1=0, select bank1
  5501  0B0B  0588               	andwf	8,f	;volatile
  5502                           
  5503                           ;lcd_hd44780_pic16.c: 188: TRISBbits.TRISB5=0;
  5504  0B0C  1286               	bcf	6,5	;volatile
  5505                           
  5506                           ;lcd_hd44780_pic16.c: 189: TRISDbits.TRISD3=0;
  5507  0B0D  1188               	bcf	8,3	;volatile
  5508                           
  5509                           ;lcd_hd44780_pic16.c: 190: TRISDbits.TRISD2=0;
  5510  0B0E  1108               	bcf	8,2	;volatile
  5511                           
  5512                           ;lcd_hd44780_pic16.c: 192: PORTD&=(~(0x0F<<4));
  5513  0B0F  300F               	movlw	15
  5514  0B10  00FC               	movwf	??_LCDInit
  5515  0B11  087C               	movf	??_LCDInit,w
  5516  0B12  1283               	bcf	3,5	;RP0=0, select bank0
  5517  0B13  1303               	bcf	3,6	;RP1=0, select bank0
  5518  0B14  0588               	andwf	8,f	;volatile
  5519                           
  5520                           ;lcd_hd44780_pic16.c: 194: (RB5=0);
  5521  0B15  1286               	bcf	6,5	;volatile
  5522                           
  5523                           ;lcd_hd44780_pic16.c: 195: (RD2=0);
  5524  0B16  1108               	bcf	8,2	;volatile
  5525                           
  5526                           ;lcd_hd44780_pic16.c: 196: (RD3=0);
  5527  0B17  1188               	bcf	8,3	;volatile
  5528                           
  5529                           ;lcd_hd44780_pic16.c: 201: (RB5=1);
  5530                           
  5531                           ;lcd_hd44780_pic16.c: 199: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5532  0B18  1283               	bcf	3,5	;RP0=0, select bank0
  5533  0B19  1303               	bcf	3,6	;RP1=0, select bank0
  5534  0B1A  1686               	bsf	6,5	;volatile
  5535                           
  5536                           ;lcd_hd44780_pic16.c: 202: PORTD|=((0b00000010)<<4);
  5537  0B1B  1688               	bsf	8,5	;volatile
  5538                           
  5539                           ;lcd_hd44780_pic16.c: 203: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5540  0B1C  0000               	nop
  5541                           
  5542                           ;lcd_hd44780_pic16.c: 204: (RB5=0);
  5543  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  5544  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  5545  0B1F  1286               	bcf	6,5	;volatile
  5546                           
  5547                           ;lcd_hd44780_pic16.c: 205: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5548  0B20  0000               	nop
  5549                           
  5550                           ;lcd_hd44780_pic16.c: 208: LCDBusyLoop();
  5551  0B21  120A  158A  2558  120A  158A  	fcall	_LCDBusyLoop
  5552                           
  5553                           ;lcd_hd44780_pic16.c: 213: (LCDByte(0b00101000,0));
  5554  0B26  01F5               	clrf	LCDByte@isdata
  5555  0B27  3028               	movlw	40
  5556  0B28  120A  158A  2459  120A  158A  	fcall	_LCDByte
  5557                           
  5558                           ;lcd_hd44780_pic16.c: 214: (LCDByte(0b00001100|style,0));
  5559  0B2D  01F5               	clrf	LCDByte@isdata
  5560  0B2E  1283               	bcf	3,5	;RP0=0, select bank0
  5561  0B2F  1303               	bcf	3,6	;RP1=0, select bank0
  5562  0B30  0820               	movf	LCDInit@style,w
  5563  0B31  380C               	iorlw	12
  5564  0B32  120A  158A  2459   	fcall	_LCDByte
  5565  0B35  0008               	return
  5566  0B36                     __end_of_LCDInit:	
  5567                           
  5568                           	psect	text21
  5569  0C59                     __ptext21:	
  5570 ;; *************** function _LCDByte *****************
  5571 ;; Defined at:
  5572 ;;		line 54 in file "lcd_hd44780_pic16.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  c               1    wreg     unsigned char 
  5575 ;;  isdata          1    5[COMMON] unsigned char 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  c               1   10[COMMON] unsigned char 
  5578 ;;  temp            1   11[COMMON] unsigned char 
  5579 ;;  ln              1    9[COMMON] unsigned char 
  5580 ;;  hn              1    8[COMMON] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      void 
  5583 ;; Registers used:
  5584 ;;		wreg, status,2, status,0, pclath, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5590 ;;      Params:         1       0       0       0       0
  5591 ;;      Locals:         4       0       0       0       0
  5592 ;;      Temps:          2       0       0       0       0
  5593 ;;      Totals:         7       0       0       0       0
  5594 ;;Total ram usage:        7 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    1
  5597 ;; This function calls:
  5598 ;;		_LCDBusyLoop
  5599 ;; This function is called by:
  5600 ;;		_LCDInit
  5601 ;;		_LCDWriteString
  5602 ;;		_LCDGotoXY
  5603 ;;		_main
  5604 ;;		_doMenu
  5605 ;;		_showTime
  5606 ;;		_showDate
  5607 ;;		_showRunningTime
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _LCDByte
  5613  0C59                     _LCDByte:	
  5614                           
  5615                           ;incstack = 0
  5616                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  5617                           ;LCDByte@c stored from wreg
  5618  0C59  00FA               	movwf	LCDByte@c
  5619                           
  5620                           ;lcd_hd44780_pic16.c: 63: uint8_t hn,ln;
  5621                           ;lcd_hd44780_pic16.c: 64: uint8_t temp;
  5622                           ;lcd_hd44780_pic16.c: 66: hn=c>>4;
  5623  0C5A  087A               	movf	LCDByte@c,w
  5624  0C5B  00F6               	movwf	??_LCDByte
  5625  0C5C  3004               	movlw	4
  5626  0C5D                     u1355:	
  5627  0C5D  1003               	clrc
  5628  0C5E  0CF6               	rrf	??_LCDByte,f
  5629  0C5F  3EFF               	addlw	-1
  5630  0C60  1D03               	skipz
  5631  0C61  2C5D               	goto	u1355
  5632  0C62  0876               	movf	??_LCDByte,w
  5633  0C63  00F7               	movwf	??_LCDByte+1
  5634  0C64  0877               	movf	??_LCDByte+1,w
  5635  0C65  00F8               	movwf	LCDByte@hn
  5636                           
  5637                           ;lcd_hd44780_pic16.c: 67: ln=(c & 0x0F);
  5638  0C66  087A               	movf	LCDByte@c,w
  5639  0C67  390F               	andlw	15
  5640  0C68  00F6               	movwf	??_LCDByte
  5641  0C69  0876               	movf	??_LCDByte,w
  5642  0C6A  00F9               	movwf	LCDByte@ln
  5643                           
  5644                           ;lcd_hd44780_pic16.c: 69: if(isdata==0)
  5645  0C6B  0875               	movf	LCDByte@isdata,w
  5646  0C6C  1D03               	btfss	3,2
  5647  0C6D  2C72               	goto	l113
  5648                           
  5649                           ;lcd_hd44780_pic16.c: 70: (RD3=0);
  5650  0C6E  1283               	bcf	3,5	;RP0=0, select bank0
  5651  0C6F  1303               	bcf	3,6	;RP1=0, select bank0
  5652  0C70  1188               	bcf	8,3	;volatile
  5653  0C71  2C75               	goto	l114
  5654  0C72                     l113:	
  5655                           
  5656                           ;lcd_hd44780_pic16.c: 71: else
  5657                           ;lcd_hd44780_pic16.c: 72: (RD3=1);
  5658  0C72  1283               	bcf	3,5	;RP0=0, select bank0
  5659  0C73  1303               	bcf	3,6	;RP1=0, select bank0
  5660  0C74  1588               	bsf	8,3	;volatile
  5661  0C75                     l114:	
  5662                           
  5663                           ;lcd_hd44780_pic16.c: 74: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5664                           ;lcd_hd44780_pic16.c: 76: (RB5=1);
  5665  0C75  1283               	bcf	3,5	;RP0=0, select bank0
  5666  0C76  1303               	bcf	3,6	;RP1=0, select bank0
  5667  0C77  1686               	bsf	6,5	;volatile
  5668                           
  5669                           ;lcd_hd44780_pic16.c: 80: temp=(PORTD & (~(0X0F<<4)))|((hn<<4));
  5670  0C78  0878               	movf	LCDByte@hn,w
  5671  0C79  00F6               	movwf	??_LCDByte
  5672  0C7A  3004               	movlw	4
  5673  0C7B                     u1375:	
  5674  0C7B  1003               	clrc
  5675  0C7C  0DF6               	rlf	??_LCDByte,f
  5676  0C7D  3EFF               	addlw	-1
  5677  0C7E  1D03               	skipz
  5678  0C7F  2C7B               	goto	u1375
  5679  0C80  0808               	movf	8,w	;volatile
  5680  0C81  390F               	andlw	15
  5681  0C82  0476               	iorwf	??_LCDByte,w
  5682  0C83  00F7               	movwf	??_LCDByte+1
  5683  0C84  0877               	movf	??_LCDByte+1,w
  5684  0C85  00FB               	movwf	LCDByte@temp
  5685                           
  5686                           ;lcd_hd44780_pic16.c: 81: PORTD=temp;
  5687  0C86  087B               	movf	LCDByte@temp,w
  5688  0C87  0088               	movwf	8	;volatile
  5689                           
  5690                           ;lcd_hd44780_pic16.c: 83: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5691  0C88  0000               	nop
  5692                           
  5693                           ;lcd_hd44780_pic16.c: 87: (RB5=0);
  5694  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  5695  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  5696  0C8B  1286               	bcf	6,5	;volatile
  5697                           
  5698                           ;lcd_hd44780_pic16.c: 89: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5699  0C8C  0000               	nop
  5700                           
  5701                           ;lcd_hd44780_pic16.c: 92: (RB5=1);
  5702  0C8D  1283               	bcf	3,5	;RP0=0, select bank0
  5703  0C8E  1303               	bcf	3,6	;RP1=0, select bank0
  5704  0C8F  1686               	bsf	6,5	;volatile
  5705                           
  5706                           ;lcd_hd44780_pic16.c: 94: temp=(PORTD & (~(0X0F<<4)))|((ln<<4));
  5707  0C90  0879               	movf	LCDByte@ln,w
  5708  0C91  00F6               	movwf	??_LCDByte
  5709  0C92  3004               	movlw	4
  5710  0C93                     u1385:	
  5711  0C93  1003               	clrc
  5712  0C94  0DF6               	rlf	??_LCDByte,f
  5713  0C95  3EFF               	addlw	-1
  5714  0C96  1D03               	skipz
  5715  0C97  2C93               	goto	u1385
  5716  0C98  0808               	movf	8,w	;volatile
  5717  0C99  390F               	andlw	15
  5718  0C9A  0476               	iorwf	??_LCDByte,w
  5719  0C9B  00F7               	movwf	??_LCDByte+1
  5720  0C9C  0877               	movf	??_LCDByte+1,w
  5721  0C9D  00FB               	movwf	LCDByte@temp
  5722                           
  5723                           ;lcd_hd44780_pic16.c: 96: PORTD=temp;
  5724  0C9E  087B               	movf	LCDByte@temp,w
  5725  0C9F  0088               	movwf	8	;volatile
  5726                           
  5727                           ;lcd_hd44780_pic16.c: 98: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5728  0CA0  0000               	nop
  5729                           
  5730                           ;lcd_hd44780_pic16.c: 102: (RB5=0);
  5731  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  5732  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  5733  0CA3  1286               	bcf	6,5	;volatile
  5734                           
  5735                           ;lcd_hd44780_pic16.c: 104: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5736  0CA4  0000               	nop
  5737                           
  5738                           ;lcd_hd44780_pic16.c: 106: LCDBusyLoop();
  5739  0CA5  120A  158A  2558   	fcall	_LCDBusyLoop
  5740  0CA8  0008               	return
  5741  0CA9                     __end_of_LCDByte:	
  5742                           
  5743                           	psect	text22
  5744  0D58                     __ptext22:	
  5745 ;; *************** function _LCDBusyLoop *****************
  5746 ;; Defined at:
  5747 ;;		line 109 in file "lcd_hd44780_pic16.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;		None
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;  status          1    4[COMMON] unsigned char 
  5752 ;;  temp            1    3[COMMON] unsigned char 
  5753 ;;  busy            1    2[COMMON] unsigned char 
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  1    wreg      void 
  5756 ;; Registers used:
  5757 ;;		wreg, status,2, status,0
  5758 ;; Tracked objects:
  5759 ;;		On entry : 0/0
  5760 ;;		On exit  : 0/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5763 ;;      Params:         0       0       0       0       0
  5764 ;;      Locals:         3       0       0       0       0
  5765 ;;      Temps:          2       0       0       0       0
  5766 ;;      Totals:         5       0       0       0       0
  5767 ;;Total ram usage:        5 bytes
  5768 ;; Hardware stack levels used:    1
  5769 ;; This function calls:
  5770 ;;		Nothing
  5771 ;; This function is called by:
  5772 ;;		_LCDByte
  5773 ;;		_LCDInit
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           
  5778                           ;psect for function _LCDBusyLoop
  5779  0D58                     _LCDBusyLoop:	
  5780                           
  5781                           ;lcd_hd44780_pic16.c: 113: uint8_t busy,status=0x00,temp;
  5782                           
  5783                           ;incstack = 0
  5784                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  5785  0D58  01F4               	clrf	LCDBusyLoop@status
  5786                           
  5787                           ;lcd_hd44780_pic16.c: 116: TRISD|=(0x0f<<4);
  5788  0D59  30F0               	movlw	240
  5789  0D5A  00F0               	movwf	??_LCDBusyLoop
  5790  0D5B  0870               	movf	??_LCDBusyLoop,w
  5791  0D5C  1683               	bsf	3,5	;RP0=1, select bank1
  5792  0D5D  1303               	bcf	3,6	;RP1=0, select bank1
  5793  0D5E  0488               	iorwf	8,f	;volatile
  5794                           
  5795                           ;lcd_hd44780_pic16.c: 119: (RD2=1);
  5796  0D5F  1283               	bcf	3,5	;RP0=0, select bank0
  5797  0D60  1303               	bcf	3,6	;RP1=0, select bank0
  5798  0D61  1508               	bsf	8,2	;volatile
  5799                           
  5800                           ;lcd_hd44780_pic16.c: 120: (RD3=0);
  5801  0D62  1188               	bcf	8,3	;volatile
  5802  0D63                     l1831:	
  5803                           ;lcd_hd44780_pic16.c: 127: do
  5804                           
  5805                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5806                           
  5807                           
  5808                           ;lcd_hd44780_pic16.c: 128: {
  5809                           ;lcd_hd44780_pic16.c: 130: (RB5=1);
  5810  0D63  1283               	bcf	3,5	;RP0=0, select bank0
  5811  0D64  1303               	bcf	3,6	;RP1=0, select bank0
  5812  0D65  1686               	bsf	6,5	;volatile
  5813                           
  5814                           ;lcd_hd44780_pic16.c: 135: status=(PORTD>>4);
  5815                           
  5816                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5817  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  5818  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  5819  0D68  0808               	movf	8,w	;volatile
  5820  0D69  00F0               	movwf	??_LCDBusyLoop
  5821  0D6A  3004               	movlw	4
  5822  0D6B                     u1315:	
  5823  0D6B  1003               	clrc
  5824  0D6C  0CF0               	rrf	??_LCDBusyLoop,f
  5825  0D6D  3EFF               	addlw	-1
  5826  0D6E  1D03               	skipz
  5827  0D6F  2D6B               	goto	u1315
  5828  0D70  0870               	movf	??_LCDBusyLoop,w
  5829  0D71  00F1               	movwf	??_LCDBusyLoop+1
  5830  0D72  0871               	movf	??_LCDBusyLoop+1,w
  5831  0D73  00F4               	movwf	LCDBusyLoop@status
  5832                           
  5833                           ;lcd_hd44780_pic16.c: 136: status=status<<4;
  5834  0D74  0874               	movf	LCDBusyLoop@status,w
  5835  0D75  00F0               	movwf	??_LCDBusyLoop
  5836  0D76  3003               	movlw	3
  5837  0D77                     u1325:	
  5838  0D77  1003               	clrc
  5839  0D78  0DF0               	rlf	??_LCDBusyLoop,f
  5840  0D79  3EFF               	addlw	-1
  5841  0D7A  1D03               	skipz
  5842  0D7B  2D77               	goto	u1325
  5843  0D7C  1003               	clrc
  5844  0D7D  0D70               	rlf	??_LCDBusyLoop,w
  5845  0D7E  00F1               	movwf	??_LCDBusyLoop+1
  5846  0D7F  0871               	movf	??_LCDBusyLoop+1,w
  5847  0D80  00F4               	movwf	LCDBusyLoop@status
  5848                           
  5849                           ;lcd_hd44780_pic16.c: 141: (RB5=0);
  5850                           
  5851                           ;lcd_hd44780_pic16.c: 138: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5852  0D81  1283               	bcf	3,5	;RP0=0, select bank0
  5853  0D82  1303               	bcf	3,6	;RP1=0, select bank0
  5854  0D83  1286               	bcf	6,5	;volatile
  5855                           
  5856                           ;lcd_hd44780_pic16.c: 142: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5857  0D84  0000               	nop
  5858                           
  5859                           ;lcd_hd44780_pic16.c: 144: (RB5=1);
  5860  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  5861  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  5862  0D87  1686               	bsf	6,5	;volatile
  5863                           
  5864                           ;lcd_hd44780_pic16.c: 147: temp=(PORTD>>4);
  5865                           
  5866                           ;lcd_hd44780_pic16.c: 145: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5867  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  5868  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  5869  0D8A  0808               	movf	8,w	;volatile
  5870  0D8B  00F0               	movwf	??_LCDBusyLoop
  5871  0D8C  3004               	movlw	4
  5872  0D8D                     u1335:	
  5873  0D8D  1003               	clrc
  5874  0D8E  0CF0               	rrf	??_LCDBusyLoop,f
  5875  0D8F  3EFF               	addlw	-1
  5876  0D90  1D03               	skipz
  5877  0D91  2D8D               	goto	u1335
  5878  0D92  0870               	movf	??_LCDBusyLoop,w
  5879  0D93  00F1               	movwf	??_LCDBusyLoop+1
  5880  0D94  0871               	movf	??_LCDBusyLoop+1,w
  5881  0D95  00F3               	movwf	LCDBusyLoop@temp
  5882                           
  5883                           ;lcd_hd44780_pic16.c: 148: temp&=0x0F;
  5884  0D96  300F               	movlw	15
  5885  0D97  00F0               	movwf	??_LCDBusyLoop
  5886  0D98  0870               	movf	??_LCDBusyLoop,w
  5887  0D99  05F3               	andwf	LCDBusyLoop@temp,f
  5888                           
  5889                           ;lcd_hd44780_pic16.c: 150: status=status|temp;
  5890  0D9A  0874               	movf	LCDBusyLoop@status,w
  5891  0D9B  0473               	iorwf	LCDBusyLoop@temp,w
  5892  0D9C  00F0               	movwf	??_LCDBusyLoop
  5893  0D9D  0870               	movf	??_LCDBusyLoop,w
  5894  0D9E  00F4               	movwf	LCDBusyLoop@status
  5895                           
  5896                           ;lcd_hd44780_pic16.c: 152: busy=status & 0b10000000;
  5897  0D9F  0874               	movf	LCDBusyLoop@status,w
  5898  0DA0  3980               	andlw	128
  5899  0DA1  00F0               	movwf	??_LCDBusyLoop
  5900  0DA2  0870               	movf	??_LCDBusyLoop,w
  5901  0DA3  00F2               	movwf	LCDBusyLoop@busy
  5902                           
  5903                           ;lcd_hd44780_pic16.c: 156: (RB5=0);
  5904                           
  5905                           ;lcd_hd44780_pic16.c: 154: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5906  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
  5907  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
  5908  0DA6  1286               	bcf	6,5	;volatile
  5909                           
  5910                           ;lcd_hd44780_pic16.c: 157: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5911  0DA7  0000               	nop
  5912                           
  5913                           ;lcd_hd44780_pic16.c: 158: }while(busy);
  5914  0DA8  0872               	movf	LCDBusyLoop@busy,w
  5915  0DA9  1D03               	btfss	3,2
  5916  0DAA  2D63               	goto	l1831
  5917                           
  5918                           ;lcd_hd44780_pic16.c: 160: (RD2=0);
  5919  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  5920  0DAC  1303               	bcf	3,6	;RP1=0, select bank0
  5921  0DAD  1108               	bcf	8,2	;volatile
  5922                           
  5923                           ;lcd_hd44780_pic16.c: 163: TRISD&=(~(0x0F<<4));
  5924  0DAE  300F               	movlw	15
  5925  0DAF  00F0               	movwf	??_LCDBusyLoop
  5926  0DB0  0870               	movf	??_LCDBusyLoop,w
  5927  0DB1  1683               	bsf	3,5	;RP0=1, select bank1
  5928  0DB2  1303               	bcf	3,6	;RP1=0, select bank1
  5929  0DB3  0588               	andwf	8,f	;volatile
  5930  0DB4  0008               	return
  5931  0DB5                     __end_of_LCDBusyLoop:	
  5932                           
  5933                           	psect	text23
  5934  08DA                     __ptext23:	
  5935 ;; *************** function _I2C_Init *****************
  5936 ;; Defined at:
  5937 ;;		line 3 in file "i2c.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;		None
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      void 
  5944 ;; Registers used:
  5945 ;;		None
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5951 ;;      Params:         0       0       0       0       0
  5952 ;;      Locals:         0       0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0
  5954 ;;      Totals:         0       0       0       0       0
  5955 ;;Total ram usage:        0 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; This function calls:
  5958 ;;		Nothing
  5959 ;; This function is called by:
  5960 ;;		_main
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           
  5965                           ;psect for function _I2C_Init
  5966  08DA                     _I2C_Init:	
  5967                           
  5968                           ;i2c.c: 5: TRISD1 = 0 ;
  5969                           
  5970                           ;incstack = 0
  5971                           ; Regs used in _I2C_Init: []
  5972  08DA  1683               	bsf	3,5	;RP0=1, select bank1
  5973  08DB  1303               	bcf	3,6	;RP1=0, select bank1
  5974  08DC  1088               	bcf	8,1	;volatile
  5975                           
  5976                           ;i2c.c: 6: TRISD0 = 0 ;
  5977  08DD  1008               	bcf	8,0	;volatile
  5978  08DE  0008               	return
  5979  08DF                     __end_of_I2C_Init:	
  5980                           
  5981                           	psect	text24
  5982  0DB5                     __ptext24:	
  5983 ;; *************** function _DS1307_readRam *****************
  5984 ;; Defined at:
  5985 ;;		line 95 in file "DS1307.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  ptr             1    wreg     PTR unsigned char 
  5988 ;;		 -> runningTime(2), 
  5989 ;;  offset          2    5[COMMON] int 
  5990 ;;  length          2    7[COMMON] int 
  5991 ;; Auto vars:     Size  Location     Type
  5992 ;;  ptr             1   11[COMMON] PTR unsigned char 
  5993 ;;		 -> runningTime(2), 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      void 
  5996 ;; Registers used:
  5997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6003 ;;      Params:         4       0       0       0       0
  6004 ;;      Locals:         1       0       0       0       0
  6005 ;;      Temps:          2       0       0       0       0
  6006 ;;      Totals:         7       0       0       0       0
  6007 ;;Total ram usage:        7 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    3
  6010 ;; This function calls:
  6011 ;;		_DS1307_Read
  6012 ;;		_DS1307_Write
  6013 ;;		_I2C_Ack
  6014 ;;		_I2C_NoAck
  6015 ;;		_I2C_Start
  6016 ;;		_I2C_Stop
  6017 ;; This function is called by:
  6018 ;;		_main
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function _DS1307_readRam
  6024  0DB5                     _DS1307_readRam:	
  6025                           
  6026                           ;incstack = 0
  6027                           ; Regs used in _DS1307_readRam: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6028                           ;DS1307_readRam@ptr stored from wreg
  6029  0DB5  00FB               	movwf	DS1307_readRam@ptr
  6030                           
  6031                           ;DS1307.c: 97: I2C_Start();
  6032  0DB6  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  6033                           
  6034                           ;DS1307.c: 98: DS1307_Write(0xD0);
  6035  0DBB  30D0               	movlw	208
  6036  0DBC  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  6037                           
  6038                           ;DS1307.c: 99: DS1307_Write(0x08 + offset);
  6039  0DC1  0875               	movf	DS1307_readRam@offset,w
  6040  0DC2  3E08               	addlw	8
  6041  0DC3  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  6042                           
  6043                           ;DS1307.c: 100: I2C_Stop();
  6044  0DC8  120A  158A  20FC  120A  158A  	fcall	_I2C_Stop
  6045                           
  6046                           ;DS1307.c: 101: I2C_Start();
  6047  0DCD  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  6048                           
  6049                           ;DS1307.c: 102: DS1307_Write(0xD1);
  6050  0DD2  30D1               	movlw	209
  6051  0DD3  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  6052  0DD8                     l2341:	
  6053                           ;DS1307.c: 103: while(length-- > 1)
  6054                           
  6055  0DD8  0878               	movf	DS1307_readRam@length+1,w
  6056  0DD9  00FA               	movwf	??_DS1307_readRam+1
  6057  0DDA  03F7               	decf	DS1307_readRam@length,f
  6058  0DDB  0A77               	incf	DS1307_readRam@length,w
  6059  0DDC  00F9               	movwf	??_DS1307_readRam
  6060  0DDD  1903               	skipnz
  6061  0DDE  03F8               	decf	DS1307_readRam@length+1,f
  6062  0DDF  087A               	movf	??_DS1307_readRam+1,w
  6063  0DE0  3A80               	xorlw	128
  6064  0DE1  00FF               	movwf	127
  6065  0DE2  3080               	movlw	128
  6066  0DE3  027F               	subwf	127,w
  6067  0DE4  1D03               	skipz
  6068  0DE5  2DE8               	goto	u1855
  6069  0DE6  3002               	movlw	2
  6070  0DE7  0279               	subwf	??_DS1307_readRam,w
  6071  0DE8                     u1855:	
  6072  0DE8  1C03               	btfss	3,0
  6073  0DE9  2DFA               	goto	l2343
  6074                           
  6075                           ;DS1307.c: 104: *ptr++ = DS1307_Read(); I2C_Ack();
  6076  0DEA  120A  158A  20D6  120A  158A  	fcall	_DS1307_Read
  6077  0DEF  00F9               	movwf	??_DS1307_readRam
  6078  0DF0  087B               	movf	DS1307_readRam@ptr,w
  6079  0DF1  0084               	movwf	4
  6080  0DF2  0879               	movf	??_DS1307_readRam,w
  6081  0DF3  1383               	bcf	3,7	;select IRP bank0
  6082  0DF4  0080               	movwf	0
  6083  0DF5  3001               	movlw	1
  6084  0DF6  00F9               	movwf	??_DS1307_readRam
  6085  0DF7  0879               	movf	??_DS1307_readRam,w
  6086  0DF8  07FB               	addwf	DS1307_readRam@ptr,f
  6087  0DF9  2DD8               	goto	l2341
  6088  0DFA                     l2343:	
  6089  0DFA  120A  158A  20F2  120A  158A  	fcall	_I2C_Ack
  6090                           
  6091                           ;DS1307.c: 105: *ptr = DS1307_Read(); I2C_NoAck();
  6092  0DFF  120A  158A  20D6  120A  158A  	fcall	_DS1307_Read
  6093  0E04  00F9               	movwf	??_DS1307_readRam
  6094  0E05  087B               	movf	DS1307_readRam@ptr,w
  6095  0E06  0084               	movwf	4
  6096  0E07  0879               	movf	??_DS1307_readRam,w
  6097  0E08  1383               	bcf	3,7	;select IRP bank0
  6098  0E09  0080               	movwf	0
  6099  0E0A  120A  158A  20E8  120A  158A  	fcall	_I2C_NoAck
  6100                           
  6101                           ;DS1307.c: 106: I2C_Stop();
  6102  0E0F  120A  158A  20FC   	fcall	_I2C_Stop
  6103  0E12  0008               	return
  6104  0E13                     __end_of_DS1307_readRam:	
  6105                           
  6106                           	psect	text25
  6107  08F2                     __ptext25:	
  6108 ;; *************** function _I2C_Ack *****************
  6109 ;; Defined at:
  6110 ;;		line 81 in file "i2c.c"
  6111 ;; Parameters:    Size  Location     Type
  6112 ;;		None
  6113 ;; Auto vars:     Size  Location     Type
  6114 ;;		None
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  1    wreg      void 
  6117 ;; Registers used:
  6118 ;;		status,2, status,0, pclath, cstack
  6119 ;; Tracked objects:
  6120 ;;		On entry : 0/0
  6121 ;;		On exit  : 0/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6124 ;;      Params:         0       0       0       0       0
  6125 ;;      Locals:         0       0       0       0       0
  6126 ;;      Temps:          0       0       0       0       0
  6127 ;;      Totals:         0       0       0       0       0
  6128 ;;Total ram usage:        0 bytes
  6129 ;; Hardware stack levels used:    1
  6130 ;; Hardware stack levels required when called:    1
  6131 ;; This function calls:
  6132 ;;		_I2C_Clock
  6133 ;; This function is called by:
  6134 ;;		_DS1307_GetTime
  6135 ;;		_DS1307_GetDate
  6136 ;;		_DS1307_readRam
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           
  6141                           ;psect for function _I2C_Ack
  6142  08F2                     _I2C_Ack:	
  6143                           
  6144                           ;i2c.c: 83: RD0 = 0;
  6145                           
  6146                           ;incstack = 0
  6147                           ; Regs used in _I2C_Ack: [status,2+status,0+pclath+cstack]
  6148  08F2  1283               	bcf	3,5	;RP0=0, select bank0
  6149  08F3  1303               	bcf	3,6	;RP1=0, select bank0
  6150  08F4  1008               	bcf	8,0	;volatile
  6151                           
  6152                           ;i2c.c: 84: I2C_Clock();
  6153  08F5  120A  158A  20DF   	fcall	_I2C_Clock
  6154                           
  6155                           ;i2c.c: 85: RD0 = 1;
  6156  08F8  1283               	bcf	3,5	;RP0=0, select bank0
  6157  08F9  1303               	bcf	3,6	;RP1=0, select bank0
  6158  08FA  1408               	bsf	8,0	;volatile
  6159  08FB  0008               	return
  6160  08FC                     __end_of_I2C_Ack:	
  6161                           
  6162                           	psect	text26
  6163  0C09                     __ptext26:	
  6164 ;; *************** function _DS1307_Init *****************
  6165 ;; Defined at:
  6166 ;;		line 4 in file "DS1307.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;  s               1    6[COMMON] unsigned char 
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  2   20[None  ] int 
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0, pclath, cstack
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6180 ;;      Params:         0       0       0       0       0
  6181 ;;      Locals:         1       0       0       0       0
  6182 ;;      Temps:          1       0       0       0       0
  6183 ;;      Totals:         2       0       0       0       0
  6184 ;;Total ram usage:        2 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    3
  6187 ;; This function calls:
  6188 ;;		_DS1307_Read
  6189 ;;		_DS1307_Write
  6190 ;;		_I2C_NoAck
  6191 ;;		_I2C_Start
  6192 ;;		_I2C_Stop
  6193 ;; This function is called by:
  6194 ;;		_main
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           
  6199                           ;psect for function _DS1307_Init
  6200  0C09                     _DS1307_Init:	
  6201                           
  6202                           ;DS1307.c: 6: unsigned char s = 0 ;
  6203                           
  6204                           ;incstack = 0
  6205                           ; Regs used in _DS1307_Init: [wreg+status,2+status,0+pclath+cstack]
  6206  0C09  01F6               	clrf	DS1307_Init@s
  6207                           
  6208                           ;DS1307.c: 8: I2C_Start();
  6209  0C0A  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  6210                           
  6211                           ;DS1307.c: 9: DS1307_Write(0xd0);
  6212  0C0F  30D0               	movlw	208
  6213  0C10  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  6214                           
  6215                           ;DS1307.c: 10: DS1307_Write(0x00);
  6216  0C15  3000               	movlw	0
  6217  0C16  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  6218                           
  6219                           ;DS1307.c: 11: I2C_Start();
  6220  0C1B  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  6221                           
  6222                           ;DS1307.c: 12: DS1307_Write(0xd1);
  6223  0C20  30D1               	movlw	209
  6224  0C21  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  6225                           
  6226                           ;DS1307.c: 13: s = DS1307_Read();
  6227  0C26  120A  158A  20D6  120A  158A  	fcall	_DS1307_Read
  6228  0C2B  00F5               	movwf	??_DS1307_Init
  6229  0C2C  0875               	movf	??_DS1307_Init,w
  6230  0C2D  00F6               	movwf	DS1307_Init@s
  6231                           
  6232                           ;DS1307.c: 14: I2C_NoAck();
  6233  0C2E  120A  158A  20E8  120A  158A  	fcall	_I2C_NoAck
  6234                           
  6235                           ;DS1307.c: 16: if (s & 0x80)
  6236  0C33  1FF6               	btfss	DS1307_Init@s,7
  6237  0C34  2C55               	goto	l2325
  6238                           
  6239                           ;DS1307.c: 17: {
  6240                           ;DS1307.c: 18: s = s & 0x7f ;
  6241  0C35  0876               	movf	DS1307_Init@s,w
  6242  0C36  397F               	andlw	127
  6243  0C37  00F5               	movwf	??_DS1307_Init
  6244  0C38  0875               	movf	??_DS1307_Init,w
  6245  0C39  00F6               	movwf	DS1307_Init@s
  6246                           
  6247                           ;DS1307.c: 19: I2C_Start();
  6248  0C3A  120A  158A  210C  120A  158A  	fcall	_I2C_Start
  6249                           
  6250                           ;DS1307.c: 20: DS1307_Write(0xD0);
  6251  0C3F  30D0               	movlw	208
  6252  0C40  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  6253                           
  6254                           ;DS1307.c: 21: DS1307_Write(0x00);
  6255  0C45  3000               	movlw	0
  6256  0C46  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  6257                           
  6258                           ;DS1307.c: 22: DS1307_Write(s);
  6259  0C4B  0876               	movf	DS1307_Init@s,w
  6260  0C4C  120A  118A  2003  120A  158A  	fcall	_DS1307_Write
  6261                           
  6262                           ;DS1307.c: 23: I2C_Stop();
  6263  0C51  120A  158A  20FC   	fcall	_I2C_Stop
  6264                           
  6265                           ;DS1307.c: 25: }
  6266                           
  6267                           ;DS1307.c: 24: return 1 ;
  6268                           ;	Return value of _DS1307_Init is never used
  6269  0C54  0008               	return
  6270  0C55                     l2325:	
  6271                           
  6272                           ;DS1307.c: 26: else
  6273                           ;DS1307.c: 27: I2C_Stop();
  6274  0C55  120A  158A  20FC   	fcall	_I2C_Stop
  6275  0C58  0008               	return
  6276  0C59                     __end_of_DS1307_Init:	
  6277                           ;DS1307.c: 29: return 0 ;
  6278                           ;	Return value of _DS1307_Init is never used
  6279                           
  6280                           
  6281                           	psect	text27
  6282  08FC                     __ptext27:	
  6283 ;; *************** function _I2C_Stop *****************
  6284 ;; Defined at:
  6285 ;;		line 29 in file "i2c.c"
  6286 ;; Parameters:    Size  Location     Type
  6287 ;;		None
  6288 ;; Auto vars:     Size  Location     Type
  6289 ;;		None
  6290 ;; Return value:  Size  Location     Type
  6291 ;;                  1    wreg      void 
  6292 ;; Registers used:
  6293 ;;		None
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6299 ;;      Params:         0       0       0       0       0
  6300 ;;      Locals:         0       0       0       0       0
  6301 ;;      Temps:          0       0       0       0       0
  6302 ;;      Totals:         0       0       0       0       0
  6303 ;;Total ram usage:        0 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; This function calls:
  6306 ;;		Nothing
  6307 ;; This function is called by:
  6308 ;;		_DS1307_Init
  6309 ;;		_DS1307_SetTime
  6310 ;;		_DS1307_SetDate
  6311 ;;		_DS1307_GetTime
  6312 ;;		_DS1307_GetDate
  6313 ;;		_DS1307_readRam
  6314 ;;		_DS1307_writeRam
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           
  6319                           ;psect for function _I2C_Stop
  6320  08FC                     _I2C_Stop:	
  6321                           
  6322                           ;i2c.c: 31: RD1 = 0;
  6323                           
  6324                           ;incstack = 0
  6325                           ; Regs used in _I2C_Stop: []
  6326  08FC  1283               	bcf	3,5	;RP0=0, select bank0
  6327  08FD  1303               	bcf	3,6	;RP1=0, select bank0
  6328  08FE  1088               	bcf	8,1	;volatile
  6329                           
  6330                           ;i2c.c: 32: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6331  08FF  0000               	nop
  6332                           
  6333                           ;i2c.c: 33: RD0 = 0;
  6334  0900  1283               	bcf	3,5	;RP0=0, select bank0
  6335  0901  1303               	bcf	3,6	;RP1=0, select bank0
  6336  0902  1008               	bcf	8,0	;volatile
  6337                           
  6338                           ;i2c.c: 34: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6339  0903  0000               	nop
  6340                           
  6341                           ;i2c.c: 35: RD1 = 1;
  6342  0904  1283               	bcf	3,5	;RP0=0, select bank0
  6343  0905  1303               	bcf	3,6	;RP1=0, select bank0
  6344  0906  1488               	bsf	8,1	;volatile
  6345                           
  6346                           ;i2c.c: 36: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6347  0907  0000               	nop
  6348                           
  6349                           ;i2c.c: 37: RD0 = 1;
  6350  0908  1283               	bcf	3,5	;RP0=0, select bank0
  6351  0909  1303               	bcf	3,6	;RP1=0, select bank0
  6352  090A  1408               	bsf	8,0	;volatile
  6353  090B  0008               	return
  6354  090C                     __end_of_I2C_Stop:	
  6355                           
  6356                           	psect	text28
  6357  090C                     __ptext28:	
  6358 ;; *************** function _I2C_Start *****************
  6359 ;; Defined at:
  6360 ;;		line 17 in file "i2c.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      void 
  6367 ;; Registers used:
  6368 ;;		None
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6374 ;;      Params:         0       0       0       0       0
  6375 ;;      Locals:         0       0       0       0       0
  6376 ;;      Temps:          0       0       0       0       0
  6377 ;;      Totals:         0       0       0       0       0
  6378 ;;Total ram usage:        0 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		_DS1307_Init
  6384 ;;		_DS1307_SetTime
  6385 ;;		_DS1307_SetDate
  6386 ;;		_DS1307_GetTime
  6387 ;;		_DS1307_GetDate
  6388 ;;		_DS1307_readRam
  6389 ;;		_DS1307_writeRam
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           
  6394                           ;psect for function _I2C_Start
  6395  090C                     _I2C_Start:	
  6396                           
  6397                           ;i2c.c: 19: RD1 = 0;
  6398                           
  6399                           ;incstack = 0
  6400                           ; Regs used in _I2C_Start: []
  6401  090C  1283               	bcf	3,5	;RP0=0, select bank0
  6402  090D  1303               	bcf	3,6	;RP1=0, select bank0
  6403  090E  1088               	bcf	8,1	;volatile
  6404                           
  6405                           ;i2c.c: 20: RD0 = 1;
  6406  090F  1408               	bsf	8,0	;volatile
  6407                           
  6408                           ;i2c.c: 21: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6409  0910  0000               	nop
  6410                           
  6411                           ;i2c.c: 22: RD1 = 1;
  6412  0911  1283               	bcf	3,5	;RP0=0, select bank0
  6413  0912  1303               	bcf	3,6	;RP1=0, select bank0
  6414  0913  1488               	bsf	8,1	;volatile
  6415                           
  6416                           ;i2c.c: 23: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6417  0914  0000               	nop
  6418                           
  6419                           ;i2c.c: 24: RD0 = 0;
  6420  0915  1283               	bcf	3,5	;RP0=0, select bank0
  6421  0916  1303               	bcf	3,6	;RP1=0, select bank0
  6422  0917  1008               	bcf	8,0	;volatile
  6423                           
  6424                           ;i2c.c: 25: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6425  0918  0000               	nop
  6426                           
  6427                           ;i2c.c: 26: RD1 = 0;
  6428  0919  1283               	bcf	3,5	;RP0=0, select bank0
  6429  091A  1303               	bcf	3,6	;RP1=0, select bank0
  6430  091B  1088               	bcf	8,1	;volatile
  6431  091C  0008               	return
  6432  091D                     __end_of_I2C_Start:	
  6433                           
  6434                           	psect	text29
  6435  08E8                     __ptext29:	
  6436 ;; *************** function _I2C_NoAck *****************
  6437 ;; Defined at:
  6438 ;;		line 88 in file "i2c.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      void 
  6445 ;; Registers used:
  6446 ;;		status,2, status,0, pclath, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6452 ;;      Params:         0       0       0       0       0
  6453 ;;      Locals:         0       0       0       0       0
  6454 ;;      Temps:          0       0       0       0       0
  6455 ;;      Totals:         0       0       0       0       0
  6456 ;;Total ram usage:        0 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    1
  6459 ;; This function calls:
  6460 ;;		_I2C_Clock
  6461 ;; This function is called by:
  6462 ;;		_DS1307_Init
  6463 ;;		_DS1307_GetTime
  6464 ;;		_DS1307_GetDate
  6465 ;;		_DS1307_readRam
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           
  6470                           ;psect for function _I2C_NoAck
  6471  08E8                     _I2C_NoAck:	
  6472                           
  6473                           ;i2c.c: 90: RD0 = 1;
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in _I2C_NoAck: [status,2+status,0+pclath+cstack]
  6477  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  6478  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  6479  08EA  1408               	bsf	8,0	;volatile
  6480                           
  6481                           ;i2c.c: 91: I2C_Clock();
  6482  08EB  120A  158A  20DF   	fcall	_I2C_Clock
  6483                           
  6484                           ;i2c.c: 92: RD1 = 1;
  6485  08EE  1283               	bcf	3,5	;RP0=0, select bank0
  6486  08EF  1303               	bcf	3,6	;RP1=0, select bank0
  6487  08F0  1488               	bsf	8,1	;volatile
  6488  08F1  0008               	return
  6489  08F2                     __end_of_I2C_NoAck:	
  6490                           
  6491                           	psect	text30
  6492  0003                     __ptext30:	
  6493 ;; *************** function _DS1307_Write *****************
  6494 ;; Defined at:
  6495 ;;		line 32 in file "DS1307.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;  dat             1    wreg     unsigned char 
  6498 ;; Auto vars:     Size  Location     Type
  6499 ;;  dat             1    4[COMMON] unsigned char 
  6500 ;; Return value:  Size  Location     Type
  6501 ;;                  1    wreg      void 
  6502 ;; Registers used:
  6503 ;;		wreg, status,2, status,0, pclath, cstack
  6504 ;; Tracked objects:
  6505 ;;		On entry : 0/0
  6506 ;;		On exit  : 0/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6509 ;;      Params:         0       0       0       0       0
  6510 ;;      Locals:         1       0       0       0       0
  6511 ;;      Temps:          0       0       0       0       0
  6512 ;;      Totals:         1       0       0       0       0
  6513 ;;Total ram usage:        1 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    2
  6516 ;; This function calls:
  6517 ;;		_I2C_Clock
  6518 ;;		_I2C_Write
  6519 ;; This function is called by:
  6520 ;;		_DS1307_Init
  6521 ;;		_DS1307_SetTime
  6522 ;;		_DS1307_SetDate
  6523 ;;		_DS1307_GetTime
  6524 ;;		_DS1307_GetDate
  6525 ;;		_DS1307_readRam
  6526 ;;		_DS1307_writeRam
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _DS1307_Write
  6532  0003                     _DS1307_Write:	
  6533                           
  6534                           ;incstack = 0
  6535                           ; Regs used in _DS1307_Write: [wreg+status,2+status,0+pclath+cstack]
  6536                           ;DS1307_Write@dat stored from wreg
  6537  0003  00F4               	movwf	DS1307_Write@dat
  6538                           
  6539                           ;DS1307.c: 34: I2C_Write(dat);
  6540  0004  0874               	movf	DS1307_Write@dat,w
  6541  0005  120A  158A  21A2  120A  118A  	fcall	_I2C_Write
  6542                           
  6543                           ;DS1307.c: 35: I2C_Clock();
  6544  000A  120A  158A  20DF   	fcall	_I2C_Clock
  6545  000D  0008               	return
  6546  000E                     __end_of_DS1307_Write:	
  6547                           
  6548                           	psect	text31
  6549  09A2                     __ptext31:	
  6550 ;; *************** function _I2C_Write *****************
  6551 ;; Defined at:
  6552 ;;		line 40 in file "i2c.c"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;  dat             1    wreg     unsigned char 
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;  dat             1    2[COMMON] unsigned char 
  6557 ;;  i               1    3[COMMON] unsigned char 
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  1    wreg      void 
  6560 ;; Registers used:
  6561 ;;		wreg, status,2, status,0, pclath, cstack
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6567 ;;      Params:         0       0       0       0       0
  6568 ;;      Locals:         2       0       0       0       0
  6569 ;;      Temps:          2       0       0       0       0
  6570 ;;      Totals:         4       0       0       0       0
  6571 ;;Total ram usage:        4 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    1
  6574 ;; This function calls:
  6575 ;;		_I2C_Clock
  6576 ;; This function is called by:
  6577 ;;		_DS1307_Write
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _I2C_Write
  6583  09A2                     _I2C_Write:	
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  6587                           ;I2C_Write@dat stored from wreg
  6588  09A2  00F2               	movwf	I2C_Write@dat
  6589                           
  6590                           ;i2c.c: 42: unsigned char i ;
  6591                           ;i2c.c: 43: for(i=0;i<8;i++)
  6592  09A3  01F3               	clrf	I2C_Write@i
  6593  09A4  3008               	movlw	8
  6594  09A5  0273               	subwf	I2C_Write@i,w
  6595  09A6  1803               	btfsc	3,0
  6596  09A7  29C4               	goto	l79
  6597  09A8                     l78:	
  6598                           
  6599                           ;i2c.c: 44: {
  6600                           ;i2c.c: 45: RD0 = (dat & 0x80) ? 1 : 0 ;
  6601  09A8  1FF2               	btfss	I2C_Write@dat,7
  6602  09A9  29AE               	goto	u1400
  6603  09AA  1283               	bcf	3,5	;RP0=0, select bank0
  6604  09AB  1303               	bcf	3,6	;RP1=0, select bank0
  6605  09AC  1408               	bsf	8,0	;volatile
  6606  09AD  29B1               	goto	l1905
  6607  09AE                     u1400:	
  6608  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  6609  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  6610  09B0  1008               	bcf	8,0	;volatile
  6611  09B1                     l1905:	
  6612                           
  6613                           ;i2c.c: 47: I2C_Clock();
  6614  09B1  120A  158A  20DF  120A  158A  	fcall	_I2C_Clock
  6615                           
  6616                           ;i2c.c: 49: dat = dat << 1;
  6617  09B6  0872               	movf	I2C_Write@dat,w
  6618  09B7  00F0               	movwf	??_I2C_Write
  6619  09B8  0770               	addwf	??_I2C_Write,w
  6620  09B9  00F1               	movwf	??_I2C_Write+1
  6621  09BA  0871               	movf	??_I2C_Write+1,w
  6622  09BB  00F2               	movwf	I2C_Write@dat
  6623  09BC  3001               	movlw	1
  6624  09BD  00F0               	movwf	??_I2C_Write
  6625  09BE  0870               	movf	??_I2C_Write,w
  6626  09BF  07F3               	addwf	I2C_Write@i,f
  6627  09C0  3008               	movlw	8
  6628  09C1  0273               	subwf	I2C_Write@i,w
  6629  09C2  1C03               	skipc
  6630  09C3  29A8               	goto	l78
  6631  09C4                     l79:	
  6632                           
  6633                           ;i2c.c: 50: }
  6634                           ;i2c.c: 51: RD0 = 1;
  6635  09C4  1283               	bcf	3,5	;RP0=0, select bank0
  6636  09C5  1303               	bcf	3,6	;RP1=0, select bank0
  6637  09C6  1408               	bsf	8,0	;volatile
  6638  09C7  0008               	return
  6639  09C8                     __end_of_I2C_Write:	
  6640                           
  6641                           	psect	text32
  6642  08DF                     __ptext32:	
  6643 ;; *************** function _I2C_Clock *****************
  6644 ;; Defined at:
  6645 ;;		line 9 in file "i2c.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;		None
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      void 
  6652 ;; Registers used:
  6653 ;;		None
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6659 ;;      Params:         0       0       0       0       0
  6660 ;;      Locals:         0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0
  6662 ;;      Totals:         0       0       0       0       0
  6663 ;;Total ram usage:        0 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; This function calls:
  6666 ;;		Nothing
  6667 ;; This function is called by:
  6668 ;;		_DS1307_Write
  6669 ;;		_I2C_Write
  6670 ;;		_I2C_Ack
  6671 ;;		_I2C_NoAck
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           
  6676                           ;psect for function _I2C_Clock
  6677  08DF                     _I2C_Clock:	
  6678                           
  6679                           ;i2c.c: 11: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6680                           
  6681                           ;incstack = 0
  6682                           ; Regs used in _I2C_Clock: []
  6683  08DF  0000               	nop
  6684                           
  6685                           ;i2c.c: 12: RD1 = 1;
  6686  08E0  1283               	bcf	3,5	;RP0=0, select bank0
  6687  08E1  1303               	bcf	3,6	;RP1=0, select bank0
  6688  08E2  1488               	bsf	8,1	;volatile
  6689                           
  6690                           ;i2c.c: 13: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6691  08E3  0000               	nop
  6692                           
  6693                           ;i2c.c: 14: RD1 = 0;
  6694  08E4  1283               	bcf	3,5	;RP0=0, select bank0
  6695  08E5  1303               	bcf	3,6	;RP1=0, select bank0
  6696  08E6  1088               	bcf	8,1	;volatile
  6697  08E7  0008               	return
  6698  08E8                     __end_of_I2C_Clock:	
  6699                           
  6700                           	psect	text33
  6701  08D6                     __ptext33:	
  6702 ;; *************** function _DS1307_Read *****************
  6703 ;; Defined at:
  6704 ;;		line 38 in file "DS1307.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;		None
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;		None
  6709 ;; Return value:  Size  Location     Type
  6710 ;;                  1    wreg      unsigned char 
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, status,0, pclath, cstack
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6718 ;;      Params:         0       0       0       0       0
  6719 ;;      Locals:         0       0       0       0       0
  6720 ;;      Temps:          0       0       0       0       0
  6721 ;;      Totals:         0       0       0       0       0
  6722 ;;Total ram usage:        0 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; Hardware stack levels required when called:    1
  6725 ;; This function calls:
  6726 ;;		_I2C_Read
  6727 ;; This function is called by:
  6728 ;;		_DS1307_Init
  6729 ;;		_DS1307_GetTime
  6730 ;;		_DS1307_GetDate
  6731 ;;		_DS1307_readRam
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           
  6736                           ;psect for function _DS1307_Read
  6737  08D6                     _DS1307_Read:	
  6738                           
  6739                           ;DS1307.c: 40: return I2C_Read();
  6740                           
  6741                           ;incstack = 0
  6742                           ; Regs used in _DS1307_Read: [wreg+status,2+status,0+pclath+cstack]
  6743  08D6  120A  158A  223D   	fcall	_I2C_Read
  6744  08D9  0008               	return
  6745  08DA                     __end_of_DS1307_Read:	
  6746                           
  6747                           	psect	text34
  6748  0A3D                     __ptext34:	
  6749 ;; *************** function _I2C_Read *****************
  6750 ;; Defined at:
  6751 ;;		line 54 in file "i2c.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;  dat             1    3[COMMON] unsigned char 
  6756 ;;  i               1    2[COMMON] unsigned char 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  1    wreg      unsigned char 
  6759 ;; Registers used:
  6760 ;;		wreg, status,2, status,0
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6766 ;;      Params:         0       0       0       0       0
  6767 ;;      Locals:         2       0       0       0       0
  6768 ;;      Temps:          2       0       0       0       0
  6769 ;;      Totals:         4       0       0       0       0
  6770 ;;Total ram usage:        4 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; This function calls:
  6773 ;;		Nothing
  6774 ;; This function is called by:
  6775 ;;		_DS1307_Read
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _I2C_Read
  6781  0A3D                     _I2C_Read:	
  6782                           
  6783                           ;i2c.c: 56: unsigned char i, dat=0x00;
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _I2C_Read: [wreg+status,2+status,0]
  6787  0A3D  01F3               	clrf	I2C_Read@dat
  6788                           
  6789                           ;i2c.c: 58: TRISD0 = 1 ;
  6790  0A3E  1683               	bsf	3,5	;RP0=1, select bank1
  6791  0A3F  1303               	bcf	3,6	;RP1=0, select bank1
  6792  0A40  1408               	bsf	8,0	;volatile
  6793                           
  6794                           ;i2c.c: 60: for(i=0;i<8;i++)
  6795  0A41  01F2               	clrf	I2C_Read@i
  6796  0A42  3008               	movlw	8
  6797  0A43  0272               	subwf	I2C_Read@i,w
  6798  0A44  1803               	btfsc	3,0
  6799  0A45  2A62               	goto	l84
  6800  0A46                     l83:	
  6801                           
  6802                           ;i2c.c: 61: {
  6803                           ;i2c.c: 62: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6804  0A46  0000               	nop
  6805                           
  6806                           ;i2c.c: 64: RD1 = 1;
  6807  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  6808  0A48  1303               	bcf	3,6	;RP1=0, select bank0
  6809  0A49  1488               	bsf	8,1	;volatile
  6810                           
  6811                           ;i2c.c: 66: dat = dat << 1;
  6812  0A4A  0873               	movf	I2C_Read@dat,w
  6813  0A4B  00F0               	movwf	??_I2C_Read
  6814  0A4C  0770               	addwf	??_I2C_Read,w
  6815  0A4D  00F1               	movwf	??_I2C_Read+1
  6816  0A4E  0871               	movf	??_I2C_Read+1,w
  6817  0A4F  00F3               	movwf	I2C_Read@dat
  6818                           
  6819                           ;i2c.c: 68: if (RD0 == 1)
  6820  0A50  1C08               	btfss	8,0	;volatile
  6821  0A51  2A56               	goto	l1927
  6822                           
  6823                           ;i2c.c: 69: dat++;
  6824  0A52  3001               	movlw	1
  6825  0A53  00F0               	movwf	??_I2C_Read
  6826  0A54  0870               	movf	??_I2C_Read,w
  6827  0A55  07F3               	addwf	I2C_Read@dat,f
  6828  0A56                     l1927:	
  6829                           
  6830                           ;i2c.c: 71: _delay((unsigned long)((1)*(4000000/4000000.0)));
  6831  0A56  0000               	nop
  6832                           
  6833                           ;i2c.c: 73: RD1 = 0;
  6834  0A57  1283               	bcf	3,5	;RP0=0, select bank0
  6835  0A58  1303               	bcf	3,6	;RP1=0, select bank0
  6836  0A59  1088               	bcf	8,1	;volatile
  6837  0A5A  3001               	movlw	1
  6838  0A5B  00F0               	movwf	??_I2C_Read
  6839  0A5C  0870               	movf	??_I2C_Read,w
  6840  0A5D  07F2               	addwf	I2C_Read@i,f
  6841  0A5E  3008               	movlw	8
  6842  0A5F  0272               	subwf	I2C_Read@i,w
  6843  0A60  1C03               	skipc
  6844  0A61  2A46               	goto	l83
  6845  0A62                     l84:	
  6846                           
  6847                           ;i2c.c: 74: }
  6848                           ;i2c.c: 76: TRISD0 = 0 ;
  6849  0A62  1683               	bsf	3,5	;RP0=1, select bank1
  6850  0A63  1303               	bcf	3,6	;RP1=0, select bank1
  6851  0A64  1008               	bcf	8,0	;volatile
  6852                           
  6853                           ;i2c.c: 78: return dat;
  6854  0A65  0873               	movf	I2C_Read@dat,w
  6855  0A66  0008               	return
  6856  0A67                     __end_of_I2C_Read:	
  6857  007E                     btemp	set	126	;btemp
  6858  007E                     wtemp	set	126
  6859  007E                     wtemp0	set	126
  6860  0080                     wtemp1	set	128
  6861  0082                     wtemp2	set	130
  6862  0084                     wtemp3	set	132
  6863  0086                     wtemp4	set	134
  6864  0088                     wtemp5	set	136
  6865  007F                     wtemp6	set	127
  6866  007E                     ttemp	set	126
  6867  007E                     ttemp0	set	126
  6868  0081                     ttemp1	set	129
  6869  0084                     ttemp2	set	132
  6870  0087                     ttemp3	set	135
  6871  007F                     ttemp4	set	127
  6872  007E                     ltemp	set	126
  6873  007E                     ltemp0	set	126
  6874  0082                     ltemp1	set	130
  6875  0086                     ltemp2	set	134
  6876  0080                     ltemp3	set	128


Data Sizes:
    Strings     98
    Constant    67
    Data        24
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      72
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[5]), 
		 -> STR_9(CODE[8]), STR_8(CODE[8]), STR_7(CODE[6]), setText(CODE[5]), 
		 -> STR_6(CODE[8]), STR_5(CODE[7]), STR_4(CODE[7]), STR_3(CODE[10]), 
		 -> STR_2(CODE[4]), STR_1(CODE[17]), LCDWriteInt@str(BANK0[6]), 

    DS1307_writeRam@ptr	PTR unsigned char  size(1) Largest target is 2
		 -> runningTime(BANK0[2]), 

    DS1307_readRam@ptr	PTR unsigned char  size(1) Largest target is 2
		 -> runningTime(BANK0[2]), 

    DS1307_GetDate@y_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 

    DS1307_GetDate@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetDate@d_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetDate@n_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@n(BANK0[1]), 

    DS1307_GetTime@h_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetTime@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetTime@s_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_LCDGotoXY
    _main->_LCDInit
    _main->_LCDWriteString
    _showClock->_LCDGotoXY
    _showRunningTime->_LCDGotoXY
    _readClock->___wmul
    _DS1307_writeRam->_DS1307_Write
    _DS1307_GetTime->_DS1307_Write
    _DS1307_GetDate->_DS1307_Write
    _doMenu->_LCDGotoXY
    _doMenu->_LCDWriteString
    _LCDWriteInt->_LCDWriteString
    ___wmul->___awdiv
    _DS1307_SetTime->_DS1307_Write
    _DS1307_SetDate->_DS1307_Write
    _clearPrompt->_LCDGotoXY
    _clearPrompt->_LCDWriteString
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _DS1307_readRam->_DS1307_Write
    _DS1307_Init->_DS1307_Write
    _DS1307_Write->_I2C_Write
    _DS1307_Read->_I2C_Read

Critical Paths under _main in BANK0

    _main->_doMenu
    _showClock->_showDate
    _showClock->_showRunningTime
    _showRunningTime->_LCDWriteInt
    _readClock->___wmul
    _doMenu->_showDate
    _showTime->_LCDWriteInt
    _showDate->_LCDWriteInt
    _LCDWriteInt->___wmul
    _clearPrompt->_LCDGotoXY

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   95960
                                             39 BANK0      3     3      0
                        _DS1307_Init
                     _DS1307_readRam
                           _I2C_Init
                            _LCDByte
                          _LCDGotoXY
                            _LCDInit
                        _LCDWriteInt
                     _LCDWriteString
                             ___wmul
                        _clearPrompt
                             _doMenu
                          _readClock
                         _readInputs
                          _showClock
 ---------------------------------------------------------------------------------
 (1) _showClock                                            0     0      0   37357
                          _LCDGotoXY
                           _showDate
                    _showRunningTime
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showRunningTime                                      3     3      0   15011
                                             19 BANK0      3     3      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _readClock                                            7     7      0    5330
                                              2 BANK0      7     7      0
                     _DS1307_GetDate
                     _DS1307_GetTime
                    _DS1307_writeRam
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _DS1307_writeRam                                      7     3      4     313
                                              5 COMMON     7     3      4
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetTime                                       4     2      2     405
                                              5 COMMON     4     2      2
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetDate                                       5     2      3     480
                                              5 COMMON     5     2      3
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _doMenu                                              17    17      0   30516
                                             22 BANK0     17    17      0
                     _DS1307_SetDate
                     _DS1307_SetTime
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            ___awdiv
                            ___awmod
                         _readInputs
                           _showDate
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showTime                                             1     1      0    9171
                                             19 BANK0      1     1      0
                            _LCDByte
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (2) _showDate                                             3     3      0   10710
                                             19 BANK0      3     3      0
                            _LCDByte
                        _LCDWriteInt
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _LCDWriteInt                                         17    14      3    7836
                                              2 BANK0     17    14      3
                     _LCDWriteString
                            ___awdiv
                            ___awmod (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1470
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    2208
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _readInputs                                           4     4      0      23
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1144
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetTime                                       3     1      2     285
                                              5 COMMON     3     1      2
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetDate                                       4     1      3     360
                                              5 COMMON     4     1      3
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _clearPrompt                                          0     0      0    4958
                          _LCDGotoXY
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (4) _LCDWriteString                                       2     0      2    2493
                                             12 COMMON     2     0      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDGotoXY                                            3     2      1    2465
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1474
                                             12 COMMON     2     2      0
                                              0 BANK0      1     1      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDByte                                              7     6      1    1335
                                              5 COMMON     7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (6) _LCDBusyLoop                                          5     5      0     117
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS1307_readRam                                       7     3      4     428
                                              5 COMMON     7     3      4
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (1) _DS1307_Init                                          2     2      0     275
                                              5 COMMON     2     2      0
                        _DS1307_Read
                       _DS1307_Write
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_NoAck                                            0     0      0       0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (3) _DS1307_Write                                         1     1      0     113
                                              4 COMMON     1     1      0
                          _I2C_Clock
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            4     4      0      91
                                              0 COMMON     4     4      0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (5) _I2C_Clock                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DS1307_Read                                          0     0      0      93
                           _I2C_Read
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             4     4      0      93
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1307_Init
     _DS1307_Read
       _I2C_Read
     _DS1307_Write
       _I2C_Clock
       _I2C_Write
         _I2C_Clock
     _I2C_NoAck
       _I2C_Clock
     _I2C_Start
     _I2C_Stop
   _DS1307_readRam
     _DS1307_Read
       _I2C_Read
     _DS1307_Write
       _I2C_Clock
       _I2C_Write
         _I2C_Clock
     _I2C_Ack
       _I2C_Clock
     _I2C_NoAck
       _I2C_Clock
     _I2C_Start
     _I2C_Stop
   _I2C_Init
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   ___wmul
     ___awdiv (ARG)
   _clearPrompt
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _doMenu
     _DS1307_SetDate
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_SetTime
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     ___awdiv
     ___awmod
     _readInputs
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _readClock
     _DS1307_GetDate
       _DS1307_Read
         _I2C_Read
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Ack
         _I2C_Clock
       _I2C_NoAck
         _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_GetTime
       _DS1307_Read
         _I2C_Read
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Ack
         _I2C_Clock
       _I2C_NoAck
         _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_writeRam
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _readInputs
   _showClock
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     _showRunningTime
       _LCDByte
         _LCDBusyLoop
       _LCDGotoXY
         _LCDByte
           _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___awdiv
       ___awmod
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      48       5       90.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      56      12        0.0%
ABS                  0      0      56       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon May 16 20:02:26 2016

            ?_LCDBusyLoop 0070        __size_of_I2C_Clock 0009        __size_of_I2C_NoAck 000A  
                       pc 0002        __size_of_I2C_Start 0011               __CFG_CP$OFF 0000  
      __size_of_I2C_Write 0026                        l83 0A46                        l84 0A62  
                      l78 09A8                        l79 09C4              ___awdiv@sign 0076  
                      fsr 0004       ___wmul@multiplicand 007B               __CFG_LVP$ON 0000  
                     l113 0C72                       l114 0C75                       l150 09E7  
                     l151 09D0                       l315 057D                       l246 026E  
                     l351 06BF                       l327 05D8                       l273 036F  
                     l339 064C                       l285 03C7                       l471 09FC  
                     l297 042C                       _RB1 0031                       _RB2 0032  
                     _RD0 0040                       _RB4 0034                       _RD1 0041  
                     _RB5 0035                       _RD2 0042                       _RD3 0043  
            __CFG_CPD$OFF 0000               __CFG_WRT$ON 0000                       _day 0052  
         __end_of_I2C_Ack 08FC                       fsr0 0004                       indf 0000  
            ___awmod@sign 0076              __CFG_FOSC$XT 0000              _DS1307_Write 0003  
 LCDWriteInt@field_length 0024           __end_of_LCDByte 0CA9           __end_of_LCDInit 0B36  
            ?_LCDWriteInt 0022               LCDByte@temp 007B                      l2103 09D9  
                    l2115 0B7C                      l2043 0F17                      l2141 0BB8  
                    l2133 0BA5                      l2127 0B89                      l2119 0B83  
                    l2055 0F53                      l2231 0AD7                      l2129 0B97  
                    l2137 0BB0                      l2233 0AF7                      l2091 0FF5  
                    l2067 0F8F                      l2411 019B                      l2325 0C55  
                    l2341 0DD8                      l2245 0AA6                      l2085 0FD9  
                    l2343 0DFA                      l2079 0FCB                      l2431 0309  
                    l2097 09D2                      l2505 03A5                      l2433 0314  
                    l2099 09D4                      l2531 0436                      l2507 03E7  
                    l2621 05E8                      l2541 044C                      l2533 0438  
                    l2509 03EC                      l2437 031B                      l1831 0D63  
                    l2631 0601                      l2463 0379                      l2471 034D  
                    l1905 09B1                      l2705 0701                      l2553 0511  
                    l2473 0382                      l2465 037B                      l2627 05B5  
                    l2547 0464                      l2539 040A                      l2475 0387  
                    l2555 051C                      l2709 07DF                      l2661 061F  
                    l2629 05FC                      l1927 0A56                      l1943 097D  
                    l2663 0679                      l2655 0665                      l2559 0523  
                    l2751 02C0                      l2665 067E                      l2593 0559  
                    l2497 03D1                      l1947 09F2                      l2595 0592  
                    l2587 058B                      l2499 03D3                      l2763 0261  
                    l1973 0D14                      l2597 0597                      l2773 0279  
                    l1991 0D40                      l1983 0D1C                      l1967 0D09  
                    l2695 069C                      l2783 02B1                      l2759 025B  
                    l1985 0D2A                      l2697 06E1                      l2689 06CD  
                    l1995 0D4B                      l2787 0303                      l1999 0D53  
                    STR_1 0853                      STR_2 08B1                      STR_3 0864  
                    STR_4 0886                      STR_5 088D                      STR_6 086E  
                    STR_7 08A6                      STR_8 087E                      STR_9 0876  
                    u2005 03C2                      u1400 09AE                      u1315 0D6B  
                    u1325 0D77                      u2125 0452                      u1335 0D8D  
                    u2135 045A                      u2145 0462                      u1355 0C5D  
                    u2075 0427                      u2405 06B9                      u1375 0C7B  
                    u2335 0644                      u1385 0C93                      u1545 0D1F  
                    u2265 05D2                      u2195 0576                      u1565 0D2B  
                    u1485 09FD                      u1805 0AE7                      u2605 0301  
                    u1575 0D37                      u1495 0A04                      u2455 06E7  
                    u1745 0B8C                      u1585 0D41                      u2465 06EF  
                    u2617 0217                      u1835 0AB2                      u2475 06F7  
                    u2627 0226                      u1765 0B9D                      u2485 06FF  
                    u2637 0235                      u1855 0DE8                      u1775 0BA6  
                    u1695 0FED                      u1935 036A                      u2647 0244  
                    u2657 0A9C                      u1865 0104                      u2667 0B02  
                    u1875 01A1                      _date 0050                      _main 01B9  
                    _hour 0054        __size_of_LCDGotoXY 0026          __end_of_I2C_Init 08DF  
        __end_of_I2C_Read 0A67                      _year 005E                      btemp 007E  
             _runningTime 0066          __end_of_I2C_Stop 090C                      ltemp 007E  
                    start 0000                      ttemp 007E                      wtemp 007E  
        DS1307_SetDate@dd 0075          DS1307_SetDate@mm 0076          DS1307_SetDate@nn 0078  
        DS1307_SetDate@yy 0077         ??_DS1307_writeRam 0079                     ?_main 0070  
         __end_of___awdiv 0D58                     STR_10 08AC                     STR_11 08A0  
                   STR_12 089A                     STR_13 0894             __CFG_WDTE$OFF 0000  
         __end_of___awmod 0BBD              LCDInit@style 0020           ___awdiv@divisor 0070  
         ___awdiv@counter 0075                     _PORTD 0008                     _TRISD 0088  
           __CFG_PWRTE$ON 0000          DS1307_SetTime@hh 0077          DS1307_SetTime@mm 0075  
        DS1307_SetTime@ss 0076            _DS1307_GetDate 000E            _DS1307_GetTime 0CA9  
       __end_of_I2C_Clock 08E8         __end_of_I2C_NoAck 08F2                     _month 0058  
                   _state 0065         __end_of_I2C_Start 091D           __end_of_setText 0853  
       __end_of_I2C_Write 09C8            __CFG_BOREN$OFF 0000                     pclath 000A  
                   ltemp0 007E                     ltemp1 0082                     ltemp2 0086  
                   ltemp3 0080            _DS1307_SetDate 0A67            _DS1307_SetTime 0A15  
                   ttemp0 007E                     ttemp1 0081                     ttemp2 0084  
                   ttemp3 0087                     ttemp4 007F                     status 0003  
                   wtemp0 007E                     wtemp1 0080                     wtemp2 0082  
                   wtemp3 0084                     wtemp4 0086                     wtemp5 0088  
                   wtemp6 007F           __initialization 07EA      __size_of_clearPrompt 0015  
            __end_of_main 0309  __size_of_showRunningTime 004C            _DS1307_readRam 0DB5  
               ??_I2C_Ack 0070                    ??_main 0047         __end_of_LCDGotoXY 09EE  
           LCDByte@isdata 0075                 ??_LCDByte 0076                 ??_LCDInit 007C  
  __end_of_DS1307_GetDate 0074    __end_of_DS1307_GetTime 0CFF                 I2C_Read@i 0072  
  __end_of_DS1307_SetDate 0A95          ___awdiv@dividend 0072    __end_of_DS1307_SetTime 0A3D  
                  _TRISD0 0440                    _TRISD1 0441              DS1307_Init@s 0076  
    DS1307_readRam@length 0077      DS1307_readRam@offset 0075            _LCDWriteString 097D  
  __end_of_DS1307_readRam 0E13                    ___wmul 09EE                 ??___awdiv 0074  
                  _doMenu 0309                 ??___awmod 0074      __size_of_LCDBusyLoop 005D  
        ___awdiv@quotient 0077                    _minute 0056           ___awmod@divisor 0070  
   __end_of_daysOfTheWeek 0842           ___awmod@counter 0075                    _ttable 0810  
           _runningMinute 005A                 ?_I2C_Init 0070                 ?_I2C_Read 0070  
        __end_of_showDate 0EC5           ?_DS1307_GetDate 0075                 ?_I2C_Stop 0070  
            LCDWriteInt@c 0032          __end_of_showTime 0B72           ?_DS1307_GetTime 0075  
         ?_DS1307_SetDate 0075           ?_DS1307_SetTime 0075      __size_of_LCDWriteInt 013B  
 __end_of__initialization 07FC    __end_of_LCDWriteString 09A2                 LCDByte@hn 0078  
               LCDByte@ln 0079            __pcstackCOMMON 0070           ?_DS1307_readRam 0075  
            __pidataBANK0 0943         ??_showRunningTime 0033                ??_I2C_Init 0070  
              ??_I2C_Read 0070                ??_I2C_Stop 0070             ??_DS1307_Init 0075  
           ??_DS1307_Read 0074                __pbssBANK0 0062        __size_of_readClock 0145  
         ?_LCDWriteString 007C           _DS1307_writeRam 0AC4                __pmaintext 01B9  
                 ?___wmul 0079                   ?_doMenu 0070                   _I2C_Ack 08F2  
              I2C_Write@i 0073        __size_of_showClock 0022                   _LCDByte 0C59  
                 _LCDInit 0AFB                __stringtab 0800                 _I2C_Clock 08DF  
               _I2C_NoAck 08E8                 _I2C_Start 090C                 _I2C_Write 09A2  
     __end_of_DS1307_Init 0C59       __end_of_DS1307_Read 08DA                   _bButton 0064  
         _next_menu_clear 0062                 ?_showDate 0070                 ?_showTime 0070  
            I2C_Write@dat 0072                   ___awdiv 0CFF                   ___awmod 0B72  
         __size_of___wmul 0027                _readInputs 0A95           __size_of_doMenu 04E1  
                 __ptext1 095B                   __ptext2 0BBD                   __ptext3 0074  
                 __ptext4 0AC4                   __ptext5 0CA9                   __ptext6 000E  
                 __ptext7 0309                   __ptext8 0B36                   __ptext9 0E13  
       __end_of_readClock 01B9                   doMenu@d 0041                   doMenu@h 0039  
                 doMenu@m 003B                   doMenu@n 003F                   doMenu@s 003D  
                 doMenu@y 0045          ___awmod@dividend 0072                   _seconds 005C  
                 _setText 084E                 _LCDGotoXY 09C8   __end_of_DS1307_writeRam 0AFB  
    end_of_initialization 07FC         __end_of_monthDays 084E                ?_I2C_Clock 0070  
              ?_I2C_NoAck 0070                ?_I2C_Start 0070         __end_of_showClock 097D  
           ??_clearPrompt 007E                ?_I2C_Write 0070                ??_showDate 0033  
              ??_showTime 0033     LCDWriteInt@characters 0028          ??_DS1307_GetDate 0078  
        ??_DS1307_GetTime 0077         LCDWriteString@msg 007C          ??_DS1307_SetDate 0078  
        ??_DS1307_SetTime 0077                 _TRISBbits 0086                 _TRISDbits 0088  
              ?_LCDGotoXY 007C         __size_of_I2C_Init 0005         __size_of_I2C_Read 002A  
       __size_of_I2C_Stop 0010               _DS1307_Init 0C09               _DS1307_Read 08D6  
     _showRunningTime$727 0034                LCDGotoXY@x 0020                LCDGotoXY@y 007C  
        ??_DS1307_readRam 0079           _showRunningTime 0BBD             ??_LCDBusyLoop 0070  
             ?_readInputs 0070       __end_of_clearPrompt 0943            __end_of___wmul 0A15  
          __end_of_doMenu 07EA            __end_of_ttable 082C       start_initialization 07EA  
           ?_DS1307_Write 0070             ??_LCDWriteInt 0025          ??_LCDWriteString 007E  
        ?_DS1307_writeRam 0075               ??_I2C_Clock 0070               ??_I2C_NoAck 0070  
              readClock@a 0026                readClock@b 0027                readClock@c 0028  
              readClock@n 0025               ??_I2C_Start 0070               ??_I2C_Write 0070  
         DS1307_Write@dat 0074                  ??___wmul 007D                  ??_doMenu 0036  
              init_fetch0 091D               __pdataBANK0 004A                  ?_I2C_Ack 0070  
     __end_of_LCDBusyLoop 0DB5                  ?_LCDByte 0075                  ?_LCDInit 0070  
          ??_DS1307_Write 0074                  LCDByte@c 007A                 ___latbits 0002  
           __pcstackBANK0 0020               ??_LCDGotoXY 007D              _menuFunction 0061  
     __size_of_readInputs 002F         DS1307_readRam@ptr 007B   __end_of_showRunningTime 0C09  
        LCDWriteInt@F1143 004A       __end_of_LCDWriteInt 1000               _clearPrompt 092E  
             I2C_Read@dat 0073                  ?___awdiv 0070                  ?___awmod 0070  
       __size_of_showDate 00B2         __size_of_showTime 003C                 __pstrings 0800  
           _daysOfTheWeek 082C                  _I2C_Init 08DA                  _I2C_Read 0A3D  
                _I2C_Stop 08FC                 _readClock 0074           LCDBusyLoop@busy 0072  
         LCDBusyLoop@temp 0073                 _last_hour 0060            ___wmul@product 0020  
               _monthDays 0842                 _showClock 095B               _LCDBusyLoop 0D58  
        __size_of_I2C_Ack 000A               __stringbase 080F         ___wmul@multiplier 0079  
        __size_of_LCDByte 0050          __size_of_LCDInit 003B                ?_readClock 0070  
             _LCDWriteInt 0EC5     DS1307_writeRam@length 0077     DS1307_writeRam@offset 0075  
            ?_DS1307_Init 0070              ?_DS1307_Read 0070               doMenu@m_299 0043  
        ?_showRunningTime 0070      __end_of_DS1307_Write 000E                ?_showClock 0070  
            ??_readInputs 0070          __size_of___awdiv 0059          __size_of___awmod 004B  
       LCDBusyLoop@status 0074        __end_of__stringtab 0810       DS1307_GetDate@d_ptr 0075  
     DS1307_GetDate@m_ptr 0076       DS1307_GetDate@n_ptr 0079       DS1307_GetDate@y_ptr 0077  
         LCDWriteInt@from 0030                  __ptext10 0EC5                  __ptext11 09EE  
                __ptext20 0AFB                  __ptext12 0CFF                  __ptext21 0C59  
                __ptext13 0A95                  __ptext30 0003                  __ptext22 0D58  
                __ptext14 0B72                  __ptext31 09A2                  __ptext23 08DA  
                __ptext15 0A15                  __ptext32 08DF                  __ptext24 0DB5  
                __ptext16 0A67                  __ptext33 08D6                  __ptext25 08F2  
                __ptext17 092E                  __ptext34 0A3D                  __ptext26 0C09  
                __ptext18 097D                  __ptext27 08FC                  __ptext19 09C8  
                __ptext28 090C                  __ptext29 08E8        DS1307_writeRam@ptr 007B  
      __end_of_readInputs 0AC4             __size_of_main 0150                 showDate@d 0034  
                _showDate 0E13                  _showTime 0B36               ??_readClock 0022  
                init_ram0 0921   __size_of_DS1307_GetDate 0066   __size_of_DS1307_GetTime 0056  
 __size_of_DS1307_SetDate 002E            LCDWriteInt@val 0022            LCDWriteInt@str 002A  
 __size_of_DS1307_SetTime 0028              ?_clearPrompt 0070                 stringcode 080A  
__size_of_DS1307_writeRam 0037               ??_showClock 007E   __size_of_DS1307_readRam 005E  
                stringdir 080A                  stringtab 0800     __size_of_DS1307_Write 000B  
     DS1307_GetTime@h_ptr 0078       DS1307_GetTime@m_ptr 0075       DS1307_GetTime@s_ptr 0076  
    __size_of_DS1307_Init 0050      __size_of_DS1307_Read 0004        readInputs@pinstate 0073  
 __size_of_LCDWriteString 0025  
