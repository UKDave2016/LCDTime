

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue May 10 05:58:20 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  0008                     	;# 
    53  0009                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0014                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001B                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001D                     	;# 
    77  001E                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  0087                     	;# 
    83  0088                     	;# 
    84  0089                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  010C                     	;# 
    97  010D                     	;# 
    98  010E                     	;# 
    99  010F                     	;# 
   100  018C                     	;# 
   101  018D                     	;# 
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  0088                     	;# 
   142  0089                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0088                     	;# 
   200  0089                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009E                     	;# 
   211  009F                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0008                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0088                     	;# 
   258  0089                     	;# 
   259  008C                     	;# 
   260  008D                     	;# 
   261  008E                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009E                     	;# 
   269  009F                     	;# 
   270  010C                     	;# 
   271  010D                     	;# 
   272  010E                     	;# 
   273  010F                     	;# 
   274  018C                     	;# 
   275  018D                     	;# 
   276                           
   277                           	psect	idataBANK0
   278  0BEA                     __pidataBANK0:	
   279                           
   280                           ;initializer for _date
   281  0BEA  3408               	retlw	8
   282  0BEB  3400               	retlw	0
   283                           
   284                           ;initializer for _day
   285  0BEC  3401               	retlw	1
   286  0BED  3400               	retlw	0
   287                           
   288                           ;initializer for _hour
   289  0BEE  3406               	retlw	6
   290  0BEF  3400               	retlw	0
   291                           
   292                           ;initializer for _minute
   293  0BF0  3405               	retlw	5
   294  0BF1  3400               	retlw	0
   295                           
   296                           ;initializer for _month
   297  0BF2  3405               	retlw	5
   298  0BF3  3400               	retlw	0
   299                           
   300                           ;initializer for _seconds
   301  0BF4  3404               	retlw	4
   302  0BF5  3400               	retlw	0
   303                           
   304                           ;initializer for _year
   305  0BF6  3410               	retlw	16
   306  0BF7  3400               	retlw	0
   307                           
   308                           ;initializer for _last_hour
   309  0BF8  34EE               	retlw	238
   310                           
   311                           	psect	strings
   312  0003                     __pstrings:	
   313  0003                     stringtab:	
   314  0003                     __stringtab:	
   315  0003                     stringcode:	
   316                           ;	String table - string pointers are 1 byte each
   317                           
   318  0003                     stringdir:	
   319  0003  3000               	movlw	high stringdir
   320  0004  008A               	movwf	10
   321  0005  0804               	movf	4,w
   322  0006  0A84               	incf	4,f
   323  0007  0782               	addwf	2,f
   324  0008                     __stringbase:	
   325  0008  3400               	retlw	0
   326  0009                     __end_of__stringtab:	
   327  0009                     _ttable:	
   328  0009  3400               	retlw	0
   329  000A  3402               	retlw	2
   330  000B  3404               	retlw	4
   331  000C  3400               	retlw	0
   332  000D  3403               	retlw	3
   333  000E  3400               	retlw	0
   334  000F  3401               	retlw	1
   335  0010  3410               	retlw	16
   336  0011  3403               	retlw	3
   337  0012  3402               	retlw	2
   338  0013  3400               	retlw	0
   339  0014  3400               	retlw	0
   340  0015  3403               	retlw	3
   341  0016  3402               	retlw	2
   342  0017  3401               	retlw	1
   343  0018  3400               	retlw	0
   344  0019  3406               	retlw	6
   345  001A  3400               	retlw	0
   346  001B  3404               	retlw	4
   347  001C  3400               	retlw	0
   348  001D  3406               	retlw	6
   349  001E  3405               	retlw	5
   350  001F  3400               	retlw	0
   351  0020  3420               	retlw	32
   352  0021  3406               	retlw	6
   353  0022  3405               	retlw	5
   354  0023  3404               	retlw	4
   355  0024  3400               	retlw	0
   356  0025                     __end_of_ttable:	
   357  0025                     _monthDays:	
   358  0025  341F               	retlw	31
   359  0026  341D               	retlw	29
   360  0027  341F               	retlw	31
   361  0028  341E               	retlw	30
   362  0029  341F               	retlw	31
   363  002A  341E               	retlw	30
   364  002B  341F               	retlw	31
   365  002C  341F               	retlw	31
   366  002D  341E               	retlw	30
   367  002E  341F               	retlw	31
   368  002F  341E               	retlw	30
   369  0030  341F               	retlw	31
   370  0031                     __end_of_monthDays:	
   371  0008                     _PORTD	set	8
   372  0031                     _RB1	set	49
   373  0032                     _RB2	set	50
   374  0034                     _RB4	set	52
   375  0035                     _RB5	set	53
   376  0036                     _RB6	set	54
   377  0037                     _RB7	set	55
   378  0040                     _RD0	set	64
   379  0041                     _RD1	set	65
   380  0086                     _TRISBbits	set	134
   381  0088                     _TRISD	set	136
   382  0440                     _TRISD0	set	1088
   383  0441                     _TRISD1	set	1089
   384  0031                     STR_3:	
   385  0031  3453               	retlw	83	;'S'
   386  0032  3465               	retlw	101	;'e'
   387  0033  3474               	retlw	116	;'t'
   388  0034  3420               	retlw	32	;' '
   389  0035  3453               	retlw	83	;'S'
   390  0036  3465               	retlw	101	;'e'
   391  0037  3463               	retlw	99	;'c'
   392  0038  346F               	retlw	111	;'o'
   393  0039  346E               	retlw	110	;'n'
   394  003A  3464               	retlw	100	;'d'
   395  003B  3473               	retlw	115	;'s'
   396  003C  3400               	retlw	0
   397  003D                     STR_2:	
   398  003D  3453               	retlw	83	;'S'
   399  003E  3465               	retlw	101	;'e'
   400  003F  3474               	retlw	116	;'t'
   401  0040  3420               	retlw	32	;' '
   402  0041  344D               	retlw	77	;'M'
   403  0042  3469               	retlw	105	;'i'
   404  0043  346E               	retlw	110	;'n'
   405  0044  3475               	retlw	117	;'u'
   406  0045  3474               	retlw	116	;'t'
   407  0046  3465               	retlw	101	;'e'
   408  0047  3473               	retlw	115	;'s'
   409  0048  3400               	retlw	0
   410  0049                     STR_7:	
   411  0049  3453               	retlw	83	;'S'
   412  004A  3465               	retlw	101	;'e'
   413  004B  3474               	retlw	116	;'t'
   414  004C  3420               	retlw	32	;' '
   415  004D  3444               	retlw	68	;'D'
   416  004E  3461               	retlw	97	;'a'
   417  004F  3479               	retlw	121	;'y'
   418  0050  3420               	retlw	32	;' '
   419  0051  3420               	retlw	32	;' '
   420  0052  3400               	retlw	0
   421  0053                     STR_6:	
   422  0053  3453               	retlw	83	;'S'
   423  0054  3465               	retlw	101	;'e'
   424  0055  3474               	retlw	116	;'t'
   425  0056  3420               	retlw	32	;' '
   426  0057  3444               	retlw	68	;'D'
   427  0058  3461               	retlw	97	;'a'
   428  0059  3474               	retlw	116	;'t'
   429  005A  3465               	retlw	101	;'e'
   430  005B  3420               	retlw	32	;' '
   431  005C  3400               	retlw	0
   432  005D                     STR_5:	
   433  005D  3453               	retlw	83	;'S'
   434  005E  3465               	retlw	101	;'e'
   435  005F  3474               	retlw	116	;'t'
   436  0060  3420               	retlw	32	;' '
   437  0061  344D               	retlw	77	;'M'
   438  0062  346F               	retlw	111	;'o'
   439  0063  346E               	retlw	110	;'n'
   440  0064  3474               	retlw	116	;'t'
   441  0065  3468               	retlw	104	;'h'
   442  0066  3400               	retlw	0
   443  0067                     STR_1:	
   444  0067  3453               	retlw	83	;'S'
   445  0068  3465               	retlw	101	;'e'
   446  0069  3474               	retlw	116	;'t'
   447  006A  3420               	retlw	32	;' '
   448  006B  3448               	retlw	72	;'H'
   449  006C  346F               	retlw	111	;'o'
   450  006D  3475               	retlw	117	;'u'
   451  006E  3472               	retlw	114	;'r'
   452  006F  3473               	retlw	115	;'s'
   453  0070  3400               	retlw	0
   454  0071                     STR_4:	
   455  0071  3453               	retlw	83	;'S'
   456  0072  3465               	retlw	101	;'e'
   457  0073  3474               	retlw	116	;'t'
   458  0074  3420               	retlw	32	;' '
   459  0075  3459               	retlw	89	;'Y'
   460  0076  3465               	retlw	101	;'e'
   461  0077  3461               	retlw	97	;'a'
   462  0078  3472               	retlw	114	;'r'
   463  0079  3400               	retlw	0
   464  007A                     STR_10:	
   465  007A  3457               	retlw	87	;'W'
   466  007B  3465               	retlw	101	;'e'
   467  007C  3464               	retlw	100	;'d'
   468  007D  3400               	retlw	0
   469  007E                     STR_9:	
   470  007E  3454               	retlw	84	;'T'
   471  007F  3475               	retlw	117	;'u'
   472  0080  3465               	retlw	101	;'e'
   473  0081  3400               	retlw	0
   474  0082                     STR_12:	
   475  0082  3446               	retlw	70	;'F'
   476  0083  3472               	retlw	114	;'r'
   477  0084  3469               	retlw	105	;'i'
   478  0085  3400               	retlw	0
   479  0086                     STR_8:	
   480  0086  344D               	retlw	77	;'M'
   481  0087  346F               	retlw	111	;'o'
   482  0088  346E               	retlw	110	;'n'
   483  0089  3400               	retlw	0
   484  008A                     STR_14:	
   485  008A  3453               	retlw	83	;'S'
   486  008B  3475               	retlw	117	;'u'
   487  008C  346E               	retlw	110	;'n'
   488  008D  3400               	retlw	0
   489  008E                     STR_13:	
   490  008E  3453               	retlw	83	;'S'
   491  008F  3461               	retlw	97	;'a'
   492  0090  3474               	retlw	116	;'t'
   493  0091  3400               	retlw	0
   494  0092                     STR_11:	
   495  0092  3454               	retlw	84	;'T'
   496  0093  3468               	retlw	104	;'h'
   497  0094  3475               	retlw	117	;'u'
   498  0095  3400               	retlw	0
   499                           
   500                           ; #config settings
   501  0000                     
   502                           	psect	cinit
   503  07ED                     start_initialization:	
   504  07ED                     __initialization:	
   505                           
   506                           ; Clear objects allocated to BANK0
   507  07ED  01C8               	clrf	__pbssBANK0& (0+127)
   508  07EE  01C9               	clrf	(__pbssBANK0+1)& (0+127)
   509  07EF  01CA               	clrf	(__pbssBANK0+2)& (0+127)
   510                           
   511                           ; Initialize objects allocated to BANK0
   512  07F0  1383               	bcf	3,7	;select IRP bank0
   513  07F1  3048               	movlw	low (__pdataBANK0+15)
   514  07F2  00FD               	movwf	btemp+-1
   515  07F3  300B               	movlw	high __pidataBANK0
   516  07F4  00FE               	movwf	btemp
   517  07F5  30EA               	movlw	low __pidataBANK0
   518  07F6  00FF               	movwf	btemp+1
   519  07F7  3039               	movlw	low __pdataBANK0
   520  07F8  0084               	movwf	4
   521  07F9  120A  158A  241E   	fcall	init_ram0
   522  07FC                     end_of_initialization:	
   523                           ;End of C runtime variable initialization code
   524                           
   525  07FC                     __end_of__initialization:	
   526  07FC  0183               	clrf	3
   527  07FD  120A  158A  2D65   	ljmp	_main	;jump to C main() function
   528                           
   529                           	psect	bssBANK0
   530  0048                     __pbssBANK0:	
   531  0048                     _bButton:	
   532  0048                     	ds	1
   533  0049                     _menuFunction:	
   534  0049                     	ds	1
   535  004A                     _state:	
   536  004A                     	ds	1
   537                           
   538                           	psect	dataBANK0
   539  0039                     __pdataBANK0:	
   540  0039                     _date:	
   541  0039                     	ds	2
   542  003B                     _day:	
   543  003B                     	ds	2
   544  003D                     _hour:	
   545  003D                     	ds	2
   546  003F                     _minute:	
   547  003F                     	ds	2
   548  0041                     _month:	
   549  0041                     	ds	2
   550  0043                     _seconds:	
   551  0043                     	ds	2
   552  0045                     _year:	
   553  0045                     	ds	2
   554  0047                     _last_hour:	
   555  0047                     	ds	1
   556                           
   557                           	psect	inittext
   558  0C1A                     init_fetch0:	
   559                           ;	Called with low address in FSR and high address in W
   560                           
   561  0C1A  087E               	movf	126,w
   562  0C1B  008A               	movwf	10
   563  0C1C  087F               	movf	127,w
   564  0C1D  0082               	movwf	2
   565  0C1E                     init_ram0:	
   566                           ;Called with:
   567                           ;	high address of idata address in btemp 
   568                           ;	low address of idata address in btemp+1 
   569                           ;	low address of data in FSR
   570                           ;	high address + 1 of data in btemp-1
   571                           
   572  0C1E  241A  120A  158A   	fcall	init_fetch0
   573  0C21  0080               	movwf	0
   574  0C22  0A84               	incf	4,f
   575  0C23  0804               	movf	4,w
   576  0C24  067D               	xorwf	125,w
   577  0C25  1903               	btfsc	3,2
   578  0C26  3400               	retlw	0
   579  0C27  0AFF               	incf	127,f
   580  0C28  1903               	btfsc	3,2
   581  0C29  0AFE               	incf	126,f
   582  0C2A  2C1E               	goto	init_ram0
   583                           
   584                           	psect	cstackCOMMON
   585  0070                     __pcstackCOMMON:	
   586  0070                     ?_I2C_Start:	
   587  0070                     ??_I2C_Start:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_DS1307_Write:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_DS1307_Read:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_I2C_NoAck:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ??_I2C_NoAck:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_I2C_Stop:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ??_I2C_Stop:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?_I2C_Write:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ??_I2C_Write:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_I2C_Clock:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ??_I2C_Clock:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?_I2C_Read:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ??_I2C_Read:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0070                     ?_I2C_Ack:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0070                     ??_I2C_Ack:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ?_LCDBusyLoop:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ??_LCDBusyLoop:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0070                     ?_readClock:	
   639                           ; 1 bytes @ 0x0
   640                           
   641  0070                     ?_showClock:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0070                     ?_readInputs:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0070                     ??_readInputs:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_doMenu:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_showTime:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_showDate:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_I2C_Init:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ??_I2C_Init:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_LCDInit:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_LCDWriteString:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_main:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_DS1307_Init:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?___awdiv:	
   678                           ; 2 bytes @ 0x0
   679                           
   680  0070                     ?___awmod:	
   681                           ; 2 bytes @ 0x0
   682                           
   683  0070                     ___awdiv@divisor:	
   684                           ; 2 bytes @ 0x0
   685                           
   686  0070                     ___awmod@divisor:	
   687                           ; 2 bytes @ 0x0
   688                           
   689                           
   690                           ; 2 bytes @ 0x0
   691  0070                     	ds	2
   692  0072                     I2C_Write@dat:	
   693  0072                     I2C_Read@i:	
   694                           ; 1 bytes @ 0x2
   695                           
   696  0072                     LCDBusyLoop@busy:	
   697                           ; 1 bytes @ 0x2
   698                           
   699  0072                     ___awdiv@dividend:	
   700                           ; 1 bytes @ 0x2
   701                           
   702  0072                     ___awmod@dividend:	
   703                           ; 2 bytes @ 0x2
   704                           
   705                           
   706                           ; 2 bytes @ 0x2
   707  0072                     	ds	1
   708  0073                     I2C_Write@i:	
   709  0073                     I2C_Read@dat:	
   710                           ; 1 bytes @ 0x3
   711                           
   712  0073                     LCDBusyLoop@temp:	
   713                           ; 1 bytes @ 0x3
   714                           
   715  0073                     readInputs@pinstate:	
   716                           ; 1 bytes @ 0x3
   717                           
   718                           
   719                           ; 1 bytes @ 0x3
   720  0073                     	ds	1
   721  0074                     ??_DS1307_Write:	
   722  0074                     ??_DS1307_Read:	
   723                           ; 1 bytes @ 0x4
   724                           
   725  0074                     ??___awdiv:	
   726                           ; 1 bytes @ 0x4
   727                           
   728  0074                     ??___awmod:	
   729                           ; 1 bytes @ 0x4
   730                           
   731  0074                     DS1307_Write@dat:	
   732                           ; 1 bytes @ 0x4
   733                           
   734  0074                     LCDBusyLoop@status:	
   735                           ; 1 bytes @ 0x4
   736                           
   737                           
   738                           ; 1 bytes @ 0x4
   739  0074                     	ds	1
   740  0075                     ??_DS1307_Init:	
   741  0075                     ?_DS1307_SetTime:	
   742                           ; 1 bytes @ 0x5
   743                           
   744  0075                     ?_DS1307_SetDate:	
   745                           ; 1 bytes @ 0x5
   746                           
   747  0075                     ?_DS1307_GetTime:	
   748                           ; 1 bytes @ 0x5
   749                           
   750  0075                     ?_DS1307_GetDate:	
   751                           ; 1 bytes @ 0x5
   752                           
   753  0075                     ?_LCDByte:	
   754                           ; 1 bytes @ 0x5
   755                           
   756  0075                     DS1307_SetTime@mm:	
   757                           ; 1 bytes @ 0x5
   758                           
   759  0075                     DS1307_SetDate@dd:	
   760                           ; 1 bytes @ 0x5
   761                           
   762  0075                     DS1307_GetTime@m_ptr:	
   763                           ; 1 bytes @ 0x5
   764                           
   765  0075                     DS1307_GetDate@d_ptr:	
   766                           ; 1 bytes @ 0x5
   767                           
   768  0075                     LCDByte@isdata:	
   769                           ; 1 bytes @ 0x5
   770                           
   771  0075                     ___awdiv@counter:	
   772                           ; 1 bytes @ 0x5
   773                           
   774  0075                     ___awmod@counter:	
   775                           ; 1 bytes @ 0x5
   776                           
   777                           
   778                           ; 1 bytes @ 0x5
   779  0075                     	ds	1
   780  0076                     ??_LCDByte:	
   781  0076                     DS1307_Init@s:	
   782                           ; 1 bytes @ 0x6
   783                           
   784  0076                     DS1307_SetTime@ss:	
   785                           ; 1 bytes @ 0x6
   786                           
   787  0076                     DS1307_SetDate@mm:	
   788                           ; 1 bytes @ 0x6
   789                           
   790  0076                     DS1307_GetTime@s_ptr:	
   791                           ; 1 bytes @ 0x6
   792                           
   793  0076                     DS1307_GetDate@m_ptr:	
   794                           ; 1 bytes @ 0x6
   795                           
   796  0076                     ___awdiv@sign:	
   797                           ; 1 bytes @ 0x6
   798                           
   799  0076                     ___awmod@sign:	
   800                           ; 1 bytes @ 0x6
   801                           
   802                           
   803                           ; 1 bytes @ 0x6
   804  0076                     	ds	1
   805  0077                     ??_DS1307_SetTime:	
   806  0077                     ??_DS1307_GetTime:	
   807                           ; 1 bytes @ 0x7
   808                           
   809  0077                     DS1307_SetTime@hh:	
   810                           ; 1 bytes @ 0x7
   811                           
   812  0077                     DS1307_SetDate@yy:	
   813                           ; 1 bytes @ 0x7
   814                           
   815  0077                     DS1307_GetDate@y_ptr:	
   816                           ; 1 bytes @ 0x7
   817                           
   818  0077                     ___awdiv@quotient:	
   819                           ; 1 bytes @ 0x7
   820                           
   821                           
   822                           ; 2 bytes @ 0x7
   823  0077                     	ds	1
   824  0078                     ??_DS1307_SetDate:	
   825  0078                     ??_DS1307_GetDate:	
   826                           ; 1 bytes @ 0x8
   827                           
   828  0078                     DS1307_SetDate@nn:	
   829                           ; 1 bytes @ 0x8
   830                           
   831  0078                     DS1307_GetTime@h_ptr:	
   832                           ; 1 bytes @ 0x8
   833                           
   834  0078                     LCDByte@hn:	
   835                           ; 1 bytes @ 0x8
   836                           
   837                           
   838                           ; 1 bytes @ 0x8
   839  0078                     	ds	1
   840  0079                     ?___wmul:	
   841  0079                     DS1307_GetDate@n_ptr:	
   842                           ; 2 bytes @ 0x9
   843                           
   844  0079                     LCDByte@ln:	
   845                           ; 1 bytes @ 0x9
   846                           
   847  0079                     ___wmul@multiplier:	
   848                           ; 1 bytes @ 0x9
   849                           
   850                           
   851                           ; 2 bytes @ 0x9
   852  0079                     	ds	1
   853  007A                     LCDByte@c:	
   854                           
   855                           ; 1 bytes @ 0xA
   856  007A                     	ds	1
   857  007B                     LCDByte@temp:	
   858  007B                     ___wmul@multiplicand:	
   859                           ; 1 bytes @ 0xB
   860                           
   861                           
   862                           ; 2 bytes @ 0xB
   863  007B                     	ds	1
   864  007C                     ??_LCDInit:	
   865  007C                     ??_LCDWriteString:	
   866                           ; 1 bytes @ 0xC
   867                           
   868  007C                     ?_LCDWriteInt:	
   869                           ; 1 bytes @ 0xC
   870                           
   871  007C                     ?_LCDGotoXY:	
   872                           ; 1 bytes @ 0xC
   873                           
   874  007C                     LCDWriteInt@field_length:	
   875                           ; 1 bytes @ 0xC
   876                           
   877  007C                     LCDGotoXY@y:	
   878                           ; 1 bytes @ 0xC
   879                           
   880                           
   881                           ; 1 bytes @ 0xC
   882  007C                     	ds	1
   883  007D                     ??_showTime:	
   884  007D                     ??_showDate:	
   885                           ; 1 bytes @ 0xD
   886                           
   887  007D                     ??_LCDGotoXY:	
   888                           ; 1 bytes @ 0xD
   889                           
   890  007D                     ??___wmul:	
   891                           ; 1 bytes @ 0xD
   892                           
   893                           
   894                           ; 1 bytes @ 0xD
   895  007D                     	ds	1
   896  007E                     ??_showClock:	
   897  007E                     ??_main:	
   898                           ; 1 bytes @ 0xE
   899                           
   900                           
   901                           	psect	cstackBANK0
   902  0020                     __pcstackBANK0:	
   903                           ; 1 bytes @ 0xE
   904                           
   905  0020                     ??_LCDWriteInt:	
   906  0020                     LCDInit@style:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0020                     LCDWriteString@cc:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0020                     LCDGotoXY@x:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0020                     ___wmul@product:	
   916                           ; 1 bytes @ 0x0
   917                           
   918                           
   919                           ; 2 bytes @ 0x0
   920  0020                     	ds	1
   921  0021                     LCDWriteString@msg:	
   922                           
   923                           ; 1 bytes @ 0x1
   924  0021                     	ds	1
   925  0022                     ??_readClock:	
   926                           
   927                           ; 1 bytes @ 0x2
   928  0022                     	ds	1
   929  0023                     LCDWriteInt@c:	
   930                           
   931                           ; 2 bytes @ 0x3
   932  0023                     	ds	2
   933  0025                     readClock@n:	
   934  0025                     LCDWriteInt@d:	
   935                           ; 1 bytes @ 0x5
   936                           
   937                           
   938                           ; 2 bytes @ 0x5
   939  0025                     	ds	1
   940  0026                     readClock@a:	
   941                           
   942                           ; 1 bytes @ 0x6
   943  0026                     	ds	1
   944  0027                     LCDWriteInt@val:	
   945  0027                     readClock@b:	
   946                           ; 1 bytes @ 0x7
   947                           
   948                           
   949                           ; 1 bytes @ 0x7
   950  0027                     	ds	1
   951  0028                     ??_doMenu:	
   952  0028                     readClock@c:	
   953                           ; 1 bytes @ 0x8
   954                           
   955                           
   956                           ; 1 bytes @ 0x8
   957  0028                     	ds	3
   958  002B                     doMenu@h:	
   959                           
   960                           ; 2 bytes @ 0xB
   961  002B                     	ds	2
   962  002D                     doMenu@m:	
   963                           
   964                           ; 2 bytes @ 0xD
   965  002D                     	ds	2
   966  002F                     doMenu@s:	
   967                           
   968                           ; 2 bytes @ 0xF
   969  002F                     	ds	2
   970  0031                     doMenu@n:	
   971                           
   972                           ; 2 bytes @ 0x11
   973  0031                     	ds	2
   974  0033                     doMenu@d:	
   975                           
   976                           ; 2 bytes @ 0x13
   977  0033                     	ds	2
   978  0035                     doMenu@m_236:	
   979                           
   980                           ; 2 bytes @ 0x15
   981  0035                     	ds	2
   982  0037                     doMenu@y:	
   983                           
   984                           ; 2 bytes @ 0x17
   985  0037                     	ds	2
   986                           
   987                           	psect	maintext
   988  0D65                     __pmaintext:	
   989 ;;
   990 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   991 ;;
   992 ;; *************** function _main *****************
   993 ;; Defined at:
   994 ;;		line 45 in file "LCDTime.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;		None
   997 ;; Auto vars:     Size  Location     Type
   998 ;;		None
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1003 ;; Tracked objects:
  1004 ;;		On entry : B00/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1008 ;;      Params:         0       0       0       0       0
  1009 ;;      Locals:         0       0       0       0       0
  1010 ;;      Temps:          0       0       0       0       0
  1011 ;;      Totals:         0       0       0       0       0
  1012 ;;Total ram usage:        0 bytes
  1013 ;; Hardware stack levels required when called:    5
  1014 ;; This function calls:
  1015 ;;		_DS1307_Init
  1016 ;;		_I2C_Init
  1017 ;;		_LCDByte
  1018 ;;		_LCDInit
  1019 ;;		_doMenu
  1020 ;;		_readClock
  1021 ;;		_readInputs
  1022 ;;		_showClock
  1023 ;; This function is called by:
  1024 ;;		Startup code after reset
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028                           
  1029                           ;psect for function _main
  1030  0D65                     _main:	
  1031                           
  1032                           ;LCDTime.c: 47: I2C_Init() ;
  1033                           
  1034                           ;incstack = 0
  1035                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1036  0D65  120A  158A  23BD  120A  158A  	fcall	_I2C_Init
  1037                           
  1038                           ;LCDTime.c: 48: LCDInit(0B00000000);
  1039  0D6A  3000               	movlw	0
  1040  0D6B  120A  158A  25C9  120A  158A  	fcall	_LCDInit
  1041                           
  1042                           ;LCDTime.c: 49: DS1307_Init() ;
  1043  0D70  120A  158A  2604  120A  158A  	fcall	_DS1307_Init
  1044                           
  1045                           ;LCDTime.c: 51: (LCDByte(0b00000001,0));
  1046  0D75  01F5               	clrf	LCDByte@isdata
  1047  0D76  3001               	movlw	1
  1048  0D77  120A  158A  2654  120A  158A  	fcall	_LCDByte
  1049  0D7C                     l2370:	
  1050                           ;LCDTime.c: 53: while(1)
  1051                           
  1052                           
  1053                           ;LCDTime.c: 54: {
  1054                           ;LCDTime.c: 55: readClock();
  1055  0D7C  120A  118A  2249  120A  158A  	fcall	_readClock
  1056                           
  1057                           ;LCDTime.c: 57: showClock() ;
  1058  0D81  120A  158A  242B  120A  158A  	fcall	_showClock
  1059                           
  1060                           ;LCDTime.c: 59: readInputs() ;
  1061  0D86  120A  158A  2536  120A  158A  	fcall	_readInputs
  1062                           
  1063                           ;LCDTime.c: 61: if (bButton)
  1064  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  1065  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  1066  0D8D  0848               	movf	_bButton,w
  1067  0D8E  1903               	btfsc	3,2
  1068  0D8F  2D7C               	goto	l2370
  1069                           
  1070                           ;LCDTime.c: 62: doMenu();
  1071  0D90  120A  118A  236F  120A  158A  	fcall	_doMenu
  1072  0D95  2D7C               	goto	l2370
  1073  0D96                     __end_of_main:	
  1074                           
  1075                           	psect	text1
  1076  0C2B                     __ptext1:	
  1077 ;; *************** function _showClock *****************
  1078 ;; Defined at:
  1079 ;;		line 373 in file "LCDTime.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;		None
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;		None
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  1    wreg      void 
  1086 ;; Registers used:
  1087 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1093 ;;      Params:         0       0       0       0       0
  1094 ;;      Locals:         0       0       0       0       0
  1095 ;;      Temps:          0       0       0       0       0
  1096 ;;      Totals:         0       0       0       0       0
  1097 ;;Total ram usage:        0 bytes
  1098 ;; Hardware stack levels used:    1
  1099 ;; Hardware stack levels required when called:    4
  1100 ;; This function calls:
  1101 ;;		_LCDGotoXY
  1102 ;;		_showDate
  1103 ;;		_showTime
  1104 ;; This function is called by:
  1105 ;;		_main
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           
  1110                           ;psect for function _showClock
  1111  0C2B                     _showClock:	
  1112                           
  1113                           ;LCDTime.c: 375: LCDGotoXY(0,0) ;
  1114                           
  1115                           ;incstack = 0
  1116                           ; Regs used in _showClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1117  0C2B  01FC               	clrf	LCDGotoXY@y
  1118  0C2C  3000               	movlw	0
  1119  0C2D  120A  158A  2469  120A  158A  	fcall	_LCDGotoXY
  1120                           
  1121                           ;LCDTime.c: 376: showTime() ;
  1122  0C32  120A  158A  2596  120A  158A  	fcall	_showTime
  1123                           
  1124                           ;LCDTime.c: 378: LCDGotoXY(0,1) ;
  1125  0C37  01FC               	clrf	LCDGotoXY@y
  1126  0C38  0AFC               	incf	LCDGotoXY@y,f
  1127  0C39  3000               	movlw	0
  1128  0C3A  120A  158A  2469  120A  158A  	fcall	_LCDGotoXY
  1129                           
  1130                           ;LCDTime.c: 379: showDate() ;
  1131  0C3F  120A  118A  21B2   	fcall	_showDate
  1132  0C42  0008               	return
  1133  0C43                     __end_of_showClock:	
  1134                           
  1135                           	psect	text2
  1136  0249                     __ptext2:	
  1137 ;; *************** function _readClock *****************
  1138 ;; Defined at:
  1139 ;;		line 350 in file "LCDTime.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;		None
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  c               1    8[BANK0 ] unsigned char 
  1144 ;;  b               1    7[BANK0 ] unsigned char 
  1145 ;;  a               1    6[BANK0 ] unsigned char 
  1146 ;;  n               1    5[BANK0 ] unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  1    wreg      void 
  1149 ;; Registers used:
  1150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1156 ;;      Params:         0       0       0       0       0
  1157 ;;      Locals:         0       4       0       0       0
  1158 ;;      Temps:          0       3       0       0       0
  1159 ;;      Totals:         0       7       0       0       0
  1160 ;;Total ram usage:        7 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; Hardware stack levels required when called:    4
  1163 ;; This function calls:
  1164 ;;		_DS1307_GetDate
  1165 ;;		_DS1307_GetTime
  1166 ;;		___awdiv
  1167 ;;		___wmul
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           
  1174                           ;psect for function _readClock
  1175  0249                     _readClock:	
  1176                           
  1177                           ;LCDTime.c: 352: unsigned char a,b,c,n ;
  1178                           ;LCDTime.c: 354: DS1307_GetTime(&a,&b,&c);
  1179                           
  1180                           ;incstack = 0
  1181                           ; Regs used in _readClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1182  0249  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1183  024A  1283               	bcf	3,5	;RP0=0, select bank0
  1184  024B  1303               	bcf	3,6	;RP1=0, select bank0
  1185  024C  00A2               	movwf	??_readClock
  1186  024D  0822               	movf	??_readClock,w
  1187  024E  00F5               	movwf	DS1307_GetTime@m_ptr
  1188  024F  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1189  0250  00A3               	movwf	??_readClock+1
  1190  0251  0823               	movf	??_readClock+1,w
  1191  0252  00F6               	movwf	DS1307_GetTime@s_ptr
  1192  0253  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1193  0254  120A  158A  26F4  120A  118A  	fcall	_DS1307_GetTime
  1194                           
  1195                           ;LCDTime.c: 356: hour = (a % 16) + ((a / 16 ) * 10) ;
  1196  0259  3010               	movlw	16
  1197  025A  00F0               	movwf	___awdiv@divisor
  1198  025B  3000               	movlw	0
  1199  025C  00F1               	movwf	___awdiv@divisor+1
  1200  025D  1283               	bcf	3,5	;RP0=0, select bank0
  1201  025E  1303               	bcf	3,6	;RP1=0, select bank0
  1202  025F  0826               	movf	readClock@a,w
  1203  0260  00A2               	movwf	??_readClock
  1204  0261  01A3               	clrf	??_readClock+1
  1205  0262  0822               	movf	??_readClock,w
  1206  0263  00F2               	movwf	___awdiv@dividend
  1207  0264  0823               	movf	??_readClock+1,w
  1208  0265  00F3               	movwf	___awdiv@dividend+1
  1209  0266  120A  158A  274A  120A  118A  	fcall	___awdiv
  1210  026B  0871               	movf	?___awdiv+1,w
  1211  026C  00FA               	movwf	___wmul@multiplier+1
  1212  026D  0870               	movf	?___awdiv,w
  1213  026E  00F9               	movwf	___wmul@multiplier
  1214  026F  300A               	movlw	10
  1215  0270  00FB               	movwf	___wmul@multiplicand
  1216  0271  3000               	movlw	0
  1217  0272  00FC               	movwf	___wmul@multiplicand+1
  1218  0273  120A  158A  248F  120A  118A  	fcall	___wmul
  1219  0278  1283               	bcf	3,5	;RP0=0, select bank0
  1220  0279  1303               	bcf	3,6	;RP1=0, select bank0
  1221  027A  0826               	movf	readClock@a,w
  1222  027B  390F               	andlw	15
  1223  027C  0779               	addwf	?___wmul,w
  1224  027D  00BD               	movwf	_hour
  1225  027E  087A               	movf	?___wmul+1,w
  1226  027F  1803               	skipnc
  1227  0280  0A7A               	incf	?___wmul+1,w
  1228  0281  00BE               	movwf	_hour+1
  1229                           
  1230                           ;LCDTime.c: 357: minute = (b % 16) + ((b / 16 ) * 10) ;
  1231  0282  3010               	movlw	16
  1232  0283  00F0               	movwf	___awdiv@divisor
  1233  0284  3000               	movlw	0
  1234  0285  00F1               	movwf	___awdiv@divisor+1
  1235  0286  0827               	movf	readClock@b,w
  1236  0287  00A2               	movwf	??_readClock
  1237  0288  01A3               	clrf	??_readClock+1
  1238  0289  0822               	movf	??_readClock,w
  1239  028A  00F2               	movwf	___awdiv@dividend
  1240  028B  0823               	movf	??_readClock+1,w
  1241  028C  00F3               	movwf	___awdiv@dividend+1
  1242  028D  120A  158A  274A  120A  118A  	fcall	___awdiv
  1243  0292  0871               	movf	?___awdiv+1,w
  1244  0293  00FA               	movwf	___wmul@multiplier+1
  1245  0294  0870               	movf	?___awdiv,w
  1246  0295  00F9               	movwf	___wmul@multiplier
  1247  0296  300A               	movlw	10
  1248  0297  00FB               	movwf	___wmul@multiplicand
  1249  0298  3000               	movlw	0
  1250  0299  00FC               	movwf	___wmul@multiplicand+1
  1251  029A  120A  158A  248F  120A  118A  	fcall	___wmul
  1252  029F  1283               	bcf	3,5	;RP0=0, select bank0
  1253  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  1254  02A1  0827               	movf	readClock@b,w
  1255  02A2  390F               	andlw	15
  1256  02A3  0779               	addwf	?___wmul,w
  1257  02A4  00BF               	movwf	_minute
  1258  02A5  087A               	movf	?___wmul+1,w
  1259  02A6  1803               	skipnc
  1260  02A7  0A7A               	incf	?___wmul+1,w
  1261  02A8  00C0               	movwf	_minute+1
  1262                           
  1263                           ;LCDTime.c: 358: seconds = (c % 16) + ((c / 16 ) * 10) ;
  1264  02A9  3010               	movlw	16
  1265  02AA  00F0               	movwf	___awdiv@divisor
  1266  02AB  3000               	movlw	0
  1267  02AC  00F1               	movwf	___awdiv@divisor+1
  1268  02AD  0828               	movf	readClock@c,w
  1269  02AE  00A2               	movwf	??_readClock
  1270  02AF  01A3               	clrf	??_readClock+1
  1271  02B0  0822               	movf	??_readClock,w
  1272  02B1  00F2               	movwf	___awdiv@dividend
  1273  02B2  0823               	movf	??_readClock+1,w
  1274  02B3  00F3               	movwf	___awdiv@dividend+1
  1275  02B4  120A  158A  274A  120A  118A  	fcall	___awdiv
  1276  02B9  0871               	movf	?___awdiv+1,w
  1277  02BA  00FA               	movwf	___wmul@multiplier+1
  1278  02BB  0870               	movf	?___awdiv,w
  1279  02BC  00F9               	movwf	___wmul@multiplier
  1280  02BD  300A               	movlw	10
  1281  02BE  00FB               	movwf	___wmul@multiplicand
  1282  02BF  3000               	movlw	0
  1283  02C0  00FC               	movwf	___wmul@multiplicand+1
  1284  02C1  120A  158A  248F  120A  118A  	fcall	___wmul
  1285  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  1286  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  1287  02C8  0828               	movf	readClock@c,w
  1288  02C9  390F               	andlw	15
  1289  02CA  0779               	addwf	?___wmul,w
  1290  02CB  00C3               	movwf	_seconds
  1291  02CC  087A               	movf	?___wmul+1,w
  1292  02CD  1803               	skipnc
  1293  02CE  0A7A               	incf	?___wmul+1,w
  1294  02CF  00C4               	movwf	_seconds+1
  1295                           
  1296                           ;LCDTime.c: 360: if (hour != last_hour)
  1297  02D0  0847               	movf	_last_hour,w
  1298  02D1  00A2               	movwf	??_readClock
  1299  02D2  01A3               	clrf	??_readClock+1
  1300  02D3  083E               	movf	_hour+1,w
  1301  02D4  0623               	xorwf	??_readClock+1,w
  1302  02D5  1D03               	skipz
  1303  02D6  2AD9               	goto	u1625
  1304  02D7  083D               	movf	_hour,w
  1305  02D8  0622               	xorwf	??_readClock,w
  1306  02D9                     u1625:	
  1307  02D9  1903               	skipnz
  1308  02DA  0008               	return
  1309                           
  1310                           ;LCDTime.c: 361: {
  1311                           ;LCDTime.c: 362: last_hour = hour ;
  1312  02DB  083D               	movf	_hour,w
  1313  02DC  00A2               	movwf	??_readClock
  1314  02DD  0822               	movf	??_readClock,w
  1315  02DE  00C7               	movwf	_last_hour
  1316                           
  1317                           ;LCDTime.c: 364: DS1307_GetDate(&n,&a,&b,&c) ;
  1318  02DF  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1319  02E0  00A2               	movwf	??_readClock
  1320  02E1  0822               	movf	??_readClock,w
  1321  02E2  00F5               	movwf	DS1307_GetDate@d_ptr
  1322  02E3  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1323  02E4  00A3               	movwf	??_readClock+1
  1324  02E5  0823               	movf	??_readClock+1,w
  1325  02E6  00F6               	movwf	DS1307_GetDate@m_ptr
  1326  02E7  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1327  02E8  00A4               	movwf	??_readClock+2
  1328  02E9  0824               	movf	??_readClock+2,w
  1329  02EA  00F7               	movwf	DS1307_GetDate@y_ptr
  1330  02EB  3025               	movlw	(low (readClock@n| 0))& (0+255)
  1331  02EC  120A  118A  20E4  120A  118A  	fcall	_DS1307_GetDate
  1332                           
  1333                           ;LCDTime.c: 366: day = (n % 16) ;
  1334  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  1335  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  1336  02F3  0825               	movf	readClock@n,w
  1337  02F4  390F               	andlw	15
  1338  02F5  00A2               	movwf	??_readClock
  1339  02F6  01A3               	clrf	??_readClock+1
  1340  02F7  0822               	movf	??_readClock,w
  1341  02F8  00BB               	movwf	_day
  1342  02F9  0823               	movf	??_readClock+1,w
  1343  02FA  00BC               	movwf	_day+1
  1344                           
  1345                           ;LCDTime.c: 367: date = (a % 16) + ((a / 16 ) * 10) ;
  1346  02FB  3010               	movlw	16
  1347  02FC  00F0               	movwf	___awdiv@divisor
  1348  02FD  3000               	movlw	0
  1349  02FE  00F1               	movwf	___awdiv@divisor+1
  1350  02FF  0826               	movf	readClock@a,w
  1351  0300  00A2               	movwf	??_readClock
  1352  0301  01A3               	clrf	??_readClock+1
  1353  0302  0822               	movf	??_readClock,w
  1354  0303  00F2               	movwf	___awdiv@dividend
  1355  0304  0823               	movf	??_readClock+1,w
  1356  0305  00F3               	movwf	___awdiv@dividend+1
  1357  0306  120A  158A  274A  120A  118A  	fcall	___awdiv
  1358  030B  0871               	movf	?___awdiv+1,w
  1359  030C  00FA               	movwf	___wmul@multiplier+1
  1360  030D  0870               	movf	?___awdiv,w
  1361  030E  00F9               	movwf	___wmul@multiplier
  1362  030F  300A               	movlw	10
  1363  0310  00FB               	movwf	___wmul@multiplicand
  1364  0311  3000               	movlw	0
  1365  0312  00FC               	movwf	___wmul@multiplicand+1
  1366  0313  120A  158A  248F  120A  118A  	fcall	___wmul
  1367  0318  1283               	bcf	3,5	;RP0=0, select bank0
  1368  0319  1303               	bcf	3,6	;RP1=0, select bank0
  1369  031A  0826               	movf	readClock@a,w
  1370  031B  390F               	andlw	15
  1371  031C  0779               	addwf	?___wmul,w
  1372  031D  00B9               	movwf	_date
  1373  031E  087A               	movf	?___wmul+1,w
  1374  031F  1803               	skipnc
  1375  0320  0A7A               	incf	?___wmul+1,w
  1376  0321  00BA               	movwf	_date+1
  1377                           
  1378                           ;LCDTime.c: 368: month = (b % 16) + ((b / 16 ) * 10) ;
  1379  0322  3010               	movlw	16
  1380  0323  00F0               	movwf	___awdiv@divisor
  1381  0324  3000               	movlw	0
  1382  0325  00F1               	movwf	___awdiv@divisor+1
  1383  0326  0827               	movf	readClock@b,w
  1384  0327  00A2               	movwf	??_readClock
  1385  0328  01A3               	clrf	??_readClock+1
  1386  0329  0822               	movf	??_readClock,w
  1387  032A  00F2               	movwf	___awdiv@dividend
  1388  032B  0823               	movf	??_readClock+1,w
  1389  032C  00F3               	movwf	___awdiv@dividend+1
  1390  032D  120A  158A  274A  120A  118A  	fcall	___awdiv
  1391  0332  0871               	movf	?___awdiv+1,w
  1392  0333  00FA               	movwf	___wmul@multiplier+1
  1393  0334  0870               	movf	?___awdiv,w
  1394  0335  00F9               	movwf	___wmul@multiplier
  1395  0336  300A               	movlw	10
  1396  0337  00FB               	movwf	___wmul@multiplicand
  1397  0338  3000               	movlw	0
  1398  0339  00FC               	movwf	___wmul@multiplicand+1
  1399  033A  120A  158A  248F  120A  118A  	fcall	___wmul
  1400  033F  1283               	bcf	3,5	;RP0=0, select bank0
  1401  0340  1303               	bcf	3,6	;RP1=0, select bank0
  1402  0341  0827               	movf	readClock@b,w
  1403  0342  390F               	andlw	15
  1404  0343  0779               	addwf	?___wmul,w
  1405  0344  00C1               	movwf	_month
  1406  0345  087A               	movf	?___wmul+1,w
  1407  0346  1803               	skipnc
  1408  0347  0A7A               	incf	?___wmul+1,w
  1409  0348  00C2               	movwf	_month+1
  1410                           
  1411                           ;LCDTime.c: 369: year = (c % 16) + ((c / 16 ) * 10) ;
  1412  0349  3010               	movlw	16
  1413  034A  00F0               	movwf	___awdiv@divisor
  1414  034B  3000               	movlw	0
  1415  034C  00F1               	movwf	___awdiv@divisor+1
  1416  034D  0828               	movf	readClock@c,w
  1417  034E  00A2               	movwf	??_readClock
  1418  034F  01A3               	clrf	??_readClock+1
  1419  0350  0822               	movf	??_readClock,w
  1420  0351  00F2               	movwf	___awdiv@dividend
  1421  0352  0823               	movf	??_readClock+1,w
  1422  0353  00F3               	movwf	___awdiv@dividend+1
  1423  0354  120A  158A  274A  120A  118A  	fcall	___awdiv
  1424  0359  0871               	movf	?___awdiv+1,w
  1425  035A  00FA               	movwf	___wmul@multiplier+1
  1426  035B  0870               	movf	?___awdiv,w
  1427  035C  00F9               	movwf	___wmul@multiplier
  1428  035D  300A               	movlw	10
  1429  035E  00FB               	movwf	___wmul@multiplicand
  1430  035F  3000               	movlw	0
  1431  0360  00FC               	movwf	___wmul@multiplicand+1
  1432  0361  120A  158A  248F   	fcall	___wmul
  1433  0364  1283               	bcf	3,5	;RP0=0, select bank0
  1434  0365  1303               	bcf	3,6	;RP1=0, select bank0
  1435  0366  0828               	movf	readClock@c,w
  1436  0367  390F               	andlw	15
  1437  0368  0779               	addwf	?___wmul,w
  1438  0369  00C5               	movwf	_year
  1439  036A  087A               	movf	?___wmul+1,w
  1440  036B  1803               	skipnc
  1441  036C  0A7A               	incf	?___wmul+1,w
  1442  036D  00C6               	movwf	_year+1
  1443  036E  0008               	return
  1444  036F                     __end_of_readClock:	
  1445                           
  1446                           	psect	text3
  1447  0C8F                     __ptext3:	
  1448 ;; *************** function ___wmul *****************
  1449 ;; Defined at:
  1450 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  multiplier      2    9[COMMON] unsigned int 
  1453 ;;  multiplicand    2   11[COMMON] unsigned int 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  product         2    0[BANK0 ] unsigned int 
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  2    9[COMMON] unsigned int 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1465 ;;      Params:         4       0       0       0       0
  1466 ;;      Locals:         0       2       0       0       0
  1467 ;;      Temps:          0       0       0       0       0
  1468 ;;      Totals:         4       2       0       0       0
  1469 ;;Total ram usage:        6 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; This function calls:
  1472 ;;		Nothing
  1473 ;; This function is called by:
  1474 ;;		_readClock
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           
  1479                           ;psect for function ___wmul
  1480  0C8F                     ___wmul:	
  1481                           
  1482                           ;incstack = 0
  1483                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1484  0C8F  1283               	bcf	3,5	;RP0=0, select bank0
  1485  0C90  1303               	bcf	3,6	;RP1=0, select bank0
  1486  0C91  01A0               	clrf	___wmul@product
  1487  0C92  01A1               	clrf	___wmul@product+1
  1488  0C93                     l1994:	
  1489  0C93  1C79               	btfss	___wmul@multiplier,0
  1490  0C94  2C9D               	goto	l424
  1491  0C95  087B               	movf	___wmul@multiplicand,w
  1492  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  1493  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  1494  0C98  07A0               	addwf	___wmul@product,f
  1495  0C99  1803               	skipnc
  1496  0C9A  0AA1               	incf	___wmul@product+1,f
  1497  0C9B  087C               	movf	___wmul@multiplicand+1,w
  1498  0C9C  07A1               	addwf	___wmul@product+1,f
  1499  0C9D                     l424:	
  1500  0C9D  3001               	movlw	1
  1501  0C9E                     u1585:	
  1502  0C9E  1003               	clrc
  1503  0C9F  0DFB               	rlf	___wmul@multiplicand,f
  1504  0CA0  0DFC               	rlf	___wmul@multiplicand+1,f
  1505  0CA1  3EFF               	addlw	-1
  1506  0CA2  1D03               	skipz
  1507  0CA3  2C9E               	goto	u1585
  1508  0CA4  3001               	movlw	1
  1509  0CA5                     u1595:	
  1510  0CA5  1003               	clrc
  1511  0CA6  0CFA               	rrf	___wmul@multiplier+1,f
  1512  0CA7  0CF9               	rrf	___wmul@multiplier,f
  1513  0CA8  3EFF               	addlw	-1
  1514  0CA9  1D03               	skipz
  1515  0CAA  2CA5               	goto	u1595
  1516  0CAB  0879               	movf	___wmul@multiplier,w
  1517  0CAC  047A               	iorwf	___wmul@multiplier+1,w
  1518  0CAD  1D03               	btfss	3,2
  1519  0CAE  2C93               	goto	l1994
  1520  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  1521  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  1522  0CB1  0821               	movf	___wmul@product+1,w
  1523  0CB2  00FA               	movwf	?___wmul+1
  1524  0CB3  0820               	movf	___wmul@product,w
  1525  0CB4  00F9               	movwf	?___wmul
  1526  0CB5  0008               	return
  1527  0CB6                     __end_of___wmul:	
  1528                           
  1529                           	psect	text4
  1530  0EF4                     __ptext4:	
  1531 ;; *************** function _DS1307_GetTime *****************
  1532 ;; Defined at:
  1533 ;;		line 66 in file "DS1307.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  h_ptr           1    wreg     PTR unsigned char 
  1536 ;;		 -> readClock@a(1), 
  1537 ;;  m_ptr           1    5[COMMON] PTR unsigned char 
  1538 ;;		 -> readClock@b(1), 
  1539 ;;  s_ptr           1    6[COMMON] PTR unsigned char 
  1540 ;;		 -> readClock@c(1), 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;  h_ptr           1    8[COMMON] PTR unsigned char 
  1543 ;;		 -> readClock@a(1), 
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  1    wreg      void 
  1546 ;; Registers used:
  1547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1553 ;;      Params:         2       0       0       0       0
  1554 ;;      Locals:         1       0       0       0       0
  1555 ;;      Temps:          1       0       0       0       0
  1556 ;;      Totals:         4       0       0       0       0
  1557 ;;Total ram usage:        4 bytes
  1558 ;; Hardware stack levels used:    1
  1559 ;; Hardware stack levels required when called:    3
  1560 ;; This function calls:
  1561 ;;		_DS1307_Read
  1562 ;;		_DS1307_Write
  1563 ;;		_I2C_Ack
  1564 ;;		_I2C_NoAck
  1565 ;;		_I2C_Start
  1566 ;;		_I2C_Stop
  1567 ;; This function is called by:
  1568 ;;		_readClock
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           
  1573                           ;psect for function _DS1307_GetTime
  1574  0EF4                     _DS1307_GetTime:	
  1575                           
  1576                           ;incstack = 0
  1577                           ; Regs used in _DS1307_GetTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1578                           ;DS1307_GetTime@h_ptr stored from wreg
  1579  0EF4  00F8               	movwf	DS1307_GetTime@h_ptr
  1580                           
  1581                           ;DS1307.c: 68: I2C_Start();
  1582  0EF5  120A  158A  2409  120A  158A  	fcall	_I2C_Start
  1583                           
  1584                           ;DS1307.c: 69: DS1307_Write(0xD0);
  1585  0EFA  30D0               	movlw	208
  1586  0EFB  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  1587                           
  1588                           ;DS1307.c: 70: DS1307_Write(0x00);
  1589  0F00  3000               	movlw	0
  1590  0F01  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  1591                           
  1592                           ;DS1307.c: 71: I2C_Stop();
  1593  0F06  120A  158A  23F9  120A  158A  	fcall	_I2C_Stop
  1594                           
  1595                           ;DS1307.c: 72: I2C_Start();
  1596  0F0B  120A  158A  2409  120A  158A  	fcall	_I2C_Start
  1597                           
  1598                           ;DS1307.c: 73: DS1307_Write(0xD1);
  1599  0F10  30D1               	movlw	209
  1600  0F11  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  1601                           
  1602                           ;DS1307.c: 74: *s_ptr = DS1307_Read(); I2C_Ack();
  1603  0F16  120A  158A  23B9  120A  158A  	fcall	_DS1307_Read
  1604  0F1B  00F7               	movwf	??_DS1307_GetTime
  1605  0F1C  0876               	movf	DS1307_GetTime@s_ptr,w
  1606  0F1D  0084               	movwf	4
  1607  0F1E  0877               	movf	??_DS1307_GetTime,w
  1608  0F1F  1383               	bcf	3,7	;select IRP bank0
  1609  0F20  0080               	movwf	0
  1610  0F21  120A  158A  23D5  120A  158A  	fcall	_I2C_Ack
  1611                           
  1612                           ;DS1307.c: 75: *m_ptr = DS1307_Read(); I2C_Ack();
  1613  0F26  120A  158A  23B9  120A  158A  	fcall	_DS1307_Read
  1614  0F2B  00F7               	movwf	??_DS1307_GetTime
  1615  0F2C  0875               	movf	DS1307_GetTime@m_ptr,w
  1616  0F2D  0084               	movwf	4
  1617  0F2E  0877               	movf	??_DS1307_GetTime,w
  1618  0F2F  1383               	bcf	3,7	;select IRP bank0
  1619  0F30  0080               	movwf	0
  1620  0F31  120A  158A  23D5  120A  158A  	fcall	_I2C_Ack
  1621                           
  1622                           ;DS1307.c: 76: *h_ptr = DS1307_Read(); I2C_NoAck();
  1623  0F36  120A  158A  23B9  120A  158A  	fcall	_DS1307_Read
  1624  0F3B  00F7               	movwf	??_DS1307_GetTime
  1625  0F3C  0878               	movf	DS1307_GetTime@h_ptr,w
  1626  0F3D  0084               	movwf	4
  1627  0F3E  0877               	movf	??_DS1307_GetTime,w
  1628  0F3F  1383               	bcf	3,7	;select IRP bank0
  1629  0F40  0080               	movwf	0
  1630  0F41  120A  158A  23CB  120A  158A  	fcall	_I2C_NoAck
  1631                           
  1632                           ;DS1307.c: 77: I2C_Stop();
  1633  0F46  120A  158A  23F9   	fcall	_I2C_Stop
  1634  0F49  0008               	return
  1635  0F4A                     __end_of_DS1307_GetTime:	
  1636                           
  1637                           	psect	text5
  1638  00E4                     __ptext5:	
  1639 ;; *************** function _DS1307_GetDate *****************
  1640 ;; Defined at:
  1641 ;;		line 80 in file "DS1307.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;  n_ptr           1    wreg     PTR unsigned char 
  1644 ;;		 -> readClock@n(1), 
  1645 ;;  d_ptr           1    5[COMMON] PTR unsigned char 
  1646 ;;		 -> readClock@a(1), 
  1647 ;;  m_ptr           1    6[COMMON] PTR unsigned char 
  1648 ;;		 -> readClock@b(1), 
  1649 ;;  y_ptr           1    7[COMMON] PTR unsigned char 
  1650 ;;		 -> readClock@c(1), 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  n_ptr           1    9[COMMON] PTR unsigned char 
  1653 ;;		 -> readClock@n(1), 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1663 ;;      Params:         3       0       0       0       0
  1664 ;;      Locals:         1       0       0       0       0
  1665 ;;      Temps:          1       0       0       0       0
  1666 ;;      Totals:         5       0       0       0       0
  1667 ;;Total ram usage:        5 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    3
  1670 ;; This function calls:
  1671 ;;		_DS1307_Read
  1672 ;;		_DS1307_Write
  1673 ;;		_I2C_Ack
  1674 ;;		_I2C_NoAck
  1675 ;;		_I2C_Start
  1676 ;;		_I2C_Stop
  1677 ;; This function is called by:
  1678 ;;		_readClock
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           
  1683                           ;psect for function _DS1307_GetDate
  1684  00E4                     _DS1307_GetDate:	
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _DS1307_GetDate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1688                           ;DS1307_GetDate@n_ptr stored from wreg
  1689  00E4  00F9               	movwf	DS1307_GetDate@n_ptr
  1690                           
  1691                           ;DS1307.c: 82: I2C_Start();
  1692  00E5  120A  158A  2409  120A  118A  	fcall	_I2C_Start
  1693                           
  1694                           ;DS1307.c: 83: DS1307_Write(0xD0);
  1695  00EA  30D0               	movlw	208
  1696  00EB  120A  158A  23DF  120A  118A  	fcall	_DS1307_Write
  1697                           
  1698                           ;DS1307.c: 84: DS1307_Write(0x03);
  1699  00F0  3003               	movlw	3
  1700  00F1  120A  158A  23DF  120A  118A  	fcall	_DS1307_Write
  1701                           
  1702                           ;DS1307.c: 85: I2C_Stop();
  1703  00F6  120A  158A  23F9  120A  118A  	fcall	_I2C_Stop
  1704                           
  1705                           ;DS1307.c: 86: I2C_Start();
  1706  00FB  120A  158A  2409  120A  118A  	fcall	_I2C_Start
  1707                           
  1708                           ;DS1307.c: 87: DS1307_Write(0xD1);
  1709  0100  30D1               	movlw	209
  1710  0101  120A  158A  23DF  120A  118A  	fcall	_DS1307_Write
  1711                           
  1712                           ;DS1307.c: 88: *n_ptr = DS1307_Read(); I2C_Ack();
  1713  0106  120A  158A  23B9  120A  118A  	fcall	_DS1307_Read
  1714  010B  00F8               	movwf	??_DS1307_GetDate
  1715  010C  0879               	movf	DS1307_GetDate@n_ptr,w
  1716  010D  0084               	movwf	4
  1717  010E  0878               	movf	??_DS1307_GetDate,w
  1718  010F  1383               	bcf	3,7	;select IRP bank0
  1719  0110  0080               	movwf	0
  1720  0111  120A  158A  23D5  120A  118A  	fcall	_I2C_Ack
  1721                           
  1722                           ;DS1307.c: 89: *d_ptr = DS1307_Read(); I2C_Ack();
  1723  0116  120A  158A  23B9  120A  118A  	fcall	_DS1307_Read
  1724  011B  00F8               	movwf	??_DS1307_GetDate
  1725  011C  0875               	movf	DS1307_GetDate@d_ptr,w
  1726  011D  0084               	movwf	4
  1727  011E  0878               	movf	??_DS1307_GetDate,w
  1728  011F  1383               	bcf	3,7	;select IRP bank0
  1729  0120  0080               	movwf	0
  1730  0121  120A  158A  23D5  120A  118A  	fcall	_I2C_Ack
  1731                           
  1732                           ;DS1307.c: 90: *m_ptr = DS1307_Read(); I2C_Ack();
  1733  0126  120A  158A  23B9  120A  118A  	fcall	_DS1307_Read
  1734  012B  00F8               	movwf	??_DS1307_GetDate
  1735  012C  0876               	movf	DS1307_GetDate@m_ptr,w
  1736  012D  0084               	movwf	4
  1737  012E  0878               	movf	??_DS1307_GetDate,w
  1738  012F  1383               	bcf	3,7	;select IRP bank0
  1739  0130  0080               	movwf	0
  1740  0131  120A  158A  23D5  120A  118A  	fcall	_I2C_Ack
  1741                           
  1742                           ;DS1307.c: 91: *y_ptr = DS1307_Read(); I2C_NoAck();
  1743  0136  120A  158A  23B9  120A  118A  	fcall	_DS1307_Read
  1744  013B  00F8               	movwf	??_DS1307_GetDate
  1745  013C  0877               	movf	DS1307_GetDate@y_ptr,w
  1746  013D  0084               	movwf	4
  1747  013E  0878               	movf	??_DS1307_GetDate,w
  1748  013F  1383               	bcf	3,7	;select IRP bank0
  1749  0140  0080               	movwf	0
  1750  0141  120A  158A  23CB  120A  118A  	fcall	_I2C_NoAck
  1751                           
  1752                           ;DS1307.c: 92: I2C_Stop();
  1753  0146  120A  158A  23F9   	fcall	_I2C_Stop
  1754  0149  0008               	return
  1755  014A                     __end_of_DS1307_GetDate:	
  1756                           
  1757                           	psect	text6
  1758  0BD5                     __ptext6:	
  1759 ;; *************** function _I2C_Ack *****************
  1760 ;; Defined at:
  1761 ;;		line 81 in file "i2c.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;		None
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;		None
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      void 
  1768 ;; Registers used:
  1769 ;;		status,2, status,0, pclath, cstack
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1775 ;;      Params:         0       0       0       0       0
  1776 ;;      Locals:         0       0       0       0       0
  1777 ;;      Temps:          0       0       0       0       0
  1778 ;;      Totals:         0       0       0       0       0
  1779 ;;Total ram usage:        0 bytes
  1780 ;; Hardware stack levels used:    1
  1781 ;; Hardware stack levels required when called:    1
  1782 ;; This function calls:
  1783 ;;		_I2C_Clock
  1784 ;; This function is called by:
  1785 ;;		_DS1307_GetTime
  1786 ;;		_DS1307_GetDate
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           
  1791                           ;psect for function _I2C_Ack
  1792  0BD5                     _I2C_Ack:	
  1793                           
  1794                           ;i2c.c: 83: RD0 = 0;
  1795                           
  1796                           ;incstack = 0
  1797                           ; Regs used in _I2C_Ack: [status,2+status,0+pclath+cstack]
  1798  0BD5  1283               	bcf	3,5	;RP0=0, select bank0
  1799  0BD6  1303               	bcf	3,6	;RP1=0, select bank0
  1800  0BD7  1008               	bcf	8,0	;volatile
  1801                           
  1802                           ;i2c.c: 84: I2C_Clock();
  1803  0BD8  120A  158A  23C2   	fcall	_I2C_Clock
  1804                           
  1805                           ;i2c.c: 85: RD0 = 1;
  1806  0BDB  1283               	bcf	3,5	;RP0=0, select bank0
  1807  0BDC  1303               	bcf	3,6	;RP1=0, select bank0
  1808  0BDD  1408               	bsf	8,0	;volatile
  1809  0BDE  0008               	return
  1810  0BDF                     __end_of_I2C_Ack:	
  1811                           
  1812                           	psect	text7
  1813  036F                     __ptext7:	
  1814 ;; *************** function _doMenu *****************
  1815 ;; Defined at:
  1816 ;;		line 66 in file "LCDTime.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;  y               2   23[BANK0 ] int 
  1821 ;;  m               2   21[BANK0 ] int 
  1822 ;;  d               2   19[BANK0 ] int 
  1823 ;;  n               2   17[BANK0 ] int 
  1824 ;;  s               2   15[BANK0 ] int 
  1825 ;;  m               2   13[BANK0 ] int 
  1826 ;;  h               2   11[BANK0 ] int 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1836 ;;      Params:         0       0       0       0       0
  1837 ;;      Locals:         0      14       0       0       0
  1838 ;;      Temps:          0       3       0       0       0
  1839 ;;      Totals:         0      17       0       0       0
  1840 ;;Total ram usage:       17 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    4
  1843 ;; This function calls:
  1844 ;;		_DS1307_SetDate
  1845 ;;		_DS1307_SetTime
  1846 ;;		_LCDByte
  1847 ;;		_LCDGotoXY
  1848 ;;		_LCDWriteString
  1849 ;;		___awdiv
  1850 ;;		___awmod
  1851 ;;		_readInputs
  1852 ;;		_showDate
  1853 ;;		_showTime
  1854 ;; This function is called by:
  1855 ;;		_main
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           
  1860                           ;psect for function _doMenu
  1861  036F                     _doMenu:	
  1862  036F                     l2116:	
  1863                           ;LCDTime.c: 68: while(bButton)
  1864                           
  1865                           ;incstack = 0
  1866                           ; Regs used in _doMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1867                           
  1868  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0370  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0371  0848               	movf	_bButton,w
  1871  0372  1903               	btfsc	3,2
  1872  0373  2B7A               	goto	l2118
  1873                           
  1874                           ;LCDTime.c: 69: readInputs();
  1875  0374  120A  158A  2536  120A  118A  	fcall	_readInputs
  1876  0379  2B6F               	goto	l2116
  1877  037A                     l2118:	
  1878                           
  1879                           ;LCDTime.c: 72: if (menuFunction == 0 | menuFunction == 1)
  1880  037A  0849               	movf	_menuFunction,w
  1881  037B  1D03               	btfss	3,2
  1882  037C  0349               	decf	_menuFunction,w
  1883  037D  1D03               	btfss	3,2
  1884  037E  2D53               	goto	l2228
  1885                           
  1886                           ;LCDTime.c: 73: {
  1887                           ;LCDTime.c: 74: int h,m,s ;
  1888                           ;LCDTime.c: 76: h = hour ;
  1889  037F  083E               	movf	_hour+1,w
  1890  0380  00AC               	movwf	doMenu@h+1
  1891  0381  083D               	movf	_hour,w
  1892  0382  00AB               	movwf	doMenu@h
  1893                           
  1894                           ;LCDTime.c: 77: m = minute ;
  1895  0383  0840               	movf	_minute+1,w
  1896  0384  00AE               	movwf	doMenu@m+1
  1897  0385  083F               	movf	_minute,w
  1898  0386  00AD               	movwf	doMenu@m
  1899                           
  1900                           ;LCDTime.c: 78: s = seconds ;
  1901  0387  0844               	movf	_seconds+1,w
  1902  0388  00B0               	movwf	doMenu@s+1
  1903  0389  0843               	movf	_seconds,w
  1904  038A  00AF               	movwf	doMenu@s
  1905                           
  1906                           ;LCDTime.c: 80: (LCDByte(0b00000001,0));
  1907  038B  01F5               	clrf	LCDByte@isdata
  1908  038C  3001               	movlw	1
  1909  038D  120A  158A  2654  120A  118A  	fcall	_LCDByte
  1910                           
  1911                           ;LCDTime.c: 81: LCDWriteString("Set Hours");
  1912  0392  305F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1913  0393  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  1914  0398                     L4:	
  1915                           
  1916                           ;LCDTime.c: 83: LCDGotoXY(0,1) ;
  1917  0398  01FC               	clrf	LCDGotoXY@y
  1918  0399  0AFC               	incf	LCDGotoXY@y,f
  1919  039A  3000               	movlw	0
  1920  039B  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  1921                           
  1922                           ;LCDTime.c: 84: showTime();
  1923  03A0  120A  158A  2596  120A  118A  	fcall	_showTime
  1924  03A5                     l2154:	
  1925                           ;LCDTime.c: 86: while(!bButton)
  1926                           
  1927  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  1928  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  1929  03A7  0848               	movf	_bButton,w
  1930  03A8  1D03               	btfss	3,2
  1931  03A9  2BDE               	goto	l2158
  1932                           
  1933                           ;LCDTime.c: 87: {
  1934                           ;LCDTime.c: 88: readInputs();
  1935  03AA  120A  158A  2536  120A  118A  	fcall	_readInputs
  1936                           
  1937                           ;LCDTime.c: 90: if (state & 0x10)
  1938  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  1939  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  1940  03B1  1E4A               	btfss	_state,4
  1941  03B2  2BC7               	goto	l222
  1942                           
  1943                           ;LCDTime.c: 91: {
  1944                           ;LCDTime.c: 92: hour++;
  1945  03B3  3001               	movlw	1
  1946  03B4  07BD               	addwf	_hour,f
  1947  03B5  1803               	skipnc
  1948  03B6  0ABE               	incf	_hour+1,f
  1949  03B7  3000               	movlw	0
  1950  03B8  07BE               	addwf	_hour+1,f
  1951                           
  1952                           ;LCDTime.c: 93: if (hour > 23)
  1953  03B9  083E               	movf	_hour+1,w
  1954  03BA  3A80               	xorlw	128
  1955  03BB  00FF               	movwf	127
  1956  03BC  3080               	movlw	128
  1957  03BD  027F               	subwf	127,w
  1958  03BE  1D03               	skipz
  1959  03BF  2BC2               	goto	u1675
  1960  03C0  3018               	movlw	24
  1961  03C1  023D               	subwf	_hour,w
  1962  03C2                     u1675:	
  1963  03C2  1C03               	skipc
  1964  03C3  2BD3               	goto	l2148
  1965                           
  1966                           ;LCDTime.c: 94: hour = 0 ;
  1967  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  1968  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  1969  03C6  2BD1               	goto	l2146
  1970  03C7                     l222:	
  1971                           ;LCDTime.c: 95: }
  1972                           
  1973                           
  1974                           ;LCDTime.c: 96: else if (state & 0x20)
  1975  03C7  1ECA               	btfss	_state,5
  1976  03C8  2BD3               	goto	l2148
  1977                           
  1978                           ;LCDTime.c: 97: {
  1979                           ;LCDTime.c: 98: hour--;
  1980  03C9  30FF               	movlw	255
  1981  03CA  07BD               	addwf	_hour,f
  1982  03CB  1803               	skipnc
  1983  03CC  0ABE               	incf	_hour+1,f
  1984  03CD  30FF               	movlw	255
  1985  03CE  07BE               	addwf	_hour+1,f
  1986                           
  1987                           ;LCDTime.c: 99: if (hour < 0)
  1988  03CF  1FBE               	btfss	_hour+1,7
  1989  03D0  2BD3               	goto	l2148
  1990  03D1                     l2146:	
  1991                           
  1992                           ;LCDTime.c: 100: hour = 0 ;
  1993  03D1  01BD               	clrf	_hour
  1994  03D2  01BE               	clrf	_hour+1
  1995  03D3                     l2148:	
  1996                           
  1997                           ;LCDTime.c: 101: }
  1998                           ;LCDTime.c: 103: if (state)
  1999  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2000  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2001  03D5  084A               	movf	_state,w
  2002  03D6  1903               	btfsc	3,2
  2003  03D7  2BA5               	goto	l2154
  2004  03D8  2B98               	goto	L4
  2005  03D9                     l2156:	
  2006                           ;LCDTime.c: 107: }
  2007                           ;LCDTime.c: 108: }
  2008                           ;LCDTime.c: 110: while(bButton)
  2009                           
  2010                           ;LCDTime.c: 106: showTime();
  2011                           
  2012                           ;LCDTime.c: 104: {
  2013                           ;LCDTime.c: 105: LCDGotoXY(0,1) ;
  2014                           
  2015                           
  2016                           ;LCDTime.c: 111: readInputs();
  2017  03D9  120A  158A  2536  120A  118A  	fcall	_readInputs
  2018  03DE                     l2158:	
  2019  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2020  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2021  03E0  0848               	movf	_bButton,w
  2022  03E1  1D03               	btfss	3,2
  2023  03E2  2BD9               	goto	l2156
  2024                           
  2025                           ;LCDTime.c: 113: LCDGotoXY(0,0) ;
  2026  03E3  01FC               	clrf	LCDGotoXY@y
  2027  03E4  3000               	movlw	0
  2028  03E5  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2029                           
  2030                           ;LCDTime.c: 114: LCDWriteString("Set Minutes");
  2031  03EA  3035               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2032  03EB  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2033  03F0                     l2184:	
  2034                           ;LCDTime.c: 116: while(!bButton)
  2035                           
  2036  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2037  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  2038  03F2  0848               	movf	_bButton,w
  2039  03F3  1D03               	btfss	3,2
  2040  03F4  2C36               	goto	l2188
  2041                           
  2042                           ;LCDTime.c: 117: {
  2043                           ;LCDTime.c: 118: readInputs();
  2044  03F5  120A  158A  2536  120A  118A  	fcall	_readInputs
  2045                           
  2046                           ;LCDTime.c: 120: if (state & 0x10)
  2047  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2048  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2049  03FC  1E4A               	btfss	_state,4
  2050  03FD  2C12               	goto	l234
  2051                           
  2052                           ;LCDTime.c: 121: {
  2053                           ;LCDTime.c: 122: minute++;
  2054  03FE  3001               	movlw	1
  2055  03FF  07BF               	addwf	_minute,f
  2056  0400  1803               	skipnc
  2057  0401  0AC0               	incf	_minute+1,f
  2058  0402  3000               	movlw	0
  2059  0403  07C0               	addwf	_minute+1,f
  2060                           
  2061                           ;LCDTime.c: 123: if (minute > 59)
  2062  0404  0840               	movf	_minute+1,w
  2063  0405  3A80               	xorlw	128
  2064  0406  00FF               	movwf	127
  2065  0407  3080               	movlw	128
  2066  0408  027F               	subwf	127,w
  2067  0409  1D03               	skipz
  2068  040A  2C0D               	goto	u1745
  2069  040B  303C               	movlw	60
  2070  040C  023F               	subwf	_minute,w
  2071  040D                     u1745:	
  2072  040D  1C03               	skipc
  2073  040E  2C1E               	goto	l2178
  2074                           
  2075                           ;LCDTime.c: 124: minute = 0 ;
  2076  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2077  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2078  0411  2C1C               	goto	l2176
  2079  0412                     l234:	
  2080                           ;LCDTime.c: 125: }
  2081                           
  2082                           
  2083                           ;LCDTime.c: 126: else if (state & 0x20)
  2084  0412  1ECA               	btfss	_state,5
  2085  0413  2C1E               	goto	l2178
  2086                           
  2087                           ;LCDTime.c: 127: {
  2088                           ;LCDTime.c: 128: minute--;
  2089  0414  30FF               	movlw	255
  2090  0415  07BF               	addwf	_minute,f
  2091  0416  1803               	skipnc
  2092  0417  0AC0               	incf	_minute+1,f
  2093  0418  30FF               	movlw	255
  2094  0419  07C0               	addwf	_minute+1,f
  2095                           
  2096                           ;LCDTime.c: 129: if (minute < 0)
  2097  041A  1FC0               	btfss	_minute+1,7
  2098  041B  2C1E               	goto	l2178
  2099  041C                     l2176:	
  2100                           
  2101                           ;LCDTime.c: 130: minute = 0 ;
  2102  041C  01BF               	clrf	_minute
  2103  041D  01C0               	clrf	_minute+1
  2104  041E                     l2178:	
  2105                           
  2106                           ;LCDTime.c: 131: }
  2107                           ;LCDTime.c: 133: if (state)
  2108  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2109  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2110  0420  084A               	movf	_state,w
  2111  0421  1903               	btfsc	3,2
  2112  0422  2BF0               	goto	l2184
  2113                           
  2114                           ;LCDTime.c: 134: {
  2115                           ;LCDTime.c: 135: LCDGotoXY(0,1) ;
  2116  0423  01FC               	clrf	LCDGotoXY@y
  2117  0424  0AFC               	incf	LCDGotoXY@y,f
  2118  0425  3000               	movlw	0
  2119  0426  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2120                           
  2121                           ;LCDTime.c: 136: showTime();
  2122  042B  120A  158A  2596  120A  118A  	fcall	_showTime
  2123  0430  2BF0               	goto	l2184
  2124  0431                     l2186:	
  2125                           ;LCDTime.c: 137: }
  2126                           ;LCDTime.c: 138: }
  2127                           ;LCDTime.c: 140: while(bButton)
  2128                           
  2129                           
  2130                           ;LCDTime.c: 141: readInputs();
  2131  0431  120A  158A  2536  120A  118A  	fcall	_readInputs
  2132  0436                     l2188:	
  2133  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2134  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2135  0438  0848               	movf	_bButton,w
  2136  0439  1D03               	btfss	3,2
  2137  043A  2C31               	goto	l2186
  2138                           
  2139                           ;LCDTime.c: 143: LCDGotoXY(0,0) ;
  2140  043B  01FC               	clrf	LCDGotoXY@y
  2141  043C  3000               	movlw	0
  2142  043D  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2143                           
  2144                           ;LCDTime.c: 144: LCDWriteString("Set Seconds");
  2145  0442  3029               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2146  0443  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2147  0448                     l2214:	
  2148                           ;LCDTime.c: 146: while(!bButton)
  2149                           
  2150  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2151  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2152  044A  0848               	movf	_bButton,w
  2153  044B  1D03               	btfss	3,2
  2154  044C  2C89               	goto	l2216
  2155                           
  2156                           ;LCDTime.c: 147: {
  2157                           ;LCDTime.c: 148: readInputs();
  2158  044D  120A  158A  2536  120A  118A  	fcall	_readInputs
  2159                           
  2160                           ;LCDTime.c: 150: if (state & 0x10)
  2161  0452  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0453  1303               	bcf	3,6	;RP1=0, select bank0
  2163  0454  1E4A               	btfss	_state,4
  2164  0455  2C6A               	goto	l246
  2165                           
  2166                           ;LCDTime.c: 151: {
  2167                           ;LCDTime.c: 152: seconds++;
  2168  0456  3001               	movlw	1
  2169  0457  07C3               	addwf	_seconds,f
  2170  0458  1803               	skipnc
  2171  0459  0AC4               	incf	_seconds+1,f
  2172  045A  3000               	movlw	0
  2173  045B  07C4               	addwf	_seconds+1,f
  2174                           
  2175                           ;LCDTime.c: 153: if (seconds > 59)
  2176  045C  0844               	movf	_seconds+1,w
  2177  045D  3A80               	xorlw	128
  2178  045E  00FF               	movwf	127
  2179  045F  3080               	movlw	128
  2180  0460  027F               	subwf	127,w
  2181  0461  1D03               	skipz
  2182  0462  2C65               	goto	u1815
  2183  0463  303C               	movlw	60
  2184  0464  0243               	subwf	_seconds,w
  2185  0465                     u1815:	
  2186  0465  1C03               	skipc
  2187  0466  2C76               	goto	l2208
  2188                           
  2189                           ;LCDTime.c: 154: seconds = 0 ;
  2190  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2191  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2192  0469  2C74               	goto	l2206
  2193  046A                     l246:	
  2194                           ;LCDTime.c: 155: }
  2195                           
  2196                           
  2197                           ;LCDTime.c: 156: else if (state & 0x20)
  2198  046A  1ECA               	btfss	_state,5
  2199  046B  2C76               	goto	l2208
  2200                           
  2201                           ;LCDTime.c: 157: {
  2202                           ;LCDTime.c: 158: seconds--;
  2203  046C  30FF               	movlw	255
  2204  046D  07C3               	addwf	_seconds,f
  2205  046E  1803               	skipnc
  2206  046F  0AC4               	incf	_seconds+1,f
  2207  0470  30FF               	movlw	255
  2208  0471  07C4               	addwf	_seconds+1,f
  2209                           
  2210                           ;LCDTime.c: 159: if (seconds < 0)
  2211  0472  1FC4               	btfss	_seconds+1,7
  2212  0473  2C76               	goto	l2208
  2213  0474                     l2206:	
  2214                           
  2215                           ;LCDTime.c: 160: seconds = 0 ;
  2216  0474  01C3               	clrf	_seconds
  2217  0475  01C4               	clrf	_seconds+1
  2218  0476                     l2208:	
  2219                           
  2220                           ;LCDTime.c: 161: }
  2221                           ;LCDTime.c: 163: if (state)
  2222  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2223  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2224  0478  084A               	movf	_state,w
  2225  0479  1903               	btfsc	3,2
  2226  047A  2C48               	goto	l2214
  2227                           
  2228                           ;LCDTime.c: 164: {
  2229                           ;LCDTime.c: 165: LCDGotoXY(0,1) ;
  2230  047B  01FC               	clrf	LCDGotoXY@y
  2231  047C  0AFC               	incf	LCDGotoXY@y,f
  2232  047D  3000               	movlw	0
  2233  047E  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2234                           
  2235                           ;LCDTime.c: 166: showTime();
  2236  0483  120A  158A  2596  120A  118A  	fcall	_showTime
  2237  0488  2C48               	goto	l2214
  2238  0489                     l2216:	
  2239                           
  2240                           ;LCDTime.c: 167: }
  2241                           ;LCDTime.c: 168: }
  2242                           ;LCDTime.c: 171: if (h != hour || m != minute || s != seconds)
  2243  0489  083E               	movf	_hour+1,w
  2244  048A  062C               	xorwf	doMenu@h+1,w
  2245  048B  1D03               	skipz
  2246  048C  2C8F               	goto	u1865
  2247  048D  083D               	movf	_hour,w
  2248  048E  062B               	xorwf	doMenu@h,w
  2249  048F                     u1865:	
  2250  048F  1D03               	skipz
  2251  0490  2CA1               	goto	l2222
  2252  0491  0840               	movf	_minute+1,w
  2253  0492  062E               	xorwf	doMenu@m+1,w
  2254  0493  1D03               	skipz
  2255  0494  2C97               	goto	u1875
  2256  0495  083F               	movf	_minute,w
  2257  0496  062D               	xorwf	doMenu@m,w
  2258  0497                     u1875:	
  2259  0497  1D03               	skipz
  2260  0498  2CA1               	goto	l2222
  2261  0499  0844               	movf	_seconds+1,w
  2262  049A  0630               	xorwf	doMenu@s+1,w
  2263  049B  1D03               	skipz
  2264  049C  2C9F               	goto	u1885
  2265  049D  0843               	movf	_seconds,w
  2266  049E  062F               	xorwf	doMenu@s,w
  2267  049F                     u1885:	
  2268  049F  1903               	skipnz
  2269  04A0  2D48               	goto	l2226
  2270  04A1                     l2222:	
  2271                           
  2272                           ;LCDTime.c: 172: {
  2273                           ;LCDTime.c: 173: h = ((hour / 10) << 4) + hour % 10 ;
  2274  04A1  300A               	movlw	10
  2275  04A2  00F0               	movwf	___awdiv@divisor
  2276  04A3  3000               	movlw	0
  2277  04A4  00F1               	movwf	___awdiv@divisor+1
  2278  04A5  083E               	movf	_hour+1,w
  2279  04A6  00F3               	movwf	___awdiv@dividend+1
  2280  04A7  083D               	movf	_hour,w
  2281  04A8  00F2               	movwf	___awdiv@dividend
  2282  04A9  120A  158A  274A  120A  118A  	fcall	___awdiv
  2283  04AE  0870               	movf	?___awdiv,w
  2284  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  2285  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  2286  04B1  00A8               	movwf	??_doMenu
  2287  04B2  0871               	movf	?___awdiv+1,w
  2288  04B3  00A9               	movwf	??_doMenu+1
  2289  04B4  0EA8               	swapf	??_doMenu,f
  2290  04B5  0EA9               	swapf	??_doMenu+1,f
  2291  04B6  30F0               	movlw	240
  2292  04B7  05A9               	andwf	??_doMenu+1,f
  2293  04B8  0828               	movf	??_doMenu,w
  2294  04B9  390F               	andlw	15
  2295  04BA  04A9               	iorwf	??_doMenu+1,f
  2296  04BB  30F0               	movlw	240
  2297  04BC  05A8               	andwf	??_doMenu,f
  2298  04BD  300A               	movlw	10
  2299  04BE  00F0               	movwf	___awmod@divisor
  2300  04BF  3000               	movlw	0
  2301  04C0  00F1               	movwf	___awmod@divisor+1
  2302  04C1  083E               	movf	_hour+1,w
  2303  04C2  00F3               	movwf	___awmod@dividend+1
  2304  04C3  083D               	movf	_hour,w
  2305  04C4  00F2               	movwf	___awmod@dividend
  2306  04C5  120A  118A  2099  120A  118A  	fcall	___awmod
  2307  04CA  0870               	movf	?___awmod,w
  2308  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2309  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2310  04CD  0728               	addwf	??_doMenu,w
  2311  04CE  00AB               	movwf	doMenu@h
  2312  04CF  0871               	movf	?___awmod+1,w
  2313  04D0  1803               	skipnc
  2314  04D1  0A71               	incf	?___awmod+1,w
  2315  04D2  0729               	addwf	??_doMenu+1,w
  2316  04D3  00AC               	movwf	doMenu@h+1
  2317                           
  2318                           ;LCDTime.c: 174: m = ((minute / 10) << 4) + minute % 10 ;
  2319  04D4  300A               	movlw	10
  2320  04D5  00F0               	movwf	___awdiv@divisor
  2321  04D6  3000               	movlw	0
  2322  04D7  00F1               	movwf	___awdiv@divisor+1
  2323  04D8  0840               	movf	_minute+1,w
  2324  04D9  00F3               	movwf	___awdiv@dividend+1
  2325  04DA  083F               	movf	_minute,w
  2326  04DB  00F2               	movwf	___awdiv@dividend
  2327  04DC  120A  158A  274A  120A  118A  	fcall	___awdiv
  2328  04E1  0870               	movf	?___awdiv,w
  2329  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  2330  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  2331  04E4  00A8               	movwf	??_doMenu
  2332  04E5  0871               	movf	?___awdiv+1,w
  2333  04E6  00A9               	movwf	??_doMenu+1
  2334  04E7  0EA8               	swapf	??_doMenu,f
  2335  04E8  0EA9               	swapf	??_doMenu+1,f
  2336  04E9  30F0               	movlw	240
  2337  04EA  05A9               	andwf	??_doMenu+1,f
  2338  04EB  0828               	movf	??_doMenu,w
  2339  04EC  390F               	andlw	15
  2340  04ED  04A9               	iorwf	??_doMenu+1,f
  2341  04EE  30F0               	movlw	240
  2342  04EF  05A8               	andwf	??_doMenu,f
  2343  04F0  300A               	movlw	10
  2344  04F1  00F0               	movwf	___awmod@divisor
  2345  04F2  3000               	movlw	0
  2346  04F3  00F1               	movwf	___awmod@divisor+1
  2347  04F4  0840               	movf	_minute+1,w
  2348  04F5  00F3               	movwf	___awmod@dividend+1
  2349  04F6  083F               	movf	_minute,w
  2350  04F7  00F2               	movwf	___awmod@dividend
  2351  04F8  120A  118A  2099  120A  118A  	fcall	___awmod
  2352  04FD  0870               	movf	?___awmod,w
  2353  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  2354  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  2355  0500  0728               	addwf	??_doMenu,w
  2356  0501  00AD               	movwf	doMenu@m
  2357  0502  0871               	movf	?___awmod+1,w
  2358  0503  1803               	skipnc
  2359  0504  0A71               	incf	?___awmod+1,w
  2360  0505  0729               	addwf	??_doMenu+1,w
  2361  0506  00AE               	movwf	doMenu@m+1
  2362                           
  2363                           ;LCDTime.c: 175: s = ((seconds / 10) << 4) + seconds % 10 ;
  2364  0507  300A               	movlw	10
  2365  0508  00F0               	movwf	___awdiv@divisor
  2366  0509  3000               	movlw	0
  2367  050A  00F1               	movwf	___awdiv@divisor+1
  2368  050B  0844               	movf	_seconds+1,w
  2369  050C  00F3               	movwf	___awdiv@dividend+1
  2370  050D  0843               	movf	_seconds,w
  2371  050E  00F2               	movwf	___awdiv@dividend
  2372  050F  120A  158A  274A  120A  118A  	fcall	___awdiv
  2373  0514  0870               	movf	?___awdiv,w
  2374  0515  1283               	bcf	3,5	;RP0=0, select bank0
  2375  0516  1303               	bcf	3,6	;RP1=0, select bank0
  2376  0517  00A8               	movwf	??_doMenu
  2377  0518  0871               	movf	?___awdiv+1,w
  2378  0519  00A9               	movwf	??_doMenu+1
  2379  051A  0EA8               	swapf	??_doMenu,f
  2380  051B  0EA9               	swapf	??_doMenu+1,f
  2381  051C  30F0               	movlw	240
  2382  051D  05A9               	andwf	??_doMenu+1,f
  2383  051E  0828               	movf	??_doMenu,w
  2384  051F  390F               	andlw	15
  2385  0520  04A9               	iorwf	??_doMenu+1,f
  2386  0521  30F0               	movlw	240
  2387  0522  05A8               	andwf	??_doMenu,f
  2388  0523  300A               	movlw	10
  2389  0524  00F0               	movwf	___awmod@divisor
  2390  0525  3000               	movlw	0
  2391  0526  00F1               	movwf	___awmod@divisor+1
  2392  0527  0844               	movf	_seconds+1,w
  2393  0528  00F3               	movwf	___awmod@dividend+1
  2394  0529  0843               	movf	_seconds,w
  2395  052A  00F2               	movwf	___awmod@dividend
  2396  052B  120A  118A  2099  120A  118A  	fcall	___awmod
  2397  0530  0870               	movf	?___awmod,w
  2398  0531  1283               	bcf	3,5	;RP0=0, select bank0
  2399  0532  1303               	bcf	3,6	;RP1=0, select bank0
  2400  0533  0728               	addwf	??_doMenu,w
  2401  0534  00AF               	movwf	doMenu@s
  2402  0535  0871               	movf	?___awmod+1,w
  2403  0536  1803               	skipnc
  2404  0537  0A71               	incf	?___awmod+1,w
  2405  0538  0729               	addwf	??_doMenu+1,w
  2406  0539  00B0               	movwf	doMenu@s+1
  2407                           
  2408                           ;LCDTime.c: 177: DS1307_SetTime(h,m,s) ;
  2409  053A  082D               	movf	doMenu@m,w
  2410  053B  00A8               	movwf	??_doMenu
  2411  053C  0828               	movf	??_doMenu,w
  2412  053D  00F5               	movwf	DS1307_SetTime@mm
  2413  053E  082F               	movf	doMenu@s,w
  2414  053F  00A9               	movwf	??_doMenu+1
  2415  0540  0829               	movf	??_doMenu+1,w
  2416  0541  00F6               	movwf	DS1307_SetTime@ss
  2417  0542  082B               	movf	doMenu@h,w
  2418  0543  120A  158A  24B6  120A  118A  	fcall	_DS1307_SetTime
  2419  0548                     l2226:	
  2420                           ;LCDTime.c: 178: }
  2421                           ;LCDTime.c: 180: while(bButton)
  2422                           
  2423  0548  1283               	bcf	3,5	;RP0=0, select bank0
  2424  0549  1303               	bcf	3,6	;RP1=0, select bank0
  2425  054A  0848               	movf	_bButton,w
  2426  054B  1903               	btfsc	3,2
  2427  054C  2D53               	goto	l2228
  2428                           
  2429                           ;LCDTime.c: 181: readInputs();
  2430  054D  120A  158A  2536  120A  118A  	fcall	_readInputs
  2431  0552  2D48               	goto	l2226
  2432  0553                     l2228:	
  2433                           
  2434                           ;LCDTime.c: 182: }
  2435                           ;LCDTime.c: 185: if (menuFunction == 0 | menuFunction == 2)
  2436  0553  0849               	movf	_menuFunction,w
  2437  0554  1903               	btfsc	3,2
  2438  0555  2D5A               	goto	l2232
  2439  0556  3002               	movlw	2
  2440  0557  0649               	xorwf	_menuFunction,w
  2441  0558  1D03               	btfss	3,2
  2442  0559  0008               	return
  2443  055A                     l2232:	
  2444                           
  2445                           ;LCDTime.c: 186: {
  2446                           ;LCDTime.c: 187: int n,d,m,y ;
  2447                           ;LCDTime.c: 189: n = day ;
  2448  055A  083C               	movf	_day+1,w
  2449  055B  00B2               	movwf	doMenu@n+1
  2450  055C  083B               	movf	_day,w
  2451  055D  00B1               	movwf	doMenu@n
  2452                           
  2453                           ;LCDTime.c: 190: d = date ;
  2454  055E  083A               	movf	_date+1,w
  2455  055F  00B4               	movwf	doMenu@d+1
  2456  0560  0839               	movf	_date,w
  2457  0561  00B3               	movwf	doMenu@d
  2458                           
  2459                           ;LCDTime.c: 191: m = month ;
  2460  0562  0842               	movf	_month+1,w
  2461  0563  00B6               	movwf	doMenu@m_236+1
  2462  0564  0841               	movf	_month,w
  2463  0565  00B5               	movwf	doMenu@m_236
  2464                           
  2465                           ;LCDTime.c: 192: y = year ;
  2466  0566  0846               	movf	_year+1,w
  2467  0567  00B8               	movwf	doMenu@y+1
  2468  0568  0845               	movf	_year,w
  2469  0569  00B7               	movwf	doMenu@y
  2470                           
  2471                           ;LCDTime.c: 194: (LCDByte(0b00000001,0));
  2472  056A  01F5               	clrf	LCDByte@isdata
  2473  056B  3001               	movlw	1
  2474  056C  120A  158A  2654  120A  118A  	fcall	_LCDByte
  2475                           
  2476                           ;LCDTime.c: 195: LCDWriteString("Set Year");
  2477  0571  3069               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  2478  0572  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2479  0577                     L5:	
  2480                           
  2481                           ;LCDTime.c: 197: LCDGotoXY(0,1) ;
  2482  0577  01FC               	clrf	LCDGotoXY@y
  2483  0578  0AFC               	incf	LCDGotoXY@y,f
  2484  0579  3000               	movlw	0
  2485  057A  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2486                           
  2487                           ;LCDTime.c: 198: showDate();
  2488  057F  120A  118A  21B2  120A  118A  	fcall	_showDate
  2489  0584                     l2262:	
  2490                           ;LCDTime.c: 200: while(!bButton)
  2491                           
  2492  0584  1283               	bcf	3,5	;RP0=0, select bank0
  2493  0585  1303               	bcf	3,6	;RP1=0, select bank0
  2494  0586  0848               	movf	_bButton,w
  2495  0587  1D03               	btfss	3,2
  2496  0588  2DC1               	goto	l2266
  2497                           
  2498                           ;LCDTime.c: 201: {
  2499                           ;LCDTime.c: 202: readInputs();
  2500  0589  120A  158A  2536  120A  118A  	fcall	_readInputs
  2501                           
  2502                           ;LCDTime.c: 204: if (state & 0x10)
  2503  058E  1283               	bcf	3,5	;RP0=0, select bank0
  2504  058F  1303               	bcf	3,6	;RP1=0, select bank0
  2505  0590  1E4A               	btfss	_state,4
  2506  0591  2DA8               	goto	l264
  2507                           
  2508                           ;LCDTime.c: 205: {
  2509                           ;LCDTime.c: 206: year++;
  2510  0592  3001               	movlw	1
  2511  0593  07C5               	addwf	_year,f
  2512  0594  1803               	skipnc
  2513  0595  0AC6               	incf	_year+1,f
  2514  0596  3000               	movlw	0
  2515  0597  07C6               	addwf	_year+1,f
  2516                           
  2517                           ;LCDTime.c: 207: if (year > 99)
  2518  0598  0846               	movf	_year+1,w
  2519  0599  3A80               	xorlw	128
  2520  059A  00FF               	movwf	127
  2521  059B  3080               	movlw	128
  2522  059C  027F               	subwf	127,w
  2523  059D  1D03               	skipz
  2524  059E  2DA1               	goto	u1935
  2525  059F  3064               	movlw	100
  2526  05A0  0245               	subwf	_year,w
  2527  05A1                     u1935:	
  2528  05A1  1C03               	skipc
  2529  05A2  2DB6               	goto	l2258
  2530                           
  2531                           ;LCDTime.c: 208: year = 0 ;
  2532  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  2533  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  2534  05A5  01C5               	clrf	_year
  2535  05A6  01C6               	clrf	_year+1
  2536                           
  2537                           ;LCDTime.c: 209: }
  2538  05A7  2DB6               	goto	l2258
  2539  05A8                     l264:	
  2540                           
  2541                           ;LCDTime.c: 210: else if (state & 0x20)
  2542  05A8  1ECA               	btfss	_state,5
  2543  05A9  2DB6               	goto	l2258
  2544                           
  2545                           ;LCDTime.c: 211: {
  2546                           ;LCDTime.c: 212: year--;
  2547  05AA  30FF               	movlw	255
  2548  05AB  07C5               	addwf	_year,f
  2549  05AC  1803               	skipnc
  2550  05AD  0AC6               	incf	_year+1,f
  2551  05AE  30FF               	movlw	255
  2552  05AF  07C6               	addwf	_year+1,f
  2553                           
  2554                           ;LCDTime.c: 213: if (year < 0)
  2555  05B0  1FC6               	btfss	_year+1,7
  2556  05B1  2DB6               	goto	l2258
  2557                           
  2558                           ;LCDTime.c: 214: date = 99 ;
  2559  05B2  3063               	movlw	99
  2560  05B3  00B9               	movwf	_date
  2561  05B4  3000               	movlw	0
  2562  05B5  00BA               	movwf	_date+1
  2563  05B6                     l2258:	
  2564                           
  2565                           ;LCDTime.c: 215: }
  2566                           ;LCDTime.c: 217: if (state)
  2567  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  2568  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  2569  05B8  084A               	movf	_state,w
  2570  05B9  1903               	btfsc	3,2
  2571  05BA  2D84               	goto	l2262
  2572  05BB  2D77               	goto	L5
  2573  05BC                     l2264:	
  2574                           ;LCDTime.c: 221: }
  2575                           ;LCDTime.c: 222: }
  2576                           ;LCDTime.c: 224: while(bButton)
  2577                           
  2578                           ;LCDTime.c: 220: showDate();
  2579                           
  2580                           ;LCDTime.c: 218: {
  2581                           ;LCDTime.c: 219: LCDGotoXY(0,1) ;
  2582                           
  2583                           
  2584                           ;LCDTime.c: 225: readInputs();
  2585  05BC  120A  158A  2536  120A  118A  	fcall	_readInputs
  2586  05C1                     l2266:	
  2587  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  2588  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  2589  05C3  0848               	movf	_bButton,w
  2590  05C4  1D03               	btfss	3,2
  2591  05C5  2DBC               	goto	l2264
  2592                           
  2593                           ;LCDTime.c: 227: LCDGotoXY(0,0) ;
  2594  05C6  01FC               	clrf	LCDGotoXY@y
  2595  05C7  3000               	movlw	0
  2596  05C8  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2597                           
  2598                           ;LCDTime.c: 228: LCDWriteString("Set Month");
  2599  05CD  3055               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2600  05CE  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2601  05D3                     l2290:	
  2602                           ;LCDTime.c: 230: while(!bButton)
  2603                           
  2604  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  2605  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  2606  05D5  0848               	movf	_bButton,w
  2607  05D6  1D03               	btfss	3,2
  2608  05D7  2E1E               	goto	l2294
  2609                           
  2610                           ;LCDTime.c: 231: {
  2611                           ;LCDTime.c: 232: readInputs();
  2612  05D8  120A  158A  2536  120A  118A  	fcall	_readInputs
  2613                           
  2614                           ;LCDTime.c: 234: if (state & 0x10)
  2615  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  2616  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  2617  05DF  1E4A               	btfss	_state,4
  2618  05E0  2DF6               	goto	l276
  2619                           
  2620                           ;LCDTime.c: 235: {
  2621                           ;LCDTime.c: 236: month++;
  2622  05E1  3001               	movlw	1
  2623  05E2  07C1               	addwf	_month,f
  2624  05E3  1803               	skipnc
  2625  05E4  0AC2               	incf	_month+1,f
  2626  05E5  3000               	movlw	0
  2627  05E6  07C2               	addwf	_month+1,f
  2628                           
  2629                           ;LCDTime.c: 237: if (month > 12)
  2630  05E7  0842               	movf	_month+1,w
  2631  05E8  3A80               	xorlw	128
  2632  05E9  00FF               	movwf	127
  2633  05EA  3080               	movlw	128
  2634  05EB  027F               	subwf	127,w
  2635  05EC  1D03               	skipz
  2636  05ED  2DF0               	goto	u2005
  2637  05EE  300D               	movlw	13
  2638  05EF  0241               	subwf	_month,w
  2639  05F0                     u2005:	
  2640  05F0  1C03               	skipc
  2641  05F1  2E06               	goto	l2286
  2642                           
  2643                           ;LCDTime.c: 238: month = 1 ;
  2644  05F2  3001               	movlw	1
  2645  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  2646  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  2647  05F5  2E03               	goto	L1
  2648  05F6                     l276:	
  2649                           ;LCDTime.c: 239: }
  2650                           
  2651                           
  2652                           ;LCDTime.c: 240: else if (state & 0x20)
  2653  05F6  1ECA               	btfss	_state,5
  2654  05F7  2E06               	goto	l2286
  2655                           
  2656                           ;LCDTime.c: 241: {
  2657                           ;LCDTime.c: 242: month--;
  2658  05F8  30FF               	movlw	255
  2659  05F9  07C1               	addwf	_month,f
  2660  05FA  1803               	skipnc
  2661  05FB  0AC2               	incf	_month+1,f
  2662  05FC  30FF               	movlw	255
  2663  05FD  07C2               	addwf	_month+1,f
  2664                           
  2665                           ;LCDTime.c: 243: if (!month)
  2666  05FE  0841               	movf	_month,w
  2667  05FF  0442               	iorwf	_month+1,w
  2668  0600  1D03               	btfss	3,2
  2669  0601  2E06               	goto	l2286
  2670                           
  2671                           ;LCDTime.c: 244: month = 12 ;
  2672  0602  300C               	movlw	12
  2673  0603                     L1:	
  2674  0603  00C1               	movwf	_month
  2675  0604  3000               	movlw	0
  2676  0605  00C2               	movwf	_month+1
  2677  0606                     l2286:	
  2678                           
  2679                           ;LCDTime.c: 245: }
  2680                           ;LCDTime.c: 247: if (state)
  2681  0606  1283               	bcf	3,5	;RP0=0, select bank0
  2682  0607  1303               	bcf	3,6	;RP1=0, select bank0
  2683  0608  084A               	movf	_state,w
  2684  0609  1903               	btfsc	3,2
  2685  060A  2DD3               	goto	l2290
  2686                           
  2687                           ;LCDTime.c: 248: {
  2688                           ;LCDTime.c: 249: LCDGotoXY(0,1) ;
  2689  060B  01FC               	clrf	LCDGotoXY@y
  2690  060C  0AFC               	incf	LCDGotoXY@y,f
  2691  060D  3000               	movlw	0
  2692  060E  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2693                           
  2694                           ;LCDTime.c: 250: showDate();
  2695  0613  120A  118A  21B2  120A  118A  	fcall	_showDate
  2696  0618  2DD3               	goto	l2290
  2697  0619                     l2292:	
  2698                           ;LCDTime.c: 251: }
  2699                           ;LCDTime.c: 252: }
  2700                           ;LCDTime.c: 254: while(bButton)
  2701                           
  2702                           
  2703                           ;LCDTime.c: 255: readInputs();
  2704  0619  120A  158A  2536  120A  118A  	fcall	_readInputs
  2705  061E                     l2294:	
  2706  061E  1283               	bcf	3,5	;RP0=0, select bank0
  2707  061F  1303               	bcf	3,6	;RP1=0, select bank0
  2708  0620  0848               	movf	_bButton,w
  2709  0621  1D03               	btfss	3,2
  2710  0622  2E19               	goto	l2292
  2711                           
  2712                           ;LCDTime.c: 257: LCDGotoXY(0,0) ;
  2713  0623  01FC               	clrf	LCDGotoXY@y
  2714  0624  3000               	movlw	0
  2715  0625  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2716                           
  2717                           ;LCDTime.c: 258: LCDWriteString("Set Date ");
  2718  062A  304B               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2719  062B  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2720  0630                     l2318:	
  2721                           ;LCDTime.c: 260: while(!bButton)
  2722                           
  2723  0630  1283               	bcf	3,5	;RP0=0, select bank0
  2724  0631  1303               	bcf	3,6	;RP1=0, select bank0
  2725  0632  0848               	movf	_bButton,w
  2726  0633  1D03               	btfss	3,2
  2727  0634  2E8E               	goto	l2322
  2728                           
  2729                           ;LCDTime.c: 261: {
  2730                           ;LCDTime.c: 262: readInputs();
  2731  0635  120A  158A  2536  120A  118A  	fcall	_readInputs
  2732                           
  2733                           ;LCDTime.c: 264: if (state & 0x10)
  2734  063A  1283               	bcf	3,5	;RP0=0, select bank0
  2735  063B  1303               	bcf	3,6	;RP1=0, select bank0
  2736  063C  1E4A               	btfss	_state,4
  2737  063D  2E5D               	goto	l288
  2738                           
  2739                           ;LCDTime.c: 265: {
  2740                           ;LCDTime.c: 266: date++;
  2741  063E  3001               	movlw	1
  2742  063F  07B9               	addwf	_date,f
  2743  0640  1803               	skipnc
  2744  0641  0ABA               	incf	_date+1,f
  2745  0642  3000               	movlw	0
  2746  0643  07BA               	addwf	_date+1,f
  2747                           
  2748                           ;LCDTime.c: 267: if (date > monthDays[month-1])
  2749  0644  0841               	movf	_month,w
  2750  0645  3EFF               	addlw	255
  2751  0646  3E1D               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  2752  0647  0084               	movwf	4
  2753  0648  120A  118A  2003  120A  118A  	fcall	stringdir
  2754  064D  00A8               	movwf	??_doMenu
  2755  064E  083A               	movf	_date+1,w
  2756  064F  3A80               	xorlw	128
  2757  0650  3C80               	sublw	128
  2758  0651  1D03               	skipz
  2759  0652  2E55               	goto	u2075
  2760  0653  0839               	movf	_date,w
  2761  0654  0228               	subwf	??_doMenu,w
  2762  0655                     u2075:	
  2763  0655  1803               	skipnc
  2764  0656  2E76               	goto	l2314
  2765                           
  2766                           ;LCDTime.c: 268: date = 1 ;
  2767  0657  3001               	movlw	1
  2768  0658  1283               	bcf	3,5	;RP0=0, select bank0
  2769  0659  1303               	bcf	3,6	;RP1=0, select bank0
  2770  065A  00B9               	movwf	_date
  2771  065B  3000               	movlw	0
  2772  065C  2E75               	goto	L2
  2773  065D                     l288:	
  2774                           ;LCDTime.c: 269: }
  2775                           
  2776                           
  2777                           ;LCDTime.c: 270: else if (state & 0x20)
  2778  065D  1ECA               	btfss	_state,5
  2779  065E  2E76               	goto	l2314
  2780                           
  2781                           ;LCDTime.c: 271: {
  2782                           ;LCDTime.c: 272: date--;
  2783  065F  30FF               	movlw	255
  2784  0660  07B9               	addwf	_date,f
  2785  0661  1803               	skipnc
  2786  0662  0ABA               	incf	_date+1,f
  2787  0663  30FF               	movlw	255
  2788  0664  07BA               	addwf	_date+1,f
  2789                           
  2790                           ;LCDTime.c: 273: if (date < 0)
  2791  0665  1FBA               	btfss	_date+1,7
  2792  0666  2E76               	goto	l2314
  2793                           
  2794                           ;LCDTime.c: 274: date = monthDays[month-1] ;
  2795  0667  0841               	movf	_month,w
  2796  0668  3EFF               	addlw	255
  2797  0669  3E1D               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  2798  066A  0084               	movwf	4
  2799  066B  120A  118A  2003  120A  118A  	fcall	stringdir
  2800  0670  00A8               	movwf	??_doMenu
  2801  0671  01A9               	clrf	??_doMenu+1
  2802  0672  0828               	movf	??_doMenu,w
  2803  0673  00B9               	movwf	_date
  2804  0674  0829               	movf	??_doMenu+1,w
  2805  0675                     L2:	
  2806  0675  00BA               	movwf	_date+1
  2807  0676                     l2314:	
  2808                           
  2809                           ;LCDTime.c: 275: }
  2810                           ;LCDTime.c: 277: if (state)
  2811  0676  1283               	bcf	3,5	;RP0=0, select bank0
  2812  0677  1303               	bcf	3,6	;RP1=0, select bank0
  2813  0678  084A               	movf	_state,w
  2814  0679  1903               	btfsc	3,2
  2815  067A  2E30               	goto	l2318
  2816                           
  2817                           ;LCDTime.c: 278: {
  2818                           ;LCDTime.c: 279: LCDGotoXY(0,1) ;
  2819  067B  01FC               	clrf	LCDGotoXY@y
  2820  067C  0AFC               	incf	LCDGotoXY@y,f
  2821  067D  3000               	movlw	0
  2822  067E  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2823                           
  2824                           ;LCDTime.c: 280: showDate();
  2825  0683  120A  118A  21B2  120A  118A  	fcall	_showDate
  2826  0688  2E30               	goto	l2318
  2827  0689                     l2320:	
  2828                           ;LCDTime.c: 281: }
  2829                           ;LCDTime.c: 282: }
  2830                           ;LCDTime.c: 284: while(bButton)
  2831                           
  2832                           
  2833                           ;LCDTime.c: 285: readInputs();
  2834  0689  120A  158A  2536  120A  118A  	fcall	_readInputs
  2835  068E                     l2322:	
  2836  068E  1283               	bcf	3,5	;RP0=0, select bank0
  2837  068F  1303               	bcf	3,6	;RP1=0, select bank0
  2838  0690  0848               	movf	_bButton,w
  2839  0691  1D03               	btfss	3,2
  2840  0692  2E89               	goto	l2320
  2841                           
  2842                           ;LCDTime.c: 287: LCDGotoXY(0,0) ;
  2843  0693  01FC               	clrf	LCDGotoXY@y
  2844  0694  3000               	movlw	0
  2845  0695  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2846                           
  2847                           ;LCDTime.c: 288: LCDWriteString("Set Day  ");
  2848  069A  3041               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2849  069B  120A  158A  26A4  120A  118A  	fcall	_LCDWriteString
  2850  06A0                     l2346:	
  2851                           ;LCDTime.c: 290: while(!bButton)
  2852                           
  2853  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  2854  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  2855  06A2  0848               	movf	_bButton,w
  2856  06A3  1D03               	btfss	3,2
  2857  06A4  2EE4               	goto	l2348
  2858                           
  2859                           ;LCDTime.c: 291: {
  2860                           ;LCDTime.c: 292: readInputs();
  2861  06A5  120A  158A  2536  120A  118A  	fcall	_readInputs
  2862                           
  2863                           ;LCDTime.c: 294: if (state & 0x10)
  2864  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  2865  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  2866  06AC  1E4A               	btfss	_state,4
  2867  06AD  2EC3               	goto	l300
  2868                           
  2869                           ;LCDTime.c: 295: {
  2870                           ;LCDTime.c: 296: day++;
  2871  06AE  3001               	movlw	1
  2872  06AF  07BB               	addwf	_day,f
  2873  06B0  1803               	skipnc
  2874  06B1  0ABC               	incf	_day+1,f
  2875  06B2  3000               	movlw	0
  2876  06B3  07BC               	addwf	_day+1,f
  2877                           
  2878                           ;LCDTime.c: 297: if (day > 7)
  2879  06B4  083C               	movf	_day+1,w
  2880  06B5  3A80               	xorlw	128
  2881  06B6  00FF               	movwf	127
  2882  06B7  3080               	movlw	128
  2883  06B8  027F               	subwf	127,w
  2884  06B9  1D03               	skipz
  2885  06BA  2EBD               	goto	u2145
  2886  06BB  3008               	movlw	8
  2887  06BC  023B               	subwf	_day,w
  2888  06BD                     u2145:	
  2889  06BD  1C03               	skipc
  2890  06BE  2ED1               	goto	l2342
  2891                           
  2892                           ;LCDTime.c: 298: day = 1 ;
  2893  06BF  3001               	movlw	1
  2894  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  2895  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  2896  06C2  2ECE               	goto	L3
  2897  06C3                     l300:	
  2898                           ;LCDTime.c: 299: }
  2899                           
  2900                           
  2901                           ;LCDTime.c: 300: else if (state & 0x20)
  2902  06C3  1ECA               	btfss	_state,5
  2903  06C4  2ED1               	goto	l2342
  2904                           
  2905                           ;LCDTime.c: 301: {
  2906                           ;LCDTime.c: 302: day--;
  2907  06C5  30FF               	movlw	255
  2908  06C6  07BB               	addwf	_day,f
  2909  06C7  1803               	skipnc
  2910  06C8  0ABC               	incf	_day+1,f
  2911  06C9  30FF               	movlw	255
  2912  06CA  07BC               	addwf	_day+1,f
  2913                           
  2914                           ;LCDTime.c: 303: if (day < 0)
  2915  06CB  1FBC               	btfss	_day+1,7
  2916  06CC  2ED1               	goto	l2342
  2917                           
  2918                           ;LCDTime.c: 304: day = 7 ;
  2919  06CD  3007               	movlw	7
  2920  06CE                     L3:	
  2921  06CE  00BB               	movwf	_day
  2922  06CF  3000               	movlw	0
  2923  06D0  00BC               	movwf	_day+1
  2924  06D1                     l2342:	
  2925                           
  2926                           ;LCDTime.c: 305: }
  2927                           ;LCDTime.c: 307: if (state)
  2928  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  2929  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  2930  06D3  084A               	movf	_state,w
  2931  06D4  1903               	btfsc	3,2
  2932  06D5  2EA0               	goto	l2346
  2933                           
  2934                           ;LCDTime.c: 308: {
  2935                           ;LCDTime.c: 309: LCDGotoXY(0,1) ;
  2936  06D6  01FC               	clrf	LCDGotoXY@y
  2937  06D7  0AFC               	incf	LCDGotoXY@y,f
  2938  06D8  3000               	movlw	0
  2939  06D9  120A  158A  2469  120A  118A  	fcall	_LCDGotoXY
  2940                           
  2941                           ;LCDTime.c: 310: showDate();
  2942  06DE  120A  118A  21B2  120A  118A  	fcall	_showDate
  2943  06E3  2EA0               	goto	l2346
  2944  06E4                     l2348:	
  2945                           
  2946                           ;LCDTime.c: 311: }
  2947                           ;LCDTime.c: 312: }
  2948                           ;LCDTime.c: 314: if (n != day || d != date || m != month || y != year)
  2949  06E4  083C               	movf	_day+1,w
  2950  06E5  0632               	xorwf	doMenu@n+1,w
  2951  06E6  1D03               	skipz
  2952  06E7  2EEA               	goto	u2195
  2953  06E8  083B               	movf	_day,w
  2954  06E9  0631               	xorwf	doMenu@n,w
  2955  06EA                     u2195:	
  2956  06EA  1D03               	skipz
  2957  06EB  2F04               	goto	l2356
  2958  06EC  083A               	movf	_date+1,w
  2959  06ED  0634               	xorwf	doMenu@d+1,w
  2960  06EE  1D03               	skipz
  2961  06EF  2EF2               	goto	u2205
  2962  06F0  0839               	movf	_date,w
  2963  06F1  0633               	xorwf	doMenu@d,w
  2964  06F2                     u2205:	
  2965  06F2  1D03               	skipz
  2966  06F3  2F04               	goto	l2356
  2967  06F4  0842               	movf	_month+1,w
  2968  06F5  0636               	xorwf	doMenu@m_236+1,w
  2969  06F6  1D03               	skipz
  2970  06F7  2EFA               	goto	u2215
  2971  06F8  0841               	movf	_month,w
  2972  06F9  0635               	xorwf	doMenu@m_236,w
  2973  06FA                     u2215:	
  2974  06FA  1D03               	skipz
  2975  06FB  2F04               	goto	l2356
  2976  06FC  0846               	movf	_year+1,w
  2977  06FD  0638               	xorwf	doMenu@y+1,w
  2978  06FE  1D03               	skipz
  2979  06FF  2F02               	goto	u2225
  2980  0700  0845               	movf	_year,w
  2981  0701  0637               	xorwf	doMenu@y,w
  2982  0702                     u2225:	
  2983  0702  1903               	skipnz
  2984  0703  2FE2               	goto	l2360
  2985  0704                     l2356:	
  2986                           
  2987                           ;LCDTime.c: 315: {
  2988                           ;LCDTime.c: 316: n = ((day / 10) << 4) + day % 10 ;
  2989  0704  300A               	movlw	10
  2990  0705  00F0               	movwf	___awdiv@divisor
  2991  0706  3000               	movlw	0
  2992  0707  00F1               	movwf	___awdiv@divisor+1
  2993  0708  083C               	movf	_day+1,w
  2994  0709  00F3               	movwf	___awdiv@dividend+1
  2995  070A  083B               	movf	_day,w
  2996  070B  00F2               	movwf	___awdiv@dividend
  2997  070C  120A  158A  274A  120A  118A  	fcall	___awdiv
  2998  0711  0870               	movf	?___awdiv,w
  2999  0712  1283               	bcf	3,5	;RP0=0, select bank0
  3000  0713  1303               	bcf	3,6	;RP1=0, select bank0
  3001  0714  00A8               	movwf	??_doMenu
  3002  0715  0871               	movf	?___awdiv+1,w
  3003  0716  00A9               	movwf	??_doMenu+1
  3004  0717  0EA8               	swapf	??_doMenu,f
  3005  0718  0EA9               	swapf	??_doMenu+1,f
  3006  0719  30F0               	movlw	240
  3007  071A  05A9               	andwf	??_doMenu+1,f
  3008  071B  0828               	movf	??_doMenu,w
  3009  071C  390F               	andlw	15
  3010  071D  04A9               	iorwf	??_doMenu+1,f
  3011  071E  30F0               	movlw	240
  3012  071F  05A8               	andwf	??_doMenu,f
  3013  0720  300A               	movlw	10
  3014  0721  00F0               	movwf	___awmod@divisor
  3015  0722  3000               	movlw	0
  3016  0723  00F1               	movwf	___awmod@divisor+1
  3017  0724  083C               	movf	_day+1,w
  3018  0725  00F3               	movwf	___awmod@dividend+1
  3019  0726  083B               	movf	_day,w
  3020  0727  00F2               	movwf	___awmod@dividend
  3021  0728  120A  118A  2099  120A  118A  	fcall	___awmod
  3022  072D  0870               	movf	?___awmod,w
  3023  072E  1283               	bcf	3,5	;RP0=0, select bank0
  3024  072F  1303               	bcf	3,6	;RP1=0, select bank0
  3025  0730  0728               	addwf	??_doMenu,w
  3026  0731  00B1               	movwf	doMenu@n
  3027  0732  0871               	movf	?___awmod+1,w
  3028  0733  1803               	skipnc
  3029  0734  0A71               	incf	?___awmod+1,w
  3030  0735  0729               	addwf	??_doMenu+1,w
  3031  0736  00B2               	movwf	doMenu@n+1
  3032                           
  3033                           ;LCDTime.c: 317: d = ((date / 10) << 4) + date % 10 ;
  3034  0737  300A               	movlw	10
  3035  0738  00F0               	movwf	___awdiv@divisor
  3036  0739  3000               	movlw	0
  3037  073A  00F1               	movwf	___awdiv@divisor+1
  3038  073B  083A               	movf	_date+1,w
  3039  073C  00F3               	movwf	___awdiv@dividend+1
  3040  073D  0839               	movf	_date,w
  3041  073E  00F2               	movwf	___awdiv@dividend
  3042  073F  120A  158A  274A  120A  118A  	fcall	___awdiv
  3043  0744  0870               	movf	?___awdiv,w
  3044  0745  1283               	bcf	3,5	;RP0=0, select bank0
  3045  0746  1303               	bcf	3,6	;RP1=0, select bank0
  3046  0747  00A8               	movwf	??_doMenu
  3047  0748  0871               	movf	?___awdiv+1,w
  3048  0749  00A9               	movwf	??_doMenu+1
  3049  074A  0EA8               	swapf	??_doMenu,f
  3050  074B  0EA9               	swapf	??_doMenu+1,f
  3051  074C  30F0               	movlw	240
  3052  074D  05A9               	andwf	??_doMenu+1,f
  3053  074E  0828               	movf	??_doMenu,w
  3054  074F  390F               	andlw	15
  3055  0750  04A9               	iorwf	??_doMenu+1,f
  3056  0751  30F0               	movlw	240
  3057  0752  05A8               	andwf	??_doMenu,f
  3058  0753  300A               	movlw	10
  3059  0754  00F0               	movwf	___awmod@divisor
  3060  0755  3000               	movlw	0
  3061  0756  00F1               	movwf	___awmod@divisor+1
  3062  0757  083A               	movf	_date+1,w
  3063  0758  00F3               	movwf	___awmod@dividend+1
  3064  0759  0839               	movf	_date,w
  3065  075A  00F2               	movwf	___awmod@dividend
  3066  075B  120A  118A  2099  120A  118A  	fcall	___awmod
  3067  0760  0870               	movf	?___awmod,w
  3068  0761  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0762  1303               	bcf	3,6	;RP1=0, select bank0
  3070  0763  0728               	addwf	??_doMenu,w
  3071  0764  00B3               	movwf	doMenu@d
  3072  0765  0871               	movf	?___awmod+1,w
  3073  0766  1803               	skipnc
  3074  0767  0A71               	incf	?___awmod+1,w
  3075  0768  0729               	addwf	??_doMenu+1,w
  3076  0769  00B4               	movwf	doMenu@d+1
  3077                           
  3078                           ;LCDTime.c: 318: m = ((month / 10) << 4) + month % 10 ;
  3079  076A  300A               	movlw	10
  3080  076B  00F0               	movwf	___awdiv@divisor
  3081  076C  3000               	movlw	0
  3082  076D  00F1               	movwf	___awdiv@divisor+1
  3083  076E  0842               	movf	_month+1,w
  3084  076F  00F3               	movwf	___awdiv@dividend+1
  3085  0770  0841               	movf	_month,w
  3086  0771  00F2               	movwf	___awdiv@dividend
  3087  0772  120A  158A  274A  120A  118A  	fcall	___awdiv
  3088  0777  0870               	movf	?___awdiv,w
  3089  0778  1283               	bcf	3,5	;RP0=0, select bank0
  3090  0779  1303               	bcf	3,6	;RP1=0, select bank0
  3091  077A  00A8               	movwf	??_doMenu
  3092  077B  0871               	movf	?___awdiv+1,w
  3093  077C  00A9               	movwf	??_doMenu+1
  3094  077D  0EA8               	swapf	??_doMenu,f
  3095  077E  0EA9               	swapf	??_doMenu+1,f
  3096  077F  30F0               	movlw	240
  3097  0780  05A9               	andwf	??_doMenu+1,f
  3098  0781  0828               	movf	??_doMenu,w
  3099  0782  390F               	andlw	15
  3100  0783  04A9               	iorwf	??_doMenu+1,f
  3101  0784  30F0               	movlw	240
  3102  0785  05A8               	andwf	??_doMenu,f
  3103  0786  300A               	movlw	10
  3104  0787  00F0               	movwf	___awmod@divisor
  3105  0788  3000               	movlw	0
  3106  0789  00F1               	movwf	___awmod@divisor+1
  3107  078A  0842               	movf	_month+1,w
  3108  078B  00F3               	movwf	___awmod@dividend+1
  3109  078C  0841               	movf	_month,w
  3110  078D  00F2               	movwf	___awmod@dividend
  3111  078E  120A  118A  2099  120A  118A  	fcall	___awmod
  3112  0793  0870               	movf	?___awmod,w
  3113  0794  1283               	bcf	3,5	;RP0=0, select bank0
  3114  0795  1303               	bcf	3,6	;RP1=0, select bank0
  3115  0796  0728               	addwf	??_doMenu,w
  3116  0797  00B5               	movwf	doMenu@m_236
  3117  0798  0871               	movf	?___awmod+1,w
  3118  0799  1803               	skipnc
  3119  079A  0A71               	incf	?___awmod+1,w
  3120  079B  0729               	addwf	??_doMenu+1,w
  3121  079C  00B6               	movwf	doMenu@m_236+1
  3122                           
  3123                           ;LCDTime.c: 319: y = ((year / 10) << 4) + year % 10 ;
  3124  079D  300A               	movlw	10
  3125  079E  00F0               	movwf	___awdiv@divisor
  3126  079F  3000               	movlw	0
  3127  07A0  00F1               	movwf	___awdiv@divisor+1
  3128  07A1  0846               	movf	_year+1,w
  3129  07A2  00F3               	movwf	___awdiv@dividend+1
  3130  07A3  0845               	movf	_year,w
  3131  07A4  00F2               	movwf	___awdiv@dividend
  3132  07A5  120A  158A  274A  120A  118A  	fcall	___awdiv
  3133  07AA  0870               	movf	?___awdiv,w
  3134  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  3135  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  3136  07AD  00A8               	movwf	??_doMenu
  3137  07AE  0871               	movf	?___awdiv+1,w
  3138  07AF  00A9               	movwf	??_doMenu+1
  3139  07B0  0EA8               	swapf	??_doMenu,f
  3140  07B1  0EA9               	swapf	??_doMenu+1,f
  3141  07B2  30F0               	movlw	240
  3142  07B3  05A9               	andwf	??_doMenu+1,f
  3143  07B4  0828               	movf	??_doMenu,w
  3144  07B5  390F               	andlw	15
  3145  07B6  04A9               	iorwf	??_doMenu+1,f
  3146  07B7  30F0               	movlw	240
  3147  07B8  05A8               	andwf	??_doMenu,f
  3148  07B9  300A               	movlw	10
  3149  07BA  00F0               	movwf	___awmod@divisor
  3150  07BB  3000               	movlw	0
  3151  07BC  00F1               	movwf	___awmod@divisor+1
  3152  07BD  0846               	movf	_year+1,w
  3153  07BE  00F3               	movwf	___awmod@dividend+1
  3154  07BF  0845               	movf	_year,w
  3155  07C0  00F2               	movwf	___awmod@dividend
  3156  07C1  120A  118A  2099  120A  118A  	fcall	___awmod
  3157  07C6  0870               	movf	?___awmod,w
  3158  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  3159  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  3160  07C9  0728               	addwf	??_doMenu,w
  3161  07CA  00B7               	movwf	doMenu@y
  3162  07CB  0871               	movf	?___awmod+1,w
  3163  07CC  1803               	skipnc
  3164  07CD  0A71               	incf	?___awmod+1,w
  3165  07CE  0729               	addwf	??_doMenu+1,w
  3166  07CF  00B8               	movwf	doMenu@y+1
  3167                           
  3168                           ;LCDTime.c: 321: DS1307_SetDate(n,d,m,y) ;
  3169  07D0  0833               	movf	doMenu@d,w
  3170  07D1  00A8               	movwf	??_doMenu
  3171  07D2  0828               	movf	??_doMenu,w
  3172  07D3  00F5               	movwf	DS1307_SetDate@dd
  3173  07D4  0835               	movf	doMenu@m_236,w
  3174  07D5  00A9               	movwf	??_doMenu+1
  3175  07D6  0829               	movf	??_doMenu+1,w
  3176  07D7  00F6               	movwf	DS1307_SetDate@mm
  3177  07D8  0837               	movf	doMenu@y,w
  3178  07D9  00AA               	movwf	??_doMenu+2
  3179  07DA  082A               	movf	??_doMenu+2,w
  3180  07DB  00F7               	movwf	DS1307_SetDate@yy
  3181  07DC  0831               	movf	doMenu@n,w
  3182  07DD  120A  158A  2508  120A  118A  	fcall	_DS1307_SetDate
  3183  07E2                     l2360:	
  3184                           ;LCDTime.c: 322: }
  3185                           ;LCDTime.c: 325: while(bButton)
  3186                           
  3187  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  3188  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  3189  07E4  0848               	movf	_bButton,w
  3190  07E5  1903               	btfsc	3,2
  3191  07E6  0008               	return
  3192                           
  3193                           ;LCDTime.c: 326: readInputs();
  3194  07E7  120A  158A  2536  120A  118A  	fcall	_readInputs
  3195  07EC  2FE2               	goto	l2360
  3196  07ED                     __end_of_doMenu:	
  3197                           
  3198                           	psect	text8
  3199  0D96                     __ptext8:	
  3200 ;; *************** function _showTime *****************
  3201 ;; Defined at:
  3202 ;;		line 382 in file "LCDTime.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;		None
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;		None
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, status,2, status,0, pclath, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3216 ;;      Params:         0       0       0       0       0
  3217 ;;      Locals:         0       0       0       0       0
  3218 ;;      Temps:          1       0       0       0       0
  3219 ;;      Totals:         1       0       0       0       0
  3220 ;;Total ram usage:        1 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    3
  3223 ;; This function calls:
  3224 ;;		_LCDByte
  3225 ;;		_LCDWriteInt
  3226 ;; This function is called by:
  3227 ;;		_doMenu
  3228 ;;		_showClock
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function _showTime
  3234  0D96                     _showTime:	
  3235                           
  3236                           ;LCDTime.c: 384: LCDWriteInt(hour,2);
  3237                           
  3238                           ;incstack = 0
  3239                           ; Regs used in _showTime: [wreg+status,2+status,0+pclath+cstack]
  3240  0D96  3002               	movlw	2
  3241  0D97  00FD               	movwf	??_showTime
  3242  0D98  087D               	movf	??_showTime,w
  3243  0D99  00FC               	movwf	LCDWriteInt@field_length
  3244  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  3245  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  3246  0D9C  083D               	movf	_hour,w
  3247  0D9D  120A  118A  214A  120A  158A  	fcall	_LCDWriteInt
  3248                           
  3249                           ;LCDTime.c: 385: (LCDByte(':',1)) ;
  3250  0DA2  01F5               	clrf	LCDByte@isdata
  3251  0DA3  0AF5               	incf	LCDByte@isdata,f
  3252  0DA4  303A               	movlw	58
  3253  0DA5  120A  158A  2654  120A  158A  	fcall	_LCDByte
  3254                           
  3255                           ;LCDTime.c: 386: LCDWriteInt(minute,2);
  3256  0DAA  3002               	movlw	2
  3257  0DAB  00FD               	movwf	??_showTime
  3258  0DAC  087D               	movf	??_showTime,w
  3259  0DAD  00FC               	movwf	LCDWriteInt@field_length
  3260  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0DB0  083F               	movf	_minute,w
  3263  0DB1  120A  118A  214A  120A  158A  	fcall	_LCDWriteInt
  3264                           
  3265                           ;LCDTime.c: 387: (LCDByte(':',1)) ;
  3266  0DB6  01F5               	clrf	LCDByte@isdata
  3267  0DB7  0AF5               	incf	LCDByte@isdata,f
  3268  0DB8  303A               	movlw	58
  3269  0DB9  120A  158A  2654  120A  158A  	fcall	_LCDByte
  3270                           
  3271                           ;LCDTime.c: 388: LCDWriteInt(seconds,2);
  3272  0DBE  3002               	movlw	2
  3273  0DBF  00FD               	movwf	??_showTime
  3274  0DC0  087D               	movf	??_showTime,w
  3275  0DC1  00FC               	movwf	LCDWriteInt@field_length
  3276  0DC2  1283               	bcf	3,5	;RP0=0, select bank0
  3277  0DC3  1303               	bcf	3,6	;RP1=0, select bank0
  3278  0DC4  0843               	movf	_seconds,w
  3279  0DC5  120A  118A  214A   	fcall	_LCDWriteInt
  3280  0DC8  0008               	return
  3281  0DC9                     __end_of_showTime:	
  3282                           
  3283                           	psect	text9
  3284  01B2                     __ptext9:	
  3285 ;; *************** function _showDate *****************
  3286 ;; Defined at:
  3287 ;;		line 391 in file "LCDTime.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;		None
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      void 
  3294 ;; Registers used:
  3295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3301 ;;      Params:         0       0       0       0       0
  3302 ;;      Locals:         0       0       0       0       0
  3303 ;;      Temps:          1       0       0       0       0
  3304 ;;      Totals:         1       0       0       0       0
  3305 ;;Total ram usage:        1 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    3
  3308 ;; This function calls:
  3309 ;;		_LCDByte
  3310 ;;		_LCDWriteInt
  3311 ;;		_LCDWriteString
  3312 ;; This function is called by:
  3313 ;;		_doMenu
  3314 ;;		_showClock
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           
  3319                           ;psect for function _showDate
  3320  01B2                     _showDate:	
  3321                           
  3322                           ;LCDTime.c: 393: LCDWriteInt(date,2);
  3323                           
  3324                           ;incstack = 0
  3325                           ; Regs used in _showDate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3326  01B2  3002               	movlw	2
  3327  01B3  00FD               	movwf	??_showDate
  3328  01B4  087D               	movf	??_showDate,w
  3329  01B5  00FC               	movwf	LCDWriteInt@field_length
  3330  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  3331  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  3332  01B8  0839               	movf	_date,w
  3333  01B9  120A  118A  214A  120A  118A  	fcall	_LCDWriteInt
  3334                           
  3335                           ;LCDTime.c: 394: (LCDByte('/',1)) ;
  3336  01BE  01F5               	clrf	LCDByte@isdata
  3337  01BF  0AF5               	incf	LCDByte@isdata,f
  3338  01C0  302F               	movlw	47
  3339  01C1  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3340                           
  3341                           ;LCDTime.c: 395: LCDWriteInt(month,2);
  3342  01C6  3002               	movlw	2
  3343  01C7  00FD               	movwf	??_showDate
  3344  01C8  087D               	movf	??_showDate,w
  3345  01C9  00FC               	movwf	LCDWriteInt@field_length
  3346  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  3347  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  3348  01CC  0841               	movf	_month,w
  3349  01CD  120A  118A  214A  120A  118A  	fcall	_LCDWriteInt
  3350                           
  3351                           ;LCDTime.c: 396: (LCDByte('/',1)) ;
  3352  01D2  01F5               	clrf	LCDByte@isdata
  3353  01D3  0AF5               	incf	LCDByte@isdata,f
  3354  01D4  302F               	movlw	47
  3355  01D5  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3356                           
  3357                           ;LCDTime.c: 397: (LCDByte('2',1)) ;
  3358  01DA  01F5               	clrf	LCDByte@isdata
  3359  01DB  0AF5               	incf	LCDByte@isdata,f
  3360  01DC  3032               	movlw	50
  3361  01DD  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3362                           
  3363                           ;LCDTime.c: 398: (LCDByte('0',1)) ;
  3364  01E2  01F5               	clrf	LCDByte@isdata
  3365  01E3  0AF5               	incf	LCDByte@isdata,f
  3366  01E4  3030               	movlw	48
  3367  01E5  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3368                           
  3369                           ;LCDTime.c: 399: LCDWriteInt(year,2);
  3370  01EA  3002               	movlw	2
  3371  01EB  00FD               	movwf	??_showDate
  3372  01EC  087D               	movf	??_showDate,w
  3373  01ED  00FC               	movwf	LCDWriteInt@field_length
  3374  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  3375  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  3376  01F0  0845               	movf	_year,w
  3377  01F1  120A  118A  214A  120A  118A  	fcall	_LCDWriteInt
  3378                           
  3379                           ;LCDTime.c: 400: (LCDByte(32,1)) ;
  3380  01F6  01F5               	clrf	LCDByte@isdata
  3381  01F7  0AF5               	incf	LCDByte@isdata,f
  3382  01F8  3020               	movlw	32
  3383  01F9  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3384                           
  3385                           ;LCDTime.c: 401: (LCDByte(32,1)) ;
  3386  01FE  01F5               	clrf	LCDByte@isdata
  3387  01FF  0AF5               	incf	LCDByte@isdata,f
  3388  0200  3020               	movlw	32
  3389  0201  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3390                           
  3391                           ;LCDTime.c: 402: switch(day)
  3392  0206  2A2A               	goto	l1986
  3393  0207                     l1970:	
  3394                           ;LCDTime.c: 403: {
  3395                           ;LCDTime.c: 404: case 1 : LCDWriteString("Mon") ; break ;
  3396                           
  3397  0207  307E               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3398  0208  120A  158A  26A4   	fcall	_LCDWriteString
  3399  020B  0008               	return
  3400  020C                     l1972:	
  3401                           ;LCDTime.c: 405: case 2 : LCDWriteString("Tue") ; break ;
  3402                           
  3403  020C  3076               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3404  020D  120A  158A  26A4   	fcall	_LCDWriteString
  3405  0210  0008               	return
  3406  0211                     l1974:	
  3407                           ;LCDTime.c: 406: case 3 : LCDWriteString("Wed") ; break ;
  3408                           
  3409  0211  3072               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3410  0212  120A  158A  26A4   	fcall	_LCDWriteString
  3411  0215  0008               	return
  3412  0216                     l1976:	
  3413                           ;LCDTime.c: 407: case 4 : LCDWriteString("Thu") ; break ;
  3414                           
  3415  0216  308A               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3416  0217  120A  158A  26A4   	fcall	_LCDWriteString
  3417  021A  0008               	return
  3418  021B                     l1978:	
  3419                           ;LCDTime.c: 408: case 5 : LCDWriteString("Fri") ; break ;
  3420                           
  3421  021B  307A               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  3422  021C  120A  158A  26A4   	fcall	_LCDWriteString
  3423  021F  0008               	return
  3424  0220                     l1980:	
  3425                           ;LCDTime.c: 409: case 6 : LCDWriteString("Sat") ; break ;
  3426                           
  3427  0220  3086               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  3428  0221  120A  158A  26A4   	fcall	_LCDWriteString
  3429  0224  0008               	return
  3430  0225                     l1982:	
  3431                           ;LCDTime.c: 410: case 7 : LCDWriteString("Sun") ; break ;
  3432                           
  3433  0225  3082               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  3434  0226  120A  158A  26A4   	fcall	_LCDWriteString
  3435                           
  3436                           ;LCDTime.c: 411: } ;
  3437  0229  0008               	return
  3438  022A                     l1986:	
  3439                           
  3440                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3441                           ; Switch size 1, requested type "space"
  3442                           ; Number of cases is 1, Range of values is 0 to 0
  3443                           ; switch strategies available:
  3444                           ; Name         Instructions Cycles
  3445                           ; simple_byte            4     3 (average)
  3446                           ; direct_byte           11     8 (fixed)
  3447                           ; jumptable            260     6 (fixed)
  3448                           ;	Chosen strategy is simple_byte
  3449  022A  1283               	bcf	3,5	;RP0=0, select bank0
  3450  022B  1303               	bcf	3,6	;RP1=0, select bank0
  3451  022C  083C               	movf	_day+1,w
  3452  022D  3A00               	xorlw	0	; case 0
  3453  022E  1903               	skipnz
  3454  022F  2A31               	goto	l2400
  3455  0230  2A48               	goto	l340
  3456  0231                     l2400:	
  3457                           
  3458                           ; Switch size 1, requested type "space"
  3459                           ; Number of cases is 7, Range of values is 1 to 7
  3460                           ; switch strategies available:
  3461                           ; Name         Instructions Cycles
  3462                           ; simple_byte           22    12 (average)
  3463                           ; direct_byte           32    11 (fixed)
  3464                           ; jumptable            263     9 (fixed)
  3465                           ;	Chosen strategy is simple_byte
  3466  0231  083B               	movf	_day,w
  3467  0232  3A01               	xorlw	1	; case 1
  3468  0233  1903               	skipnz
  3469  0234  2A07               	goto	l1970
  3470  0235  3A03               	xorlw	3	; case 2
  3471  0236  1903               	skipnz
  3472  0237  2A0C               	goto	l1972
  3473  0238  3A01               	xorlw	1	; case 3
  3474  0239  1903               	skipnz
  3475  023A  2A11               	goto	l1974
  3476  023B  3A07               	xorlw	7	; case 4
  3477  023C  1903               	skipnz
  3478  023D  2A16               	goto	l1976
  3479  023E  3A01               	xorlw	1	; case 5
  3480  023F  1903               	skipnz
  3481  0240  2A1B               	goto	l1978
  3482  0241  3A03               	xorlw	3	; case 6
  3483  0242  1903               	skipnz
  3484  0243  2A20               	goto	l1980
  3485  0244  3A01               	xorlw	1	; case 7
  3486  0245  1903               	skipnz
  3487  0246  2A25               	goto	l1982
  3488  0247  2A48               	goto	l340
  3489  0248                     l340:	
  3490  0248  0008               	return
  3491  0249                     __end_of_showDate:	
  3492                           
  3493                           	psect	text10
  3494  0EA4                     __ptext10:	
  3495 ;; *************** function _LCDWriteString *****************
  3496 ;; Defined at:
  3497 ;;		line 225 in file "lcd_hd44780_pic16.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  msg             1    wreg     PTR const unsigned char 
  3500 ;;		 -> STR_14(4), STR_13(4), STR_12(4), STR_11(4), 
  3501 ;;		 -> STR_10(4), STR_9(4), STR_8(4), STR_7(10), 
  3502 ;;		 -> STR_6(10), STR_5(10), STR_4(9), STR_3(12), 
  3503 ;;		 -> STR_2(12), STR_1(10), 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  msg             1    1[BANK0 ] PTR const unsigned char 
  3506 ;;		 -> STR_14(4), STR_13(4), STR_12(4), STR_11(4), 
  3507 ;;		 -> STR_10(4), STR_9(4), STR_8(4), STR_7(10), 
  3508 ;;		 -> STR_6(10), STR_5(10), STR_4(9), STR_3(12), 
  3509 ;;		 -> STR_2(12), STR_1(10), 
  3510 ;;  cc              1    0[BANK0 ] char 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3520 ;;      Params:         0       0       0       0       0
  3521 ;;      Locals:         0       2       0       0       0
  3522 ;;      Temps:          1       0       0       0       0
  3523 ;;      Totals:         1       2       0       0       0
  3524 ;;Total ram usage:        3 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    2
  3527 ;; This function calls:
  3528 ;;		_LCDByte
  3529 ;; This function is called by:
  3530 ;;		_doMenu
  3531 ;;		_showDate
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           
  3536                           ;psect for function _LCDWriteString
  3537  0EA4                     _LCDWriteString:	
  3538                           
  3539                           ;incstack = 0
  3540                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3541                           ;LCDWriteString@msg stored from wreg
  3542  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  3543  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  3544  0EA6  00A1               	movwf	LCDWriteString@msg
  3545  0EA7                     l1844:	
  3546                           ;lcd_hd44780_pic16.c: 255: while(*msg!='\0')
  3547                           
  3548  0EA7  0821               	movf	LCDWriteString@msg,w
  3549  0EA8  0084               	movwf	4
  3550  0EA9  120A  118A  2003  120A  158A  	fcall	stringdir
  3551  0EAE  3A00               	xorlw	0
  3552  0EAF  1903               	btfsc	3,2
  3553  0EB0  0008               	return
  3554                           
  3555                           ;lcd_hd44780_pic16.c: 256: {
  3556                           ;lcd_hd44780_pic16.c: 258: if(*msg=='%')
  3557  0EB1  0821               	movf	LCDWriteString@msg,w
  3558  0EB2  0084               	movwf	4
  3559  0EB3  120A  118A  2003  120A  158A  	fcall	stringdir
  3560  0EB8  3A25               	xorlw	37
  3561  0EB9  1D03               	skipz
  3562  0EBA  2EDD               	goto	l1840
  3563                           
  3564                           ;lcd_hd44780_pic16.c: 259: {
  3565                           ;lcd_hd44780_pic16.c: 260: msg++;
  3566  0EBB  3001               	movlw	1
  3567  0EBC  00FC               	movwf	??_LCDWriteString
  3568  0EBD  087C               	movf	??_LCDWriteString,w
  3569  0EBE  07A1               	addwf	LCDWriteString@msg,f
  3570                           
  3571                           ;lcd_hd44780_pic16.c: 261: int8_t cc=*msg-'0';
  3572  0EBF  0821               	movf	LCDWriteString@msg,w
  3573  0EC0  0084               	movwf	4
  3574  0EC1  120A  118A  2003  120A  158A  	fcall	stringdir
  3575  0EC6  3ED0               	addlw	-48
  3576  0EC7  00FC               	movwf	??_LCDWriteString
  3577  0EC8  087C               	movf	??_LCDWriteString,w
  3578  0EC9  00A0               	movwf	LCDWriteString@cc
  3579                           
  3580                           ;lcd_hd44780_pic16.c: 263: if(cc>=0 && cc<=7)
  3581  0ECA  1BA0               	btfsc	LCDWriteString@cc,7
  3582  0ECB  2ED5               	goto	l1836
  3583  0ECC  0820               	movf	LCDWriteString@cc,w
  3584  0ECD  3A80               	xorlw	128
  3585  0ECE  3E78               	addlw	-136
  3586  0ECF  1803               	skipnc
  3587  0ED0  2ED5               	goto	l1836
  3588                           
  3589                           ;lcd_hd44780_pic16.c: 264: {
  3590                           ;lcd_hd44780_pic16.c: 265: (LCDByte(cc,1));
  3591  0ED1  01F5               	clrf	LCDByte@isdata
  3592  0ED2  0AF5               	incf	LCDByte@isdata,f
  3593  0ED3  0820               	movf	LCDWriteString@cc,w
  3594  0ED4  2EE8               	goto	L6
  3595  0ED5                     l1836:	
  3596                           ;lcd_hd44780_pic16.c: 266: }
  3597                           
  3598                           
  3599                           ;lcd_hd44780_pic16.c: 267: else
  3600                           ;lcd_hd44780_pic16.c: 268: {
  3601                           ;lcd_hd44780_pic16.c: 269: (LCDByte('%',1));
  3602  0ED5  01F5               	clrf	LCDByte@isdata
  3603  0ED6  0AF5               	incf	LCDByte@isdata,f
  3604  0ED7  3025               	movlw	37
  3605  0ED8  120A  158A  2654  120A  158A  	fcall	_LCDByte
  3606  0EDD                     l1840:	
  3607                           ;lcd_hd44780_pic16.c: 271: }
  3608                           ;lcd_hd44780_pic16.c: 272: }
  3609                           
  3610                           ;lcd_hd44780_pic16.c: 270: (LCDByte(*msg,1));
  3611                           
  3612                           
  3613                           ;lcd_hd44780_pic16.c: 273: else
  3614                           ;lcd_hd44780_pic16.c: 274: {
  3615                           ;lcd_hd44780_pic16.c: 275: (LCDByte(*msg,1));
  3616  0EDD  01F5               	clrf	LCDByte@isdata
  3617  0EDE  0AF5               	incf	LCDByte@isdata,f
  3618  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  3620  0EE1  0821               	movf	LCDWriteString@msg,w
  3621  0EE2  0084               	movwf	4
  3622  0EE3  120A  118A  2003  120A  158A  	fcall	stringdir
  3623  0EE8                     L6:	
  3624  0EE8  120A  158A  2654  120A  158A  	fcall	_LCDByte
  3625                           
  3626                           ;lcd_hd44780_pic16.c: 276: }
  3627                           ;lcd_hd44780_pic16.c: 277: msg++;
  3628  0EED  3001               	movlw	1
  3629  0EEE  00FC               	movwf	??_LCDWriteString
  3630  0EEF  087C               	movf	??_LCDWriteString,w
  3631  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  3632  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  3633  0EF2  07A1               	addwf	LCDWriteString@msg,f
  3634  0EF3  2EA7               	goto	l1844
  3635  0EF4                     __end_of_LCDWriteString:	
  3636                           
  3637                           	psect	text11
  3638  014A                     __ptext11:	
  3639 ;; *************** function _LCDWriteInt *****************
  3640 ;; Defined at:
  3641 ;;		line 323 in file "lcd_hd44780_pic16.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;  val             1    wreg     unsigned char 
  3644 ;;  field_length    1   12[COMMON] char 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  val             1    7[BANK0 ] unsigned char 
  3647 ;;  d               2    5[BANK0 ] unsigned int 
  3648 ;;  c               2    3[BANK0 ] unsigned int 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0, pclath, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3658 ;;      Params:         1       0       0       0       0
  3659 ;;      Locals:         0       5       0       0       0
  3660 ;;      Temps:          0       3       0       0       0
  3661 ;;      Totals:         1       8       0       0       0
  3662 ;;Total ram usage:        9 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    2
  3665 ;; This function calls:
  3666 ;;		_LCDByte
  3667 ;;		___awdiv
  3668 ;;		___awmod
  3669 ;; This function is called by:
  3670 ;;		_showTime
  3671 ;;		_showDate
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           
  3676                           ;psect for function _LCDWriteInt
  3677  014A                     _LCDWriteInt:	
  3678                           
  3679                           ;incstack = 0
  3680                           ; Regs used in _LCDWriteInt: [wreg+status,2+status,0+pclath+cstack]
  3681                           ;LCDWriteInt@val stored from wreg
  3682  014A  1283               	bcf	3,5	;RP0=0, select bank0
  3683  014B  1303               	bcf	3,6	;RP1=0, select bank0
  3684  014C  00A7               	movwf	LCDWriteInt@val
  3685                           
  3686                           ;lcd_hd44780_pic16.c: 325: unsigned int c,d ;
  3687                           ;lcd_hd44780_pic16.c: 327: c = 0x30 + (val % 10) ;
  3688  014D  300A               	movlw	10
  3689  014E  00F0               	movwf	___awmod@divisor
  3690  014F  3000               	movlw	0
  3691  0150  00F1               	movwf	___awmod@divisor+1
  3692  0151  0827               	movf	LCDWriteInt@val,w
  3693  0152  00A0               	movwf	??_LCDWriteInt
  3694  0153  01A1               	clrf	??_LCDWriteInt+1
  3695  0154  0820               	movf	??_LCDWriteInt,w
  3696  0155  00F2               	movwf	___awmod@dividend
  3697  0156  0821               	movf	??_LCDWriteInt+1,w
  3698  0157  00F3               	movwf	___awmod@dividend+1
  3699  0158  120A  118A  2099  120A  118A  	fcall	___awmod
  3700  015D  0870               	movf	?___awmod,w
  3701  015E  3E30               	addlw	48
  3702  015F  1283               	bcf	3,5	;RP0=0, select bank0
  3703  0160  1303               	bcf	3,6	;RP1=0, select bank0
  3704  0161  00A3               	movwf	LCDWriteInt@c
  3705  0162  0871               	movf	?___awmod+1,w
  3706  0163  1803               	skipnc
  3707  0164  3E01               	addlw	1
  3708  0165  3E00               	addlw	0
  3709  0166  00A4               	movwf	LCDWriteInt@c+1
  3710                           
  3711                           ;lcd_hd44780_pic16.c: 328: val=val/10;
  3712  0167  300A               	movlw	10
  3713  0168  00F0               	movwf	___awdiv@divisor
  3714  0169  3000               	movlw	0
  3715  016A  00F1               	movwf	___awdiv@divisor+1
  3716  016B  0827               	movf	LCDWriteInt@val,w
  3717  016C  00A0               	movwf	??_LCDWriteInt
  3718  016D  01A1               	clrf	??_LCDWriteInt+1
  3719  016E  0820               	movf	??_LCDWriteInt,w
  3720  016F  00F2               	movwf	___awdiv@dividend
  3721  0170  0821               	movf	??_LCDWriteInt+1,w
  3722  0171  00F3               	movwf	___awdiv@dividend+1
  3723  0172  120A  158A  274A  120A  118A  	fcall	___awdiv
  3724  0177  0870               	movf	?___awdiv,w
  3725  0178  1283               	bcf	3,5	;RP0=0, select bank0
  3726  0179  1303               	bcf	3,6	;RP1=0, select bank0
  3727  017A  00A2               	movwf	??_LCDWriteInt+2
  3728  017B  0822               	movf	??_LCDWriteInt+2,w
  3729  017C  00A7               	movwf	LCDWriteInt@val
  3730                           
  3731                           ;lcd_hd44780_pic16.c: 329: d = 0x30 + val ;
  3732  017D  0827               	movf	LCDWriteInt@val,w
  3733  017E  3E30               	addlw	48
  3734  017F  00A5               	movwf	LCDWriteInt@d
  3735  0180  3000               	movlw	0
  3736  0181  1803               	skipnc
  3737  0182  3001               	movlw	1
  3738  0183  00A6               	movwf	LCDWriteInt@d+1
  3739                           
  3740                           ;lcd_hd44780_pic16.c: 331: if (d > 0x39)
  3741  0184  3000               	movlw	0
  3742  0185  0226               	subwf	LCDWriteInt@d+1,w
  3743  0186  303A               	movlw	58
  3744  0187  1903               	skipnz
  3745  0188  0225               	subwf	LCDWriteInt@d,w
  3746  0189  1C03               	skipc
  3747  018A  298F               	goto	l1854
  3748                           
  3749                           ;lcd_hd44780_pic16.c: 332: (LCDByte('?',1)) ;
  3750  018B  01F5               	clrf	LCDByte@isdata
  3751  018C  0AF5               	incf	LCDByte@isdata,f
  3752  018D  303F               	movlw	63
  3753  018E  2994               	goto	L7
  3754  018F                     l1854:	
  3755                           
  3756                           ;lcd_hd44780_pic16.c: 333: else
  3757                           ;lcd_hd44780_pic16.c: 334: (LCDByte(d,1));
  3758  018F  01F5               	clrf	LCDByte@isdata
  3759  0190  0AF5               	incf	LCDByte@isdata,f
  3760  0191  1283               	bcf	3,5	;RP0=0, select bank0
  3761  0192  1303               	bcf	3,6	;RP1=0, select bank0
  3762  0193  0825               	movf	LCDWriteInt@d,w
  3763  0194                     L7:	
  3764  0194  120A  158A  2654  120A  118A  	fcall	_LCDByte
  3765                           
  3766                           ;lcd_hd44780_pic16.c: 335: if (c > 0x39)
  3767  0199  3000               	movlw	0
  3768  019A  1283               	bcf	3,5	;RP0=0, select bank0
  3769  019B  1303               	bcf	3,6	;RP1=0, select bank0
  3770  019C  0224               	subwf	LCDWriteInt@c+1,w
  3771  019D  303A               	movlw	58
  3772  019E  1903               	skipnz
  3773  019F  0223               	subwf	LCDWriteInt@c,w
  3774  01A0  1C03               	skipc
  3775  01A1  29A9               	goto	l1860
  3776                           
  3777                           ;lcd_hd44780_pic16.c: 336: (LCDByte('?',1)) ;
  3778  01A2  01F5               	clrf	LCDByte@isdata
  3779  01A3  0AF5               	incf	LCDByte@isdata,f
  3780  01A4  303F               	movlw	63
  3781  01A5  120A  158A  2654   	fcall	_LCDByte
  3782  01A8  0008               	return
  3783  01A9                     l1860:	
  3784                           
  3785                           ;lcd_hd44780_pic16.c: 337: else
  3786                           ;lcd_hd44780_pic16.c: 338: (LCDByte(c,1));
  3787  01A9  01F5               	clrf	LCDByte@isdata
  3788  01AA  0AF5               	incf	LCDByte@isdata,f
  3789  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  3790  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  3791  01AD  0823               	movf	LCDWriteInt@c,w
  3792  01AE  120A  158A  2654   	fcall	_LCDByte
  3793  01B1  0008               	return
  3794  01B2                     __end_of_LCDWriteInt:	
  3795                           
  3796                           	psect	text12
  3797  0099                     __ptext12:	
  3798 ;; *************** function ___awmod *****************
  3799 ;; Defined at:
  3800 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  divisor         2    0[COMMON] int 
  3803 ;;  dividend        2    2[COMMON] int 
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;  sign            1    6[COMMON] unsigned char 
  3806 ;;  counter         1    5[COMMON] unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  2    0[COMMON] int 
  3809 ;; Registers used:
  3810 ;;		wreg, status,2, status,0
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3816 ;;      Params:         4       0       0       0       0
  3817 ;;      Locals:         2       0       0       0       0
  3818 ;;      Temps:          1       0       0       0       0
  3819 ;;      Totals:         7       0       0       0       0
  3820 ;;Total ram usage:        7 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_LCDWriteInt
  3826 ;;		_doMenu
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           
  3831                           ;psect for function ___awmod
  3832  0099                     ___awmod:	
  3833                           
  3834                           ;incstack = 0
  3835                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3836  0099  01F6               	clrf	___awmod@sign
  3837  009A  1FF3               	btfss	___awmod@dividend+1,7
  3838  009B  28A3               	goto	l1768
  3839  009C  09F2               	comf	___awmod@dividend,f
  3840  009D  09F3               	comf	___awmod@dividend+1,f
  3841  009E  0AF2               	incf	___awmod@dividend,f
  3842  009F  1903               	skipnz
  3843  00A0  0AF3               	incf	___awmod@dividend+1,f
  3844  00A1  01F6               	clrf	___awmod@sign
  3845  00A2  0AF6               	incf	___awmod@sign,f
  3846  00A3                     l1768:	
  3847  00A3  1FF1               	btfss	___awmod@divisor+1,7
  3848  00A4  28AA               	goto	l1772
  3849  00A5  09F0               	comf	___awmod@divisor,f
  3850  00A6  09F1               	comf	___awmod@divisor+1,f
  3851  00A7  0AF0               	incf	___awmod@divisor,f
  3852  00A8  1903               	skipnz
  3853  00A9  0AF1               	incf	___awmod@divisor+1,f
  3854  00AA                     l1772:	
  3855  00AA  0870               	movf	___awmod@divisor,w
  3856  00AB  0471               	iorwf	___awmod@divisor+1,w
  3857  00AC  1903               	btfsc	3,2
  3858  00AD  28D7               	goto	l1790
  3859  00AE  01F5               	clrf	___awmod@counter
  3860  00AF  0AF5               	incf	___awmod@counter,f
  3861  00B0                     l1780:	
  3862  00B0  1BF1               	btfsc	___awmod@divisor+1,7
  3863  00B1  28BE               	goto	l1782
  3864  00B2  3001               	movlw	1
  3865  00B3                     u1415:	
  3866  00B3  1003               	clrc
  3867  00B4  0DF0               	rlf	___awmod@divisor,f
  3868  00B5  0DF1               	rlf	___awmod@divisor+1,f
  3869  00B6  3EFF               	addlw	-1
  3870  00B7  1D03               	skipz
  3871  00B8  28B3               	goto	u1415
  3872  00B9  3001               	movlw	1
  3873  00BA  00F4               	movwf	??___awmod
  3874  00BB  0874               	movf	??___awmod,w
  3875  00BC  07F5               	addwf	___awmod@counter,f
  3876  00BD  28B0               	goto	l1780
  3877  00BE                     l1782:	
  3878  00BE  0871               	movf	___awmod@divisor+1,w
  3879  00BF  0273               	subwf	___awmod@dividend+1,w
  3880  00C0  1D03               	skipz
  3881  00C1  28C4               	goto	u1435
  3882  00C2  0870               	movf	___awmod@divisor,w
  3883  00C3  0272               	subwf	___awmod@dividend,w
  3884  00C4                     u1435:	
  3885  00C4  1C03               	skipc
  3886  00C5  28CC               	goto	l1786
  3887  00C6  0870               	movf	___awmod@divisor,w
  3888  00C7  02F2               	subwf	___awmod@dividend,f
  3889  00C8  0871               	movf	___awmod@divisor+1,w
  3890  00C9  1C03               	skipc
  3891  00CA  03F3               	decf	___awmod@dividend+1,f
  3892  00CB  02F3               	subwf	___awmod@dividend+1,f
  3893  00CC                     l1786:	
  3894  00CC  3001               	movlw	1
  3895  00CD                     u1445:	
  3896  00CD  1003               	clrc
  3897  00CE  0CF1               	rrf	___awmod@divisor+1,f
  3898  00CF  0CF0               	rrf	___awmod@divisor,f
  3899  00D0  3EFF               	addlw	-1
  3900  00D1  1D03               	skipz
  3901  00D2  28CD               	goto	u1445
  3902  00D3  3001               	movlw	1
  3903  00D4  02F5               	subwf	___awmod@counter,f
  3904  00D5  1D03               	btfss	3,2
  3905  00D6  28BE               	goto	l1782
  3906  00D7                     l1790:	
  3907  00D7  0876               	movf	___awmod@sign,w
  3908  00D8  1903               	btfsc	3,2
  3909  00D9  28DF               	goto	l1794
  3910  00DA  09F2               	comf	___awmod@dividend,f
  3911  00DB  09F3               	comf	___awmod@dividend+1,f
  3912  00DC  0AF2               	incf	___awmod@dividend,f
  3913  00DD  1903               	skipnz
  3914  00DE  0AF3               	incf	___awmod@dividend+1,f
  3915  00DF                     l1794:	
  3916  00DF  0873               	movf	___awmod@dividend+1,w
  3917  00E0  00F1               	movwf	?___awmod+1
  3918  00E1  0872               	movf	___awmod@dividend,w
  3919  00E2  00F0               	movwf	?___awmod
  3920  00E3  0008               	return
  3921  00E4                     __end_of___awmod:	
  3922                           
  3923                           	psect	text13
  3924  0F4A                     __ptext13:	
  3925 ;; *************** function ___awdiv *****************
  3926 ;; Defined at:
  3927 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  divisor         2    0[COMMON] int 
  3930 ;;  dividend        2    2[COMMON] int 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  quotient        2    7[COMMON] int 
  3933 ;;  sign            1    6[COMMON] unsigned char 
  3934 ;;  counter         1    5[COMMON] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  2    0[COMMON] int 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2, status,0
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3944 ;;      Params:         4       0       0       0       0
  3945 ;;      Locals:         4       0       0       0       0
  3946 ;;      Temps:          1       0       0       0       0
  3947 ;;      Totals:         9       0       0       0       0
  3948 ;;Total ram usage:        9 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; This function calls:
  3951 ;;		Nothing
  3952 ;; This function is called by:
  3953 ;;		_LCDWriteInt
  3954 ;;		_doMenu
  3955 ;;		_readClock
  3956 ;; This function uses a non-reentrant model
  3957 ;;
  3958                           
  3959                           
  3960                           ;psect for function ___awdiv
  3961  0F4A                     ___awdiv:	
  3962                           
  3963                           ;incstack = 0
  3964                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3965  0F4A  01F6               	clrf	___awdiv@sign
  3966  0F4B  1FF1               	btfss	___awdiv@divisor+1,7
  3967  0F4C  2F54               	goto	l1724
  3968  0F4D  09F0               	comf	___awdiv@divisor,f
  3969  0F4E  09F1               	comf	___awdiv@divisor+1,f
  3970  0F4F  0AF0               	incf	___awdiv@divisor,f
  3971  0F50  1903               	skipnz
  3972  0F51  0AF1               	incf	___awdiv@divisor+1,f
  3973  0F52  01F6               	clrf	___awdiv@sign
  3974  0F53  0AF6               	incf	___awdiv@sign,f
  3975  0F54                     l1724:	
  3976  0F54  1FF3               	btfss	___awdiv@dividend+1,7
  3977  0F55  2F5F               	goto	l1730
  3978  0F56  09F2               	comf	___awdiv@dividend,f
  3979  0F57  09F3               	comf	___awdiv@dividend+1,f
  3980  0F58  0AF2               	incf	___awdiv@dividend,f
  3981  0F59  1903               	skipnz
  3982  0F5A  0AF3               	incf	___awdiv@dividend+1,f
  3983  0F5B  3001               	movlw	1
  3984  0F5C  00F4               	movwf	??___awdiv
  3985  0F5D  0874               	movf	??___awdiv,w
  3986  0F5E  06F6               	xorwf	___awdiv@sign,f
  3987  0F5F                     l1730:	
  3988  0F5F  01F7               	clrf	___awdiv@quotient
  3989  0F60  01F8               	clrf	___awdiv@quotient+1
  3990  0F61  0870               	movf	___awdiv@divisor,w
  3991  0F62  0471               	iorwf	___awdiv@divisor+1,w
  3992  0F63  1903               	btfsc	3,2
  3993  0F64  2F96               	goto	l1752
  3994  0F65  01F5               	clrf	___awdiv@counter
  3995  0F66  0AF5               	incf	___awdiv@counter,f
  3996  0F67                     l1740:	
  3997  0F67  1BF1               	btfsc	___awdiv@divisor+1,7
  3998  0F68  2F75               	goto	l1742
  3999  0F69  3001               	movlw	1
  4000  0F6A                     u1315:	
  4001  0F6A  1003               	clrc
  4002  0F6B  0DF0               	rlf	___awdiv@divisor,f
  4003  0F6C  0DF1               	rlf	___awdiv@divisor+1,f
  4004  0F6D  3EFF               	addlw	-1
  4005  0F6E  1D03               	skipz
  4006  0F6F  2F6A               	goto	u1315
  4007  0F70  3001               	movlw	1
  4008  0F71  00F4               	movwf	??___awdiv
  4009  0F72  0874               	movf	??___awdiv,w
  4010  0F73  07F5               	addwf	___awdiv@counter,f
  4011  0F74  2F67               	goto	l1740
  4012  0F75                     l1742:	
  4013  0F75  3001               	movlw	1
  4014  0F76                     u1335:	
  4015  0F76  1003               	clrc
  4016  0F77  0DF7               	rlf	___awdiv@quotient,f
  4017  0F78  0DF8               	rlf	___awdiv@quotient+1,f
  4018  0F79  3EFF               	addlw	-1
  4019  0F7A  1D03               	skipz
  4020  0F7B  2F76               	goto	u1335
  4021  0F7C  0871               	movf	___awdiv@divisor+1,w
  4022  0F7D  0273               	subwf	___awdiv@dividend+1,w
  4023  0F7E  1D03               	skipz
  4024  0F7F  2F82               	goto	u1345
  4025  0F80  0870               	movf	___awdiv@divisor,w
  4026  0F81  0272               	subwf	___awdiv@dividend,w
  4027  0F82                     u1345:	
  4028  0F82  1C03               	skipc
  4029  0F83  2F8B               	goto	l1748
  4030  0F84  0870               	movf	___awdiv@divisor,w
  4031  0F85  02F2               	subwf	___awdiv@dividend,f
  4032  0F86  0871               	movf	___awdiv@divisor+1,w
  4033  0F87  1C03               	skipc
  4034  0F88  03F3               	decf	___awdiv@dividend+1,f
  4035  0F89  02F3               	subwf	___awdiv@dividend+1,f
  4036  0F8A  1477               	bsf	___awdiv@quotient,0
  4037  0F8B                     l1748:	
  4038  0F8B  3001               	movlw	1
  4039  0F8C                     u1355:	
  4040  0F8C  1003               	clrc
  4041  0F8D  0CF1               	rrf	___awdiv@divisor+1,f
  4042  0F8E  0CF0               	rrf	___awdiv@divisor,f
  4043  0F8F  3EFF               	addlw	-1
  4044  0F90  1D03               	skipz
  4045  0F91  2F8C               	goto	u1355
  4046  0F92  3001               	movlw	1
  4047  0F93  02F5               	subwf	___awdiv@counter,f
  4048  0F94  1D03               	btfss	3,2
  4049  0F95  2F75               	goto	l1742
  4050  0F96                     l1752:	
  4051  0F96  0876               	movf	___awdiv@sign,w
  4052  0F97  1903               	btfsc	3,2
  4053  0F98  2F9E               	goto	l1756
  4054  0F99  09F7               	comf	___awdiv@quotient,f
  4055  0F9A  09F8               	comf	___awdiv@quotient+1,f
  4056  0F9B  0AF7               	incf	___awdiv@quotient,f
  4057  0F9C  1903               	skipnz
  4058  0F9D  0AF8               	incf	___awdiv@quotient+1,f
  4059  0F9E                     l1756:	
  4060  0F9E  0878               	movf	___awdiv@quotient+1,w
  4061  0F9F  00F1               	movwf	?___awdiv+1
  4062  0FA0  0877               	movf	___awdiv@quotient,w
  4063  0FA1  00F0               	movwf	?___awdiv
  4064  0FA2  0008               	return
  4065  0FA3                     __end_of___awdiv:	
  4066                           
  4067                           	psect	text14
  4068  0D36                     __ptext14:	
  4069 ;; *************** function _readInputs *****************
  4070 ;; Defined at:
  4071 ;;		line 330 in file "LCDTime.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;		None
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;  pinstate        1    3[COMMON] unsigned char 
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      void 
  4078 ;; Registers used:
  4079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4085 ;;      Params:         0       0       0       0       0
  4086 ;;      Locals:         1       0       0       0       0
  4087 ;;      Temps:          3       0       0       0       0
  4088 ;;      Totals:         4       0       0       0       0
  4089 ;;Total ram usage:        4 bytes
  4090 ;; Hardware stack levels used:    2
  4091 ;; This function calls:
  4092 ;;		Nothing
  4093 ;; This function is called by:
  4094 ;;		_main
  4095 ;;		_doMenu
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           
  4100                           ;psect for function _readInputs
  4101  0D36                     _readInputs:	
  4102                           
  4103                           ;LCDTime.c: 333: bButton = 0 ;
  4104                           
  4105                           ;incstack = 0
  4106                           ; Regs used in _readInputs: [wreg-fsr0h+status,2+status,0+pclath]
  4107  0D36  1283               	bcf	3,5	;RP0=0, select bank0
  4108  0D37  1303               	bcf	3,6	;RP1=0, select bank0
  4109  0D38  01C8               	clrf	_bButton
  4110                           
  4111                           ;LCDTime.c: 335: if (RB4 == 1)
  4112  0D39  1E06               	btfss	6,4	;volatile
  4113  0D3A  2D47               	goto	l1962
  4114                           
  4115                           ;LCDTime.c: 336: {
  4116                           ;LCDTime.c: 337: _delay((unsigned long)((15)*(4000000/4000000.0))) ;
  4117  0D3B  3004               	movlw	4
  4118  0D3C  00F0               	movwf	??_readInputs
  4119  0D3D                     u2257:	
  4120  0D3D  0BF0               	decfsz	??_readInputs,f
  4121  0D3E  2D3D               	goto	u2257
  4122  0D3F  2D40               	nop2	;nop
  4123                           
  4124                           ;LCDTime.c: 338: if (RB4 == 1)
  4125  0D40  1283               	bcf	3,5	;RP0=0, select bank0
  4126  0D41  1303               	bcf	3,6	;RP1=0, select bank0
  4127  0D42  1E06               	btfss	6,4	;volatile
  4128  0D43  2D47               	goto	l1962
  4129                           
  4130                           ;LCDTime.c: 339: {
  4131                           ;LCDTime.c: 340: bButton = 1 ;
  4132  0D44  01C8               	clrf	_bButton
  4133  0D45  0AC8               	incf	_bButton,f
  4134                           
  4135                           ;LCDTime.c: 341: return ;
  4136  0D46  0008               	return
  4137  0D47                     l1962:	
  4138                           
  4139                           ;LCDTime.c: 342: }
  4140                           ;LCDTime.c: 343: }
  4141                           ;LCDTime.c: 345: unsigned char pinstate = (RB1 << 1) | RB2 ;
  4142  0D47  3000               	movlw	0
  4143  0D48  1886               	btfsc	6,1	;volatile
  4144  0D49  3002               	movlw	2
  4145  0D4A  1906               	btfsc	6,2	;volatile
  4146  0D4B  3801               	iorlw	1
  4147  0D4C  00F0               	movwf	??_readInputs
  4148  0D4D  0870               	movf	??_readInputs,w
  4149  0D4E  00F3               	movwf	readInputs@pinstate
  4150                           
  4151                           ;LCDTime.c: 347: state = ttable[state & 0xf][pinstate];
  4152  0D4F  084A               	movf	_state,w
  4153  0D50  390F               	andlw	15
  4154  0D51  00F0               	movwf	??_readInputs
  4155  0D52  3002               	movlw	2
  4156  0D53                     u1565:	
  4157  0D53  1003               	clrc
  4158  0D54  0DF0               	rlf	??_readInputs,f
  4159  0D55  3EFF               	addlw	-1
  4160  0D56  1D03               	skipz
  4161  0D57  2D53               	goto	u1565
  4162  0D58  3001               	movlw	(low ((_ttable-__stringbase)| (0+32768)))& (0+255)
  4163  0D59  0770               	addwf	??_readInputs,w
  4164  0D5A  00F1               	movwf	??_readInputs+1
  4165  0D5B  0873               	movf	readInputs@pinstate,w
  4166  0D5C  0771               	addwf	??_readInputs+1,w
  4167  0D5D  0084               	movwf	4
  4168  0D5E  120A  118A  2003   	fcall	stringdir
  4169  0D61  00F2               	movwf	??_readInputs+2
  4170  0D62  0872               	movf	??_readInputs+2,w
  4171  0D63  00CA               	movwf	_state
  4172  0D64  0008               	return
  4173  0D65                     __end_of_readInputs:	
  4174                           
  4175                           	psect	text15
  4176  0C69                     __ptext15:	
  4177 ;; *************** function _LCDGotoXY *****************
  4178 ;; Defined at:
  4179 ;;		line 345 in file "lcd_hd44780_pic16.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  x               1    wreg     unsigned char 
  4182 ;;  y               1   12[COMMON] unsigned char 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  x               1    0[BANK0 ] unsigned char 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4194 ;;      Params:         1       0       0       0       0
  4195 ;;      Locals:         0       1       0       0       0
  4196 ;;      Temps:          1       0       0       0       0
  4197 ;;      Totals:         2       1       0       0       0
  4198 ;;Total ram usage:        3 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    2
  4201 ;; This function calls:
  4202 ;;		_LCDByte
  4203 ;; This function is called by:
  4204 ;;		_doMenu
  4205 ;;		_showClock
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           
  4210                           ;psect for function _LCDGotoXY
  4211  0C69                     _LCDGotoXY:	
  4212                           
  4213                           ;incstack = 0
  4214                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4215                           ;LCDGotoXY@x stored from wreg
  4216  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  4217  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  4218  0C6B  00A0               	movwf	LCDGotoXY@x
  4219                           
  4220                           ;lcd_hd44780_pic16.c: 347: if(x>=20) return;
  4221  0C6C  3014               	movlw	20
  4222  0C6D  0220               	subwf	LCDGotoXY@x,w
  4223  0C6E  1803               	btfsc	3,0
  4224  0C6F  0008               	return
  4225  0C70  2C7A               	goto	l1948
  4226  0C71                     l134:	
  4227                           ;lcd_hd44780_pic16.c: 355: case 1:
  4228                           
  4229                           ;lcd_hd44780_pic16.c: 354: break;
  4230                           
  4231                           ;lcd_hd44780_pic16.c: 352: {
  4232                           ;lcd_hd44780_pic16.c: 353: case 0:
  4233                           
  4234                           ;lcd_hd44780_pic16.c: 351: switch(y)
  4235                           
  4236                           
  4237                           ;lcd_hd44780_pic16.c: 356: x|=0b01000000;
  4238  0C71  1720               	bsf	LCDGotoXY@x,6
  4239                           
  4240                           ;lcd_hd44780_pic16.c: 357: break;
  4241  0C72  2C88               	goto	l133
  4242  0C73                     l1942:	
  4243                           ;lcd_hd44780_pic16.c: 358: case 2:
  4244                           
  4245                           
  4246                           ;lcd_hd44780_pic16.c: 359: x+=0x14;
  4247  0C73  3014               	movlw	20
  4248  0C74  2C76               	goto	L8
  4249  0C75                     l1944:	
  4250                           ;lcd_hd44780_pic16.c: 361: case 3:
  4251                           
  4252                           ;lcd_hd44780_pic16.c: 360: break;
  4253                           
  4254                           
  4255                           ;lcd_hd44780_pic16.c: 362: x+=0x54;
  4256  0C75  3054               	movlw	84
  4257  0C76                     L8:	
  4258  0C76  00FD               	movwf	??_LCDGotoXY
  4259  0C77  087D               	movf	??_LCDGotoXY,w
  4260  0C78  07A0               	addwf	LCDGotoXY@x,f
  4261                           
  4262                           ;lcd_hd44780_pic16.c: 364: }
  4263                           
  4264                           ;lcd_hd44780_pic16.c: 363: break;
  4265  0C79  2C88               	goto	l133
  4266  0C7A                     l1948:	
  4267  0C7A  087C               	movf	LCDGotoXY@y,w
  4268                           
  4269                           ; Switch size 1, requested type "space"
  4270                           ; Number of cases is 4, Range of values is 0 to 3
  4271                           ; switch strategies available:
  4272                           ; Name         Instructions Cycles
  4273                           ; simple_byte           13     7 (average)
  4274                           ; direct_byte           20     8 (fixed)
  4275                           ; jumptable            260     6 (fixed)
  4276                           ;	Chosen strategy is simple_byte
  4277  0C7B  3A00               	xorlw	0	; case 0
  4278  0C7C  1903               	skipnz
  4279  0C7D  2C88               	goto	l133
  4280  0C7E  3A01               	xorlw	1	; case 1
  4281  0C7F  1903               	skipnz
  4282  0C80  2C71               	goto	l134
  4283  0C81  3A03               	xorlw	3	; case 2
  4284  0C82  1903               	skipnz
  4285  0C83  2C73               	goto	l1942
  4286  0C84  3A01               	xorlw	1	; case 3
  4287  0C85  1903               	skipnz
  4288  0C86  2C75               	goto	l1944
  4289  0C87  2C88               	goto	l133
  4290  0C88                     l133:	
  4291                           
  4292                           ;lcd_hd44780_pic16.c: 386: x|=0b10000000;
  4293  0C88  17A0               	bsf	LCDGotoXY@x,7
  4294                           
  4295                           ;lcd_hd44780_pic16.c: 387: (LCDByte(x,0));
  4296  0C89  01F5               	clrf	LCDByte@isdata
  4297  0C8A  0820               	movf	LCDGotoXY@x,w
  4298  0C8B  120A  158A  2654   	fcall	_LCDByte
  4299  0C8E  0008               	return
  4300  0C8F                     __end_of_LCDGotoXY:	
  4301                           
  4302                           	psect	text16
  4303  0CB6                     __ptext16:	
  4304 ;; *************** function _DS1307_SetTime *****************
  4305 ;; Defined at:
  4306 ;;		line 43 in file "DS1307.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  hh              1    wreg     unsigned char 
  4309 ;;  mm              1    5[COMMON] unsigned char 
  4310 ;;  ss              1    6[COMMON] unsigned char 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  hh              1    7[COMMON] unsigned char 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0, pclath, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4322 ;;      Params:         2       0       0       0       0
  4323 ;;      Locals:         1       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       0
  4325 ;;      Totals:         3       0       0       0       0
  4326 ;;Total ram usage:        3 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    3
  4329 ;; This function calls:
  4330 ;;		_DS1307_Write
  4331 ;;		_I2C_Start
  4332 ;;		_I2C_Stop
  4333 ;; This function is called by:
  4334 ;;		_doMenu
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           
  4339                           ;psect for function _DS1307_SetTime
  4340  0CB6                     _DS1307_SetTime:	
  4341                           
  4342                           ;incstack = 0
  4343                           ; Regs used in _DS1307_SetTime: [wreg+status,2+status,0+pclath+cstack]
  4344                           ;DS1307_SetTime@hh stored from wreg
  4345  0CB6  00F7               	movwf	DS1307_SetTime@hh
  4346                           
  4347                           ;DS1307.c: 45: I2C_Start();
  4348  0CB7  120A  158A  2409  120A  158A  	fcall	_I2C_Start
  4349                           
  4350                           ;DS1307.c: 46: DS1307_Write(0xD0);
  4351  0CBC  30D0               	movlw	208
  4352  0CBD  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4353                           
  4354                           ;DS1307.c: 47: DS1307_Write(0x00);
  4355  0CC2  3000               	movlw	0
  4356  0CC3  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4357                           
  4358                           ;DS1307.c: 48: DS1307_Write(ss);
  4359  0CC8  0876               	movf	DS1307_SetTime@ss,w
  4360  0CC9  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4361                           
  4362                           ;DS1307.c: 49: DS1307_Write(mm);
  4363  0CCE  0875               	movf	DS1307_SetTime@mm,w
  4364  0CCF  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4365                           
  4366                           ;DS1307.c: 50: DS1307_Write(hh);
  4367  0CD4  0877               	movf	DS1307_SetTime@hh,w
  4368  0CD5  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4369                           
  4370                           ;DS1307.c: 51: I2C_Stop();
  4371  0CDA  120A  158A  23F9   	fcall	_I2C_Stop
  4372  0CDD  0008               	return
  4373  0CDE                     __end_of_DS1307_SetTime:	
  4374                           
  4375                           	psect	text17
  4376  0D08                     __ptext17:	
  4377 ;; *************** function _DS1307_SetDate *****************
  4378 ;; Defined at:
  4379 ;;		line 54 in file "DS1307.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  nn              1    wreg     unsigned char 
  4382 ;;  dd              1    5[COMMON] unsigned char 
  4383 ;;  mm              1    6[COMMON] unsigned char 
  4384 ;;  yy              1    7[COMMON] unsigned char 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  nn              1    8[COMMON] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      void 
  4389 ;; Registers used:
  4390 ;;		wreg, status,2, status,0, pclath, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4396 ;;      Params:         3       0       0       0       0
  4397 ;;      Locals:         1       0       0       0       0
  4398 ;;      Temps:          0       0       0       0       0
  4399 ;;      Totals:         4       0       0       0       0
  4400 ;;Total ram usage:        4 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    3
  4403 ;; This function calls:
  4404 ;;		_DS1307_Write
  4405 ;;		_I2C_Start
  4406 ;;		_I2C_Stop
  4407 ;; This function is called by:
  4408 ;;		_doMenu
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           
  4413                           ;psect for function _DS1307_SetDate
  4414  0D08                     _DS1307_SetDate:	
  4415                           
  4416                           ;incstack = 0
  4417                           ; Regs used in _DS1307_SetDate: [wreg+status,2+status,0+pclath+cstack]
  4418                           ;DS1307_SetDate@nn stored from wreg
  4419  0D08  00F8               	movwf	DS1307_SetDate@nn
  4420                           
  4421                           ;DS1307.c: 56: I2C_Start();
  4422  0D09  120A  158A  2409  120A  158A  	fcall	_I2C_Start
  4423                           
  4424                           ;DS1307.c: 57: DS1307_Write(0xD0);
  4425  0D0E  30D0               	movlw	208
  4426  0D0F  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4427                           
  4428                           ;DS1307.c: 58: DS1307_Write(0x03);
  4429  0D14  3003               	movlw	3
  4430  0D15  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4431                           
  4432                           ;DS1307.c: 59: DS1307_Write(nn);
  4433  0D1A  0878               	movf	DS1307_SetDate@nn,w
  4434  0D1B  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4435                           
  4436                           ;DS1307.c: 60: DS1307_Write(dd);
  4437  0D20  0875               	movf	DS1307_SetDate@dd,w
  4438  0D21  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4439                           
  4440                           ;DS1307.c: 61: DS1307_Write(mm);
  4441  0D26  0876               	movf	DS1307_SetDate@mm,w
  4442  0D27  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4443                           
  4444                           ;DS1307.c: 62: DS1307_Write(yy);
  4445  0D2C  0877               	movf	DS1307_SetDate@yy,w
  4446  0D2D  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  4447                           
  4448                           ;DS1307.c: 63: I2C_Stop();
  4449  0D32  120A  158A  23F9   	fcall	_I2C_Stop
  4450  0D35  0008               	return
  4451  0D36                     __end_of_DS1307_SetDate:	
  4452                           
  4453                           	psect	text18
  4454  0DC9                     __ptext18:	
  4455 ;; *************** function _LCDInit *****************
  4456 ;; Defined at:
  4457 ;;		line 167 in file "lcd_hd44780_pic16.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  style           1    wreg     unsigned char 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  style           1    0[BANK0 ] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      void 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2, status,0, pclath, cstack
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4471 ;;      Params:         0       0       0       0       0
  4472 ;;      Locals:         0       1       0       0       0
  4473 ;;      Temps:          2       0       0       0       0
  4474 ;;      Totals:         2       1       0       0       0
  4475 ;;Total ram usage:        3 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    2
  4478 ;; This function calls:
  4479 ;;		_LCDBusyLoop
  4480 ;;		_LCDByte
  4481 ;; This function is called by:
  4482 ;;		_main
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           
  4487                           ;psect for function _LCDInit
  4488  0DC9                     _LCDInit:	
  4489                           
  4490                           ;incstack = 0
  4491                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  4492                           ;LCDInit@style stored from wreg
  4493  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  4494  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  4495  0DCB  00A0               	movwf	LCDInit@style
  4496                           
  4497                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((30)*(4000000/4000.0)));
  4498  0DCC  3027               	movlw	39
  4499  0DCD  00FD               	movwf	??_LCDInit+1
  4500  0DCE  30F5               	movlw	245
  4501  0DCF  00FC               	movwf	??_LCDInit
  4502  0DD0                     u2267:	
  4503  0DD0  0BFC               	decfsz	??_LCDInit,f
  4504  0DD1  2DD0               	goto	u2267
  4505  0DD2  0BFD               	decfsz	??_LCDInit+1,f
  4506  0DD3  2DD0               	goto	u2267
  4507                           
  4508                           ;lcd_hd44780_pic16.c: 186: TRISD&=(~(0x0F<<4));
  4509  0DD4  300F               	movlw	15
  4510  0DD5  00FC               	movwf	??_LCDInit
  4511  0DD6  087C               	movf	??_LCDInit,w
  4512  0DD7  1683               	bsf	3,5	;RP0=1, select bank1
  4513  0DD8  1303               	bcf	3,6	;RP1=0, select bank1
  4514  0DD9  0588               	andwf	8,f	;volatile
  4515                           
  4516                           ;lcd_hd44780_pic16.c: 188: TRISBbits.TRISB5=0;
  4517  0DDA  1286               	bcf	6,5	;volatile
  4518                           
  4519                           ;lcd_hd44780_pic16.c: 189: TRISBbits.TRISB7=0;
  4520  0DDB  1386               	bcf	6,7	;volatile
  4521                           
  4522                           ;lcd_hd44780_pic16.c: 190: TRISBbits.TRISB6=0;
  4523  0DDC  1306               	bcf	6,6	;volatile
  4524                           
  4525                           ;lcd_hd44780_pic16.c: 192: PORTD&=(~(0x0F<<4));
  4526  0DDD  300F               	movlw	15
  4527  0DDE  00FC               	movwf	??_LCDInit
  4528  0DDF  087C               	movf	??_LCDInit,w
  4529  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  4530  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  4531  0DE2  0588               	andwf	8,f	;volatile
  4532                           
  4533                           ;lcd_hd44780_pic16.c: 194: (RB5=0);
  4534  0DE3  1286               	bcf	6,5	;volatile
  4535                           
  4536                           ;lcd_hd44780_pic16.c: 195: (RB6=0);
  4537  0DE4  1306               	bcf	6,6	;volatile
  4538                           
  4539                           ;lcd_hd44780_pic16.c: 196: (RB7=0);
  4540  0DE5  1386               	bcf	6,7	;volatile
  4541                           
  4542                           ;lcd_hd44780_pic16.c: 201: (RB5=1);
  4543                           
  4544                           ;lcd_hd44780_pic16.c: 199: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  4545  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  4546  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  4547  0DE8  1686               	bsf	6,5	;volatile
  4548                           
  4549                           ;lcd_hd44780_pic16.c: 202: PORTD|=((0b00000010)<<4);
  4550  0DE9  1688               	bsf	8,5	;volatile
  4551                           
  4552                           ;lcd_hd44780_pic16.c: 203: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4553  0DEA  0000               	nop
  4554                           
  4555                           ;lcd_hd44780_pic16.c: 204: (RB5=0);
  4556  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  4557  0DEC  1303               	bcf	3,6	;RP1=0, select bank0
  4558  0DED  1286               	bcf	6,5	;volatile
  4559                           
  4560                           ;lcd_hd44780_pic16.c: 205: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4561  0DEE  0000               	nop
  4562                           
  4563                           ;lcd_hd44780_pic16.c: 208: LCDBusyLoop();
  4564  0DEF  120A  158A  27A3  120A  158A  	fcall	_LCDBusyLoop
  4565                           
  4566                           ;lcd_hd44780_pic16.c: 213: (LCDByte(0b00101000,0));
  4567  0DF4  01F5               	clrf	LCDByte@isdata
  4568  0DF5  3028               	movlw	40
  4569  0DF6  120A  158A  2654  120A  158A  	fcall	_LCDByte
  4570                           
  4571                           ;lcd_hd44780_pic16.c: 214: (LCDByte(0b00001100|style,0));
  4572  0DFB  01F5               	clrf	LCDByte@isdata
  4573  0DFC  1283               	bcf	3,5	;RP0=0, select bank0
  4574  0DFD  1303               	bcf	3,6	;RP1=0, select bank0
  4575  0DFE  0820               	movf	LCDInit@style,w
  4576  0DFF  380C               	iorlw	12
  4577  0E00  120A  158A  2654   	fcall	_LCDByte
  4578  0E03  0008               	return
  4579  0E04                     __end_of_LCDInit:	
  4580                           
  4581                           	psect	text19
  4582  0E54                     __ptext19:	
  4583 ;; *************** function _LCDByte *****************
  4584 ;; Defined at:
  4585 ;;		line 54 in file "lcd_hd44780_pic16.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  c               1    wreg     unsigned char 
  4588 ;;  isdata          1    5[COMMON] unsigned char 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  c               1   10[COMMON] unsigned char 
  4591 ;;  temp            1   11[COMMON] unsigned char 
  4592 ;;  ln              1    9[COMMON] unsigned char 
  4593 ;;  hn              1    8[COMMON] unsigned char 
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  1    wreg      void 
  4596 ;; Registers used:
  4597 ;;		wreg, status,2, status,0, pclath, cstack
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4603 ;;      Params:         1       0       0       0       0
  4604 ;;      Locals:         4       0       0       0       0
  4605 ;;      Temps:          2       0       0       0       0
  4606 ;;      Totals:         7       0       0       0       0
  4607 ;;Total ram usage:        7 bytes
  4608 ;; Hardware stack levels used:    1
  4609 ;; Hardware stack levels required when called:    1
  4610 ;; This function calls:
  4611 ;;		_LCDBusyLoop
  4612 ;; This function is called by:
  4613 ;;		_LCDInit
  4614 ;;		_LCDWriteString
  4615 ;;		_LCDWriteInt
  4616 ;;		_LCDGotoXY
  4617 ;;		_main
  4618 ;;		_doMenu
  4619 ;;		_showTime
  4620 ;;		_showDate
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           
  4625                           ;psect for function _LCDByte
  4626  0E54                     _LCDByte:	
  4627                           
  4628                           ;incstack = 0
  4629                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  4630                           ;LCDByte@c stored from wreg
  4631  0E54  00FA               	movwf	LCDByte@c
  4632                           
  4633                           ;lcd_hd44780_pic16.c: 63: uint8_t hn,ln;
  4634                           ;lcd_hd44780_pic16.c: 64: uint8_t temp;
  4635                           ;lcd_hd44780_pic16.c: 66: hn=c>>4;
  4636  0E55  087A               	movf	LCDByte@c,w
  4637  0E56  00F6               	movwf	??_LCDByte
  4638  0E57  3004               	movlw	4
  4639  0E58                     u1245:	
  4640  0E58  1003               	clrc
  4641  0E59  0CF6               	rrf	??_LCDByte,f
  4642  0E5A  3EFF               	addlw	-1
  4643  0E5B  1D03               	skipz
  4644  0E5C  2E58               	goto	u1245
  4645  0E5D  0876               	movf	??_LCDByte,w
  4646  0E5E  00F7               	movwf	??_LCDByte+1
  4647  0E5F  0877               	movf	??_LCDByte+1,w
  4648  0E60  00F8               	movwf	LCDByte@hn
  4649                           
  4650                           ;lcd_hd44780_pic16.c: 67: ln=(c & 0x0F);
  4651  0E61  087A               	movf	LCDByte@c,w
  4652  0E62  390F               	andlw	15
  4653  0E63  00F6               	movwf	??_LCDByte
  4654  0E64  0876               	movf	??_LCDByte,w
  4655  0E65  00F9               	movwf	LCDByte@ln
  4656                           
  4657                           ;lcd_hd44780_pic16.c: 69: if(isdata==0)
  4658  0E66  0875               	movf	LCDByte@isdata,w
  4659  0E67  1D03               	btfss	3,2
  4660  0E68  2E6D               	goto	l99
  4661                           
  4662                           ;lcd_hd44780_pic16.c: 70: (RB7=0);
  4663  0E69  1283               	bcf	3,5	;RP0=0, select bank0
  4664  0E6A  1303               	bcf	3,6	;RP1=0, select bank0
  4665  0E6B  1386               	bcf	6,7	;volatile
  4666  0E6C  2E70               	goto	l100
  4667  0E6D                     l99:	
  4668                           
  4669                           ;lcd_hd44780_pic16.c: 71: else
  4670                           ;lcd_hd44780_pic16.c: 72: (RB7=1);
  4671  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  4672  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  4673  0E6F  1786               	bsf	6,7	;volatile
  4674  0E70                     l100:	
  4675                           
  4676                           ;lcd_hd44780_pic16.c: 74: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  4677                           ;lcd_hd44780_pic16.c: 76: (RB5=1);
  4678  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  4679  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  4680  0E72  1686               	bsf	6,5	;volatile
  4681                           
  4682                           ;lcd_hd44780_pic16.c: 80: temp=(PORTD & (~(0X0F<<4)))|((hn<<4));
  4683  0E73  0878               	movf	LCDByte@hn,w
  4684  0E74  00F6               	movwf	??_LCDByte
  4685  0E75  3004               	movlw	4
  4686  0E76                     u1265:	
  4687  0E76  1003               	clrc
  4688  0E77  0DF6               	rlf	??_LCDByte,f
  4689  0E78  3EFF               	addlw	-1
  4690  0E79  1D03               	skipz
  4691  0E7A  2E76               	goto	u1265
  4692  0E7B  0808               	movf	8,w	;volatile
  4693  0E7C  390F               	andlw	15
  4694  0E7D  0476               	iorwf	??_LCDByte,w
  4695  0E7E  00F7               	movwf	??_LCDByte+1
  4696  0E7F  0877               	movf	??_LCDByte+1,w
  4697  0E80  00FB               	movwf	LCDByte@temp
  4698                           
  4699                           ;lcd_hd44780_pic16.c: 81: PORTD=temp;
  4700  0E81  087B               	movf	LCDByte@temp,w
  4701  0E82  0088               	movwf	8	;volatile
  4702                           
  4703                           ;lcd_hd44780_pic16.c: 83: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4704  0E83  0000               	nop
  4705                           
  4706                           ;lcd_hd44780_pic16.c: 87: (RB5=0);
  4707  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  4708  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  4709  0E86  1286               	bcf	6,5	;volatile
  4710                           
  4711                           ;lcd_hd44780_pic16.c: 89: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4712  0E87  0000               	nop
  4713                           
  4714                           ;lcd_hd44780_pic16.c: 92: (RB5=1);
  4715  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  4716  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  4717  0E8A  1686               	bsf	6,5	;volatile
  4718                           
  4719                           ;lcd_hd44780_pic16.c: 94: temp=(PORTD & (~(0X0F<<4)))|((ln<<4));
  4720  0E8B  0879               	movf	LCDByte@ln,w
  4721  0E8C  00F6               	movwf	??_LCDByte
  4722  0E8D  3004               	movlw	4
  4723  0E8E                     u1275:	
  4724  0E8E  1003               	clrc
  4725  0E8F  0DF6               	rlf	??_LCDByte,f
  4726  0E90  3EFF               	addlw	-1
  4727  0E91  1D03               	skipz
  4728  0E92  2E8E               	goto	u1275
  4729  0E93  0808               	movf	8,w	;volatile
  4730  0E94  390F               	andlw	15
  4731  0E95  0476               	iorwf	??_LCDByte,w
  4732  0E96  00F7               	movwf	??_LCDByte+1
  4733  0E97  0877               	movf	??_LCDByte+1,w
  4734  0E98  00FB               	movwf	LCDByte@temp
  4735                           
  4736                           ;lcd_hd44780_pic16.c: 96: PORTD=temp;
  4737  0E99  087B               	movf	LCDByte@temp,w
  4738  0E9A  0088               	movwf	8	;volatile
  4739                           
  4740                           ;lcd_hd44780_pic16.c: 98: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4741  0E9B  0000               	nop
  4742                           
  4743                           ;lcd_hd44780_pic16.c: 102: (RB5=0);
  4744  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  4745  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  4746  0E9E  1286               	bcf	6,5	;volatile
  4747                           
  4748                           ;lcd_hd44780_pic16.c: 104: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4749  0E9F  0000               	nop
  4750                           
  4751                           ;lcd_hd44780_pic16.c: 106: LCDBusyLoop();
  4752  0EA0  120A  158A  27A3   	fcall	_LCDBusyLoop
  4753  0EA3  0008               	return
  4754  0EA4                     __end_of_LCDByte:	
  4755                           
  4756                           	psect	text20
  4757  0FA3                     __ptext20:	
  4758 ;; *************** function _LCDBusyLoop *****************
  4759 ;; Defined at:
  4760 ;;		line 109 in file "lcd_hd44780_pic16.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;		None
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  status          1    4[COMMON] unsigned char 
  4765 ;;  temp            1    3[COMMON] unsigned char 
  4766 ;;  busy            1    2[COMMON] unsigned char 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      void 
  4769 ;; Registers used:
  4770 ;;		wreg, status,2, status,0
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4776 ;;      Params:         0       0       0       0       0
  4777 ;;      Locals:         3       0       0       0       0
  4778 ;;      Temps:          2       0       0       0       0
  4779 ;;      Totals:         5       0       0       0       0
  4780 ;;Total ram usage:        5 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_LCDByte
  4786 ;;		_LCDInit
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           
  4791                           ;psect for function _LCDBusyLoop
  4792  0FA3                     _LCDBusyLoop:	
  4793                           
  4794                           ;lcd_hd44780_pic16.c: 113: uint8_t busy,status=0x00,temp;
  4795                           
  4796                           ;incstack = 0
  4797                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  4798  0FA3  01F4               	clrf	LCDBusyLoop@status
  4799                           
  4800                           ;lcd_hd44780_pic16.c: 116: TRISD|=(0x0f<<4);
  4801  0FA4  30F0               	movlw	240
  4802  0FA5  00F0               	movwf	??_LCDBusyLoop
  4803  0FA6  0870               	movf	??_LCDBusyLoop,w
  4804  0FA7  1683               	bsf	3,5	;RP0=1, select bank1
  4805  0FA8  1303               	bcf	3,6	;RP1=0, select bank1
  4806  0FA9  0488               	iorwf	8,f	;volatile
  4807                           
  4808                           ;lcd_hd44780_pic16.c: 119: (RB6=1);
  4809  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  4810  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  4811  0FAC  1706               	bsf	6,6	;volatile
  4812                           
  4813                           ;lcd_hd44780_pic16.c: 120: (RB7=0);
  4814  0FAD  1386               	bcf	6,7	;volatile
  4815  0FAE                     l1612:	
  4816                           ;lcd_hd44780_pic16.c: 127: do
  4817                           
  4818                           ;lcd_hd44780_pic16.c: 124: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  4819                           
  4820                           
  4821                           ;lcd_hd44780_pic16.c: 128: {
  4822                           ;lcd_hd44780_pic16.c: 130: (RB5=1);
  4823  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  4824  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  4825  0FB0  1686               	bsf	6,5	;volatile
  4826                           
  4827                           ;lcd_hd44780_pic16.c: 135: status=(PORTD>>4);
  4828                           
  4829                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  4830  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  4831  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  4832  0FB3  0808               	movf	8,w	;volatile
  4833  0FB4  00F0               	movwf	??_LCDBusyLoop
  4834  0FB5  3004               	movlw	4
  4835  0FB6                     u1135:	
  4836  0FB6  1003               	clrc
  4837  0FB7  0CF0               	rrf	??_LCDBusyLoop,f
  4838  0FB8  3EFF               	addlw	-1
  4839  0FB9  1D03               	skipz
  4840  0FBA  2FB6               	goto	u1135
  4841  0FBB  0870               	movf	??_LCDBusyLoop,w
  4842  0FBC  00F1               	movwf	??_LCDBusyLoop+1
  4843  0FBD  0871               	movf	??_LCDBusyLoop+1,w
  4844  0FBE  00F4               	movwf	LCDBusyLoop@status
  4845                           
  4846                           ;lcd_hd44780_pic16.c: 136: status=status<<4;
  4847  0FBF  0874               	movf	LCDBusyLoop@status,w
  4848  0FC0  00F0               	movwf	??_LCDBusyLoop
  4849  0FC1  3003               	movlw	3
  4850  0FC2                     u1145:	
  4851  0FC2  1003               	clrc
  4852  0FC3  0DF0               	rlf	??_LCDBusyLoop,f
  4853  0FC4  3EFF               	addlw	-1
  4854  0FC5  1D03               	skipz
  4855  0FC6  2FC2               	goto	u1145
  4856  0FC7  1003               	clrc
  4857  0FC8  0D70               	rlf	??_LCDBusyLoop,w
  4858  0FC9  00F1               	movwf	??_LCDBusyLoop+1
  4859  0FCA  0871               	movf	??_LCDBusyLoop+1,w
  4860  0FCB  00F4               	movwf	LCDBusyLoop@status
  4861                           
  4862                           ;lcd_hd44780_pic16.c: 141: (RB5=0);
  4863                           
  4864                           ;lcd_hd44780_pic16.c: 138: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  4865  0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  4866  0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  4867  0FCE  1286               	bcf	6,5	;volatile
  4868                           
  4869                           ;lcd_hd44780_pic16.c: 142: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4870  0FCF  0000               	nop
  4871                           
  4872                           ;lcd_hd44780_pic16.c: 144: (RB5=1);
  4873  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  4874  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  4875  0FD2  1686               	bsf	6,5	;volatile
  4876                           
  4877                           ;lcd_hd44780_pic16.c: 147: temp=(PORTD>>4);
  4878                           
  4879                           ;lcd_hd44780_pic16.c: 145: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  4880  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  4881  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  4882  0FD5  0808               	movf	8,w	;volatile
  4883  0FD6  00F0               	movwf	??_LCDBusyLoop
  4884  0FD7  3004               	movlw	4
  4885  0FD8                     u1155:	
  4886  0FD8  1003               	clrc
  4887  0FD9  0CF0               	rrf	??_LCDBusyLoop,f
  4888  0FDA  3EFF               	addlw	-1
  4889  0FDB  1D03               	skipz
  4890  0FDC  2FD8               	goto	u1155
  4891  0FDD  0870               	movf	??_LCDBusyLoop,w
  4892  0FDE  00F1               	movwf	??_LCDBusyLoop+1
  4893  0FDF  0871               	movf	??_LCDBusyLoop+1,w
  4894  0FE0  00F3               	movwf	LCDBusyLoop@temp
  4895                           
  4896                           ;lcd_hd44780_pic16.c: 148: temp&=0x0F;
  4897  0FE1  300F               	movlw	15
  4898  0FE2  00F0               	movwf	??_LCDBusyLoop
  4899  0FE3  0870               	movf	??_LCDBusyLoop,w
  4900  0FE4  05F3               	andwf	LCDBusyLoop@temp,f
  4901                           
  4902                           ;lcd_hd44780_pic16.c: 150: status=status|temp;
  4903  0FE5  0874               	movf	LCDBusyLoop@status,w
  4904  0FE6  0473               	iorwf	LCDBusyLoop@temp,w
  4905  0FE7  00F0               	movwf	??_LCDBusyLoop
  4906  0FE8  0870               	movf	??_LCDBusyLoop,w
  4907  0FE9  00F4               	movwf	LCDBusyLoop@status
  4908                           
  4909                           ;lcd_hd44780_pic16.c: 152: busy=status & 0b10000000;
  4910  0FEA  0874               	movf	LCDBusyLoop@status,w
  4911  0FEB  3980               	andlw	128
  4912  0FEC  00F0               	movwf	??_LCDBusyLoop
  4913  0FED  0870               	movf	??_LCDBusyLoop,w
  4914  0FEE  00F2               	movwf	LCDBusyLoop@busy
  4915                           
  4916                           ;lcd_hd44780_pic16.c: 156: (RB5=0);
  4917                           
  4918                           ;lcd_hd44780_pic16.c: 154: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  4919  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  4920  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  4921  0FF1  1286               	bcf	6,5	;volatile
  4922                           
  4923                           ;lcd_hd44780_pic16.c: 157: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4924  0FF2  0000               	nop
  4925                           
  4926                           ;lcd_hd44780_pic16.c: 158: }while(busy);
  4927  0FF3  0872               	movf	LCDBusyLoop@busy,w
  4928  0FF4  1D03               	btfss	3,2
  4929  0FF5  2FAE               	goto	l1612
  4930                           
  4931                           ;lcd_hd44780_pic16.c: 160: (RB6=0);
  4932  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  4933  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  4934  0FF8  1306               	bcf	6,6	;volatile
  4935                           
  4936                           ;lcd_hd44780_pic16.c: 163: TRISD&=(~(0x0F<<4));
  4937  0FF9  300F               	movlw	15
  4938  0FFA  00F0               	movwf	??_LCDBusyLoop
  4939  0FFB  0870               	movf	??_LCDBusyLoop,w
  4940  0FFC  1683               	bsf	3,5	;RP0=1, select bank1
  4941  0FFD  1303               	bcf	3,6	;RP1=0, select bank1
  4942  0FFE  0588               	andwf	8,f	;volatile
  4943  0FFF  0008               	return
  4944  1000                     __end_of_LCDBusyLoop:	
  4945                           
  4946                           	psect	text21
  4947  0BBD                     __ptext21:	
  4948 ;; *************** function _I2C_Init *****************
  4949 ;; Defined at:
  4950 ;;		line 3 in file "i2c.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;		None
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;		None
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  1    wreg      void 
  4957 ;; Registers used:
  4958 ;;		None
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4964 ;;      Params:         0       0       0       0       0
  4965 ;;      Locals:         0       0       0       0       0
  4966 ;;      Temps:          0       0       0       0       0
  4967 ;;      Totals:         0       0       0       0       0
  4968 ;;Total ram usage:        0 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; This function calls:
  4971 ;;		Nothing
  4972 ;; This function is called by:
  4973 ;;		_main
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           
  4978                           ;psect for function _I2C_Init
  4979  0BBD                     _I2C_Init:	
  4980                           
  4981                           ;i2c.c: 5: TRISD1 = 0 ;
  4982                           
  4983                           ;incstack = 0
  4984                           ; Regs used in _I2C_Init: []
  4985  0BBD  1683               	bsf	3,5	;RP0=1, select bank1
  4986  0BBE  1303               	bcf	3,6	;RP1=0, select bank1
  4987  0BBF  1088               	bcf	8,1	;volatile
  4988                           
  4989                           ;i2c.c: 6: TRISD0 = 0 ;
  4990  0BC0  1008               	bcf	8,0	;volatile
  4991  0BC1  0008               	return
  4992  0BC2                     __end_of_I2C_Init:	
  4993                           
  4994                           	psect	text22
  4995  0E04                     __ptext22:	
  4996 ;; *************** function _DS1307_Init *****************
  4997 ;; Defined at:
  4998 ;;		line 4 in file "DS1307.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;		None
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;  s               1    6[COMMON] unsigned char 
  5003 ;; Return value:  Size  Location     Type
  5004 ;;                  2   20[None  ] int 
  5005 ;; Registers used:
  5006 ;;		wreg, status,2, status,0, pclath, cstack
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5012 ;;      Params:         0       0       0       0       0
  5013 ;;      Locals:         1       0       0       0       0
  5014 ;;      Temps:          1       0       0       0       0
  5015 ;;      Totals:         2       0       0       0       0
  5016 ;;Total ram usage:        2 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    3
  5019 ;; This function calls:
  5020 ;;		_DS1307_Read
  5021 ;;		_DS1307_Write
  5022 ;;		_I2C_NoAck
  5023 ;;		_I2C_Start
  5024 ;;		_I2C_Stop
  5025 ;; This function is called by:
  5026 ;;		_main
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _DS1307_Init
  5032  0E04                     _DS1307_Init:	
  5033                           
  5034                           ;DS1307.c: 6: unsigned char s = 0 ;
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _DS1307_Init: [wreg+status,2+status,0+pclath+cstack]
  5038  0E04  01F6               	clrf	DS1307_Init@s
  5039                           
  5040                           ;DS1307.c: 8: I2C_Start();
  5041  0E05  120A  158A  2409  120A  158A  	fcall	_I2C_Start
  5042                           
  5043                           ;DS1307.c: 9: DS1307_Write(0xd0);
  5044  0E0A  30D0               	movlw	208
  5045  0E0B  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  5046                           
  5047                           ;DS1307.c: 10: DS1307_Write(0x00);
  5048  0E10  3000               	movlw	0
  5049  0E11  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  5050                           
  5051                           ;DS1307.c: 11: I2C_Start();
  5052  0E16  120A  158A  2409  120A  158A  	fcall	_I2C_Start
  5053                           
  5054                           ;DS1307.c: 12: DS1307_Write(0xd1);
  5055  0E1B  30D1               	movlw	209
  5056  0E1C  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  5057                           
  5058                           ;DS1307.c: 13: s = DS1307_Read();
  5059  0E21  120A  158A  23B9  120A  158A  	fcall	_DS1307_Read
  5060  0E26  00F5               	movwf	??_DS1307_Init
  5061  0E27  0875               	movf	??_DS1307_Init,w
  5062  0E28  00F6               	movwf	DS1307_Init@s
  5063                           
  5064                           ;DS1307.c: 14: I2C_NoAck();
  5065  0E29  120A  158A  23CB  120A  158A  	fcall	_I2C_NoAck
  5066                           
  5067                           ;DS1307.c: 16: if (s & 0x80)
  5068  0E2E  1FF6               	btfss	DS1307_Init@s,7
  5069  0E2F  2E50               	goto	l2040
  5070                           
  5071                           ;DS1307.c: 17: {
  5072                           ;DS1307.c: 18: s = s & 0x7f ;
  5073  0E30  0876               	movf	DS1307_Init@s,w
  5074  0E31  397F               	andlw	127
  5075  0E32  00F5               	movwf	??_DS1307_Init
  5076  0E33  0875               	movf	??_DS1307_Init,w
  5077  0E34  00F6               	movwf	DS1307_Init@s
  5078                           
  5079                           ;DS1307.c: 19: I2C_Start();
  5080  0E35  120A  158A  2409  120A  158A  	fcall	_I2C_Start
  5081                           
  5082                           ;DS1307.c: 20: DS1307_Write(0xD0);
  5083  0E3A  30D0               	movlw	208
  5084  0E3B  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  5085                           
  5086                           ;DS1307.c: 21: DS1307_Write(0x00);
  5087  0E40  3000               	movlw	0
  5088  0E41  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  5089                           
  5090                           ;DS1307.c: 22: DS1307_Write(s);
  5091  0E46  0876               	movf	DS1307_Init@s,w
  5092  0E47  120A  158A  23DF  120A  158A  	fcall	_DS1307_Write
  5093                           
  5094                           ;DS1307.c: 23: I2C_Stop();
  5095  0E4C  120A  158A  23F9   	fcall	_I2C_Stop
  5096                           
  5097                           ;DS1307.c: 25: }
  5098                           
  5099                           ;DS1307.c: 24: return 1 ;
  5100                           ;	Return value of _DS1307_Init is never used
  5101  0E4F  0008               	return
  5102  0E50                     l2040:	
  5103                           
  5104                           ;DS1307.c: 26: else
  5105                           ;DS1307.c: 27: I2C_Stop();
  5106  0E50  120A  158A  23F9   	fcall	_I2C_Stop
  5107  0E53  0008               	return
  5108  0E54                     __end_of_DS1307_Init:	
  5109                           ;DS1307.c: 29: return 0 ;
  5110                           ;	Return value of _DS1307_Init is never used
  5111                           
  5112                           
  5113                           	psect	text23
  5114  0BF9                     __ptext23:	
  5115 ;; *************** function _I2C_Stop *****************
  5116 ;; Defined at:
  5117 ;;		line 29 in file "i2c.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;		None
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;		None
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		None
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5131 ;;      Params:         0       0       0       0       0
  5132 ;;      Locals:         0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0
  5134 ;;      Totals:         0       0       0       0       0
  5135 ;;Total ram usage:        0 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_DS1307_Init
  5141 ;;		_DS1307_SetTime
  5142 ;;		_DS1307_SetDate
  5143 ;;		_DS1307_GetTime
  5144 ;;		_DS1307_GetDate
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           
  5149                           ;psect for function _I2C_Stop
  5150  0BF9                     _I2C_Stop:	
  5151                           
  5152                           ;i2c.c: 31: RD1 = 0;
  5153                           
  5154                           ;incstack = 0
  5155                           ; Regs used in _I2C_Stop: []
  5156  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  5157  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  5158  0BFB  1088               	bcf	8,1	;volatile
  5159                           
  5160                           ;i2c.c: 32: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5161  0BFC  0000               	nop
  5162                           
  5163                           ;i2c.c: 33: RD0 = 0;
  5164  0BFD  1283               	bcf	3,5	;RP0=0, select bank0
  5165  0BFE  1303               	bcf	3,6	;RP1=0, select bank0
  5166  0BFF  1008               	bcf	8,0	;volatile
  5167                           
  5168                           ;i2c.c: 34: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5169  0C00  0000               	nop
  5170                           
  5171                           ;i2c.c: 35: RD1 = 1;
  5172  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  5173  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  5174  0C03  1488               	bsf	8,1	;volatile
  5175                           
  5176                           ;i2c.c: 36: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5177  0C04  0000               	nop
  5178                           
  5179                           ;i2c.c: 37: RD0 = 1;
  5180  0C05  1283               	bcf	3,5	;RP0=0, select bank0
  5181  0C06  1303               	bcf	3,6	;RP1=0, select bank0
  5182  0C07  1408               	bsf	8,0	;volatile
  5183  0C08  0008               	return
  5184  0C09                     __end_of_I2C_Stop:	
  5185                           
  5186                           	psect	text24
  5187  0C09                     __ptext24:	
  5188 ;; *************** function _I2C_Start *****************
  5189 ;; Defined at:
  5190 ;;		line 17 in file "i2c.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;		None
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;		None
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  1    wreg      void 
  5197 ;; Registers used:
  5198 ;;		None
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5204 ;;      Params:         0       0       0       0       0
  5205 ;;      Locals:         0       0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0
  5207 ;;      Totals:         0       0       0       0       0
  5208 ;;Total ram usage:        0 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; This function calls:
  5211 ;;		Nothing
  5212 ;; This function is called by:
  5213 ;;		_DS1307_Init
  5214 ;;		_DS1307_SetTime
  5215 ;;		_DS1307_SetDate
  5216 ;;		_DS1307_GetTime
  5217 ;;		_DS1307_GetDate
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           
  5222                           ;psect for function _I2C_Start
  5223  0C09                     _I2C_Start:	
  5224                           
  5225                           ;i2c.c: 19: RD1 = 0;
  5226                           
  5227                           ;incstack = 0
  5228                           ; Regs used in _I2C_Start: []
  5229  0C09  1283               	bcf	3,5	;RP0=0, select bank0
  5230  0C0A  1303               	bcf	3,6	;RP1=0, select bank0
  5231  0C0B  1088               	bcf	8,1	;volatile
  5232                           
  5233                           ;i2c.c: 20: RD0 = 1;
  5234  0C0C  1408               	bsf	8,0	;volatile
  5235                           
  5236                           ;i2c.c: 21: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5237  0C0D  0000               	nop
  5238                           
  5239                           ;i2c.c: 22: RD1 = 1;
  5240  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  5241  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  5242  0C10  1488               	bsf	8,1	;volatile
  5243                           
  5244                           ;i2c.c: 23: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5245  0C11  0000               	nop
  5246                           
  5247                           ;i2c.c: 24: RD0 = 0;
  5248  0C12  1283               	bcf	3,5	;RP0=0, select bank0
  5249  0C13  1303               	bcf	3,6	;RP1=0, select bank0
  5250  0C14  1008               	bcf	8,0	;volatile
  5251                           
  5252                           ;i2c.c: 25: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5253  0C15  0000               	nop
  5254                           
  5255                           ;i2c.c: 26: RD1 = 0;
  5256  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  5257  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  5258  0C18  1088               	bcf	8,1	;volatile
  5259  0C19  0008               	return
  5260  0C1A                     __end_of_I2C_Start:	
  5261                           
  5262                           	psect	text25
  5263  0BCB                     __ptext25:	
  5264 ;; *************** function _I2C_NoAck *****************
  5265 ;; Defined at:
  5266 ;;		line 88 in file "i2c.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;		None
  5269 ;; Auto vars:     Size  Location     Type
  5270 ;;		None
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  1    wreg      void 
  5273 ;; Registers used:
  5274 ;;		status,2, status,0, pclath, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5280 ;;      Params:         0       0       0       0       0
  5281 ;;      Locals:         0       0       0       0       0
  5282 ;;      Temps:          0       0       0       0       0
  5283 ;;      Totals:         0       0       0       0       0
  5284 ;;Total ram usage:        0 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:    1
  5287 ;; This function calls:
  5288 ;;		_I2C_Clock
  5289 ;; This function is called by:
  5290 ;;		_DS1307_Init
  5291 ;;		_DS1307_GetTime
  5292 ;;		_DS1307_GetDate
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _I2C_NoAck
  5298  0BCB                     _I2C_NoAck:	
  5299                           
  5300                           ;i2c.c: 90: RD0 = 1;
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _I2C_NoAck: [status,2+status,0+pclath+cstack]
  5304  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  5305  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  5306  0BCD  1408               	bsf	8,0	;volatile
  5307                           
  5308                           ;i2c.c: 91: I2C_Clock();
  5309  0BCE  120A  158A  23C2   	fcall	_I2C_Clock
  5310                           
  5311                           ;i2c.c: 92: RD1 = 1;
  5312  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  5313  0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  5314  0BD3  1488               	bsf	8,1	;volatile
  5315  0BD4  0008               	return
  5316  0BD5                     __end_of_I2C_NoAck:	
  5317                           
  5318                           	psect	text26
  5319  0BDF                     __ptext26:	
  5320 ;; *************** function _DS1307_Write *****************
  5321 ;; Defined at:
  5322 ;;		line 32 in file "DS1307.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  dat             1    wreg     unsigned char 
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;  dat             1    4[COMMON] unsigned char 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      void 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2, status,0, pclath, cstack
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5336 ;;      Params:         0       0       0       0       0
  5337 ;;      Locals:         1       0       0       0       0
  5338 ;;      Temps:          0       0       0       0       0
  5339 ;;      Totals:         1       0       0       0       0
  5340 ;;Total ram usage:        1 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    2
  5343 ;; This function calls:
  5344 ;;		_I2C_Clock
  5345 ;;		_I2C_Write
  5346 ;; This function is called by:
  5347 ;;		_DS1307_Init
  5348 ;;		_DS1307_SetTime
  5349 ;;		_DS1307_SetDate
  5350 ;;		_DS1307_GetTime
  5351 ;;		_DS1307_GetDate
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           
  5356                           ;psect for function _DS1307_Write
  5357  0BDF                     _DS1307_Write:	
  5358                           
  5359                           ;incstack = 0
  5360                           ; Regs used in _DS1307_Write: [wreg+status,2+status,0+pclath+cstack]
  5361                           ;DS1307_Write@dat stored from wreg
  5362  0BDF  00F4               	movwf	DS1307_Write@dat
  5363                           
  5364                           ;DS1307.c: 34: I2C_Write(dat);
  5365  0BE0  0874               	movf	DS1307_Write@dat,w
  5366  0BE1  120A  158A  2443  120A  158A  	fcall	_I2C_Write
  5367                           
  5368                           ;DS1307.c: 35: I2C_Clock();
  5369  0BE6  120A  158A  23C2   	fcall	_I2C_Clock
  5370  0BE9  0008               	return
  5371  0BEA                     __end_of_DS1307_Write:	
  5372                           
  5373                           	psect	text27
  5374  0C43                     __ptext27:	
  5375 ;; *************** function _I2C_Write *****************
  5376 ;; Defined at:
  5377 ;;		line 40 in file "i2c.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;  dat             1    wreg     unsigned char 
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;  dat             1    2[COMMON] unsigned char 
  5382 ;;  i               1    3[COMMON] unsigned char 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  1    wreg      void 
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, status,0, pclath, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5392 ;;      Params:         0       0       0       0       0
  5393 ;;      Locals:         2       0       0       0       0
  5394 ;;      Temps:          2       0       0       0       0
  5395 ;;      Totals:         4       0       0       0       0
  5396 ;;Total ram usage:        4 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    1
  5399 ;; This function calls:
  5400 ;;		_I2C_Clock
  5401 ;; This function is called by:
  5402 ;;		_DS1307_Write
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _I2C_Write
  5408  0C43                     _I2C_Write:	
  5409                           
  5410                           ;incstack = 0
  5411                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  5412                           ;I2C_Write@dat stored from wreg
  5413  0C43  00F2               	movwf	I2C_Write@dat
  5414                           
  5415                           ;i2c.c: 42: unsigned char i ;
  5416                           ;i2c.c: 43: for(i=0;i<8;i++)
  5417  0C44  01F3               	clrf	I2C_Write@i
  5418  0C45  3008               	movlw	8
  5419  0C46  0273               	subwf	I2C_Write@i,w
  5420  0C47  1803               	btfsc	3,0
  5421  0C48  2C65               	goto	l67
  5422  0C49                     l66:	
  5423                           
  5424                           ;i2c.c: 44: {
  5425                           ;i2c.c: 45: RD0 = (dat & 0x80) ? 1 : 0 ;
  5426  0C49  1FF2               	btfss	I2C_Write@dat,7
  5427  0C4A  2C4F               	goto	u1180
  5428  0C4B  1283               	bcf	3,5	;RP0=0, select bank0
  5429  0C4C  1303               	bcf	3,6	;RP1=0, select bank0
  5430  0C4D  1408               	bsf	8,0	;volatile
  5431  0C4E  2C52               	goto	l1654
  5432  0C4F                     u1180:	
  5433  0C4F  1283               	bcf	3,5	;RP0=0, select bank0
  5434  0C50  1303               	bcf	3,6	;RP1=0, select bank0
  5435  0C51  1008               	bcf	8,0	;volatile
  5436  0C52                     l1654:	
  5437                           
  5438                           ;i2c.c: 47: I2C_Clock();
  5439  0C52  120A  158A  23C2  120A  158A  	fcall	_I2C_Clock
  5440                           
  5441                           ;i2c.c: 49: dat = dat << 1;
  5442  0C57  0872               	movf	I2C_Write@dat,w
  5443  0C58  00F0               	movwf	??_I2C_Write
  5444  0C59  0770               	addwf	??_I2C_Write,w
  5445  0C5A  00F1               	movwf	??_I2C_Write+1
  5446  0C5B  0871               	movf	??_I2C_Write+1,w
  5447  0C5C  00F2               	movwf	I2C_Write@dat
  5448  0C5D  3001               	movlw	1
  5449  0C5E  00F0               	movwf	??_I2C_Write
  5450  0C5F  0870               	movf	??_I2C_Write,w
  5451  0C60  07F3               	addwf	I2C_Write@i,f
  5452  0C61  3008               	movlw	8
  5453  0C62  0273               	subwf	I2C_Write@i,w
  5454  0C63  1C03               	skipc
  5455  0C64  2C49               	goto	l66
  5456  0C65                     l67:	
  5457                           
  5458                           ;i2c.c: 50: }
  5459                           ;i2c.c: 51: RD0 = 1;
  5460  0C65  1283               	bcf	3,5	;RP0=0, select bank0
  5461  0C66  1303               	bcf	3,6	;RP1=0, select bank0
  5462  0C67  1408               	bsf	8,0	;volatile
  5463  0C68  0008               	return
  5464  0C69                     __end_of_I2C_Write:	
  5465                           
  5466                           	psect	text28
  5467  0BC2                     __ptext28:	
  5468 ;; *************** function _I2C_Clock *****************
  5469 ;; Defined at:
  5470 ;;		line 9 in file "i2c.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;		None
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;		None
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  1    wreg      void 
  5477 ;; Registers used:
  5478 ;;		None
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5484 ;;      Params:         0       0       0       0       0
  5485 ;;      Locals:         0       0       0       0       0
  5486 ;;      Temps:          0       0       0       0       0
  5487 ;;      Totals:         0       0       0       0       0
  5488 ;;Total ram usage:        0 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; This function calls:
  5491 ;;		Nothing
  5492 ;; This function is called by:
  5493 ;;		_DS1307_Write
  5494 ;;		_I2C_Write
  5495 ;;		_I2C_Ack
  5496 ;;		_I2C_NoAck
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           
  5501                           ;psect for function _I2C_Clock
  5502  0BC2                     _I2C_Clock:	
  5503                           
  5504                           ;i2c.c: 11: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5505                           
  5506                           ;incstack = 0
  5507                           ; Regs used in _I2C_Clock: []
  5508  0BC2  0000               	nop
  5509                           
  5510                           ;i2c.c: 12: RD1 = 1;
  5511  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  5512  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  5513  0BC5  1488               	bsf	8,1	;volatile
  5514                           
  5515                           ;i2c.c: 13: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5516  0BC6  0000               	nop
  5517                           
  5518                           ;i2c.c: 14: RD1 = 0;
  5519  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  5520  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  5521  0BC9  1088               	bcf	8,1	;volatile
  5522  0BCA  0008               	return
  5523  0BCB                     __end_of_I2C_Clock:	
  5524                           
  5525                           	psect	text29
  5526  0BB9                     __ptext29:	
  5527 ;; *************** function _DS1307_Read *****************
  5528 ;; Defined at:
  5529 ;;		line 38 in file "DS1307.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;		None
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;		None
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  1    wreg      unsigned char 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0, pclath, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5543 ;;      Params:         0       0       0       0       0
  5544 ;;      Locals:         0       0       0       0       0
  5545 ;;      Temps:          0       0       0       0       0
  5546 ;;      Totals:         0       0       0       0       0
  5547 ;;Total ram usage:        0 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    1
  5550 ;; This function calls:
  5551 ;;		_I2C_Read
  5552 ;; This function is called by:
  5553 ;;		_DS1307_Init
  5554 ;;		_DS1307_GetTime
  5555 ;;		_DS1307_GetDate
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function _DS1307_Read
  5561  0BB9                     _DS1307_Read:	
  5562                           
  5563                           ;DS1307.c: 40: return I2C_Read();
  5564                           
  5565                           ;incstack = 0
  5566                           ; Regs used in _DS1307_Read: [wreg+status,2+status,0+pclath+cstack]
  5567  0BB9  120A  158A  24DE   	fcall	_I2C_Read
  5568  0BBC  0008               	return
  5569  0BBD                     __end_of_DS1307_Read:	
  5570                           
  5571                           	psect	text30
  5572  0CDE                     __ptext30:	
  5573 ;; *************** function _I2C_Read *****************
  5574 ;; Defined at:
  5575 ;;		line 54 in file "i2c.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;		None
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  dat             1    3[COMMON] unsigned char 
  5580 ;;  i               1    2[COMMON] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      unsigned char 
  5583 ;; Registers used:
  5584 ;;		wreg, status,2, status,0
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5590 ;;      Params:         0       0       0       0       0
  5591 ;;      Locals:         2       0       0       0       0
  5592 ;;      Temps:          2       0       0       0       0
  5593 ;;      Totals:         4       0       0       0       0
  5594 ;;Total ram usage:        4 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_DS1307_Read
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           
  5604                           ;psect for function _I2C_Read
  5605  0CDE                     _I2C_Read:	
  5606                           
  5607                           ;i2c.c: 56: unsigned char i, dat=0x00;
  5608                           
  5609                           ;incstack = 0
  5610                           ; Regs used in _I2C_Read: [wreg+status,2+status,0]
  5611  0CDE  01F3               	clrf	I2C_Read@dat
  5612                           
  5613                           ;i2c.c: 58: TRISD0 = 1 ;
  5614  0CDF  1683               	bsf	3,5	;RP0=1, select bank1
  5615  0CE0  1303               	bcf	3,6	;RP1=0, select bank1
  5616  0CE1  1408               	bsf	8,0	;volatile
  5617                           
  5618                           ;i2c.c: 60: for(i=0;i<8;i++)
  5619  0CE2  01F2               	clrf	I2C_Read@i
  5620  0CE3  3008               	movlw	8
  5621  0CE4  0272               	subwf	I2C_Read@i,w
  5622  0CE5  1803               	btfsc	3,0
  5623  0CE6  2D03               	goto	l72
  5624  0CE7                     l71:	
  5625                           
  5626                           ;i2c.c: 61: {
  5627                           ;i2c.c: 62: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5628  0CE7  0000               	nop
  5629                           
  5630                           ;i2c.c: 64: RD1 = 1;
  5631  0CE8  1283               	bcf	3,5	;RP0=0, select bank0
  5632  0CE9  1303               	bcf	3,6	;RP1=0, select bank0
  5633  0CEA  1488               	bsf	8,1	;volatile
  5634                           
  5635                           ;i2c.c: 66: dat = dat << 1;
  5636  0CEB  0873               	movf	I2C_Read@dat,w
  5637  0CEC  00F0               	movwf	??_I2C_Read
  5638  0CED  0770               	addwf	??_I2C_Read,w
  5639  0CEE  00F1               	movwf	??_I2C_Read+1
  5640  0CEF  0871               	movf	??_I2C_Read+1,w
  5641  0CF0  00F3               	movwf	I2C_Read@dat
  5642                           
  5643                           ;i2c.c: 68: if (RD0 == 1)
  5644  0CF1  1C08               	btfss	8,0	;volatile
  5645  0CF2  2CF7               	goto	l1676
  5646                           
  5647                           ;i2c.c: 69: dat++;
  5648  0CF3  3001               	movlw	1
  5649  0CF4  00F0               	movwf	??_I2C_Read
  5650  0CF5  0870               	movf	??_I2C_Read,w
  5651  0CF6  07F3               	addwf	I2C_Read@dat,f
  5652  0CF7                     l1676:	
  5653                           
  5654                           ;i2c.c: 71: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5655  0CF7  0000               	nop
  5656                           
  5657                           ;i2c.c: 73: RD1 = 0;
  5658  0CF8  1283               	bcf	3,5	;RP0=0, select bank0
  5659  0CF9  1303               	bcf	3,6	;RP1=0, select bank0
  5660  0CFA  1088               	bcf	8,1	;volatile
  5661  0CFB  3001               	movlw	1
  5662  0CFC  00F0               	movwf	??_I2C_Read
  5663  0CFD  0870               	movf	??_I2C_Read,w
  5664  0CFE  07F2               	addwf	I2C_Read@i,f
  5665  0CFF  3008               	movlw	8
  5666  0D00  0272               	subwf	I2C_Read@i,w
  5667  0D01  1C03               	skipc
  5668  0D02  2CE7               	goto	l71
  5669  0D03                     l72:	
  5670                           
  5671                           ;i2c.c: 74: }
  5672                           ;i2c.c: 76: TRISD0 = 0 ;
  5673  0D03  1683               	bsf	3,5	;RP0=1, select bank1
  5674  0D04  1303               	bcf	3,6	;RP1=0, select bank1
  5675  0D05  1008               	bcf	8,0	;volatile
  5676                           
  5677                           ;i2c.c: 78: return dat;
  5678  0D06  0873               	movf	I2C_Read@dat,w
  5679  0D07  0008               	return
  5680  0D08                     __end_of_I2C_Read:	
  5681  007E                     btemp	set	126	;btemp
  5682  007E                     wtemp	set	126
  5683  007E                     wtemp0	set	126
  5684  0080                     wtemp1	set	128
  5685  0082                     wtemp2	set	130
  5686  0084                     wtemp3	set	132
  5687  0086                     wtemp4	set	134
  5688  0088                     wtemp5	set	136
  5689  007F                     wtemp6	set	127
  5690  007E                     ttemp	set	126
  5691  007E                     ttemp0	set	126
  5692  0081                     ttemp1	set	129
  5693  0084                     ttemp2	set	132
  5694  0087                     ttemp3	set	135
  5695  007F                     ttemp4	set	127
  5696  007E                     ltemp	set	126
  5697  007E                     ltemp0	set	126
  5698  0082                     ltemp1	set	130
  5699  0086                     ltemp2	set	134
  5700  0080                     ltemp3	set	128


Data Sizes:
    Strings     101
    Constant    40
    Data        15
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     25      43
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[4]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[9]), STR_3(CODE[12]), 
		 -> STR_2(CODE[12]), STR_1(CODE[10]), 

    DS1307_GetDate@y_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 

    DS1307_GetDate@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetDate@d_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetDate@n_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@n(BANK0[1]), 

    DS1307_GetTime@h_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetTime@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetTime@s_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_LCDInit
    _showClock->_LCDGotoXY
    _showClock->_showDate
    _showClock->_showTime
    _readClock->___wmul
    ___wmul->___awdiv
    _DS1307_GetTime->_DS1307_Write
    _DS1307_GetDate->_DS1307_Write
    _doMenu->_LCDGotoXY
    _doMenu->_showDate
    _doMenu->_showTime
    _showTime->_LCDWriteInt
    _showDate->_LCDWriteInt
    _showDate->_LCDWriteString
    _LCDWriteString->_LCDByte
    _LCDWriteInt->_LCDByte
    _LCDGotoXY->_LCDByte
    _DS1307_SetTime->_DS1307_Write
    _DS1307_SetDate->_DS1307_Write
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _DS1307_Init->_DS1307_Write
    _DS1307_Write->_I2C_Write
    _DS1307_Read->_I2C_Read

Critical Paths under _main in BANK0

    _main->_doMenu
    _readClock->___wmul
    _showTime->_LCDWriteInt
    _showDate->_LCDWriteInt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   48381
                        _DS1307_Init
                           _I2C_Init
                            _LCDByte
                            _LCDInit
                             _doMenu
                          _readClock
                         _readInputs
                          _showClock
 ---------------------------------------------------------------------------------
 (1) _showClock                                            0     0      0   16927
                          _LCDGotoXY
                           _showDate
                           _showTime
 ---------------------------------------------------------------------------------
 (1) _readClock                                            7     7      0    3851
                                              2 BANK0      7     7      0
                     _DS1307_GetDate
                     _DS1307_GetTime
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     728
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetTime                                       4     2      2     405
                                              5 COMMON     4     2      2
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetDate                                       5     2      3     480
                                              5 COMMON     5     2      3
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (1) _doMenu                                              17    17      0   24284
                                              8 BANK0     17    17      0
                     _DS1307_SetDate
                     _DS1307_SetTime
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            ___awdiv
                            ___awmod
                         _readInputs
                           _showDate
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showTime                                             1     1      0    6285
                                             13 COMMON     1     1      0
                            _LCDByte
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (2) _showDate                                             1     1      0    8283
                                             13 COMMON     1     1      0
                            _LCDByte
                        _LCDWriteInt
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (3) _LCDWriteString                                       3     3      0    1998
                                             12 COMMON     1     1      0
                                              0 BANK0      2     2      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDWriteInt                                          9     8      1    4844
                                             12 COMMON     1     0      1
                                              0 BANK0      8     8      0
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1144
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1784
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _readInputs                                           4     4      0      23
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            3     2      1    2359
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetTime                                       3     1      2     285
                                              5 COMMON     3     1      2
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetDate                                       4     1      3     360
                                              5 COMMON     4     1      3
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1580
                                             12 COMMON     2     2      0
                                              0 BANK0      1     1      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (4) _LCDByte                                              7     6      1    1441
                                              5 COMMON     7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (5) _LCDBusyLoop                                          5     5      0     117
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS1307_Init                                          2     2      0     275
                                              5 COMMON     2     2      0
                        _DS1307_Read
                       _DS1307_Write
                          _I2C_NoAck
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_NoAck                                            0     0      0       0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (3) _DS1307_Write                                         1     1      0     113
                                              4 COMMON     1     1      0
                          _I2C_Clock
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            4     4      0      91
                                              0 COMMON     4     4      0
                          _I2C_Clock
 ---------------------------------------------------------------------------------
 (4) _I2C_Clock                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DS1307_Read                                          0     0      0      93
                           _I2C_Read
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             4     4      0      93
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1307_Init
     _DS1307_Read
       _I2C_Read
     _DS1307_Write
       _I2C_Clock
       _I2C_Write
         _I2C_Clock
     _I2C_NoAck
       _I2C_Clock
     _I2C_Start
     _I2C_Stop
   _I2C_Init
   _LCDByte
     _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _doMenu
     _DS1307_SetDate
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_SetTime
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     ___awdiv
     ___awmod
     _readInputs
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
   _readClock
     _DS1307_GetDate
       _DS1307_Read
         _I2C_Read
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Ack
         _I2C_Clock
       _I2C_NoAck
         _I2C_Clock
       _I2C_Start
       _I2C_Stop
     _DS1307_GetTime
       _DS1307_Read
         _I2C_Read
       _DS1307_Write
         _I2C_Clock
         _I2C_Write
           _I2C_Clock
       _I2C_Ack
         _I2C_Clock
       _I2C_NoAck
         _I2C_Clock
       _I2C_Start
       _I2C_Stop
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _readInputs
   _showClock
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     19      2B       5       53.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      39      12        0.0%
ABS                  0      0      39       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue May 10 05:58:20 2016

           ?_LCDBusyLoop 0070       __size_of_I2C_Clock 0009       __size_of_I2C_NoAck 000A  
                      pc 0002       __size_of_I2C_Start 0011              __CFG_CP$OFF 0000  
     __size_of_I2C_Write 0026                       l71 0CE7                       l72 0D03  
                     l66 0C49                       l67 0C65                       l99 0E6D  
           ___awdiv@sign 0076                       fsr 0004      ___wmul@multiplicand 007B  
            __CFG_LVP$ON 0000                      l100 0E70                      l300 06C3  
                    l133 0C88                      l134 0C71                      l222 03C7  
                    l234 0412                      l340 0248                      l246 046A  
                    l264 05A8                      l424 0C9D                      l276 05F6  
                    l288 065D                      _RB1 0031                      _RB2 0032  
                    _RD0 0040                      _RB4 0034                      _RD1 0041  
                    _RB5 0035                      _RB6 0036                      _RB7 0037  
           __CFG_CPD$OFF 0000                      _day 003B          __end_of_I2C_Ack 0BDF  
                    fsr0 0004                      indf 0000             ___awmod@sign 0076  
           __CFG_FOSC$XT 0000             _DS1307_Write 0BDF  LCDWriteInt@field_length 007C  
        __end_of_LCDByte 0EA4          __end_of_LCDInit 0E04             ?_LCDWriteInt 007C  
            LCDByte@temp 007B                     l2040 0E50                     l2116 036F  
                   l2222 04A1                     l2206 0474                     l2214 0448  
                   l2118 037A                     l2400 0231                     l2320 0689  
                   l2232 055A                     l2216 0489                     l2208 0476  
                   l2322 068E                     l2314 0676                     l2226 0548  
                   l2146 03D1                     l2154 03A5                     l1612 0FAE  
                   l2156 03D9                     l2148 03D3                     l2228 0553  
                   l2342 06D1                     l2318 0630                     l2262 0584  
                   l2158 03DE                     l2360 07E2                     l2264 05BC  
                   l2176 041C                     l2184 03F0                     l1730 0F5F  
                   l2346 06A0                     l2290 05D3                     l2266 05C1  
                   l2258 05B6                     l2186 0431                     l2178 041E  
                   l2370 0D7C                     l1740 0F67                     l1724 0F54  
                   l2356 0704                     l2348 06E4                     l2292 0619  
                   l2188 0436                     l1654 0C52                     l1742 0F75  
                   l2294 061E                     l2286 0606                     l1752 0F96  
                   l1840 0EDD                     l1676 0CF7                     l1756 0F9E  
                   l1748 0F8B                     l1780 00B0                     l1772 00AA  
                   l1860 01A9                     l1836 0ED5                     l1844 0EA7  
                   l1942 0C73                     l1782 00BE                     l1790 00D7  
                   l1854 018F                     l1944 0C75                     l1768 00A3  
                   l1962 0D47                     l1794 00DF                     l1786 00CC  
                   l1970 0207                     l1948 0C7A                     l1980 0220  
                   l1972 020C                     l1982 0225                     l1974 0211  
                   l1976 0216                     l1978 021B                     l1986 022A  
                   l1994 0C93                     STR_1 0067                     STR_2 003D  
                   STR_3 0031                     STR_4 0071                     STR_5 005D  
                   STR_6 0053                     STR_7 0049                     STR_8 0086  
                   STR_9 007E                     u2005 05F0                     u1135 0FB6  
                   u1145 0FC2                     u1155 0FD8                     u1315 0F6A  
                   u1180 0C4F                     u1245 0E58                     u2205 06F2  
                   u1335 0F76                     u1415 00B3                     u2215 06FA  
                   u1265 0E76                     u1345 0F82                     u2225 0702  
                   u2145 06BD                     u1275 0E8E                     u1355 0F8C  
                   u1435 00C4                     u2075 0655                     u1445 00CD  
                   u2257 0D3D                     u1625 02D9                     u2267 0DD0  
                   u2195 06EA                     u1565 0D53                     u1815 0465  
                   u1745 040D                     u1585 0C9E                     u1675 03C2  
                   u1595 0CA5                     u1935 05A1                     u1865 048F  
                   u1875 0497                     u1885 049F             __CFG_WRT$OFF 0000  
                   _date 0039                     _main 0D65                     _hour 003D  
     __size_of_LCDGotoXY 0026         __end_of_I2C_Init 0BC2         __end_of_I2C_Read 0D08  
                   _year 0045                     btemp 007E         __end_of_I2C_Stop 0C09  
          __CFG_BOREN$ON 0000                     ltemp 007E                     start 0000  
                   ttemp 007E                     wtemp 007E         DS1307_SetDate@dd 0075  
       DS1307_SetDate@mm 0076         DS1307_SetDate@nn 0078         DS1307_SetDate@yy 0077  
                  ?_main 0070          __end_of___awdiv 0FA3                    STR_10 007A  
                  STR_11 0092                    STR_12 0082                    STR_13 008E  
                  STR_14 008A            __CFG_WDTE$OFF 0000          __end_of___awmod 00E4  
           LCDInit@style 0020          ___awdiv@divisor 0070          ___awdiv@counter 0075  
                  _PORTD 0008                    _TRISD 0088            __CFG_PWRTE$ON 0000  
       DS1307_SetTime@hh 0077         DS1307_SetTime@mm 0075         DS1307_SetTime@ss 0076  
         _DS1307_GetDate 00E4           _DS1307_GetTime 0EF4        __end_of_I2C_Clock 0BCB  
      __end_of_I2C_NoAck 0BD5                    _month 0041                    _state 004A  
      __end_of_I2C_Start 0C1A        __end_of_I2C_Write 0C69                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080           _DS1307_SetDate 0D08           _DS1307_SetTime 0CB6  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    ttemp4 007F                    status 0003  
                  wtemp0 007E                    wtemp1 0080                    wtemp2 0082  
                  wtemp3 0084                    wtemp4 0086                    wtemp5 0088  
                  wtemp6 007F          __initialization 07ED             __end_of_main 0D96  
              ??_I2C_Ack 0070                   ??_main 007E        __end_of_LCDGotoXY 0C8F  
          LCDByte@isdata 0075                ??_LCDByte 0076                ??_LCDInit 007C  
 __end_of_DS1307_GetDate 014A   __end_of_DS1307_GetTime 0F4A                I2C_Read@i 0072  
 __end_of_DS1307_SetDate 0D36         ___awdiv@dividend 0072   __end_of_DS1307_SetTime 0CDE  
                 _TRISD0 0440                   _TRISD1 0441             DS1307_Init@s 0076  
         _LCDWriteString 0EA4                   ___wmul 0C8F                ??___awdiv 0074  
                 _doMenu 036F                ??___awmod 0074     __size_of_LCDBusyLoop 005D  
       ___awdiv@quotient 0077                   _minute 003F          ___awmod@divisor 0070  
        ___awmod@counter 0075                   _ttable 0009                ?_I2C_Init 0070  
              ?_I2C_Read 0070         __end_of_showDate 0249          ?_DS1307_GetDate 0075  
              ?_I2C_Stop 0070             LCDWriteInt@c 0023             LCDWriteInt@d 0025  
       __end_of_showTime 0DC9          ?_DS1307_GetTime 0075          ?_DS1307_SetDate 0075  
        ?_DS1307_SetTime 0075     __size_of_LCDWriteInt 0068  __end_of__initialization 07FC  
 __end_of_LCDWriteString 0EF4                LCDByte@hn 0078                LCDByte@ln 0079  
         __pcstackCOMMON 0070             __pidataBANK0 0BEA               ??_I2C_Init 0070  
             ??_I2C_Read 0070               ??_I2C_Stop 0070            ??_DS1307_Init 0075  
          ??_DS1307_Read 0074               __pbssBANK0 0048       __size_of_readClock 0126  
        ?_LCDWriteString 0070               __pmaintext 0D65                  ?___wmul 0079  
                ?_doMenu 0070                  _I2C_Ack 0BD5               I2C_Write@i 0073  
     __size_of_showClock 0018                  _LCDByte 0E54                  _LCDInit 0DC9  
             __stringtab 0003                _I2C_Clock 0BC2                _I2C_NoAck 0BCB  
              _I2C_Start 0C09                _I2C_Write 0C43      __end_of_DS1307_Init 0E54  
    __end_of_DS1307_Read 0BBD                  _bButton 0048                ?_showDate 0070  
              ?_showTime 0070             I2C_Write@dat 0072                  ___awdiv 0F4A  
                ___awmod 0099          __size_of___wmul 0027               _readInputs 0D36  
        __size_of_doMenu 047E                  __ptext1 0C2B                  __ptext2 0249  
                __ptext3 0C8F                  __ptext4 0EF4                  __ptext5 00E4  
                __ptext6 0BD5                  __ptext7 036F                  __ptext8 0D96  
                __ptext9 01B2        __end_of_readClock 036F                  doMenu@d 0033  
                doMenu@h 002B                  doMenu@m 002D                  doMenu@n 0031  
                doMenu@s 002F                  doMenu@y 0037         ___awmod@dividend 0072  
                _seconds 0043                _LCDGotoXY 0C69     end_of_initialization 07FC  
      __end_of_monthDays 0031               ?_I2C_Clock 0070               ?_I2C_NoAck 0070  
             ?_I2C_Start 0070        __end_of_showClock 0C43               ?_I2C_Write 0070  
             ??_showDate 007D               ??_showTime 007D         ??_DS1307_GetDate 0078  
       ??_DS1307_GetTime 0077        LCDWriteString@msg 0021         ??_DS1307_SetDate 0078  
       ??_DS1307_SetTime 0077                _TRISBbits 0086               ?_LCDGotoXY 007C  
      __size_of_I2C_Init 0005        __size_of_I2C_Read 002A        __size_of_I2C_Stop 0010  
            _DS1307_Init 0E04              _DS1307_Read 0BB9               LCDGotoXY@x 0020  
             LCDGotoXY@y 007C            ??_LCDBusyLoop 0070              ?_readInputs 0070  
         __end_of___wmul 0CB6           __end_of_doMenu 07ED           __end_of_ttable 0025  
    start_initialization 07ED            ?_DS1307_Write 0070            ??_LCDWriteInt 0020  
       ??_LCDWriteString 007C              ??_I2C_Clock 0070              ??_I2C_NoAck 0070  
             readClock@a 0026               readClock@b 0027               readClock@c 0028  
             readClock@n 0025              ??_I2C_Start 0070              ??_I2C_Write 0070  
        DS1307_Write@dat 0074                 ??___wmul 007D                 ??_doMenu 0028  
             init_fetch0 0C1A              __pdataBANK0 0039                 ?_I2C_Ack 0070  
    __end_of_LCDBusyLoop 1000                 ?_LCDByte 0075                 ?_LCDInit 0070  
         ??_DS1307_Write 0074                 LCDByte@c 007A                ___latbits 0002  
          __pcstackBANK0 0020              ??_LCDGotoXY 007D             _menuFunction 0049  
    __size_of_readInputs 002F      __end_of_LCDWriteInt 01B2              I2C_Read@dat 0073  
               ?___awdiv 0070                 ?___awmod 0070        __size_of_showDate 0097  
      __size_of_showTime 0033                __pstrings 0003                 _I2C_Init 0BBD  
               _I2C_Read 0CDE                 _I2C_Stop 0BF9                _readClock 0249  
        LCDBusyLoop@busy 0072          LCDBusyLoop@temp 0073                _last_hour 0047  
         ___wmul@product 0020                _monthDays 0025                _showClock 0C2B  
            _LCDBusyLoop 0FA3         LCDWriteString@cc 0020         __size_of_I2C_Ack 000A  
            __stringbase 0008        ___wmul@multiplier 0079         __size_of_LCDByte 0050  
       __size_of_LCDInit 003B               ?_readClock 0070              _LCDWriteInt 014A  
           ?_DS1307_Init 0070             ?_DS1307_Read 0070              doMenu@m_236 0035  
   __end_of_DS1307_Write 0BEA               ?_showClock 0070             ??_readInputs 0070  
       __size_of___awdiv 0059         __size_of___awmod 004B        LCDBusyLoop@status 0074  
     __end_of__stringtab 0009      DS1307_GetDate@d_ptr 0075      DS1307_GetDate@m_ptr 0076  
    DS1307_GetDate@n_ptr 0079      DS1307_GetDate@y_ptr 0077                 __ptext10 0EA4  
               __ptext11 014A                 __ptext20 0FA3                 __ptext12 0099  
               __ptext21 0BBD                 __ptext13 0F4A                 __ptext30 0CDE  
               __ptext22 0E04                 __ptext14 0D36                 __ptext23 0BF9  
               __ptext15 0C69                 __ptext24 0C09                 __ptext16 0CB6  
               __ptext25 0BCB                 __ptext17 0D08                 __ptext26 0BDF  
               __ptext18 0DC9                 __ptext27 0C43                 __ptext19 0E54  
               __ptext28 0BC2                 __ptext29 0BB9       __end_of_readInputs 0D65  
          __size_of_main 0031                 _showDate 01B2                 _showTime 0D96  
            ??_readClock 0022                 init_ram0 0C1E  __size_of_DS1307_GetDate 0066  
__size_of_DS1307_GetTime 0056  __size_of_DS1307_SetDate 002E           LCDWriteInt@val 0027  
__size_of_DS1307_SetTime 0028                stringcode 0003              ??_showClock 007E  
               stringdir 0003                 stringtab 0003    __size_of_DS1307_Write 000B  
    DS1307_GetTime@h_ptr 0078      DS1307_GetTime@m_ptr 0075      DS1307_GetTime@s_ptr 0076  
   __size_of_DS1307_Init 0050     __size_of_DS1307_Read 0004       readInputs@pinstate 0073  
__size_of_LCDWriteString 0050  
