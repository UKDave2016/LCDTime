

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed May 25 21:27:54 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	psect	text32,local,class=CODE,merge=1,delta=2
    45                           	psect	text33,local,class=CODE,merge=1,delta=2
    46                           	psect	text34,local,class=CODE,merge=1,delta=2
    47                           	psect	text35,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0088                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0094                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  0087                     	;# 
   146  0088                     	;# 
   147  0089                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009E                     	;# 
   158  009F                     	;# 
   159  010C                     	;# 
   160  010D                     	;# 
   161  010E                     	;# 
   162  010F                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  000E                     	;# 
   181  000F                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0013                     	;# 
   186  0014                     	;# 
   187  0015                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001B                     	;# 
   196  001C                     	;# 
   197  001D                     	;# 
   198  001E                     	;# 
   199  001F                     	;# 
   200  0081                     	;# 
   201  0085                     	;# 
   202  0086                     	;# 
   203  0087                     	;# 
   204  0088                     	;# 
   205  0089                     	;# 
   206  008C                     	;# 
   207  008D                     	;# 
   208  008E                     	;# 
   209  0091                     	;# 
   210  0092                     	;# 
   211  0093                     	;# 
   212  0094                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0008                     	;# 
   232  0009                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000D                     	;# 
   237  000E                     	;# 
   238  000E                     	;# 
   239  000F                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0014                     	;# 
   245  0015                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  001D                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  0081                     	;# 
   259  0085                     	;# 
   260  0086                     	;# 
   261  0087                     	;# 
   262  0088                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0094                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281                           
   282                           	psect	idataBANK0
   283  095F                     __pidataBANK0:	
   284                           
   285                           ;initializer for LCDWriteInt@F1142
   286  095F  342D               	retlw	45
   287  0960  342D               	retlw	45
   288  0961  342D               	retlw	45
   289  0962  342D               	retlw	45
   290  0963  342D               	retlw	45
   291  0964  3400               	retlw	0
   292                           
   293                           ;initializer for _date
   294  0965  3408               	retlw	8
   295  0966  3400               	retlw	0
   296                           
   297                           ;initializer for _day
   298  0967  3401               	retlw	1
   299  0968  3400               	retlw	0
   300                           
   301                           ;initializer for _hour
   302  0969  3406               	retlw	6
   303  096A  3400               	retlw	0
   304                           
   305                           ;initializer for _minute
   306  096B  3405               	retlw	5
   307  096C  3400               	retlw	0
   308                           
   309                           ;initializer for _month
   310  096D  3405               	retlw	5
   311  096E  3400               	retlw	0
   312                           
   313                           ;initializer for _runningMinute
   314  096F  34FF               	retlw	255
   315  0970  34FF               	retlw	255
   316                           
   317                           ;initializer for _seconds
   318  0971  3404               	retlw	4
   319  0972  3400               	retlw	0
   320                           
   321                           ;initializer for _year
   322  0973  3410               	retlw	16
   323  0974  3400               	retlw	0
   324                           
   325                           ;initializer for _last_hour
   326  0975  34EE               	retlw	238
   327                           
   328                           ;initializer for _menuFunction
   329  0976  3401               	retlw	1
   330                           
   331                           	psect	strings
   332  0800                     __pstrings:	
   333  0800                     stringtab:	
   334  0800                     __stringtab:	
   335                           
   336                           ;	String table - string pointers are 1 byte each
   337  0800  1BFF               	btfsc	btemp+1,7
   338  0801  280A               	ljmp	stringcode
   339  0802  1383               	bcf	3,7
   340  0803  187F               	btfsc	btemp+1,0
   341  0804  1783               	bsf	3,7
   342  0805  0800               	movf	0,w
   343  0806  0A84               	incf	4,f
   344  0807  1903               	skipnz
   345  0808  0AFF               	incf	btemp+1,f
   346  0809  0008               	return
   347  080A                     stringcode:	
   348  080A                     stringdir:	
   349  080A  3008               	movlw	high stringdir
   350  080B  008A               	movwf	10
   351  080C  0804               	movf	4,w
   352  080D  0A84               	incf	4,f
   353  080E  0782               	addwf	2,f
   354  080F                     __stringbase:	
   355  080F  3400               	retlw	0
   356  0810                     __end_of__stringtab:	
   357  0810                     _ttable:	
   358  0810  3400               	retlw	0
   359  0811  3402               	retlw	2
   360  0812  3404               	retlw	4
   361  0813  3400               	retlw	0
   362  0814  3403               	retlw	3
   363  0815  3400               	retlw	0
   364  0816  3401               	retlw	1
   365  0817  3410               	retlw	16
   366  0818  3403               	retlw	3
   367  0819  3402               	retlw	2
   368  081A  3400               	retlw	0
   369  081B  3400               	retlw	0
   370  081C  3403               	retlw	3
   371  081D  3402               	retlw	2
   372  081E  3401               	retlw	1
   373  081F  3400               	retlw	0
   374  0820  3406               	retlw	6
   375  0821  3400               	retlw	0
   376  0822  3404               	retlw	4
   377  0823  3400               	retlw	0
   378  0824  3406               	retlw	6
   379  0825  3405               	retlw	5
   380  0826  3400               	retlw	0
   381  0827  3420               	retlw	32
   382  0828  3406               	retlw	6
   383  0829  3405               	retlw	5
   384  082A  3404               	retlw	4
   385  082B  3400               	retlw	0
   386  082C                     __end_of_ttable:	
   387  082C                     _daysOfTheWeek:	
   388  082C  344D               	retlw	77
   389  082D  346F               	retlw	111
   390  082E  346E               	retlw	110
   391  082F  3454               	retlw	84
   392  0830  3475               	retlw	117
   393  0831  3465               	retlw	101
   394  0832  3457               	retlw	87
   395  0833  3465               	retlw	101
   396  0834  3464               	retlw	100
   397  0835  3454               	retlw	84
   398  0836  3468               	retlw	104
   399  0837  3475               	retlw	117
   400  0838  3446               	retlw	70
   401  0839  3472               	retlw	114
   402  083A  3469               	retlw	105
   403  083B  3453               	retlw	83
   404  083C  3461               	retlw	97
   405  083D  3474               	retlw	116
   406  083E  3453               	retlw	83
   407  083F  3475               	retlw	117
   408  0840  346E               	retlw	110
   409  0841  3400               	retlw	0
   410  0842                     __end_of_daysOfTheWeek:	
   411  0842                     _monthDays:	
   412  0842  341F               	retlw	31
   413  0843  341D               	retlw	29
   414  0844  341F               	retlw	31
   415  0845  341E               	retlw	30
   416  0846  341F               	retlw	31
   417  0847  341E               	retlw	30
   418  0848  341F               	retlw	31
   419  0849  341F               	retlw	31
   420  084A  341E               	retlw	30
   421  084B  341F               	retlw	31
   422  084C  341E               	retlw	30
   423  084D  341F               	retlw	31
   424  084E                     __end_of_monthDays:	
   425  084E                     _setText:	
   426  084E  3453               	retlw	83
   427  084F  3465               	retlw	101
   428  0850  3474               	retlw	116
   429  0851  3420               	retlw	32
   430  0852  3400               	retlw	0
   431  0853                     __end_of_setText:	
   432  0008                     _PORTD	set	8
   433  0013                     _SSPBUF	set	19
   434  0014                     _SSPCON	set	20
   435  0031                     _RB1	set	49
   436  0032                     _RB2	set	50
   437  0034                     _RB4	set	52
   438  0035                     _RB5	set	53
   439  0042                     _RD2	set	66
   440  0043                     _RD3	set	67
   441  0093                     _SSPADD	set	147
   442  0091                     _SSPCON2	set	145
   443  0094                     _SSPSTAT	set	148
   444  0086                     _TRISBbits	set	134
   445  0088                     _TRISD	set	136
   446  0088                     _TRISDbits	set	136
   447  048D                     _ACKDT	set	1165
   448  048C                     _ACKEN	set	1164
   449  04A0                     _BF	set	1184
   450  048A                     _PEN	set	1162
   451  048B                     _RCEN	set	1163
   452  0489                     _RSEN	set	1161
   453  0488                     _SEN	set	1160
   454  043B                     _TRISC3	set	1083
   455  043C                     _TRISC4	set	1084
   456  0853                     STR_1:	
   457  0853  3453               	retlw	83	;'S'
   458  0854  3474               	retlw	116	;'t'
   459  0855  3461               	retlw	97	;'a'
   460  0856  3472               	retlw	114	;'r'
   461  0857  3474               	retlw	116	;'t'
   462  0858  3469               	retlw	105	;'i'
   463  0859  346E               	retlw	110	;'n'
   464  085A  3467               	retlw	103	;'g'
   465  085B  3420               	retlw	32	;' '
   466  085C  3463               	retlw	99	;'c'
   467  085D  346F               	retlw	111	;'o'
   468  085E  3475               	retlw	117	;'u'
   469  085F  346E               	retlw	110	;'n'
   470  0860  3474               	retlw	116	;'t'
   471  0861  3465               	retlw	101	;'e'
   472  0862  3472               	retlw	114	;'r'
   473  0863  3400               	retlw	0
   474  0864                     STR_6:	
   475  0864  3420               	retlw	32	;' '
   476  0865  3420               	retlw	32	;' '
   477  0866  3420               	retlw	32	;' '
   478  0867  3420               	retlw	32	;' '
   479  0868  3420               	retlw	32	;' '
   480  0869  3420               	retlw	32	;' '
   481  086A  3420               	retlw	32	;' '
   482  086B  3400               	retlw	0
   483  086C                     STR_9:	
   484  086C  3453               	retlw	83	;'S'
   485  086D  3465               	retlw	101	;'e'
   486  086E  3463               	retlw	99	;'c'
   487  086F  346F               	retlw	111	;'o'
   488  0870  346E               	retlw	110	;'n'
   489  0871  3464               	retlw	100	;'d'
   490  0872  3473               	retlw	115	;'s'
   491  0873  3400               	retlw	0
   492  0874                     STR_8:	
   493  0874  344D               	retlw	77	;'M'
   494  0875  3469               	retlw	105	;'i'
   495  0876  346E               	retlw	110	;'n'
   496  0877  3475               	retlw	117	;'u'
   497  0878  3474               	retlw	116	;'t'
   498  0879  3465               	retlw	101	;'e'
   499  087A  3473               	retlw	115	;'s'
   500  087B  3400               	retlw	0
   501  087C                     STR_4:	
   502  087C  3454               	retlw	84	;'T'
   503  087D  3469               	retlw	105	;'i'
   504  087E  346D               	retlw	109	;'m'
   505  087F  3465               	retlw	101	;'e'
   506  0880  3420               	retlw	32	;' '
   507  0881  343F               	retlw	63	;'?'
   508  0882  3400               	retlw	0
   509  0883                     STR_5:	
   510  0883  3444               	retlw	68	;'D'
   511  0884  3461               	retlw	97	;'a'
   512  0885  3474               	retlw	116	;'t'
   513  0886  3465               	retlw	101	;'e'
   514  0887  3420               	retlw	32	;' '
   515  0888  343F               	retlw	63	;'?'
   516  0889  3400               	retlw	0
   517  088A                     STR_13:	
   518  088A  3444               	retlw	68	;'D'
   519  088B  3461               	retlw	97	;'a'
   520  088C  3479               	retlw	121	;'y'
   521  088D  3420               	retlw	32	;' '
   522  088E  3420               	retlw	32	;' '
   523  088F  3400               	retlw	0
   524  0890                     STR_12:	
   525  0890  3444               	retlw	68	;'D'
   526  0891  3461               	retlw	97	;'a'
   527  0892  3474               	retlw	116	;'t'
   528  0893  3465               	retlw	101	;'e'
   529  0894  3420               	retlw	32	;' '
   530  0895  3400               	retlw	0
   531  0896                     STR_11:	
   532  0896  344D               	retlw	77	;'M'
   533  0897  346F               	retlw	111	;'o'
   534  0898  346E               	retlw	110	;'n'
   535  0899  3474               	retlw	116	;'t'
   536  089A  3468               	retlw	104	;'h'
   537  089B  3400               	retlw	0
   538  089C                     STR_7:	
   539  089C  3448               	retlw	72	;'H'
   540  089D  346F               	retlw	111	;'o'
   541  089E  3475               	retlw	117	;'u'
   542  089F  3472               	retlw	114	;'r'
   543  08A0  3473               	retlw	115	;'s'
   544  08A1  3400               	retlw	0
   545  08A2                     STR_10:	
   546  08A2  3459               	retlw	89	;'Y'
   547  08A3  3465               	retlw	101	;'e'
   548  08A4  3461               	retlw	97	;'a'
   549  08A5  3472               	retlw	114	;'r'
   550  08A6  3400               	retlw	0
   551  08A7                     STR_2:	
   552  08A7  3461               	retlw	97	;'a'
   553  08A8  3474               	retlw	116	;'t'
   554  08A9  3420               	retlw	32	;' '
   555  08AA  3400               	retlw	0
   556  08AB                     STR_3:	
   557  08AB  343A               	retlw	58	;':'
   558  08AC  3400               	retlw	0
   559                           
   560                           ; #config settings
   561  0000                     
   562                           	psect	cinit
   563  07E8                     start_initialization:	
   564  07E8                     __initialization:	
   565                           
   566                           ; Clear objects allocated to BANK0
   567  07E8  01E2               	clrf	__pbssBANK0& (0+127)
   568  07E9  01E3               	clrf	(__pbssBANK0+1)& (0+127)
   569  07EA  01E4               	clrf	(__pbssBANK0+2)& (0+127)
   570  07EB  01E5               	clrf	(__pbssBANK0+3)& (0+127)
   571  07EC  01E6               	clrf	(__pbssBANK0+4)& (0+127)
   572  07ED  01E7               	clrf	(__pbssBANK0+5)& (0+127)
   573  07EE  01E8               	clrf	(__pbssBANK0+6)& (0+127)
   574  07EF  01E9               	clrf	(__pbssBANK0+7)& (0+127)
   575                           
   576                           ; Initialize objects allocated to BANK0
   577  07F0  1383               	bcf	3,7	;select IRP bank0
   578  07F1  3062               	movlw	low (__pdataBANK0+24)
   579  07F2  00FD               	movwf	btemp+-1
   580  07F3  3009               	movlw	high __pidataBANK0
   581  07F4  00FE               	movwf	btemp
   582  07F5  305F               	movlw	low __pidataBANK0
   583  07F6  00FF               	movwf	btemp+1
   584  07F7  304A               	movlw	low __pdataBANK0
   585  07F8  0084               	movwf	4
   586  07F9  120A  158A  213D   	fcall	init_ram0
   587  07FC                     end_of_initialization:	
   588                           ;End of C runtime variable initialization code
   589                           
   590  07FC                     __end_of__initialization:	
   591  07FC  0183               	clrf	3
   592  07FD  120A  118A  2834   	ljmp	_main	;jump to C main() function
   593                           
   594                           	psect	bssBANK0
   595  0062                     __pbssBANK0:	
   596  0062                     _next_menu_clear:	
   597  0062                     	ds	2
   598  0064                     _bButton:	
   599  0064                     	ds	1
   600  0065                     _state:	
   601  0065                     	ds	1
   602  0066                     _runningHours:	
   603  0066                     	ds	2
   604  0068                     _runningMinutes:	
   605  0068                     	ds	2
   606                           
   607                           	psect	dataBANK0
   608  004A                     __pdataBANK0:	
   609  004A                     LCDWriteInt@F1142:	
   610  004A                     	ds	6
   611  0050                     _date:	
   612  0050                     	ds	2
   613  0052                     _day:	
   614  0052                     	ds	2
   615  0054                     _hour:	
   616  0054                     	ds	2
   617  0056                     _minute:	
   618  0056                     	ds	2
   619  0058                     _month:	
   620  0058                     	ds	2
   621  005A                     _runningMinute:	
   622  005A                     	ds	2
   623  005C                     _seconds:	
   624  005C                     	ds	2
   625  005E                     _year:	
   626  005E                     	ds	2
   627  0060                     _last_hour:	
   628  0060                     	ds	1
   629  0061                     _menuFunction:	
   630  0061                     	ds	1
   631                           
   632                           	psect	inittext
   633  0939                     init_fetch0:	
   634                           ;	Called with low address in FSR and high address in W
   635                           
   636  0939  087E               	movf	126,w
   637  093A  008A               	movwf	10
   638  093B  087F               	movf	127,w
   639  093C  0082               	movwf	2
   640  093D                     init_ram0:	
   641                           ;Called with:
   642                           ;	high address of idata address in btemp 
   643                           ;	low address of idata address in btemp+1 
   644                           ;	low address of data in FSR
   645                           ;	high address + 1 of data in btemp-1
   646                           
   647  093D  2139  120A  158A   	fcall	init_fetch0
   648  0940  0080               	movwf	0
   649  0941  0A84               	incf	4,f
   650  0942  0804               	movf	4,w
   651  0943  067D               	xorwf	125,w
   652  0944  1903               	btfsc	3,2
   653  0945  3400               	retlw	0
   654  0946  0AFF               	incf	127,f
   655  0947  1903               	btfsc	3,2
   656  0948  0AFE               	incf	126,f
   657  0949  293D               	goto	init_ram0
   658                           
   659                           	psect	cstackCOMMON
   660  0070                     __pcstackCOMMON:	
   661  0070                     ?_I2C_Start:	
   662  0070                     ??_I2C_Start:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_DS1307_Write:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ??_I2C_Restart:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_DS1307_Read:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_I2C_NoAck:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ??_I2C_NoAck:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_I2C_Stop:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ??_I2C_Stop:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_I2C_Write:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ??_I2C_Write:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ?_I2C_Read:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ??_I2C_Read:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?_I2C_Ack:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ??_I2C_Ack:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_I2C_Wait:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ??_I2C_Wait:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?_LCDBusyLoop:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     ??_LCDBusyLoop:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ?_readClock:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ?_showClock:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ?_readInputs:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0070                     ??_readInputs:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0070                     ?_doMenu:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0070                     ?_clearPrompt:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0070                     ?_showTime:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0070                     ?_showDate:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0070                     ?_showRunningTime:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0070                     ?_I2C_Init:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0070                     ??_I2C_Init:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0070                     ?_LCDInit:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0070                     ?_main:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  0070                     ?_I2C_Restart:	
   756                           ; 1 bytes @ 0x0
   757                           
   758  0070                     ?_DS1307_Init:	
   759                           ; 2 bytes @ 0x0
   760                           
   761  0070                     ?___awdiv:	
   762                           ; 2 bytes @ 0x0
   763                           
   764  0070                     ?___awmod:	
   765                           ; 2 bytes @ 0x0
   766                           
   767  0070                     I2C_Write@dat:	
   768                           ; 2 bytes @ 0x0
   769                           
   770  0070                     ___awdiv@divisor:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  0070                     ___awmod@divisor:	
   774                           ; 2 bytes @ 0x0
   775                           
   776                           
   777                           ; 2 bytes @ 0x0
   778  0070                     	ds	1
   779  0071                     ??_DS1307_Write:	
   780  0071                     DS1307_Write@dat:	
   781                           ; 1 bytes @ 0x1
   782                           
   783  0071                     I2C_Read@temp:	
   784                           ; 1 bytes @ 0x1
   785                           
   786                           
   787                           ; 1 bytes @ 0x1
   788  0071                     	ds	1
   789  0072                     ??_DS1307_Read:	
   790  0072                     ??_DS1307_Init:	
   791                           ; 1 bytes @ 0x2
   792                           
   793  0072                     ?_DS1307_SetTime:	
   794                           ; 1 bytes @ 0x2
   795                           
   796  0072                     ?_DS1307_SetDate:	
   797                           ; 1 bytes @ 0x2
   798                           
   799  0072                     ?_DS1307_GetTime:	
   800                           ; 1 bytes @ 0x2
   801                           
   802  0072                     ?_DS1307_GetDate:	
   803                           ; 1 bytes @ 0x2
   804                           
   805  0072                     ?_DS1307_readRam:	
   806                           ; 1 bytes @ 0x2
   807                           
   808  0072                     ?_DS1307_writeRam:	
   809                           ; 1 bytes @ 0x2
   810                           
   811  0072                     DS1307_SetTime@mm:	
   812                           ; 1 bytes @ 0x2
   813                           
   814  0072                     DS1307_SetDate@dd:	
   815                           ; 1 bytes @ 0x2
   816                           
   817  0072                     DS1307_GetTime@m_ptr:	
   818                           ; 1 bytes @ 0x2
   819                           
   820  0072                     DS1307_GetDate@d_ptr:	
   821                           ; 1 bytes @ 0x2
   822                           
   823  0072                     LCDBusyLoop@busy:	
   824                           ; 1 bytes @ 0x2
   825                           
   826  0072                     DS1307_readRam@offset:	
   827                           ; 1 bytes @ 0x2
   828                           
   829  0072                     DS1307_writeRam@offset:	
   830                           ; 2 bytes @ 0x2
   831                           
   832  0072                     ___awdiv@dividend:	
   833                           ; 2 bytes @ 0x2
   834                           
   835  0072                     ___awmod@dividend:	
   836                           ; 2 bytes @ 0x2
   837                           
   838                           
   839                           ; 2 bytes @ 0x2
   840  0072                     	ds	1
   841  0073                     DS1307_Init@s:	
   842  0073                     DS1307_SetTime@ss:	
   843                           ; 1 bytes @ 0x3
   844                           
   845  0073                     DS1307_SetDate@mm:	
   846                           ; 1 bytes @ 0x3
   847                           
   848  0073                     DS1307_GetTime@s_ptr:	
   849                           ; 1 bytes @ 0x3
   850                           
   851  0073                     DS1307_GetDate@m_ptr:	
   852                           ; 1 bytes @ 0x3
   853                           
   854  0073                     LCDBusyLoop@temp:	
   855                           ; 1 bytes @ 0x3
   856                           
   857  0073                     readInputs@pinstate:	
   858                           ; 1 bytes @ 0x3
   859                           
   860                           
   861                           ; 1 bytes @ 0x3
   862  0073                     	ds	1
   863  0074                     ??_DS1307_SetTime:	
   864  0074                     ??_DS1307_GetTime:	
   865                           ; 1 bytes @ 0x4
   866                           
   867  0074                     ??___awdiv:	
   868                           ; 1 bytes @ 0x4
   869                           
   870  0074                     ??___awmod:	
   871                           ; 1 bytes @ 0x4
   872                           
   873  0074                     DS1307_SetTime@hh:	
   874                           ; 1 bytes @ 0x4
   875                           
   876  0074                     DS1307_SetDate@yy:	
   877                           ; 1 bytes @ 0x4
   878                           
   879  0074                     DS1307_GetDate@y_ptr:	
   880                           ; 1 bytes @ 0x4
   881                           
   882  0074                     LCDBusyLoop@status:	
   883                           ; 1 bytes @ 0x4
   884                           
   885  0074                     DS1307_readRam@length:	
   886                           ; 1 bytes @ 0x4
   887                           
   888  0074                     DS1307_writeRam@length:	
   889                           ; 2 bytes @ 0x4
   890                           
   891                           
   892                           ; 2 bytes @ 0x4
   893  0074                     	ds	1
   894  0075                     ??_DS1307_SetDate:	
   895  0075                     ??_DS1307_GetDate:	
   896                           ; 1 bytes @ 0x5
   897                           
   898  0075                     ?_LCDByte:	
   899                           ; 1 bytes @ 0x5
   900                           
   901  0075                     DS1307_SetDate@nn:	
   902                           ; 1 bytes @ 0x5
   903                           
   904  0075                     DS1307_GetTime@h_ptr:	
   905                           ; 1 bytes @ 0x5
   906                           
   907  0075                     LCDByte@isdata:	
   908                           ; 1 bytes @ 0x5
   909                           
   910  0075                     ___awdiv@counter:	
   911                           ; 1 bytes @ 0x5
   912                           
   913  0075                     ___awmod@counter:	
   914                           ; 1 bytes @ 0x5
   915                           
   916                           
   917                           ; 1 bytes @ 0x5
   918  0075                     	ds	1
   919  0076                     ??_DS1307_readRam:	
   920  0076                     ??_DS1307_writeRam:	
   921                           ; 1 bytes @ 0x6
   922                           
   923  0076                     ??_LCDByte:	
   924                           ; 1 bytes @ 0x6
   925                           
   926  0076                     DS1307_GetDate@n_ptr:	
   927                           ; 1 bytes @ 0x6
   928                           
   929  0076                     ___awdiv@sign:	
   930                           ; 1 bytes @ 0x6
   931                           
   932  0076                     ___awmod@sign:	
   933                           ; 1 bytes @ 0x6
   934                           
   935                           
   936                           ; 1 bytes @ 0x6
   937  0076                     	ds	1
   938  0077                     ___awdiv@quotient:	
   939                           
   940                           ; 2 bytes @ 0x7
   941  0077                     	ds	1
   942  0078                     DS1307_readRam@ptr:	
   943  0078                     DS1307_writeRam@ptr:	
   944                           ; 1 bytes @ 0x8
   945                           
   946  0078                     LCDByte@hn:	
   947                           ; 1 bytes @ 0x8
   948                           
   949                           
   950                           ; 1 bytes @ 0x8
   951  0078                     	ds	1
   952  0079                     ?___wmul:	
   953  0079                     LCDByte@ln:	
   954                           ; 2 bytes @ 0x9
   955                           
   956  0079                     ___wmul@multiplier:	
   957                           ; 1 bytes @ 0x9
   958                           
   959                           
   960                           ; 2 bytes @ 0x9
   961  0079                     	ds	1
   962  007A                     LCDByte@c:	
   963                           
   964                           ; 1 bytes @ 0xA
   965  007A                     	ds	1
   966  007B                     LCDByte@temp:	
   967  007B                     ___wmul@multiplicand:	
   968                           ; 1 bytes @ 0xB
   969                           
   970                           
   971                           ; 2 bytes @ 0xB
   972  007B                     	ds	1
   973  007C                     ??_LCDInit:	
   974  007C                     ?_LCDWriteString:	
   975                           ; 1 bytes @ 0xC
   976                           
   977  007C                     ?_LCDGotoXY:	
   978                           ; 1 bytes @ 0xC
   979                           
   980  007C                     LCDGotoXY@y:	
   981                           ; 1 bytes @ 0xC
   982                           
   983  007C                     LCDWriteString@msg:	
   984                           ; 1 bytes @ 0xC
   985                           
   986                           
   987                           ; 2 bytes @ 0xC
   988  007C                     	ds	1
   989  007D                     ??_LCDGotoXY:	
   990  007D                     ??___wmul:	
   991                           ; 1 bytes @ 0xD
   992                           
   993                           
   994                           ; 1 bytes @ 0xD
   995  007D                     	ds	1
   996  007E                     ??_showClock:	
   997  007E                     ??_clearPrompt:	
   998                           ; 1 bytes @ 0xE
   999                           
  1000  007E                     ??_showRunningTime:	
  1001                           ; 1 bytes @ 0xE
  1002                           
  1003  007E                     ??_LCDWriteString:	
  1004                           ; 1 bytes @ 0xE
  1005                           
  1006                           
  1007                           	psect	cstackBANK0
  1008  0020                     __pcstackBANK0:	
  1009                           ; 1 bytes @ 0xE
  1010                           
  1011  0020                     LCDInit@style:	
  1012  0020                     LCDGotoXY@x:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0020                     ___wmul@product:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018                           
  1019                           ; 2 bytes @ 0x0
  1020  0020                     	ds	2
  1021  0022                     ??_readClock:	
  1022  0022                     ?_LCDWriteInt:	
  1023                           ; 1 bytes @ 0x2
  1024                           
  1025  0022                     LCDWriteInt@val:	
  1026                           ; 1 bytes @ 0x2
  1027                           
  1028                           
  1029                           ; 2 bytes @ 0x2
  1030  0022                     	ds	2
  1031  0024                     LCDWriteInt@field_length:	
  1032                           
  1033                           ; 1 bytes @ 0x4
  1034  0024                     	ds	1
  1035  0025                     ??_LCDWriteInt:	
  1036  0025                     readClock@n:	
  1037                           ; 1 bytes @ 0x5
  1038                           
  1039                           
  1040                           ; 1 bytes @ 0x5
  1041  0025                     	ds	1
  1042  0026                     readClock@a:	
  1043                           
  1044                           ; 1 bytes @ 0x6
  1045  0026                     	ds	1
  1046  0027                     readClock@b:	
  1047                           
  1048                           ; 1 bytes @ 0x7
  1049  0027                     	ds	1
  1050  0028                     readClock@c:	
  1051  0028                     LCDWriteInt@characters:	
  1052                           ; 1 bytes @ 0x8
  1053                           
  1054                           
  1055                           ; 2 bytes @ 0x8
  1056  0028                     	ds	2
  1057  002A                     LCDWriteInt@str:	
  1058                           
  1059                           ; 6 bytes @ 0xA
  1060  002A                     	ds	6
  1061  0030                     LCDWriteInt@from:	
  1062                           
  1063                           ; 2 bytes @ 0x10
  1064  0030                     	ds	2
  1065  0032                     LCDWriteInt@c:	
  1066                           
  1067                           ; 1 bytes @ 0x12
  1068  0032                     	ds	1
  1069  0033                     ??_showTime:	
  1070  0033                     ??_showDate:	
  1071                           ; 1 bytes @ 0x13
  1072                           
  1073  0033                     _showRunningTime$739:	
  1074                           ; 1 bytes @ 0x13
  1075                           
  1076                           
  1077                           ; 2 bytes @ 0x13
  1078  0033                     	ds	1
  1079  0034                     showDate@d:	
  1080                           
  1081                           ; 2 bytes @ 0x14
  1082  0034                     	ds	2
  1083  0036                     ??_doMenu:	
  1084                           
  1085                           ; 1 bytes @ 0x16
  1086  0036                     	ds	3
  1087  0039                     doMenu@h:	
  1088                           
  1089                           ; 2 bytes @ 0x19
  1090  0039                     	ds	2
  1091  003B                     doMenu@m:	
  1092                           
  1093                           ; 2 bytes @ 0x1B
  1094  003B                     	ds	2
  1095  003D                     doMenu@s:	
  1096                           
  1097                           ; 2 bytes @ 0x1D
  1098  003D                     	ds	2
  1099  003F                     doMenu@n:	
  1100                           
  1101                           ; 2 bytes @ 0x1F
  1102  003F                     	ds	2
  1103  0041                     doMenu@d:	
  1104                           
  1105                           ; 2 bytes @ 0x21
  1106  0041                     	ds	2
  1107  0043                     doMenu@m_311:	
  1108                           
  1109                           ; 2 bytes @ 0x23
  1110  0043                     	ds	2
  1111  0045                     doMenu@y:	
  1112                           
  1113                           ; 2 bytes @ 0x25
  1114  0045                     	ds	2
  1115  0047                     ??_main:	
  1116                           
  1117                           ; 1 bytes @ 0x27
  1118  0047                     	ds	3
  1119                           
  1120                           	psect	maintext
  1121  0034                     __pmaintext:	
  1122 ;;
  1123 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1124 ;;
  1125 ;; *************** function _main *****************
  1126 ;; Defined at:
  1127 ;;		line 61 in file "LCDTime.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : B00/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1141 ;;      Params:         0       0       0       0       0
  1142 ;;      Locals:         0       0       0       0       0
  1143 ;;      Temps:          0       3       0       0       0
  1144 ;;      Totals:         0       3       0       0       0
  1145 ;;Total ram usage:        3 bytes
  1146 ;; Hardware stack levels required when called:    6
  1147 ;; This function calls:
  1148 ;;		_DS1307_Init
  1149 ;;		_DS1307_readRam
  1150 ;;		_I2C_Init
  1151 ;;		_LCDByte
  1152 ;;		_LCDGotoXY
  1153 ;;		_LCDInit
  1154 ;;		_LCDWriteInt
  1155 ;;		_LCDWriteString
  1156 ;;		___wmul
  1157 ;;		_clearPrompt
  1158 ;;		_doMenu
  1159 ;;		_readClock
  1160 ;;		_readInputs
  1161 ;;		_showClock
  1162 ;; This function is called by:
  1163 ;;		Startup code after reset
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           
  1168                           ;psect for function _main
  1169  0034                     _main:	
  1170                           
  1171                           ;LCDTime.c: 64: I2C_Init() ;
  1172                           
  1173                           ;incstack = 0
  1174                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1175  0034  120A  158A  211B  120A  118A  	fcall	_I2C_Init
  1176                           
  1177                           ;LCDTime.c: 66: LCDInit(0B00000000);
  1178  0039  3000               	movlw	0
  1179  003A  120A  158A  2298  120A  118A  	fcall	_LCDInit
  1180                           
  1181                           ;LCDTime.c: 68: DS1307_Init() ;
  1182  003F  120A  158A  23AA  120A  118A  	fcall	_DS1307_Init
  1183                           
  1184                           ;LCDTime.c: 71: (LCDByte(0b00000001,0));
  1185  0044  01F5               	clrf	LCDByte@isdata
  1186  0045  3001               	movlw	1
  1187  0046  120A  158A  235A  120A  118A  	fcall	_LCDByte
  1188                           
  1189                           ;LCDTime.c: 74: DS1307_readRam(&runningMinutes,0,2) ;
  1190  004B  3000               	movlw	0
  1191  004C  00F2               	movwf	DS1307_readRam@offset
  1192  004D  00F3               	movwf	DS1307_readRam@offset+1
  1193  004E  3002               	movlw	2
  1194  004F  00F4               	movwf	DS1307_readRam@length
  1195  0050  3000               	movlw	0
  1196  0051  00F5               	movwf	DS1307_readRam@length+1
  1197  0052  3068               	movlw	(low (_runningMinutes| 0))& (0+255)
  1198  0053  120A  158A  24A3  120A  118A  	fcall	_DS1307_readRam
  1199                           
  1200                           ;LCDTime.c: 75: DS1307_readRam(&runningHours,2,2) ;
  1201  0058  3002               	movlw	2
  1202  0059  00F2               	movwf	DS1307_readRam@offset
  1203  005A  3000               	movlw	0
  1204  005B  00F3               	movwf	DS1307_readRam@offset+1
  1205  005C  3002               	movlw	2
  1206  005D  00F4               	movwf	DS1307_readRam@length
  1207  005E  3000               	movlw	0
  1208  005F  00F5               	movwf	DS1307_readRam@length+1
  1209  0060  3066               	movlw	(low (_runningHours| 0))& (0+255)
  1210  0061  120A  158A  24A3  120A  118A  	fcall	_DS1307_readRam
  1211                           
  1212                           ;LCDTime.c: 77: LCDWriteString("Starting counter");
  1213  0066  3044               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1214  0067  00FC               	movwf	LCDWriteString@msg
  1215  0068  3080               	movlw	128
  1216  0069  00FD               	movwf	LCDWriteString@msg+1
  1217  006A  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  1218                           
  1219                           ;LCDTime.c: 78: LCDGotoXY(0,1) ;
  1220  006F  01FC               	clrf	LCDGotoXY@y
  1221  0070  0AFC               	incf	LCDGotoXY@y,f
  1222  0071  3000               	movlw	0
  1223  0072  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  1224                           
  1225                           ;LCDTime.c: 79: LCDWriteString("at ");
  1226  0077  3098               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1227  0078  00FC               	movwf	LCDWriteString@msg
  1228  0079  3080               	movlw	128
  1229  007A  00FD               	movwf	LCDWriteString@msg+1
  1230  007B  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  1231                           
  1232                           ;LCDTime.c: 80: LCDWriteInt(runningHours,1);
  1233  0080  1283               	bcf	3,5	;RP0=0, select bank0
  1234  0081  1303               	bcf	3,6	;RP1=0, select bank0
  1235  0082  0867               	movf	_runningHours+1,w
  1236  0083  00A3               	movwf	LCDWriteInt@val+1
  1237  0084  0866               	movf	_runningHours,w
  1238  0085  00A2               	movwf	LCDWriteInt@val
  1239  0086  01A4               	clrf	LCDWriteInt@field_length
  1240  0087  0AA4               	incf	LCDWriteInt@field_length,f
  1241  0088  120A  158A  26C5  120A  118A  	fcall	_LCDWriteInt
  1242                           
  1243                           ;LCDTime.c: 81: LCDWriteString(":");
  1244  008D  309C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1245  008E  00FC               	movwf	LCDWriteString@msg
  1246  008F  3080               	movlw	128
  1247  0090  00FD               	movwf	LCDWriteString@msg+1
  1248  0091  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  1249                           
  1250                           ;LCDTime.c: 82: LCDWriteInt(runningMinutes,1);
  1251  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1252  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1253  0098  0869               	movf	_runningMinutes+1,w
  1254  0099  00A3               	movwf	LCDWriteInt@val+1
  1255  009A  0868               	movf	_runningMinutes,w
  1256  009B  00A2               	movwf	LCDWriteInt@val
  1257  009C  01A4               	clrf	LCDWriteInt@field_length
  1258  009D  0AA4               	incf	LCDWriteInt@field_length,f
  1259  009E  120A  158A  26C5  120A  118A  	fcall	_LCDWriteInt
  1260                           
  1261                           ;LCDTime.c: 83: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1262  00A3  3004               	movlw	4
  1263  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1264  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1265  00A6  00C9               	movwf	??_main+2
  1266  00A7  30CF               	movlw	207
  1267  00A8  00C8               	movwf	??_main+1
  1268  00A9  3003               	movlw	3
  1269  00AA  00C7               	movwf	??_main
  1270  00AB                     u2697:	
  1271  00AB  0BC7               	decfsz	??_main,f
  1272  00AC  28AB               	goto	u2697
  1273  00AD  0BC8               	decfsz	??_main+1,f
  1274  00AE  28AB               	goto	u2697
  1275  00AF  0BC9               	decfsz	??_main+2,f
  1276  00B0  28AB               	goto	u2697
  1277  00B1  28B2               	nop2
  1278                           
  1279                           ;LCDTime.c: 84: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1280  00B2  3004               	movlw	4
  1281  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  1282  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  1283  00B5  00C9               	movwf	??_main+2
  1284  00B6  30CF               	movlw	207
  1285  00B7  00C8               	movwf	??_main+1
  1286  00B8  3003               	movlw	3
  1287  00B9  00C7               	movwf	??_main
  1288  00BA                     u2707:	
  1289  00BA  0BC7               	decfsz	??_main,f
  1290  00BB  28BA               	goto	u2707
  1291  00BC  0BC8               	decfsz	??_main+1,f
  1292  00BD  28BA               	goto	u2707
  1293  00BE  0BC9               	decfsz	??_main+2,f
  1294  00BF  28BA               	goto	u2707
  1295  00C0  28C1               	nop2
  1296                           
  1297                           ;LCDTime.c: 85: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1298  00C1  3004               	movlw	4
  1299  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  1300  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  1301  00C4  00C9               	movwf	??_main+2
  1302  00C5  30CF               	movlw	207
  1303  00C6  00C8               	movwf	??_main+1
  1304  00C7  3003               	movlw	3
  1305  00C8  00C7               	movwf	??_main
  1306  00C9                     u2717:	
  1307  00C9  0BC7               	decfsz	??_main,f
  1308  00CA  28C9               	goto	u2717
  1309  00CB  0BC8               	decfsz	??_main+1,f
  1310  00CC  28C9               	goto	u2717
  1311  00CD  0BC9               	decfsz	??_main+2,f
  1312  00CE  28C9               	goto	u2717
  1313  00CF  28D0               	nop2
  1314                           
  1315                           ;LCDTime.c: 86: _delay((unsigned long)((750)*(4000000/4000.0))) ;
  1316  00D0  3004               	movlw	4
  1317  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1318  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1319  00D3  00C9               	movwf	??_main+2
  1320  00D4  30CF               	movlw	207
  1321  00D5  00C8               	movwf	??_main+1
  1322  00D6  3003               	movlw	3
  1323  00D7  00C7               	movwf	??_main
  1324  00D8                     u2727:	
  1325  00D8  0BC7               	decfsz	??_main,f
  1326  00D9  28D8               	goto	u2727
  1327  00DA  0BC8               	decfsz	??_main+1,f
  1328  00DB  28D8               	goto	u2727
  1329  00DC  0BC9               	decfsz	??_main+2,f
  1330  00DD  28D8               	goto	u2727
  1331  00DE  28DF               	nop2
  1332                           
  1333                           ;LCDTime.c: 89: runningMinutes-- ;
  1334  00DF  30FF               	movlw	255
  1335  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1336  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1337  00E2  07E8               	addwf	_runningMinutes,f
  1338  00E3  1803               	skipnc
  1339  00E4  0AE9               	incf	_runningMinutes+1,f
  1340  00E5  30FF               	movlw	255
  1341  00E6  07E9               	addwf	_runningMinutes+1,f
  1342                           
  1343                           ;LCDTime.c: 91: (LCDByte(0b00000001,0));
  1344  00E7  01F5               	clrf	LCDByte@isdata
  1345  00E8  3001               	movlw	1
  1346  00E9  120A  158A  235A  120A  118A  	fcall	_LCDByte
  1347  00EE  2954               	goto	l2748
  1348  00EF                     l2756:	
  1349                           
  1350                           ;LCDTime.c: 102: doMenu();
  1351  00EF  120A  118A  2307  120A  118A  	fcall	_doMenu
  1352  00F4  2954               	goto	l2748
  1353  00F5                     l2760:	
  1354                           
  1355                           ;LCDTime.c: 104: {
  1356                           ;LCDTime.c: 110: if (state & 0x10)
  1357  00F5  1E65               	btfss	_state,4
  1358  00F6  2902               	goto	l289
  1359                           
  1360                           ;LCDTime.c: 111: {
  1361                           ;LCDTime.c: 112: menuFunction++ ;
  1362  00F7  3001               	movlw	1
  1363  00F8  00C7               	movwf	??_main
  1364  00F9  0847               	movf	??_main,w
  1365  00FA  07E1               	addwf	_menuFunction,f
  1366                           
  1367                           ;LCDTime.c: 113: if (menuFunction == 4)
  1368  00FB  3004               	movlw	4
  1369  00FC  0661               	xorwf	_menuFunction,w
  1370  00FD  1D03               	btfss	3,2
  1371  00FE  290D               	goto	l2770
  1372                           
  1373                           ;LCDTime.c: 114: menuFunction = 1 ;
  1374  00FF  01E1               	clrf	_menuFunction
  1375  0100  0AE1               	incf	_menuFunction,f
  1376                           
  1377                           ;LCDTime.c: 115: }
  1378  0101  290D               	goto	l2770
  1379  0102                     l289:	
  1380                           
  1381                           ;LCDTime.c: 116: else if (state & 0x20)
  1382  0102  1EE5               	btfss	_state,5
  1383  0103  290D               	goto	l2770
  1384                           
  1385                           ;LCDTime.c: 117: {
  1386                           ;LCDTime.c: 118: menuFunction-- ;
  1387  0104  3001               	movlw	1
  1388  0105  02E1               	subwf	_menuFunction,f
  1389                           
  1390                           ;LCDTime.c: 119: if (menuFunction < 1)
  1391  0106  0861               	movf	_menuFunction,w
  1392  0107  1D03               	btfss	3,2
  1393  0108  290D               	goto	l2770
  1394                           
  1395                           ;LCDTime.c: 120: menuFunction = 4-1 ;
  1396  0109  3003               	movlw	3
  1397  010A  00C7               	movwf	??_main
  1398  010B  0847               	movf	??_main,w
  1399  010C  00E1               	movwf	_menuFunction
  1400  010D                     l2770:	
  1401                           
  1402                           ;LCDTime.c: 121: }
  1403                           ;LCDTime.c: 123: if (menuFunction != 1)
  1404  010D  0361               	decf	_menuFunction,w
  1405  010E  1903               	btfsc	3,2
  1406  010F  2997               	goto	l2784
  1407                           
  1408                           ;LCDTime.c: 124: {
  1409                           ;LCDTime.c: 125: next_menu_clear = minute * 60 + seconds + 20 ;
  1410  0110  0857               	movf	_minute+1,w
  1411  0111  00FA               	movwf	___wmul@multiplier+1
  1412  0112  0856               	movf	_minute,w
  1413  0113  00F9               	movwf	___wmul@multiplier
  1414  0114  303C               	movlw	60
  1415  0115  00FB               	movwf	___wmul@multiplicand
  1416  0116  3000               	movlw	0
  1417  0117  00FC               	movwf	___wmul@multiplicand+1
  1418  0118  120A  158A  21E4  120A  118A  	fcall	___wmul
  1419  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1420  011E  1303               	bcf	3,6	;RP1=0, select bank0
  1421  011F  085C               	movf	_seconds,w
  1422  0120  0779               	addwf	?___wmul,w
  1423  0121  00C7               	movwf	??_main
  1424  0122  085D               	movf	_seconds+1,w
  1425  0123  1803               	skipnc
  1426  0124  0A5D               	incf	_seconds+1,w
  1427  0125  077A               	addwf	?___wmul+1,w
  1428  0126  00C8               	movwf	??_main+1
  1429  0127  0847               	movf	??_main,w
  1430  0128  3E14               	addlw	20
  1431  0129  00E2               	movwf	_next_menu_clear
  1432  012A  0848               	movf	??_main+1,w
  1433  012B  1803               	skipnc
  1434  012C  3E01               	addlw	1
  1435  012D  3E00               	addlw	0
  1436  012E  00E3               	movwf	_next_menu_clear+1
  1437                           
  1438                           ;LCDTime.c: 126: LCDGotoXY(9,0);
  1439  012F  01FC               	clrf	LCDGotoXY@y
  1440  0130  3009               	movlw	9
  1441  0131  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  1442                           
  1443                           ;LCDTime.c: 127: if (menuFunction == 2)
  1444  0136  3002               	movlw	2
  1445  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1446  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1447  0139  0661               	xorwf	_menuFunction,w
  1448  013A  1D03               	btfss	3,2
  1449  013B  2945               	goto	l2780
  1450                           
  1451                           ;LCDTime.c: 128: LCDWriteString("Time ?");
  1452  013C  306D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1453  013D  00FC               	movwf	LCDWriteString@msg
  1454  013E  3080               	movlw	128
  1455  013F  00FD               	movwf	LCDWriteString@msg+1
  1456  0140  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  1457  0145                     l2780:	
  1458                           
  1459                           ;LCDTime.c: 129: if (menuFunction == 3)
  1460  0145  3003               	movlw	3
  1461  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1462  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1463  0148  0661               	xorwf	_menuFunction,w
  1464  0149  1D03               	btfss	3,2
  1465  014A  2954               	goto	l2748
  1466                           
  1467                           ;LCDTime.c: 130: LCDWriteString("Date ?");
  1468  014B  3074               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1469  014C  00FC               	movwf	LCDWriteString@msg
  1470  014D  3080               	movlw	128
  1471  014E  00FD               	movwf	LCDWriteString@msg+1
  1472  014F  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  1473  0154                     l2748:	
  1474                           ;LCDTime.c: 93: while(1)
  1475                           
  1476                           ;LCDTime.c: 134: }
  1477                           
  1478                           ;LCDTime.c: 131: }
  1479                           
  1480                           
  1481                           ;LCDTime.c: 94: {
  1482                           ;LCDTime.c: 95: readClock();
  1483  0154  120A  118A  219D  120A  118A  	fcall	_readClock
  1484                           
  1485                           ;LCDTime.c: 97: showClock() ;
  1486  0159  120A  158A  2177  120A  118A  	fcall	_showClock
  1487                           
  1488                           ;LCDTime.c: 99: readInputs() ;
  1489  015E  120A  118A  2005  120A  118A  	fcall	_readInputs
  1490                           
  1491                           ;LCDTime.c: 101: if (bButton)
  1492  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1493  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1494  0165  0864               	movf	_bButton,w
  1495  0166  1D03               	btfss	3,2
  1496  0167  28EF               	goto	l2756
  1497                           
  1498                           ;LCDTime.c: 103: else if (state & 0x30)
  1499  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1500  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1501  016A  0865               	movf	_state,w
  1502  016B  3930               	andlw	48
  1503  016C  1D03               	btfss	3,2
  1504  016D  28F5               	goto	l2760
  1505                           
  1506                           ;LCDTime.c: 135: else if (next_menu_clear && ((minute * 60 + seconds) > next_menu_clear)
      +                          )
  1507  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1508  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1509  0170  0862               	movf	_next_menu_clear,w
  1510  0171  0463               	iorwf	_next_menu_clear+1,w
  1511  0172  1903               	btfsc	3,2
  1512  0173  2954               	goto	l2748
  1513  0174  0857               	movf	_minute+1,w
  1514  0175  00FA               	movwf	___wmul@multiplier+1
  1515  0176  0856               	movf	_minute,w
  1516  0177  00F9               	movwf	___wmul@multiplier
  1517  0178  303C               	movlw	60
  1518  0179  00FB               	movwf	___wmul@multiplicand
  1519  017A  3000               	movlw	0
  1520  017B  00FC               	movwf	___wmul@multiplicand+1
  1521  017C  120A  158A  21E4  120A  118A  	fcall	___wmul
  1522  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1523  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1524  0183  085C               	movf	_seconds,w
  1525  0184  0779               	addwf	?___wmul,w
  1526  0185  00C7               	movwf	??_main
  1527  0186  085D               	movf	_seconds+1,w
  1528  0187  1803               	skipnc
  1529  0188  0A5D               	incf	_seconds+1,w
  1530  0189  077A               	addwf	?___wmul+1,w
  1531  018A  00C8               	movwf	??_main+1
  1532  018B  0863               	movf	_next_menu_clear+1,w
  1533  018C  3A80               	xorlw	128
  1534  018D  00C9               	movwf	??_main+2
  1535  018E  0848               	movf	??_main+1,w
  1536  018F  3A80               	xorlw	128
  1537  0190  0249               	subwf	??_main+2,w
  1538  0191  1D03               	skipz
  1539  0192  2995               	goto	u2685
  1540  0193  0847               	movf	??_main,w
  1541  0194  0262               	subwf	_next_menu_clear,w
  1542  0195                     u2685:	
  1543  0195  1803               	skipnc
  1544  0196  2954               	goto	l2748
  1545  0197                     l2784:	
  1546                           
  1547                           ;LCDTime.c: 132: else
  1548                           ;LCDTime.c: 133: clearPrompt();
  1549  0197  120A  158A  214A  120A  118A  	fcall	_clearPrompt
  1550  019C  2954               	goto	l2748
  1551  019D                     __end_of_main:	
  1552                           ;LCDTime.c: 136: {
  1553                           ;LCDTime.c: 137: clearPrompt();
  1554                           
  1555                           
  1556                           	psect	text1
  1557  0977                     __ptext1:	
  1558 ;; *************** function _showClock *****************
  1559 ;; Defined at:
  1560 ;;		line 483 in file "LCDTime.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;		None
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;		None
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  1    wreg      void 
  1567 ;; Registers used:
  1568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1574 ;;      Params:         0       0       0       0       0
  1575 ;;      Locals:         0       0       0       0       0
  1576 ;;      Temps:          0       0       0       0       0
  1577 ;;      Totals:         0       0       0       0       0
  1578 ;;Total ram usage:        0 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:    5
  1581 ;; This function calls:
  1582 ;;		_LCDGotoXY
  1583 ;;		_showDate
  1584 ;;		_showRunningTime
  1585 ;;		_showTime
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           
  1592                           ;psect for function _showClock
  1593  0977                     _showClock:	
  1594                           
  1595                           ;LCDTime.c: 485: LCDGotoXY(0,0) ;
  1596                           
  1597                           ;incstack = 0
  1598                           ; Regs used in _showClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1599  0977  01FC               	clrf	LCDGotoXY@y
  1600  0978  3000               	movlw	0
  1601  0979  120A  158A  21BE  120A  158A  	fcall	_LCDGotoXY
  1602                           
  1603                           ;LCDTime.c: 486: showTime() ;
  1604  097E  120A  158A  22D3  120A  158A  	fcall	_showTime
  1605                           
  1606                           ;LCDTime.c: 488: LCDGotoXY(0,1) ;
  1607  0983  01FC               	clrf	LCDGotoXY@y
  1608  0984  0AFC               	incf	LCDGotoXY@y,f
  1609  0985  3000               	movlw	0
  1610  0986  120A  158A  21BE  120A  158A  	fcall	_LCDGotoXY
  1611                           
  1612                           ;LCDTime.c: 489: showDate() ;
  1613  098B  120A  158A  2613  120A  158A  	fcall	_showDate
  1614                           
  1615                           ;LCDTime.c: 492: if (menuFunction == 1)
  1616  0990  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0991  1303               	bcf	3,6	;RP1=0, select bank0
  1618  0992  0361               	decf	_menuFunction,w
  1619  0993  1D03               	btfss	3,2
  1620  0994  0008               	return
  1621                           
  1622                           ;LCDTime.c: 493: showRunningTime();
  1623  0995  120A  158A  244C   	fcall	_showRunningTime
  1624  0998  0008               	return
  1625  0999                     __end_of_showClock:	
  1626                           
  1627                           	psect	text2
  1628  0C4C                     __ptext2:	
  1629 ;; *************** function _showRunningTime *****************
  1630 ;; Defined at:
  1631 ;;		line 529 in file "LCDTime.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;		None
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;		None
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1645 ;;      Params:         0       0       0       0       0
  1646 ;;      Locals:         0       2       0       0       0
  1647 ;;      Temps:          0       0       0       0       0
  1648 ;;      Totals:         0       2       0       0       0
  1649 ;;Total ram usage:        2 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    4
  1652 ;; This function calls:
  1653 ;;		_LCDByte
  1654 ;;		_LCDGotoXY
  1655 ;;		_LCDWriteInt
  1656 ;;		___awdiv
  1657 ;;		___awmod
  1658 ;; This function is called by:
  1659 ;;		_showClock
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           
  1664                           ;psect for function _showRunningTime
  1665  0C4C                     _showRunningTime:	
  1666                           
  1667                           ;LCDTime.c: 531: LCDGotoXY(10,0) ;
  1668                           
  1669                           ;incstack = 0
  1670                           ; Regs used in _showRunningTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1671  0C4C  01FC               	clrf	LCDGotoXY@y
  1672  0C4D  300A               	movlw	10
  1673  0C4E  120A  158A  21BE  120A  158A  	fcall	_LCDGotoXY
  1674                           
  1675                           ;LCDTime.c: 532: if (runningHours > 1000)
  1676  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  1677  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  1678  0C55  0867               	movf	_runningHours+1,w
  1679  0C56  3A80               	xorlw	128
  1680  0C57  00FF               	movwf	127
  1681  0C58  3083               	movlw	131
  1682  0C59  027F               	subwf	127,w
  1683  0C5A  1D03               	skipz
  1684  0C5B  2C5E               	goto	u1905
  1685  0C5C  30E9               	movlw	233
  1686  0C5D  0266               	subwf	_runningHours,w
  1687  0C5E                     u1905:	
  1688  0C5E  1C03               	skipc
  1689  0C5F  2C88               	goto	l431
  1690                           
  1691                           ;LCDTime.c: 533: {
  1692                           ;LCDTime.c: 534: LCDWriteInt(runningHours / 1000,1);
  1693  0C60  30E8               	movlw	232
  1694  0C61  00F0               	movwf	___awdiv@divisor
  1695  0C62  3003               	movlw	3
  1696  0C63  00F1               	movwf	___awdiv@divisor+1
  1697  0C64  1283               	bcf	3,5	;RP0=0, select bank0
  1698  0C65  1303               	bcf	3,6	;RP1=0, select bank0
  1699  0C66  0867               	movf	_runningHours+1,w
  1700  0C67  00F3               	movwf	___awdiv@dividend+1
  1701  0C68  0866               	movf	_runningHours,w
  1702  0C69  00F2               	movwf	___awdiv@dividend
  1703  0C6A  120A  158A  24FC  120A  158A  	fcall	___awdiv
  1704  0C6F  0871               	movf	?___awdiv+1,w
  1705  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  1706  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  1707  0C72  00B4               	movwf	_showRunningTime$739+1
  1708  0C73  0870               	movf	?___awdiv,w
  1709  0C74  00B3               	movwf	_showRunningTime$739
  1710                           
  1711                           ;LCDTime.c: 533: {
  1712                           ;LCDTime.c: 534: LCDWriteInt(runningHours / 1000,1);
  1713  0C75  0834               	movf	_showRunningTime$739+1,w
  1714  0C76  00A3               	movwf	LCDWriteInt@val+1
  1715  0C77  0833               	movf	_showRunningTime$739,w
  1716  0C78  00A2               	movwf	LCDWriteInt@val
  1717  0C79  01A4               	clrf	LCDWriteInt@field_length
  1718  0C7A  0AA4               	incf	LCDWriteInt@field_length,f
  1719  0C7B  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  1720                           
  1721                           ;LCDTime.c: 535: (LCDByte(',',1)) ;
  1722  0C80  01F5               	clrf	LCDByte@isdata
  1723  0C81  0AF5               	incf	LCDByte@isdata,f
  1724  0C82  302C               	movlw	44
  1725  0C83  120A  158A  235A  120A  158A  	fcall	_LCDByte
  1726  0C88                     l431:	
  1727                           
  1728                           ;LCDTime.c: 536: }
  1729                           ;LCDTime.c: 537: LCDWriteInt(runningHours % 1000,1);
  1730  0C88  30E8               	movlw	232
  1731  0C89  00F0               	movwf	___awmod@divisor
  1732  0C8A  3003               	movlw	3
  1733  0C8B  00F1               	movwf	___awmod@divisor+1
  1734  0C8C  1283               	bcf	3,5	;RP0=0, select bank0
  1735  0C8D  1303               	bcf	3,6	;RP1=0, select bank0
  1736  0C8E  0867               	movf	_runningHours+1,w
  1737  0C8F  00F3               	movwf	___awmod@dividend+1
  1738  0C90  0866               	movf	_runningHours,w
  1739  0C91  00F2               	movwf	___awmod@dividend
  1740  0C92  120A  158A  230F  120A  158A  	fcall	___awmod
  1741  0C97  0871               	movf	?___awmod+1,w
  1742  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  1743  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  1744  0C9A  00A3               	movwf	LCDWriteInt@val+1
  1745  0C9B  0870               	movf	?___awmod,w
  1746  0C9C  00A2               	movwf	LCDWriteInt@val
  1747  0C9D  01A4               	clrf	LCDWriteInt@field_length
  1748  0C9E  0AA4               	incf	LCDWriteInt@field_length,f
  1749  0C9F  120A  158A  26C5   	fcall	_LCDWriteInt
  1750  0CA2  0008               	return
  1751  0CA3                     __end_of_showRunningTime:	
  1752                           
  1753                           	psect	text3
  1754  019D                     __ptext3:	
  1755 ;; *************** function _readClock *****************
  1756 ;; Defined at:
  1757 ;;		line 443 in file "LCDTime.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  c               1    8[BANK0 ] unsigned char 
  1762 ;;  b               1    7[BANK0 ] unsigned char 
  1763 ;;  a               1    6[BANK0 ] unsigned char 
  1764 ;;  n               1    5[BANK0 ] unsigned char 
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      void 
  1767 ;; Registers used:
  1768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1774 ;;      Params:         0       0       0       0       0
  1775 ;;      Locals:         0       4       0       0       0
  1776 ;;      Temps:          0       3       0       0       0
  1777 ;;      Totals:         0       7       0       0       0
  1778 ;;Total ram usage:        7 bytes
  1779 ;; Hardware stack levels used:    1
  1780 ;; Hardware stack levels required when called:    4
  1781 ;; This function calls:
  1782 ;;		_DS1307_GetDate
  1783 ;;		_DS1307_GetTime
  1784 ;;		_DS1307_writeRam
  1785 ;;		___awdiv
  1786 ;;		___wmul
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           
  1793                           ;psect for function _readClock
  1794  019D                     _readClock:	
  1795                           
  1796                           ;LCDTime.c: 445: unsigned char a,b,c,n ;
  1797                           ;LCDTime.c: 447: DS1307_GetTime(&a,&b,&c);
  1798                           
  1799                           ;incstack = 0
  1800                           ; Regs used in _readClock: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1801  019D  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1802  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1803  019F  1303               	bcf	3,6	;RP1=0, select bank0
  1804  01A0  00A2               	movwf	??_readClock
  1805  01A1  0822               	movf	??_readClock,w
  1806  01A2  00F2               	movwf	DS1307_GetTime@m_ptr
  1807  01A3  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1808  01A4  00A3               	movwf	??_readClock+1
  1809  01A5  0823               	movf	??_readClock+1,w
  1810  01A6  00F3               	movwf	DS1307_GetTime@s_ptr
  1811  01A7  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1812  01A8  120A  158A  23FB  120A  118A  	fcall	_DS1307_GetTime
  1813                           
  1814                           ;LCDTime.c: 450: hour = (a % 16) + ((a / 16 ) * 10) ;
  1815  01AD  3010               	movlw	16
  1816  01AE  00F0               	movwf	___awdiv@divisor
  1817  01AF  3000               	movlw	0
  1818  01B0  00F1               	movwf	___awdiv@divisor+1
  1819  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1820  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1821  01B3  0826               	movf	readClock@a,w
  1822  01B4  00A2               	movwf	??_readClock
  1823  01B5  01A3               	clrf	??_readClock+1
  1824  01B6  0822               	movf	??_readClock,w
  1825  01B7  00F2               	movwf	___awdiv@dividend
  1826  01B8  0823               	movf	??_readClock+1,w
  1827  01B9  00F3               	movwf	___awdiv@dividend+1
  1828  01BA  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1829  01BF  0871               	movf	?___awdiv+1,w
  1830  01C0  00FA               	movwf	___wmul@multiplier+1
  1831  01C1  0870               	movf	?___awdiv,w
  1832  01C2  00F9               	movwf	___wmul@multiplier
  1833  01C3  300A               	movlw	10
  1834  01C4  00FB               	movwf	___wmul@multiplicand
  1835  01C5  3000               	movlw	0
  1836  01C6  00FC               	movwf	___wmul@multiplicand+1
  1837  01C7  120A  158A  21E4  120A  118A  	fcall	___wmul
  1838  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1839  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1840  01CE  0826               	movf	readClock@a,w
  1841  01CF  390F               	andlw	15
  1842  01D0  0779               	addwf	?___wmul,w
  1843  01D1  00D4               	movwf	_hour
  1844  01D2  087A               	movf	?___wmul+1,w
  1845  01D3  1803               	skipnc
  1846  01D4  0A7A               	incf	?___wmul+1,w
  1847  01D5  00D5               	movwf	_hour+1
  1848                           
  1849                           ;LCDTime.c: 451: minute = (b % 16) + ((b / 16 ) * 10) ;
  1850  01D6  3010               	movlw	16
  1851  01D7  00F0               	movwf	___awdiv@divisor
  1852  01D8  3000               	movlw	0
  1853  01D9  00F1               	movwf	___awdiv@divisor+1
  1854  01DA  0827               	movf	readClock@b,w
  1855  01DB  00A2               	movwf	??_readClock
  1856  01DC  01A3               	clrf	??_readClock+1
  1857  01DD  0822               	movf	??_readClock,w
  1858  01DE  00F2               	movwf	___awdiv@dividend
  1859  01DF  0823               	movf	??_readClock+1,w
  1860  01E0  00F3               	movwf	___awdiv@dividend+1
  1861  01E1  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1862  01E6  0871               	movf	?___awdiv+1,w
  1863  01E7  00FA               	movwf	___wmul@multiplier+1
  1864  01E8  0870               	movf	?___awdiv,w
  1865  01E9  00F9               	movwf	___wmul@multiplier
  1866  01EA  300A               	movlw	10
  1867  01EB  00FB               	movwf	___wmul@multiplicand
  1868  01EC  3000               	movlw	0
  1869  01ED  00FC               	movwf	___wmul@multiplicand+1
  1870  01EE  120A  158A  21E4  120A  118A  	fcall	___wmul
  1871  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  1872  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  1873  01F5  0827               	movf	readClock@b,w
  1874  01F6  390F               	andlw	15
  1875  01F7  0779               	addwf	?___wmul,w
  1876  01F8  00D6               	movwf	_minute
  1877  01F9  087A               	movf	?___wmul+1,w
  1878  01FA  1803               	skipnc
  1879  01FB  0A7A               	incf	?___wmul+1,w
  1880  01FC  00D7               	movwf	_minute+1
  1881                           
  1882                           ;LCDTime.c: 452: seconds = (c % 16) + ((c / 16 ) * 10) ;
  1883  01FD  3010               	movlw	16
  1884  01FE  00F0               	movwf	___awdiv@divisor
  1885  01FF  3000               	movlw	0
  1886  0200  00F1               	movwf	___awdiv@divisor+1
  1887  0201  0828               	movf	readClock@c,w
  1888  0202  00A2               	movwf	??_readClock
  1889  0203  01A3               	clrf	??_readClock+1
  1890  0204  0822               	movf	??_readClock,w
  1891  0205  00F2               	movwf	___awdiv@dividend
  1892  0206  0823               	movf	??_readClock+1,w
  1893  0207  00F3               	movwf	___awdiv@dividend+1
  1894  0208  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1895  020D  0871               	movf	?___awdiv+1,w
  1896  020E  00FA               	movwf	___wmul@multiplier+1
  1897  020F  0870               	movf	?___awdiv,w
  1898  0210  00F9               	movwf	___wmul@multiplier
  1899  0211  300A               	movlw	10
  1900  0212  00FB               	movwf	___wmul@multiplicand
  1901  0213  3000               	movlw	0
  1902  0214  00FC               	movwf	___wmul@multiplicand+1
  1903  0215  120A  158A  21E4  120A  118A  	fcall	___wmul
  1904  021A  1283               	bcf	3,5	;RP0=0, select bank0
  1905  021B  1303               	bcf	3,6	;RP1=0, select bank0
  1906  021C  0828               	movf	readClock@c,w
  1907  021D  390F               	andlw	15
  1908  021E  0779               	addwf	?___wmul,w
  1909  021F  00DC               	movwf	_seconds
  1910  0220  087A               	movf	?___wmul+1,w
  1911  0221  1803               	skipnc
  1912  0222  0A7A               	incf	?___wmul+1,w
  1913  0223  00DD               	movwf	_seconds+1
  1914                           
  1915                           ;LCDTime.c: 454: if (hour != last_hour)
  1916  0224  0860               	movf	_last_hour,w
  1917  0225  00A2               	movwf	??_readClock
  1918  0226  01A3               	clrf	??_readClock+1
  1919  0227  0855               	movf	_hour+1,w
  1920  0228  0623               	xorwf	??_readClock+1,w
  1921  0229  1D03               	skipz
  1922  022A  2A2D               	goto	u1935
  1923  022B  0854               	movf	_hour,w
  1924  022C  0622               	xorwf	??_readClock,w
  1925  022D                     u1935:	
  1926  022D  1903               	skipnz
  1927  022E  2AC4               	goto	l2402
  1928                           
  1929                           ;LCDTime.c: 455: {
  1930                           ;LCDTime.c: 456: last_hour = hour ;
  1931  022F  0854               	movf	_hour,w
  1932  0230  00A2               	movwf	??_readClock
  1933  0231  0822               	movf	??_readClock,w
  1934  0232  00E0               	movwf	_last_hour
  1935                           
  1936                           ;LCDTime.c: 458: DS1307_GetDate(&n,&a,&b,&c) ;
  1937  0233  3026               	movlw	(low (readClock@a| 0))& (0+255)
  1938  0234  00A2               	movwf	??_readClock
  1939  0235  0822               	movf	??_readClock,w
  1940  0236  00F2               	movwf	DS1307_GetDate@d_ptr
  1941  0237  3027               	movlw	(low (readClock@b| 0))& (0+255)
  1942  0238  00A3               	movwf	??_readClock+1
  1943  0239  0823               	movf	??_readClock+1,w
  1944  023A  00F3               	movwf	DS1307_GetDate@m_ptr
  1945  023B  3028               	movlw	(low (readClock@c| 0))& (0+255)
  1946  023C  00A4               	movwf	??_readClock+2
  1947  023D  0824               	movf	??_readClock+2,w
  1948  023E  00F4               	movwf	DS1307_GetDate@y_ptr
  1949  023F  3025               	movlw	(low (readClock@n| 0))& (0+255)
  1950  0240  120A  158A  25B2  120A  118A  	fcall	_DS1307_GetDate
  1951                           
  1952                           ;LCDTime.c: 460: day = (n % 16) ;
  1953  0245  1283               	bcf	3,5	;RP0=0, select bank0
  1954  0246  1303               	bcf	3,6	;RP1=0, select bank0
  1955  0247  0825               	movf	readClock@n,w
  1956  0248  390F               	andlw	15
  1957  0249  00A2               	movwf	??_readClock
  1958  024A  01A3               	clrf	??_readClock+1
  1959  024B  0822               	movf	??_readClock,w
  1960  024C  00D2               	movwf	_day
  1961  024D  0823               	movf	??_readClock+1,w
  1962  024E  00D3               	movwf	_day+1
  1963                           
  1964                           ;LCDTime.c: 461: date = (a % 16) + ((a / 16 ) * 10) ;
  1965  024F  3010               	movlw	16
  1966  0250  00F0               	movwf	___awdiv@divisor
  1967  0251  3000               	movlw	0
  1968  0252  00F1               	movwf	___awdiv@divisor+1
  1969  0253  0826               	movf	readClock@a,w
  1970  0254  00A2               	movwf	??_readClock
  1971  0255  01A3               	clrf	??_readClock+1
  1972  0256  0822               	movf	??_readClock,w
  1973  0257  00F2               	movwf	___awdiv@dividend
  1974  0258  0823               	movf	??_readClock+1,w
  1975  0259  00F3               	movwf	___awdiv@dividend+1
  1976  025A  120A  158A  24FC  120A  118A  	fcall	___awdiv
  1977  025F  0871               	movf	?___awdiv+1,w
  1978  0260  00FA               	movwf	___wmul@multiplier+1
  1979  0261  0870               	movf	?___awdiv,w
  1980  0262  00F9               	movwf	___wmul@multiplier
  1981  0263  300A               	movlw	10
  1982  0264  00FB               	movwf	___wmul@multiplicand
  1983  0265  3000               	movlw	0
  1984  0266  00FC               	movwf	___wmul@multiplicand+1
  1985  0267  120A  158A  21E4  120A  118A  	fcall	___wmul
  1986  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1987  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1988  026E  0826               	movf	readClock@a,w
  1989  026F  390F               	andlw	15
  1990  0270  0779               	addwf	?___wmul,w
  1991  0271  00D0               	movwf	_date
  1992  0272  087A               	movf	?___wmul+1,w
  1993  0273  1803               	skipnc
  1994  0274  0A7A               	incf	?___wmul+1,w
  1995  0275  00D1               	movwf	_date+1
  1996                           
  1997                           ;LCDTime.c: 462: month = (b % 16) + ((b / 16 ) * 10) ;
  1998  0276  3010               	movlw	16
  1999  0277  00F0               	movwf	___awdiv@divisor
  2000  0278  3000               	movlw	0
  2001  0279  00F1               	movwf	___awdiv@divisor+1
  2002  027A  0827               	movf	readClock@b,w
  2003  027B  00A2               	movwf	??_readClock
  2004  027C  01A3               	clrf	??_readClock+1
  2005  027D  0822               	movf	??_readClock,w
  2006  027E  00F2               	movwf	___awdiv@dividend
  2007  027F  0823               	movf	??_readClock+1,w
  2008  0280  00F3               	movwf	___awdiv@dividend+1
  2009  0281  120A  158A  24FC  120A  118A  	fcall	___awdiv
  2010  0286  0871               	movf	?___awdiv+1,w
  2011  0287  00FA               	movwf	___wmul@multiplier+1
  2012  0288  0870               	movf	?___awdiv,w
  2013  0289  00F9               	movwf	___wmul@multiplier
  2014  028A  300A               	movlw	10
  2015  028B  00FB               	movwf	___wmul@multiplicand
  2016  028C  3000               	movlw	0
  2017  028D  00FC               	movwf	___wmul@multiplicand+1
  2018  028E  120A  158A  21E4  120A  118A  	fcall	___wmul
  2019  0293  1283               	bcf	3,5	;RP0=0, select bank0
  2020  0294  1303               	bcf	3,6	;RP1=0, select bank0
  2021  0295  0827               	movf	readClock@b,w
  2022  0296  390F               	andlw	15
  2023  0297  0779               	addwf	?___wmul,w
  2024  0298  00D8               	movwf	_month
  2025  0299  087A               	movf	?___wmul+1,w
  2026  029A  1803               	skipnc
  2027  029B  0A7A               	incf	?___wmul+1,w
  2028  029C  00D9               	movwf	_month+1
  2029                           
  2030                           ;LCDTime.c: 463: year = (c % 16) + ((c / 16 ) * 10) ;
  2031  029D  3010               	movlw	16
  2032  029E  00F0               	movwf	___awdiv@divisor
  2033  029F  3000               	movlw	0
  2034  02A0  00F1               	movwf	___awdiv@divisor+1
  2035  02A1  0828               	movf	readClock@c,w
  2036  02A2  00A2               	movwf	??_readClock
  2037  02A3  01A3               	clrf	??_readClock+1
  2038  02A4  0822               	movf	??_readClock,w
  2039  02A5  00F2               	movwf	___awdiv@dividend
  2040  02A6  0823               	movf	??_readClock+1,w
  2041  02A7  00F3               	movwf	___awdiv@dividend+1
  2042  02A8  120A  158A  24FC  120A  118A  	fcall	___awdiv
  2043  02AD  0871               	movf	?___awdiv+1,w
  2044  02AE  00FA               	movwf	___wmul@multiplier+1
  2045  02AF  0870               	movf	?___awdiv,w
  2046  02B0  00F9               	movwf	___wmul@multiplier
  2047  02B1  300A               	movlw	10
  2048  02B2  00FB               	movwf	___wmul@multiplicand
  2049  02B3  3000               	movlw	0
  2050  02B4  00FC               	movwf	___wmul@multiplicand+1
  2051  02B5  120A  158A  21E4  120A  118A  	fcall	___wmul
  2052  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2053  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2054  02BC  0828               	movf	readClock@c,w
  2055  02BD  390F               	andlw	15
  2056  02BE  0779               	addwf	?___wmul,w
  2057  02BF  00DE               	movwf	_year
  2058  02C0  087A               	movf	?___wmul+1,w
  2059  02C1  1803               	skipnc
  2060  02C2  0A7A               	incf	?___wmul+1,w
  2061  02C3  00DF               	movwf	_year+1
  2062  02C4                     l2402:	
  2063                           
  2064                           ;LCDTime.c: 464: }
  2065                           ;LCDTime.c: 466: if (minute != runningMinute)
  2066  02C4  085B               	movf	_runningMinute+1,w
  2067  02C5  0657               	xorwf	_minute+1,w
  2068  02C6  1D03               	skipz
  2069  02C7  2ACA               	goto	u1945
  2070  02C8  085A               	movf	_runningMinute,w
  2071  02C9  0656               	xorwf	_minute,w
  2072  02CA                     u1945:	
  2073  02CA  1903               	skipnz
  2074  02CB  0008               	return
  2075                           
  2076                           ;LCDTime.c: 467: {
  2077                           ;LCDTime.c: 468: runningMinute = minute ;
  2078  02CC  0857               	movf	_minute+1,w
  2079  02CD  00DB               	movwf	_runningMinute+1
  2080  02CE  0856               	movf	_minute,w
  2081  02CF  00DA               	movwf	_runningMinute
  2082                           
  2083                           ;LCDTime.c: 469: runningMinutes++ ;
  2084  02D0  3001               	movlw	1
  2085  02D1  07E8               	addwf	_runningMinutes,f
  2086  02D2  1803               	skipnc
  2087  02D3  0AE9               	incf	_runningMinutes+1,f
  2088  02D4  3000               	movlw	0
  2089  02D5  07E9               	addwf	_runningMinutes+1,f
  2090                           
  2091                           ;LCDTime.c: 471: if (runningMinutes >= 60)
  2092  02D6  0869               	movf	_runningMinutes+1,w
  2093  02D7  3A80               	xorlw	128
  2094  02D8  00FF               	movwf	127
  2095  02D9  3080               	movlw	128
  2096  02DA  027F               	subwf	127,w
  2097  02DB  1D03               	skipz
  2098  02DC  2ADF               	goto	u1955
  2099  02DD  303C               	movlw	60
  2100  02DE  0268               	subwf	_runningMinutes,w
  2101  02DF                     u1955:	
  2102  02DF  1C03               	skipc
  2103  02E0  2AFB               	goto	l2414
  2104                           
  2105                           ;LCDTime.c: 472: {
  2106                           ;LCDTime.c: 473: runningHours++;
  2107  02E1  3001               	movlw	1
  2108  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2109  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2110  02E4  07E6               	addwf	_runningHours,f
  2111  02E5  1803               	skipnc
  2112  02E6  0AE7               	incf	_runningHours+1,f
  2113  02E7  3000               	movlw	0
  2114  02E8  07E7               	addwf	_runningHours+1,f
  2115                           
  2116                           ;LCDTime.c: 474: DS1307_writeRam(&runningHours,2,2) ;
  2117  02E9  3002               	movlw	2
  2118  02EA  00F2               	movwf	DS1307_writeRam@offset
  2119  02EB  3000               	movlw	0
  2120  02EC  00F3               	movwf	DS1307_writeRam@offset+1
  2121  02ED  3002               	movlw	2
  2122  02EE  00F4               	movwf	DS1307_writeRam@length
  2123  02EF  3000               	movlw	0
  2124  02F0  00F5               	movwf	DS1307_writeRam@length+1
  2125  02F1  3066               	movlw	(low (_runningHours| 0))& (0+255)
  2126  02F2  120A  158A  2261  120A  118A  	fcall	_DS1307_writeRam
  2127                           
  2128                           ;LCDTime.c: 475: runningMinutes = 0 ;
  2129  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  2130  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  2131  02F9  01E8               	clrf	_runningMinutes
  2132  02FA  01E9               	clrf	_runningMinutes+1
  2133  02FB                     l2414:	
  2134                           
  2135                           ;LCDTime.c: 476: }
  2136                           ;LCDTime.c: 479: DS1307_writeRam(&runningMinutes,0,2) ;
  2137  02FB  3000               	movlw	0
  2138  02FC  00F2               	movwf	DS1307_writeRam@offset
  2139  02FD  00F3               	movwf	DS1307_writeRam@offset+1
  2140  02FE  3002               	movlw	2
  2141  02FF  00F4               	movwf	DS1307_writeRam@length
  2142  0300  3000               	movlw	0
  2143  0301  00F5               	movwf	DS1307_writeRam@length+1
  2144  0302  3068               	movlw	(low (_runningMinutes| 0))& (0+255)
  2145  0303  120A  158A  2261   	fcall	_DS1307_writeRam
  2146  0306  0008               	return
  2147  0307                     __end_of_readClock:	
  2148                           
  2149                           	psect	text4
  2150  0A61                     __ptext4:	
  2151 ;; *************** function _DS1307_writeRam *****************
  2152 ;; Defined at:
  2153 ;;		line 108 in file "DS1307.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  ptr             1    wreg     PTR unsigned char 
  2156 ;;		 -> runningHours(2), runningMinutes(2), 
  2157 ;;  offset          2    2[COMMON] int 
  2158 ;;  length          2    4[COMMON] int 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  ptr             1    8[COMMON] PTR unsigned char 
  2161 ;;		 -> runningHours(2), runningMinutes(2), 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2171 ;;      Params:         4       0       0       0       0
  2172 ;;      Locals:         1       0       0       0       0
  2173 ;;      Temps:          2       0       0       0       0
  2174 ;;      Totals:         7       0       0       0       0
  2175 ;;Total ram usage:        7 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; Hardware stack levels required when called:    3
  2178 ;; This function calls:
  2179 ;;		_DS1307_Write
  2180 ;;		_I2C_Start
  2181 ;;		_I2C_Stop
  2182 ;; This function is called by:
  2183 ;;		_readClock
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           
  2188                           ;psect for function _DS1307_writeRam
  2189  0A61                     _DS1307_writeRam:	
  2190                           
  2191                           ;incstack = 0
  2192                           ; Regs used in _DS1307_writeRam: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2193                           ;DS1307_writeRam@ptr stored from wreg
  2194  0A61  00F8               	movwf	DS1307_writeRam@ptr
  2195                           
  2196                           ;DS1307.c: 110: I2C_Start();
  2197  0A62  120A  158A  20EB  120A  158A  	fcall	_I2C_Start
  2198                           
  2199                           ;DS1307.c: 111: DS1307_Write(0xD0);
  2200  0A67  30D0               	movlw	208
  2201  0A68  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  2202                           
  2203                           ;DS1307.c: 112: DS1307_Write(0x08 + offset);
  2204  0A6D  0872               	movf	DS1307_writeRam@offset,w
  2205  0A6E  3E08               	addlw	8
  2206  0A6F  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  2207  0A74                     l2224:	
  2208                           ;DS1307.c: 114: while(length-- > 0)
  2209                           
  2210  0A74  0875               	movf	DS1307_writeRam@length+1,w
  2211  0A75  00F7               	movwf	??_DS1307_writeRam+1
  2212  0A76  03F4               	decf	DS1307_writeRam@length,f
  2213  0A77  0A74               	incf	DS1307_writeRam@length,w
  2214  0A78  00F6               	movwf	??_DS1307_writeRam
  2215  0A79  1903               	skipnz
  2216  0A7A  03F5               	decf	DS1307_writeRam@length+1,f
  2217  0A7B  0877               	movf	??_DS1307_writeRam+1,w
  2218  0A7C  3A80               	xorlw	128
  2219  0A7D  00FF               	movwf	127
  2220  0A7E  3080               	movlw	128
  2221  0A7F  027F               	subwf	127,w
  2222  0A80  1D03               	skipz
  2223  0A81  2A84               	goto	u1865
  2224  0A82  3001               	movlw	1
  2225  0A83  0276               	subwf	??_DS1307_writeRam,w
  2226  0A84                     u1865:	
  2227  0A84  1C03               	btfss	3,0
  2228  0A85  2A94               	goto	l2226
  2229                           
  2230                           ;DS1307.c: 115: DS1307_Write(*ptr++);
  2231  0A86  0878               	movf	DS1307_writeRam@ptr,w
  2232  0A87  0084               	movwf	4
  2233  0A88  1383               	bcf	3,7	;select IRP bank0
  2234  0A89  0800               	movf	0,w
  2235  0A8A  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  2236  0A8F  3001               	movlw	1
  2237  0A90  00F6               	movwf	??_DS1307_writeRam
  2238  0A91  0876               	movf	??_DS1307_writeRam,w
  2239  0A92  07F8               	addwf	DS1307_writeRam@ptr,f
  2240  0A93  2A74               	goto	l2224
  2241  0A94                     l2226:	
  2242                           
  2243                           ;DS1307.c: 117: I2C_Stop();
  2244  0A94  120A  158A  20F1   	fcall	_I2C_Stop
  2245  0A97  0008               	return
  2246  0A98                     __end_of_DS1307_writeRam:	
  2247                           
  2248                           	psect	text5
  2249  0BFB                     __ptext5:	
  2250 ;; *************** function _DS1307_GetTime *****************
  2251 ;; Defined at:
  2252 ;;		line 68 in file "DS1307.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  h_ptr           1    wreg     PTR unsigned char 
  2255 ;;		 -> readClock@a(1), 
  2256 ;;  m_ptr           1    2[COMMON] PTR unsigned char 
  2257 ;;		 -> readClock@b(1), 
  2258 ;;  s_ptr           1    3[COMMON] PTR unsigned char 
  2259 ;;		 -> readClock@c(1), 
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;  h_ptr           1    5[COMMON] PTR unsigned char 
  2262 ;;		 -> readClock@a(1), 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2272 ;;      Params:         2       0       0       0       0
  2273 ;;      Locals:         1       0       0       0       0
  2274 ;;      Temps:          1       0       0       0       0
  2275 ;;      Totals:         4       0       0       0       0
  2276 ;;Total ram usage:        4 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    3
  2279 ;; This function calls:
  2280 ;;		_DS1307_Read
  2281 ;;		_DS1307_Write
  2282 ;;		_I2C_Ack
  2283 ;;		_I2C_NoAck
  2284 ;;		_I2C_Restart
  2285 ;;		_I2C_Start
  2286 ;;		_I2C_Stop
  2287 ;; This function is called by:
  2288 ;;		_readClock
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _DS1307_GetTime
  2294  0BFB                     _DS1307_GetTime:	
  2295                           
  2296                           ;incstack = 0
  2297                           ; Regs used in _DS1307_GetTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2298                           ;DS1307_GetTime@h_ptr stored from wreg
  2299  0BFB  00F5               	movwf	DS1307_GetTime@h_ptr
  2300                           
  2301                           ;DS1307.c: 70: I2C_Start();
  2302  0BFC  120A  158A  20EB  120A  158A  	fcall	_I2C_Start
  2303                           
  2304                           ;DS1307.c: 71: DS1307_Write(0xD0);
  2305  0C01  30D0               	movlw	208
  2306  0C02  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  2307                           
  2308                           ;DS1307.c: 72: DS1307_Write(0x00);
  2309  0C07  3000               	movlw	0
  2310  0C08  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  2311                           
  2312                           ;DS1307.c: 73: I2C_Restart();
  2313  0C0D  120A  158A  20E5  120A  158A  	fcall	_I2C_Restart
  2314                           
  2315                           ;DS1307.c: 74: DS1307_Write(0xD1);
  2316  0C12  30D1               	movlw	209
  2317  0C13  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  2318                           
  2319                           ;DS1307.c: 75: *s_ptr = DS1307_Read(); I2C_Ack();
  2320  0C18  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  2321  0C1D  00F4               	movwf	??_DS1307_GetTime
  2322  0C1E  0873               	movf	DS1307_GetTime@s_ptr,w
  2323  0C1F  0084               	movwf	4
  2324  0C20  0874               	movf	??_DS1307_GetTime,w
  2325  0C21  1383               	bcf	3,7	;select IRP bank0
  2326  0C22  0080               	movwf	0
  2327  0C23  120A  158A  20FE  120A  158A  	fcall	_I2C_Ack
  2328                           
  2329                           ;DS1307.c: 76: *m_ptr = DS1307_Read(); I2C_Ack();
  2330  0C28  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  2331  0C2D  00F4               	movwf	??_DS1307_GetTime
  2332  0C2E  0872               	movf	DS1307_GetTime@m_ptr,w
  2333  0C2F  0084               	movwf	4
  2334  0C30  0874               	movf	??_DS1307_GetTime,w
  2335  0C31  1383               	bcf	3,7	;select IRP bank0
  2336  0C32  0080               	movwf	0
  2337  0C33  120A  158A  20FE  120A  158A  	fcall	_I2C_Ack
  2338                           
  2339                           ;DS1307.c: 77: *h_ptr = DS1307_Read(); I2C_NoAck();
  2340  0C38  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  2341  0C3D  00F4               	movwf	??_DS1307_GetTime
  2342  0C3E  0875               	movf	DS1307_GetTime@h_ptr,w
  2343  0C3F  0084               	movwf	4
  2344  0C40  0874               	movf	??_DS1307_GetTime,w
  2345  0C41  1383               	bcf	3,7	;select IRP bank0
  2346  0C42  0080               	movwf	0
  2347  0C43  120A  158A  20F7  120A  158A  	fcall	_I2C_NoAck
  2348                           
  2349                           ;DS1307.c: 78: I2C_Stop();
  2350  0C48  120A  158A  20F1   	fcall	_I2C_Stop
  2351  0C4B  0008               	return
  2352  0C4C                     __end_of_DS1307_GetTime:	
  2353                           
  2354                           	psect	text6
  2355  0DB2                     __ptext6:	
  2356 ;; *************** function _DS1307_GetDate *****************
  2357 ;; Defined at:
  2358 ;;		line 81 in file "DS1307.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  n_ptr           1    wreg     PTR unsigned char 
  2361 ;;		 -> readClock@n(1), 
  2362 ;;  d_ptr           1    2[COMMON] PTR unsigned char 
  2363 ;;		 -> readClock@a(1), 
  2364 ;;  m_ptr           1    3[COMMON] PTR unsigned char 
  2365 ;;		 -> readClock@b(1), 
  2366 ;;  y_ptr           1    4[COMMON] PTR unsigned char 
  2367 ;;		 -> readClock@c(1), 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  n_ptr           1    6[COMMON] PTR unsigned char 
  2370 ;;		 -> readClock@n(1), 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  1    wreg      void 
  2373 ;; Registers used:
  2374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2380 ;;      Params:         3       0       0       0       0
  2381 ;;      Locals:         1       0       0       0       0
  2382 ;;      Temps:          1       0       0       0       0
  2383 ;;      Totals:         5       0       0       0       0
  2384 ;;Total ram usage:        5 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    3
  2387 ;; This function calls:
  2388 ;;		_DS1307_Read
  2389 ;;		_DS1307_Write
  2390 ;;		_I2C_Ack
  2391 ;;		_I2C_NoAck
  2392 ;;		_I2C_Restart
  2393 ;;		_I2C_Start
  2394 ;;		_I2C_Stop
  2395 ;; This function is called by:
  2396 ;;		_readClock
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           
  2401                           ;psect for function _DS1307_GetDate
  2402  0DB2                     _DS1307_GetDate:	
  2403                           
  2404                           ;incstack = 0
  2405                           ; Regs used in _DS1307_GetDate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2406                           ;DS1307_GetDate@n_ptr stored from wreg
  2407  0DB2  00F6               	movwf	DS1307_GetDate@n_ptr
  2408                           
  2409                           ;DS1307.c: 83: I2C_Start();
  2410  0DB3  120A  158A  20EB  120A  158A  	fcall	_I2C_Start
  2411                           
  2412                           ;DS1307.c: 84: DS1307_Write(0xD0);
  2413  0DB8  30D0               	movlw	208
  2414  0DB9  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  2415                           
  2416                           ;DS1307.c: 85: DS1307_Write(0x03);
  2417  0DBE  3003               	movlw	3
  2418  0DBF  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  2419                           
  2420                           ;DS1307.c: 86: I2C_Restart();
  2421  0DC4  120A  158A  20E5  120A  158A  	fcall	_I2C_Restart
  2422                           
  2423                           ;DS1307.c: 87: DS1307_Write(0xD1);
  2424  0DC9  30D1               	movlw	209
  2425  0DCA  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  2426                           
  2427                           ;DS1307.c: 88: *n_ptr = DS1307_Read(); I2C_Ack();
  2428  0DCF  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  2429  0DD4  00F5               	movwf	??_DS1307_GetDate
  2430  0DD5  0876               	movf	DS1307_GetDate@n_ptr,w
  2431  0DD6  0084               	movwf	4
  2432  0DD7  0875               	movf	??_DS1307_GetDate,w
  2433  0DD8  1383               	bcf	3,7	;select IRP bank0
  2434  0DD9  0080               	movwf	0
  2435  0DDA  120A  158A  20FE  120A  158A  	fcall	_I2C_Ack
  2436                           
  2437                           ;DS1307.c: 89: *d_ptr = DS1307_Read(); I2C_Ack();
  2438  0DDF  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  2439  0DE4  00F5               	movwf	??_DS1307_GetDate
  2440  0DE5  0872               	movf	DS1307_GetDate@d_ptr,w
  2441  0DE6  0084               	movwf	4
  2442  0DE7  0875               	movf	??_DS1307_GetDate,w
  2443  0DE8  1383               	bcf	3,7	;select IRP bank0
  2444  0DE9  0080               	movwf	0
  2445  0DEA  120A  158A  20FE  120A  158A  	fcall	_I2C_Ack
  2446                           
  2447                           ;DS1307.c: 90: *m_ptr = DS1307_Read(); I2C_Ack();
  2448  0DEF  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  2449  0DF4  00F5               	movwf	??_DS1307_GetDate
  2450  0DF5  0873               	movf	DS1307_GetDate@m_ptr,w
  2451  0DF6  0084               	movwf	4
  2452  0DF7  0875               	movf	??_DS1307_GetDate,w
  2453  0DF8  1383               	bcf	3,7	;select IRP bank0
  2454  0DF9  0080               	movwf	0
  2455  0DFA  120A  158A  20FE  120A  158A  	fcall	_I2C_Ack
  2456                           
  2457                           ;DS1307.c: 91: *y_ptr = DS1307_Read(); I2C_NoAck();
  2458  0DFF  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  2459  0E04  00F5               	movwf	??_DS1307_GetDate
  2460  0E05  0874               	movf	DS1307_GetDate@y_ptr,w
  2461  0E06  0084               	movwf	4
  2462  0E07  0875               	movf	??_DS1307_GetDate,w
  2463  0E08  1383               	bcf	3,7	;select IRP bank0
  2464  0E09  0080               	movwf	0
  2465  0E0A  120A  158A  20F7  120A  158A  	fcall	_I2C_NoAck
  2466                           
  2467                           ;DS1307.c: 92: I2C_Stop();
  2468  0E0F  120A  158A  20F1   	fcall	_I2C_Stop
  2469  0E12  0008               	return
  2470  0E13                     __end_of_DS1307_GetDate:	
  2471                           
  2472                           	psect	text7
  2473  0307                     __ptext7:	
  2474 ;; *************** function _doMenu *****************
  2475 ;; Defined at:
  2476 ;;		line 150 in file "LCDTime.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  y               2   37[BANK0 ] int 
  2481 ;;  m               2   35[BANK0 ] int 
  2482 ;;  d               2   33[BANK0 ] int 
  2483 ;;  n               2   31[BANK0 ] int 
  2484 ;;  s               2   29[BANK0 ] int 
  2485 ;;  m               2   27[BANK0 ] int 
  2486 ;;  h               2   25[BANK0 ] int 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2496 ;;      Params:         0       0       0       0       0
  2497 ;;      Locals:         0      14       0       0       0
  2498 ;;      Temps:          0       3       0       0       0
  2499 ;;      Totals:         0      17       0       0       0
  2500 ;;Total ram usage:       17 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    5
  2503 ;; This function calls:
  2504 ;;		_DS1307_SetDate
  2505 ;;		_DS1307_SetTime
  2506 ;;		_LCDByte
  2507 ;;		_LCDGotoXY
  2508 ;;		_LCDWriteString
  2509 ;;		___awdiv
  2510 ;;		___awmod
  2511 ;;		_readInputs
  2512 ;;		_showDate
  2513 ;;		_showTime
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           
  2520                           ;psect for function _doMenu
  2521  0307                     _doMenu:	
  2522  0307                     l2430:	
  2523                           ;LCDTime.c: 152: while(bButton)
  2524                           
  2525                           ;incstack = 0
  2526                           ; Regs used in _doMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2527                           
  2528  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0309  0864               	movf	_bButton,w
  2531  030A  1903               	btfsc	3,2
  2532  030B  2B12               	goto	l2432
  2533                           
  2534                           ;LCDTime.c: 153: readInputs();
  2535  030C  120A  118A  2005  120A  118A  	fcall	_readInputs
  2536  0311  2B07               	goto	l2430
  2537  0312                     l2432:	
  2538                           
  2539                           ;LCDTime.c: 156: if (menuFunction == 1 | menuFunction == 2)
  2540  0312  0361               	decf	_menuFunction,w
  2541  0313  1903               	btfsc	3,2
  2542  0314  2B19               	goto	l2436
  2543  0315  3002               	movlw	2
  2544  0316  0661               	xorwf	_menuFunction,w
  2545  0317  1D03               	btfss	3,2
  2546  0318  2D1A               	goto	l2554
  2547  0319                     l2436:	
  2548                           
  2549                           ;LCDTime.c: 157: {
  2550                           ;LCDTime.c: 158: int h,m,s ;
  2551                           ;LCDTime.c: 160: h = hour ;
  2552  0319  0855               	movf	_hour+1,w
  2553  031A  00BA               	movwf	doMenu@h+1
  2554  031B  0854               	movf	_hour,w
  2555  031C  00B9               	movwf	doMenu@h
  2556                           
  2557                           ;LCDTime.c: 161: m = minute ;
  2558  031D  0857               	movf	_minute+1,w
  2559  031E  00BC               	movwf	doMenu@m+1
  2560  031F  0856               	movf	_minute,w
  2561  0320  00BB               	movwf	doMenu@m
  2562                           
  2563                           ;LCDTime.c: 162: s = seconds ;
  2564  0321  085D               	movf	_seconds+1,w
  2565  0322  00BE               	movwf	doMenu@s+1
  2566  0323  085C               	movf	_seconds,w
  2567  0324  00BD               	movwf	doMenu@s
  2568                           
  2569                           ;LCDTime.c: 164: (LCDByte(0b00000001,0));
  2570  0325  01F5               	clrf	LCDByte@isdata
  2571  0326  3001               	movlw	1
  2572  0327  120A  158A  235A  120A  118A  	fcall	_LCDByte
  2573                           
  2574                           ;LCDTime.c: 165: LCDWriteString(setText);
  2575  032C  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2576  032D  00FC               	movwf	LCDWriteString@msg
  2577  032E  3080               	movlw	128
  2578  032F  00FD               	movwf	LCDWriteString@msg+1
  2579  0330  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  2580                           
  2581                           ;LCDTime.c: 166: LCDWriteString("Hours");
  2582  0335  308D               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2583  0336  00FC               	movwf	LCDWriteString@msg
  2584  0337  3080               	movlw	128
  2585  0338  00FD               	movwf	LCDWriteString@msg+1
  2586  0339  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  2587  033E                     L4:	
  2588                           
  2589                           ;LCDTime.c: 168: LCDGotoXY(0,1) ;
  2590  033E  01FC               	clrf	LCDGotoXY@y
  2591  033F  0AFC               	incf	LCDGotoXY@y,f
  2592  0340  3000               	movlw	0
  2593  0341  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  2594                           
  2595                           ;LCDTime.c: 169: showTime();
  2596  0346  120A  158A  22D3  120A  118A  	fcall	_showTime
  2597  034B                     l2470:	
  2598                           ;LCDTime.c: 171: while(!bButton)
  2599                           
  2600  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2601  034C  1303               	bcf	3,6	;RP1=0, select bank0
  2602  034D  0864               	movf	_bButton,w
  2603  034E  1D03               	btfss	3,2
  2604  034F  2B85               	goto	l2474
  2605                           
  2606                           ;LCDTime.c: 172: {
  2607                           ;LCDTime.c: 173: readInputs();
  2608  0350  120A  118A  2005  120A  118A  	fcall	_readInputs
  2609                           
  2610                           ;LCDTime.c: 175: if (state & 0x10)
  2611  0355  1283               	bcf	3,5	;RP0=0, select bank0
  2612  0356  1303               	bcf	3,6	;RP1=0, select bank0
  2613  0357  1E65               	btfss	_state,4
  2614  0358  2B6D               	goto	l316
  2615                           
  2616                           ;LCDTime.c: 176: {
  2617                           ;LCDTime.c: 177: hour++;
  2618  0359  3001               	movlw	1
  2619  035A  07D4               	addwf	_hour,f
  2620  035B  1803               	skipnc
  2621  035C  0AD5               	incf	_hour+1,f
  2622  035D  3000               	movlw	0
  2623  035E  07D5               	addwf	_hour+1,f
  2624                           
  2625                           ;LCDTime.c: 178: if (hour > 23)
  2626  035F  0855               	movf	_hour+1,w
  2627  0360  3A80               	xorlw	128
  2628  0361  00FF               	movwf	127
  2629  0362  3080               	movlw	128
  2630  0363  027F               	subwf	127,w
  2631  0364  1D03               	skipz
  2632  0365  2B68               	goto	u2015
  2633  0366  3018               	movlw	24
  2634  0367  0254               	subwf	_hour,w
  2635  0368                     u2015:	
  2636  0368  1C03               	skipc
  2637  0369  2B79               	goto	l2464
  2638                           
  2639                           ;LCDTime.c: 179: hour = 0 ;
  2640  036A  1283               	bcf	3,5	;RP0=0, select bank0
  2641  036B  1303               	bcf	3,6	;RP1=0, select bank0
  2642  036C  2B77               	goto	l2462
  2643  036D                     l316:	
  2644                           ;LCDTime.c: 180: }
  2645                           
  2646                           
  2647                           ;LCDTime.c: 181: else if (state & 0x20)
  2648  036D  1EE5               	btfss	_state,5
  2649  036E  2B79               	goto	l2464
  2650                           
  2651                           ;LCDTime.c: 182: {
  2652                           ;LCDTime.c: 183: hour--;
  2653  036F  30FF               	movlw	255
  2654  0370  07D4               	addwf	_hour,f
  2655  0371  1803               	skipnc
  2656  0372  0AD5               	incf	_hour+1,f
  2657  0373  30FF               	movlw	255
  2658  0374  07D5               	addwf	_hour+1,f
  2659                           
  2660                           ;LCDTime.c: 184: if (hour < 0)
  2661  0375  1FD5               	btfss	_hour+1,7
  2662  0376  2B79               	goto	l2464
  2663  0377                     l2462:	
  2664                           
  2665                           ;LCDTime.c: 185: hour = 0 ;
  2666  0377  01D4               	clrf	_hour
  2667  0378  01D5               	clrf	_hour+1
  2668  0379                     l2464:	
  2669                           
  2670                           ;LCDTime.c: 186: }
  2671                           ;LCDTime.c: 188: if (state & 0x30)
  2672  0379  1283               	bcf	3,5	;RP0=0, select bank0
  2673  037A  1303               	bcf	3,6	;RP1=0, select bank0
  2674  037B  0865               	movf	_state,w
  2675  037C  3930               	andlw	48
  2676  037D  1903               	btfsc	3,2
  2677  037E  2B4B               	goto	l2470
  2678  037F  2B3E               	goto	L4
  2679  0380                     l2472:	
  2680                           ;LCDTime.c: 192: }
  2681                           ;LCDTime.c: 193: }
  2682                           ;LCDTime.c: 195: while(bButton)
  2683                           
  2684                           ;LCDTime.c: 191: showTime();
  2685                           
  2686                           ;LCDTime.c: 189: {
  2687                           ;LCDTime.c: 190: LCDGotoXY(0,1) ;
  2688                           
  2689                           
  2690                           ;LCDTime.c: 196: readInputs();
  2691  0380  120A  118A  2005  120A  118A  	fcall	_readInputs
  2692  0385                     l2474:	
  2693  0385  1283               	bcf	3,5	;RP0=0, select bank0
  2694  0386  1303               	bcf	3,6	;RP1=0, select bank0
  2695  0387  0864               	movf	_bButton,w
  2696  0388  1D03               	btfss	3,2
  2697  0389  2B80               	goto	l2472
  2698                           
  2699                           ;LCDTime.c: 198: LCDGotoXY(0,0) ;
  2700  038A  01FC               	clrf	LCDGotoXY@y
  2701  038B  3000               	movlw	0
  2702  038C  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  2703                           
  2704                           ;LCDTime.c: 199: LCDWriteString(setText);
  2705  0391  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2706  0392  00FC               	movwf	LCDWriteString@msg
  2707  0393  3080               	movlw	128
  2708  0394  00FD               	movwf	LCDWriteString@msg+1
  2709  0395  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  2710                           
  2711                           ;LCDTime.c: 200: LCDWriteString("Minutes");
  2712  039A  3065               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2713  039B  00FC               	movwf	LCDWriteString@msg
  2714  039C  3080               	movlw	128
  2715  039D  00FD               	movwf	LCDWriteString@msg+1
  2716  039E  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  2717  03A3                     l2504:	
  2718                           ;LCDTime.c: 202: while(!bButton)
  2719                           
  2720  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2721  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  2722  03A5  0864               	movf	_bButton,w
  2723  03A6  1D03               	btfss	3,2
  2724  03A7  2BEA               	goto	l2508
  2725                           
  2726                           ;LCDTime.c: 203: {
  2727                           ;LCDTime.c: 204: readInputs();
  2728  03A8  120A  118A  2005  120A  118A  	fcall	_readInputs
  2729                           
  2730                           ;LCDTime.c: 206: if (state & 0x10)
  2731  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2732  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2733  03AF  1E65               	btfss	_state,4
  2734  03B0  2BC5               	goto	l328
  2735                           
  2736                           ;LCDTime.c: 207: {
  2737                           ;LCDTime.c: 208: minute++;
  2738  03B1  3001               	movlw	1
  2739  03B2  07D6               	addwf	_minute,f
  2740  03B3  1803               	skipnc
  2741  03B4  0AD7               	incf	_minute+1,f
  2742  03B5  3000               	movlw	0
  2743  03B6  07D7               	addwf	_minute+1,f
  2744                           
  2745                           ;LCDTime.c: 209: if (minute > 59)
  2746  03B7  0857               	movf	_minute+1,w
  2747  03B8  3A80               	xorlw	128
  2748  03B9  00FF               	movwf	127
  2749  03BA  3080               	movlw	128
  2750  03BB  027F               	subwf	127,w
  2751  03BC  1D03               	skipz
  2752  03BD  2BC0               	goto	u2085
  2753  03BE  303C               	movlw	60
  2754  03BF  0256               	subwf	_minute,w
  2755  03C0                     u2085:	
  2756  03C0  1C03               	skipc
  2757  03C1  2BD1               	goto	l2498
  2758                           
  2759                           ;LCDTime.c: 210: minute = 0 ;
  2760  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  2761  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  2762  03C4  2BCF               	goto	l2496
  2763  03C5                     l328:	
  2764                           ;LCDTime.c: 211: }
  2765                           
  2766                           
  2767                           ;LCDTime.c: 212: else if (state & 0x20)
  2768  03C5  1EE5               	btfss	_state,5
  2769  03C6  2BD1               	goto	l2498
  2770                           
  2771                           ;LCDTime.c: 213: {
  2772                           ;LCDTime.c: 214: minute--;
  2773  03C7  30FF               	movlw	255
  2774  03C8  07D6               	addwf	_minute,f
  2775  03C9  1803               	skipnc
  2776  03CA  0AD7               	incf	_minute+1,f
  2777  03CB  30FF               	movlw	255
  2778  03CC  07D7               	addwf	_minute+1,f
  2779                           
  2780                           ;LCDTime.c: 215: if (minute < 0)
  2781  03CD  1FD7               	btfss	_minute+1,7
  2782  03CE  2BD1               	goto	l2498
  2783  03CF                     l2496:	
  2784                           
  2785                           ;LCDTime.c: 216: minute = 0 ;
  2786  03CF  01D6               	clrf	_minute
  2787  03D0  01D7               	clrf	_minute+1
  2788  03D1                     l2498:	
  2789                           
  2790                           ;LCDTime.c: 217: }
  2791                           ;LCDTime.c: 219: if (state & 0x30)
  2792  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  2793  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  2794  03D3  0865               	movf	_state,w
  2795  03D4  3930               	andlw	48
  2796  03D5  1903               	btfsc	3,2
  2797  03D6  2BA3               	goto	l2504
  2798                           
  2799                           ;LCDTime.c: 220: {
  2800                           ;LCDTime.c: 221: LCDGotoXY(0,1) ;
  2801  03D7  01FC               	clrf	LCDGotoXY@y
  2802  03D8  0AFC               	incf	LCDGotoXY@y,f
  2803  03D9  3000               	movlw	0
  2804  03DA  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  2805                           
  2806                           ;LCDTime.c: 222: showTime();
  2807  03DF  120A  158A  22D3  120A  118A  	fcall	_showTime
  2808  03E4  2BA3               	goto	l2504
  2809  03E5                     l2506:	
  2810                           ;LCDTime.c: 223: }
  2811                           ;LCDTime.c: 224: }
  2812                           ;LCDTime.c: 226: while(bButton)
  2813                           
  2814                           
  2815                           ;LCDTime.c: 227: readInputs();
  2816  03E5  120A  118A  2005  120A  118A  	fcall	_readInputs
  2817  03EA                     l2508:	
  2818  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  2819  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  2820  03EC  0864               	movf	_bButton,w
  2821  03ED  1D03               	btfss	3,2
  2822  03EE  2BE5               	goto	l2506
  2823                           
  2824                           ;LCDTime.c: 229: LCDGotoXY(0,0) ;
  2825  03EF  01FC               	clrf	LCDGotoXY@y
  2826  03F0  3000               	movlw	0
  2827  03F1  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  2828                           
  2829                           ;LCDTime.c: 230: LCDWriteString(setText);
  2830  03F6  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  2831  03F7  00FC               	movwf	LCDWriteString@msg
  2832  03F8  3080               	movlw	128
  2833  03F9  00FD               	movwf	LCDWriteString@msg+1
  2834  03FA  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  2835                           
  2836                           ;LCDTime.c: 231: LCDWriteString("Seconds");
  2837  03FF  305D               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2838  0400  00FC               	movwf	LCDWriteString@msg
  2839  0401  3080               	movlw	128
  2840  0402  00FD               	movwf	LCDWriteString@msg+1
  2841  0403  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  2842  0408                     l2538:	
  2843                           ;LCDTime.c: 233: while(!bButton)
  2844                           
  2845  0408  1283               	bcf	3,5	;RP0=0, select bank0
  2846  0409  1303               	bcf	3,6	;RP1=0, select bank0
  2847  040A  0864               	movf	_bButton,w
  2848  040B  1D03               	btfss	3,2
  2849  040C  2C4A               	goto	l2540
  2850                           
  2851                           ;LCDTime.c: 234: {
  2852                           ;LCDTime.c: 235: readInputs();
  2853  040D  120A  118A  2005  120A  118A  	fcall	_readInputs
  2854                           
  2855                           ;LCDTime.c: 237: if (state & 0x10)
  2856  0412  1283               	bcf	3,5	;RP0=0, select bank0
  2857  0413  1303               	bcf	3,6	;RP1=0, select bank0
  2858  0414  1E65               	btfss	_state,4
  2859  0415  2C2A               	goto	l340
  2860                           
  2861                           ;LCDTime.c: 238: {
  2862                           ;LCDTime.c: 239: seconds++;
  2863  0416  3001               	movlw	1
  2864  0417  07DC               	addwf	_seconds,f
  2865  0418  1803               	skipnc
  2866  0419  0ADD               	incf	_seconds+1,f
  2867  041A  3000               	movlw	0
  2868  041B  07DD               	addwf	_seconds+1,f
  2869                           
  2870                           ;LCDTime.c: 240: if (seconds > 59)
  2871  041C  085D               	movf	_seconds+1,w
  2872  041D  3A80               	xorlw	128
  2873  041E  00FF               	movwf	127
  2874  041F  3080               	movlw	128
  2875  0420  027F               	subwf	127,w
  2876  0421  1D03               	skipz
  2877  0422  2C25               	goto	u2155
  2878  0423  303C               	movlw	60
  2879  0424  025C               	subwf	_seconds,w
  2880  0425                     u2155:	
  2881  0425  1C03               	skipc
  2882  0426  2C36               	goto	l2532
  2883                           
  2884                           ;LCDTime.c: 241: seconds = 0 ;
  2885  0427  1283               	bcf	3,5	;RP0=0, select bank0
  2886  0428  1303               	bcf	3,6	;RP1=0, select bank0
  2887  0429  2C34               	goto	l2530
  2888  042A                     l340:	
  2889                           ;LCDTime.c: 242: }
  2890                           
  2891                           
  2892                           ;LCDTime.c: 243: else if (state & 0x20)
  2893  042A  1EE5               	btfss	_state,5
  2894  042B  2C36               	goto	l2532
  2895                           
  2896                           ;LCDTime.c: 244: {
  2897                           ;LCDTime.c: 245: seconds--;
  2898  042C  30FF               	movlw	255
  2899  042D  07DC               	addwf	_seconds,f
  2900  042E  1803               	skipnc
  2901  042F  0ADD               	incf	_seconds+1,f
  2902  0430  30FF               	movlw	255
  2903  0431  07DD               	addwf	_seconds+1,f
  2904                           
  2905                           ;LCDTime.c: 246: if (seconds < 0)
  2906  0432  1FDD               	btfss	_seconds+1,7
  2907  0433  2C36               	goto	l2532
  2908  0434                     l2530:	
  2909                           
  2910                           ;LCDTime.c: 247: seconds = 0 ;
  2911  0434  01DC               	clrf	_seconds
  2912  0435  01DD               	clrf	_seconds+1
  2913  0436                     l2532:	
  2914                           
  2915                           ;LCDTime.c: 248: }
  2916                           ;LCDTime.c: 250: if (state & 0x30)
  2917  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2918  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2919  0438  0865               	movf	_state,w
  2920  0439  3930               	andlw	48
  2921  043A  1903               	btfsc	3,2
  2922  043B  2C08               	goto	l2538
  2923                           
  2924                           ;LCDTime.c: 251: {
  2925                           ;LCDTime.c: 252: LCDGotoXY(0,1) ;
  2926  043C  01FC               	clrf	LCDGotoXY@y
  2927  043D  0AFC               	incf	LCDGotoXY@y,f
  2928  043E  3000               	movlw	0
  2929  043F  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  2930                           
  2931                           ;LCDTime.c: 253: showTime();
  2932  0444  120A  158A  22D3  120A  118A  	fcall	_showTime
  2933  0449  2C08               	goto	l2538
  2934  044A                     l2540:	
  2935                           
  2936                           ;LCDTime.c: 254: }
  2937                           ;LCDTime.c: 255: }
  2938                           ;LCDTime.c: 258: if (h != hour || m != minute || s != seconds)
  2939  044A  0855               	movf	_hour+1,w
  2940  044B  063A               	xorwf	doMenu@h+1,w
  2941  044C  1D03               	skipz
  2942  044D  2C50               	goto	u2205
  2943  044E  0854               	movf	_hour,w
  2944  044F  0639               	xorwf	doMenu@h,w
  2945  0450                     u2205:	
  2946  0450  1D03               	skipz
  2947  0451  2C62               	goto	l2546
  2948  0452  0857               	movf	_minute+1,w
  2949  0453  063C               	xorwf	doMenu@m+1,w
  2950  0454  1D03               	skipz
  2951  0455  2C58               	goto	u2215
  2952  0456  0856               	movf	_minute,w
  2953  0457  063B               	xorwf	doMenu@m,w
  2954  0458                     u2215:	
  2955  0458  1D03               	skipz
  2956  0459  2C62               	goto	l2546
  2957  045A  085D               	movf	_seconds+1,w
  2958  045B  063E               	xorwf	doMenu@s+1,w
  2959  045C  1D03               	skipz
  2960  045D  2C60               	goto	u2225
  2961  045E  085C               	movf	_seconds,w
  2962  045F  063D               	xorwf	doMenu@s,w
  2963  0460                     u2225:	
  2964  0460  1903               	skipnz
  2965  0461  2D0F               	goto	l2552
  2966  0462                     l2546:	
  2967                           
  2968                           ;LCDTime.c: 259: {
  2969                           ;LCDTime.c: 260: h = ((hour / 10) << 4) + hour % 10 ;
  2970  0462  300A               	movlw	10
  2971  0463  00F0               	movwf	___awdiv@divisor
  2972  0464  3000               	movlw	0
  2973  0465  00F1               	movwf	___awdiv@divisor+1
  2974  0466  0855               	movf	_hour+1,w
  2975  0467  00F3               	movwf	___awdiv@dividend+1
  2976  0468  0854               	movf	_hour,w
  2977  0469  00F2               	movwf	___awdiv@dividend
  2978  046A  120A  158A  24FC  120A  118A  	fcall	___awdiv
  2979  046F  0870               	movf	?___awdiv,w
  2980  0470  1283               	bcf	3,5	;RP0=0, select bank0
  2981  0471  1303               	bcf	3,6	;RP1=0, select bank0
  2982  0472  00B6               	movwf	??_doMenu
  2983  0473  0871               	movf	?___awdiv+1,w
  2984  0474  00B7               	movwf	??_doMenu+1
  2985  0475  0EB6               	swapf	??_doMenu,f
  2986  0476  0EB7               	swapf	??_doMenu+1,f
  2987  0477  30F0               	movlw	240
  2988  0478  05B7               	andwf	??_doMenu+1,f
  2989  0479  0836               	movf	??_doMenu,w
  2990  047A  390F               	andlw	15
  2991  047B  04B7               	iorwf	??_doMenu+1,f
  2992  047C  30F0               	movlw	240
  2993  047D  05B6               	andwf	??_doMenu,f
  2994  047E  300A               	movlw	10
  2995  047F  00F0               	movwf	___awmod@divisor
  2996  0480  3000               	movlw	0
  2997  0481  00F1               	movwf	___awmod@divisor+1
  2998  0482  0855               	movf	_hour+1,w
  2999  0483  00F3               	movwf	___awmod@dividend+1
  3000  0484  0854               	movf	_hour,w
  3001  0485  00F2               	movwf	___awmod@dividend
  3002  0486  120A  158A  230F  120A  118A  	fcall	___awmod
  3003  048B  0870               	movf	?___awmod,w
  3004  048C  1283               	bcf	3,5	;RP0=0, select bank0
  3005  048D  1303               	bcf	3,6	;RP1=0, select bank0
  3006  048E  0736               	addwf	??_doMenu,w
  3007  048F  00B9               	movwf	doMenu@h
  3008  0490  0871               	movf	?___awmod+1,w
  3009  0491  1803               	skipnc
  3010  0492  0A71               	incf	?___awmod+1,w
  3011  0493  0737               	addwf	??_doMenu+1,w
  3012  0494  00BA               	movwf	doMenu@h+1
  3013                           
  3014                           ;LCDTime.c: 261: m = ((minute / 10) << 4) + minute % 10 ;
  3015  0495  300A               	movlw	10
  3016  0496  00F0               	movwf	___awdiv@divisor
  3017  0497  3000               	movlw	0
  3018  0498  00F1               	movwf	___awdiv@divisor+1
  3019  0499  0857               	movf	_minute+1,w
  3020  049A  00F3               	movwf	___awdiv@dividend+1
  3021  049B  0856               	movf	_minute,w
  3022  049C  00F2               	movwf	___awdiv@dividend
  3023  049D  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3024  04A2  0870               	movf	?___awdiv,w
  3025  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  3026  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  3027  04A5  00B6               	movwf	??_doMenu
  3028  04A6  0871               	movf	?___awdiv+1,w
  3029  04A7  00B7               	movwf	??_doMenu+1
  3030  04A8  0EB6               	swapf	??_doMenu,f
  3031  04A9  0EB7               	swapf	??_doMenu+1,f
  3032  04AA  30F0               	movlw	240
  3033  04AB  05B7               	andwf	??_doMenu+1,f
  3034  04AC  0836               	movf	??_doMenu,w
  3035  04AD  390F               	andlw	15
  3036  04AE  04B7               	iorwf	??_doMenu+1,f
  3037  04AF  30F0               	movlw	240
  3038  04B0  05B6               	andwf	??_doMenu,f
  3039  04B1  300A               	movlw	10
  3040  04B2  00F0               	movwf	___awmod@divisor
  3041  04B3  3000               	movlw	0
  3042  04B4  00F1               	movwf	___awmod@divisor+1
  3043  04B5  0857               	movf	_minute+1,w
  3044  04B6  00F3               	movwf	___awmod@dividend+1
  3045  04B7  0856               	movf	_minute,w
  3046  04B8  00F2               	movwf	___awmod@dividend
  3047  04B9  120A  158A  230F  120A  118A  	fcall	___awmod
  3048  04BE  0870               	movf	?___awmod,w
  3049  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  3050  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  3051  04C1  0736               	addwf	??_doMenu,w
  3052  04C2  00BB               	movwf	doMenu@m
  3053  04C3  0871               	movf	?___awmod+1,w
  3054  04C4  1803               	skipnc
  3055  04C5  0A71               	incf	?___awmod+1,w
  3056  04C6  0737               	addwf	??_doMenu+1,w
  3057  04C7  00BC               	movwf	doMenu@m+1
  3058                           
  3059                           ;LCDTime.c: 262: s = ((seconds / 10) << 4) + seconds % 10 ;
  3060  04C8  300A               	movlw	10
  3061  04C9  00F0               	movwf	___awdiv@divisor
  3062  04CA  3000               	movlw	0
  3063  04CB  00F1               	movwf	___awdiv@divisor+1
  3064  04CC  085D               	movf	_seconds+1,w
  3065  04CD  00F3               	movwf	___awdiv@dividend+1
  3066  04CE  085C               	movf	_seconds,w
  3067  04CF  00F2               	movwf	___awdiv@dividend
  3068  04D0  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3069  04D5  0870               	movf	?___awdiv,w
  3070  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  3071  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  3072  04D8  00B6               	movwf	??_doMenu
  3073  04D9  0871               	movf	?___awdiv+1,w
  3074  04DA  00B7               	movwf	??_doMenu+1
  3075  04DB  0EB6               	swapf	??_doMenu,f
  3076  04DC  0EB7               	swapf	??_doMenu+1,f
  3077  04DD  30F0               	movlw	240
  3078  04DE  05B7               	andwf	??_doMenu+1,f
  3079  04DF  0836               	movf	??_doMenu,w
  3080  04E0  390F               	andlw	15
  3081  04E1  04B7               	iorwf	??_doMenu+1,f
  3082  04E2  30F0               	movlw	240
  3083  04E3  05B6               	andwf	??_doMenu,f
  3084  04E4  300A               	movlw	10
  3085  04E5  00F0               	movwf	___awmod@divisor
  3086  04E6  3000               	movlw	0
  3087  04E7  00F1               	movwf	___awmod@divisor+1
  3088  04E8  085D               	movf	_seconds+1,w
  3089  04E9  00F3               	movwf	___awmod@dividend+1
  3090  04EA  085C               	movf	_seconds,w
  3091  04EB  00F2               	movwf	___awmod@dividend
  3092  04EC  120A  158A  230F  120A  118A  	fcall	___awmod
  3093  04F1  0870               	movf	?___awmod,w
  3094  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  3095  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  3096  04F4  0736               	addwf	??_doMenu,w
  3097  04F5  00BD               	movwf	doMenu@s
  3098  04F6  0871               	movf	?___awmod+1,w
  3099  04F7  1803               	skipnc
  3100  04F8  0A71               	incf	?___awmod+1,w
  3101  04F9  0737               	addwf	??_doMenu+1,w
  3102  04FA  00BE               	movwf	doMenu@s+1
  3103                           
  3104                           ;LCDTime.c: 264: DS1307_SetTime(h,m,s) ;
  3105  04FB  083B               	movf	doMenu@m,w
  3106  04FC  00B6               	movwf	??_doMenu
  3107  04FD  0836               	movf	??_doMenu,w
  3108  04FE  00F2               	movwf	DS1307_SetTime@mm
  3109  04FF  083D               	movf	doMenu@s,w
  3110  0500  00B7               	movwf	??_doMenu+1
  3111  0501  0837               	movf	??_doMenu+1,w
  3112  0502  00F3               	movwf	DS1307_SetTime@ss
  3113  0503  0839               	movf	doMenu@h,w
  3114  0504  120A  158A  220B  120A  118A  	fcall	_DS1307_SetTime
  3115                           
  3116                           ;LCDTime.c: 266: runningMinute = minute ;
  3117  0509  1283               	bcf	3,5	;RP0=0, select bank0
  3118  050A  1303               	bcf	3,6	;RP1=0, select bank0
  3119  050B  0857               	movf	_minute+1,w
  3120  050C  00DB               	movwf	_runningMinute+1
  3121  050D  0856               	movf	_minute,w
  3122  050E  00DA               	movwf	_runningMinute
  3123  050F                     l2552:	
  3124                           ;LCDTime.c: 267: }
  3125                           ;LCDTime.c: 269: while(bButton)
  3126                           
  3127  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3128  0510  1303               	bcf	3,6	;RP1=0, select bank0
  3129  0511  0864               	movf	_bButton,w
  3130  0512  1903               	btfsc	3,2
  3131  0513  2D1A               	goto	l2554
  3132                           
  3133                           ;LCDTime.c: 270: readInputs();
  3134  0514  120A  118A  2005  120A  118A  	fcall	_readInputs
  3135  0519  2D0F               	goto	l2552
  3136  051A                     l2554:	
  3137                           
  3138                           ;LCDTime.c: 271: }
  3139                           ;LCDTime.c: 274: if (menuFunction == 1 | menuFunction == 3)
  3140  051A  0361               	decf	_menuFunction,w
  3141  051B  1903               	btfsc	3,2
  3142  051C  2D21               	goto	l2558
  3143  051D  3003               	movlw	3
  3144  051E  0661               	xorwf	_menuFunction,w
  3145  051F  1D03               	btfss	3,2
  3146  0520  0008               	return
  3147  0521                     l2558:	
  3148                           
  3149                           ;LCDTime.c: 275: {
  3150                           ;LCDTime.c: 276: int n,d,m,y ;
  3151                           ;LCDTime.c: 278: n = day ;
  3152  0521  0853               	movf	_day+1,w
  3153  0522  00C0               	movwf	doMenu@n+1
  3154  0523  0852               	movf	_day,w
  3155  0524  00BF               	movwf	doMenu@n
  3156                           
  3157                           ;LCDTime.c: 279: d = date ;
  3158  0525  0851               	movf	_date+1,w
  3159  0526  00C2               	movwf	doMenu@d+1
  3160  0527  0850               	movf	_date,w
  3161  0528  00C1               	movwf	doMenu@d
  3162                           
  3163                           ;LCDTime.c: 280: m = month ;
  3164  0529  0859               	movf	_month+1,w
  3165  052A  00C4               	movwf	doMenu@m_311+1
  3166  052B  0858               	movf	_month,w
  3167  052C  00C3               	movwf	doMenu@m_311
  3168                           
  3169                           ;LCDTime.c: 281: y = year ;
  3170  052D  085F               	movf	_year+1,w
  3171  052E  00C6               	movwf	doMenu@y+1
  3172  052F  085E               	movf	_year,w
  3173  0530  00C5               	movwf	doMenu@y
  3174                           
  3175                           ;LCDTime.c: 283: (LCDByte(0b00000001,0));
  3176  0531  01F5               	clrf	LCDByte@isdata
  3177  0532  3001               	movlw	1
  3178  0533  120A  158A  235A  120A  118A  	fcall	_LCDByte
  3179                           
  3180                           ;LCDTime.c: 284: LCDWriteString(setText);
  3181  0538  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3182  0539  00FC               	movwf	LCDWriteString@msg
  3183  053A  3080               	movlw	128
  3184  053B  00FD               	movwf	LCDWriteString@msg+1
  3185  053C  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  3186                           
  3187                           ;LCDTime.c: 285: LCDWriteString("Year");
  3188  0541  3093               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3189  0542  00FC               	movwf	LCDWriteString@msg
  3190  0543  3080               	movlw	128
  3191  0544  00FD               	movwf	LCDWriteString@msg+1
  3192  0545  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  3193  054A                     L5:	
  3194                           
  3195                           ;LCDTime.c: 287: LCDGotoXY(0,1) ;
  3196  054A  01FC               	clrf	LCDGotoXY@y
  3197  054B  0AFC               	incf	LCDGotoXY@y,f
  3198  054C  3000               	movlw	0
  3199  054D  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  3200                           
  3201                           ;LCDTime.c: 288: showDate();
  3202  0552  120A  158A  2613  120A  118A  	fcall	_showDate
  3203  0557                     l2592:	
  3204                           ;LCDTime.c: 290: while(!bButton)
  3205                           
  3206  0557  1283               	bcf	3,5	;RP0=0, select bank0
  3207  0558  1303               	bcf	3,6	;RP1=0, select bank0
  3208  0559  0864               	movf	_bButton,w
  3209  055A  1D03               	btfss	3,2
  3210  055B  2D95               	goto	l2596
  3211                           
  3212                           ;LCDTime.c: 291: {
  3213                           ;LCDTime.c: 292: readInputs();
  3214  055C  120A  118A  2005  120A  118A  	fcall	_readInputs
  3215                           
  3216                           ;LCDTime.c: 294: if (state & 0x10)
  3217  0561  1283               	bcf	3,5	;RP0=0, select bank0
  3218  0562  1303               	bcf	3,6	;RP1=0, select bank0
  3219  0563  1E65               	btfss	_state,4
  3220  0564  2D7B               	goto	l358
  3221                           
  3222                           ;LCDTime.c: 295: {
  3223                           ;LCDTime.c: 296: year++;
  3224  0565  3001               	movlw	1
  3225  0566  07DE               	addwf	_year,f
  3226  0567  1803               	skipnc
  3227  0568  0ADF               	incf	_year+1,f
  3228  0569  3000               	movlw	0
  3229  056A  07DF               	addwf	_year+1,f
  3230                           
  3231                           ;LCDTime.c: 297: if (year > 99)
  3232  056B  085F               	movf	_year+1,w
  3233  056C  3A80               	xorlw	128
  3234  056D  00FF               	movwf	127
  3235  056E  3080               	movlw	128
  3236  056F  027F               	subwf	127,w
  3237  0570  1D03               	skipz
  3238  0571  2D74               	goto	u2275
  3239  0572  3064               	movlw	100
  3240  0573  025E               	subwf	_year,w
  3241  0574                     u2275:	
  3242  0574  1C03               	skipc
  3243  0575  2D89               	goto	l2586
  3244                           
  3245                           ;LCDTime.c: 298: year = 0 ;
  3246  0576  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0577  1303               	bcf	3,6	;RP1=0, select bank0
  3248  0578  01DE               	clrf	_year
  3249  0579  01DF               	clrf	_year+1
  3250                           
  3251                           ;LCDTime.c: 299: }
  3252  057A  2D89               	goto	l2586
  3253  057B                     l358:	
  3254                           
  3255                           ;LCDTime.c: 300: else if (state & 0x20)
  3256  057B  1EE5               	btfss	_state,5
  3257  057C  2D89               	goto	l2586
  3258                           
  3259                           ;LCDTime.c: 301: {
  3260                           ;LCDTime.c: 302: year--;
  3261  057D  30FF               	movlw	255
  3262  057E  07DE               	addwf	_year,f
  3263  057F  1803               	skipnc
  3264  0580  0ADF               	incf	_year+1,f
  3265  0581  30FF               	movlw	255
  3266  0582  07DF               	addwf	_year+1,f
  3267                           
  3268                           ;LCDTime.c: 303: if (year < 0)
  3269  0583  1FDF               	btfss	_year+1,7
  3270  0584  2D89               	goto	l2586
  3271                           
  3272                           ;LCDTime.c: 304: date = 99 ;
  3273  0585  3063               	movlw	99
  3274  0586  00D0               	movwf	_date
  3275  0587  3000               	movlw	0
  3276  0588  00D1               	movwf	_date+1
  3277  0589                     l2586:	
  3278                           
  3279                           ;LCDTime.c: 305: }
  3280                           ;LCDTime.c: 307: if (state & 0x30)
  3281  0589  1283               	bcf	3,5	;RP0=0, select bank0
  3282  058A  1303               	bcf	3,6	;RP1=0, select bank0
  3283  058B  0865               	movf	_state,w
  3284  058C  3930               	andlw	48
  3285  058D  1903               	btfsc	3,2
  3286  058E  2D57               	goto	l2592
  3287  058F  2D4A               	goto	L5
  3288  0590                     l2594:	
  3289                           ;LCDTime.c: 311: }
  3290                           ;LCDTime.c: 312: }
  3291                           ;LCDTime.c: 314: while(bButton)
  3292                           
  3293                           ;LCDTime.c: 310: showDate();
  3294                           
  3295                           ;LCDTime.c: 308: {
  3296                           ;LCDTime.c: 309: LCDGotoXY(0,1) ;
  3297                           
  3298                           
  3299                           ;LCDTime.c: 315: readInputs();
  3300  0590  120A  118A  2005  120A  118A  	fcall	_readInputs
  3301  0595                     l2596:	
  3302  0595  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0596  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0597  0864               	movf	_bButton,w
  3305  0598  1D03               	btfss	3,2
  3306  0599  2D90               	goto	l2594
  3307                           
  3308                           ;LCDTime.c: 317: LCDGotoXY(0,0) ;
  3309  059A  01FC               	clrf	LCDGotoXY@y
  3310  059B  3000               	movlw	0
  3311  059C  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  3312                           
  3313                           ;LCDTime.c: 318: LCDWriteString(setText);
  3314  05A1  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3315  05A2  00FC               	movwf	LCDWriteString@msg
  3316  05A3  3080               	movlw	128
  3317  05A4  00FD               	movwf	LCDWriteString@msg+1
  3318  05A5  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  3319                           
  3320                           ;LCDTime.c: 319: LCDWriteString("Month");
  3321  05AA  3087               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3322  05AB  00FC               	movwf	LCDWriteString@msg
  3323  05AC  3080               	movlw	128
  3324  05AD  00FD               	movwf	LCDWriteString@msg+1
  3325  05AE  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  3326  05B3                     l2626:	
  3327                           ;LCDTime.c: 321: while(!bButton)
  3328                           
  3329  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  3330  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  3331  05B5  0864               	movf	_bButton,w
  3332  05B6  1D03               	btfss	3,2
  3333  05B7  2DFF               	goto	l2630
  3334                           
  3335                           ;LCDTime.c: 322: {
  3336                           ;LCDTime.c: 323: readInputs();
  3337  05B8  120A  118A  2005  120A  118A  	fcall	_readInputs
  3338                           
  3339                           ;LCDTime.c: 325: if (state & 0x10)
  3340  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  3341  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  3342  05BF  1E65               	btfss	_state,4
  3343  05C0  2DD6               	goto	l370
  3344                           
  3345                           ;LCDTime.c: 326: {
  3346                           ;LCDTime.c: 327: month++;
  3347  05C1  3001               	movlw	1
  3348  05C2  07D8               	addwf	_month,f
  3349  05C3  1803               	skipnc
  3350  05C4  0AD9               	incf	_month+1,f
  3351  05C5  3000               	movlw	0
  3352  05C6  07D9               	addwf	_month+1,f
  3353                           
  3354                           ;LCDTime.c: 328: if (month > 12)
  3355  05C7  0859               	movf	_month+1,w
  3356  05C8  3A80               	xorlw	128
  3357  05C9  00FF               	movwf	127
  3358  05CA  3080               	movlw	128
  3359  05CB  027F               	subwf	127,w
  3360  05CC  1D03               	skipz
  3361  05CD  2DD0               	goto	u2345
  3362  05CE  300D               	movlw	13
  3363  05CF  0258               	subwf	_month,w
  3364  05D0                     u2345:	
  3365  05D0  1C03               	skipc
  3366  05D1  2DE6               	goto	l2620
  3367                           
  3368                           ;LCDTime.c: 329: month = 1 ;
  3369  05D2  3001               	movlw	1
  3370  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  3371  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  3372  05D5  2DE3               	goto	L1
  3373  05D6                     l370:	
  3374                           ;LCDTime.c: 330: }
  3375                           
  3376                           
  3377                           ;LCDTime.c: 331: else if (state & 0x20)
  3378  05D6  1EE5               	btfss	_state,5
  3379  05D7  2DE6               	goto	l2620
  3380                           
  3381                           ;LCDTime.c: 332: {
  3382                           ;LCDTime.c: 333: month--;
  3383  05D8  30FF               	movlw	255
  3384  05D9  07D8               	addwf	_month,f
  3385  05DA  1803               	skipnc
  3386  05DB  0AD9               	incf	_month+1,f
  3387  05DC  30FF               	movlw	255
  3388  05DD  07D9               	addwf	_month+1,f
  3389                           
  3390                           ;LCDTime.c: 334: if (!month)
  3391  05DE  0858               	movf	_month,w
  3392  05DF  0459               	iorwf	_month+1,w
  3393  05E0  1D03               	btfss	3,2
  3394  05E1  2DE6               	goto	l2620
  3395                           
  3396                           ;LCDTime.c: 335: month = 12 ;
  3397  05E2  300C               	movlw	12
  3398  05E3                     L1:	
  3399  05E3  00D8               	movwf	_month
  3400  05E4  3000               	movlw	0
  3401  05E5  00D9               	movwf	_month+1
  3402  05E6                     l2620:	
  3403                           
  3404                           ;LCDTime.c: 336: }
  3405                           ;LCDTime.c: 338: if (state & 0x30)
  3406  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  3407  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  3408  05E8  0865               	movf	_state,w
  3409  05E9  3930               	andlw	48
  3410  05EA  1903               	btfsc	3,2
  3411  05EB  2DB3               	goto	l2626
  3412                           
  3413                           ;LCDTime.c: 339: {
  3414                           ;LCDTime.c: 340: LCDGotoXY(0,1) ;
  3415  05EC  01FC               	clrf	LCDGotoXY@y
  3416  05ED  0AFC               	incf	LCDGotoXY@y,f
  3417  05EE  3000               	movlw	0
  3418  05EF  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  3419                           
  3420                           ;LCDTime.c: 341: showDate();
  3421  05F4  120A  158A  2613  120A  118A  	fcall	_showDate
  3422  05F9  2DB3               	goto	l2626
  3423  05FA                     l2628:	
  3424                           ;LCDTime.c: 342: }
  3425                           ;LCDTime.c: 343: }
  3426                           ;LCDTime.c: 345: while(bButton)
  3427                           
  3428                           
  3429                           ;LCDTime.c: 346: readInputs();
  3430  05FA  120A  118A  2005  120A  118A  	fcall	_readInputs
  3431  05FF                     l2630:	
  3432  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0600  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0601  0864               	movf	_bButton,w
  3435  0602  1D03               	btfss	3,2
  3436  0603  2DFA               	goto	l2628
  3437                           
  3438                           ;LCDTime.c: 348: LCDGotoXY(0,0) ;
  3439  0604  01FC               	clrf	LCDGotoXY@y
  3440  0605  3000               	movlw	0
  3441  0606  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  3442                           
  3443                           ;LCDTime.c: 349: LCDWriteString(setText);
  3444  060B  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3445  060C  00FC               	movwf	LCDWriteString@msg
  3446  060D  3080               	movlw	128
  3447  060E  00FD               	movwf	LCDWriteString@msg+1
  3448  060F  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  3449                           
  3450                           ;LCDTime.c: 350: LCDWriteString("Date ");
  3451  0614  3081               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  3452  0615  00FC               	movwf	LCDWriteString@msg
  3453  0616  3080               	movlw	128
  3454  0617  00FD               	movwf	LCDWriteString@msg+1
  3455  0618  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  3456  061D                     l2660:	
  3457                           ;LCDTime.c: 352: while(!bButton)
  3458                           
  3459  061D  1283               	bcf	3,5	;RP0=0, select bank0
  3460  061E  1303               	bcf	3,6	;RP1=0, select bank0
  3461  061F  0864               	movf	_bButton,w
  3462  0620  1D03               	btfss	3,2
  3463  0621  2E7C               	goto	l2664
  3464                           
  3465                           ;LCDTime.c: 353: {
  3466                           ;LCDTime.c: 354: readInputs();
  3467  0622  120A  118A  2005  120A  118A  	fcall	_readInputs
  3468                           
  3469                           ;LCDTime.c: 356: if (state & 0x10)
  3470  0627  1283               	bcf	3,5	;RP0=0, select bank0
  3471  0628  1303               	bcf	3,6	;RP1=0, select bank0
  3472  0629  1E65               	btfss	_state,4
  3473  062A  2E4A               	goto	l382
  3474                           
  3475                           ;LCDTime.c: 357: {
  3476                           ;LCDTime.c: 358: date++;
  3477  062B  3001               	movlw	1
  3478  062C  07D0               	addwf	_date,f
  3479  062D  1803               	skipnc
  3480  062E  0AD1               	incf	_date+1,f
  3481  062F  3000               	movlw	0
  3482  0630  07D1               	addwf	_date+1,f
  3483                           
  3484                           ;LCDTime.c: 359: if (date > monthDays[month-1])
  3485  0631  0858               	movf	_month,w
  3486  0632  3EFF               	addlw	255
  3487  0633  3E33               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3488  0634  0084               	movwf	4
  3489  0635  120A  158A  200A  120A  118A  	fcall	stringdir
  3490  063A  00B6               	movwf	??_doMenu
  3491  063B  0851               	movf	_date+1,w
  3492  063C  3A80               	xorlw	128
  3493  063D  3C80               	sublw	128
  3494  063E  1D03               	skipz
  3495  063F  2E42               	goto	u2415
  3496  0640  0850               	movf	_date,w
  3497  0641  0236               	subwf	??_doMenu,w
  3498  0642                     u2415:	
  3499  0642  1803               	skipnc
  3500  0643  2E63               	goto	l2654
  3501                           
  3502                           ;LCDTime.c: 360: date = 1 ;
  3503  0644  3001               	movlw	1
  3504  0645  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0646  1303               	bcf	3,6	;RP1=0, select bank0
  3506  0647  00D0               	movwf	_date
  3507  0648  3000               	movlw	0
  3508  0649  2E62               	goto	L2
  3509  064A                     l382:	
  3510                           ;LCDTime.c: 361: }
  3511                           
  3512                           
  3513                           ;LCDTime.c: 362: else if (state & 0x20)
  3514  064A  1EE5               	btfss	_state,5
  3515  064B  2E63               	goto	l2654
  3516                           
  3517                           ;LCDTime.c: 363: {
  3518                           ;LCDTime.c: 364: date--;
  3519  064C  30FF               	movlw	255
  3520  064D  07D0               	addwf	_date,f
  3521  064E  1803               	skipnc
  3522  064F  0AD1               	incf	_date+1,f
  3523  0650  30FF               	movlw	255
  3524  0651  07D1               	addwf	_date+1,f
  3525                           
  3526                           ;LCDTime.c: 365: if (date < 0)
  3527  0652  1FD1               	btfss	_date+1,7
  3528  0653  2E63               	goto	l2654
  3529                           
  3530                           ;LCDTime.c: 366: date = monthDays[month-1] ;
  3531  0654  0858               	movf	_month,w
  3532  0655  3EFF               	addlw	255
  3533  0656  3E33               	addlw	low ((_monthDays-__stringbase)| (0+32768))
  3534  0657  0084               	movwf	4
  3535  0658  120A  158A  200A  120A  118A  	fcall	stringdir
  3536  065D  00B6               	movwf	??_doMenu
  3537  065E  01B7               	clrf	??_doMenu+1
  3538  065F  0836               	movf	??_doMenu,w
  3539  0660  00D0               	movwf	_date
  3540  0661  0837               	movf	??_doMenu+1,w
  3541  0662                     L2:	
  3542  0662  00D1               	movwf	_date+1
  3543  0663                     l2654:	
  3544                           
  3545                           ;LCDTime.c: 367: }
  3546                           ;LCDTime.c: 369: if (state & 0x30)
  3547  0663  1283               	bcf	3,5	;RP0=0, select bank0
  3548  0664  1303               	bcf	3,6	;RP1=0, select bank0
  3549  0665  0865               	movf	_state,w
  3550  0666  3930               	andlw	48
  3551  0667  1903               	btfsc	3,2
  3552  0668  2E1D               	goto	l2660
  3553                           
  3554                           ;LCDTime.c: 370: {
  3555                           ;LCDTime.c: 371: LCDGotoXY(0,1) ;
  3556  0669  01FC               	clrf	LCDGotoXY@y
  3557  066A  0AFC               	incf	LCDGotoXY@y,f
  3558  066B  3000               	movlw	0
  3559  066C  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  3560                           
  3561                           ;LCDTime.c: 372: showDate();
  3562  0671  120A  158A  2613  120A  118A  	fcall	_showDate
  3563  0676  2E1D               	goto	l2660
  3564  0677                     l2662:	
  3565                           ;LCDTime.c: 373: }
  3566                           ;LCDTime.c: 374: }
  3567                           ;LCDTime.c: 376: while(bButton)
  3568                           
  3569                           
  3570                           ;LCDTime.c: 377: readInputs();
  3571  0677  120A  118A  2005  120A  118A  	fcall	_readInputs
  3572  067C                     l2664:	
  3573  067C  1283               	bcf	3,5	;RP0=0, select bank0
  3574  067D  1303               	bcf	3,6	;RP1=0, select bank0
  3575  067E  0864               	movf	_bButton,w
  3576  067F  1D03               	btfss	3,2
  3577  0680  2E77               	goto	l2662
  3578                           
  3579                           ;LCDTime.c: 379: LCDGotoXY(0,0) ;
  3580  0681  01FC               	clrf	LCDGotoXY@y
  3581  0682  3000               	movlw	0
  3582  0683  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  3583                           
  3584                           ;LCDTime.c: 380: LCDWriteString(setText);
  3585  0688  303F               	movlw	(low ((_setText-__stringbase)| (0+32768)))& (0+255)
  3586  0689  00FC               	movwf	LCDWriteString@msg
  3587  068A  3080               	movlw	128
  3588  068B  00FD               	movwf	LCDWriteString@msg+1
  3589  068C  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  3590                           
  3591                           ;LCDTime.c: 381: LCDWriteString("Day  ");
  3592  0691  307B               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  3593  0692  00FC               	movwf	LCDWriteString@msg
  3594  0693  3080               	movlw	128
  3595  0694  00FD               	movwf	LCDWriteString@msg+1
  3596  0695  120A  158A  2199  120A  118A  	fcall	_LCDWriteString
  3597  069A                     l2694:	
  3598                           ;LCDTime.c: 383: while(!bButton)
  3599                           
  3600  069A  1283               	bcf	3,5	;RP0=0, select bank0
  3601  069B  1303               	bcf	3,6	;RP1=0, select bank0
  3602  069C  0864               	movf	_bButton,w
  3603  069D  1D03               	btfss	3,2
  3604  069E  2EDF               	goto	l2696
  3605                           
  3606                           ;LCDTime.c: 384: {
  3607                           ;LCDTime.c: 385: readInputs();
  3608  069F  120A  118A  2005  120A  118A  	fcall	_readInputs
  3609                           
  3610                           ;LCDTime.c: 387: if (state & 0x10)
  3611  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  3612  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  3613  06A6  1E65               	btfss	_state,4
  3614  06A7  2EBD               	goto	l394
  3615                           
  3616                           ;LCDTime.c: 388: {
  3617                           ;LCDTime.c: 389: day++;
  3618  06A8  3001               	movlw	1
  3619  06A9  07D2               	addwf	_day,f
  3620  06AA  1803               	skipnc
  3621  06AB  0AD3               	incf	_day+1,f
  3622  06AC  3000               	movlw	0
  3623  06AD  07D3               	addwf	_day+1,f
  3624                           
  3625                           ;LCDTime.c: 390: if (day > 7)
  3626  06AE  0853               	movf	_day+1,w
  3627  06AF  3A80               	xorlw	128
  3628  06B0  00FF               	movwf	127
  3629  06B1  3080               	movlw	128
  3630  06B2  027F               	subwf	127,w
  3631  06B3  1D03               	skipz
  3632  06B4  2EB7               	goto	u2485
  3633  06B5  3008               	movlw	8
  3634  06B6  0252               	subwf	_day,w
  3635  06B7                     u2485:	
  3636  06B7  1C03               	skipc
  3637  06B8  2ECB               	goto	l2688
  3638                           
  3639                           ;LCDTime.c: 391: day = 1 ;
  3640  06B9  3001               	movlw	1
  3641  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  3642  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  3643  06BC  2EC8               	goto	L3
  3644  06BD                     l394:	
  3645                           ;LCDTime.c: 392: }
  3646                           
  3647                           
  3648                           ;LCDTime.c: 393: else if (state & 0x20)
  3649  06BD  1EE5               	btfss	_state,5
  3650  06BE  2ECB               	goto	l2688
  3651                           
  3652                           ;LCDTime.c: 394: {
  3653                           ;LCDTime.c: 395: day--;
  3654  06BF  30FF               	movlw	255
  3655  06C0  07D2               	addwf	_day,f
  3656  06C1  1803               	skipnc
  3657  06C2  0AD3               	incf	_day+1,f
  3658  06C3  30FF               	movlw	255
  3659  06C4  07D3               	addwf	_day+1,f
  3660                           
  3661                           ;LCDTime.c: 396: if (day < 0)
  3662  06C5  1FD3               	btfss	_day+1,7
  3663  06C6  2ECB               	goto	l2688
  3664                           
  3665                           ;LCDTime.c: 397: day = 7 ;
  3666  06C7  3007               	movlw	7
  3667  06C8                     L3:	
  3668  06C8  00D2               	movwf	_day
  3669  06C9  3000               	movlw	0
  3670  06CA  00D3               	movwf	_day+1
  3671  06CB                     l2688:	
  3672                           
  3673                           ;LCDTime.c: 398: }
  3674                           ;LCDTime.c: 400: if (state & 0x30)
  3675  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3676  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3677  06CD  0865               	movf	_state,w
  3678  06CE  3930               	andlw	48
  3679  06CF  1903               	btfsc	3,2
  3680  06D0  2E9A               	goto	l2694
  3681                           
  3682                           ;LCDTime.c: 401: {
  3683                           ;LCDTime.c: 402: LCDGotoXY(0,1) ;
  3684  06D1  01FC               	clrf	LCDGotoXY@y
  3685  06D2  0AFC               	incf	LCDGotoXY@y,f
  3686  06D3  3000               	movlw	0
  3687  06D4  120A  158A  21BE  120A  118A  	fcall	_LCDGotoXY
  3688                           
  3689                           ;LCDTime.c: 403: showDate();
  3690  06D9  120A  158A  2613  120A  118A  	fcall	_showDate
  3691  06DE  2E9A               	goto	l2694
  3692  06DF                     l2696:	
  3693                           
  3694                           ;LCDTime.c: 404: }
  3695                           ;LCDTime.c: 405: }
  3696                           ;LCDTime.c: 407: if (n != day || d != date || m != month || y != year)
  3697  06DF  0853               	movf	_day+1,w
  3698  06E0  0640               	xorwf	doMenu@n+1,w
  3699  06E1  1D03               	skipz
  3700  06E2  2EE5               	goto	u2535
  3701  06E3  0852               	movf	_day,w
  3702  06E4  063F               	xorwf	doMenu@n,w
  3703  06E5                     u2535:	
  3704  06E5  1D03               	skipz
  3705  06E6  2EFF               	goto	l2704
  3706  06E7  0851               	movf	_date+1,w
  3707  06E8  0642               	xorwf	doMenu@d+1,w
  3708  06E9  1D03               	skipz
  3709  06EA  2EED               	goto	u2545
  3710  06EB  0850               	movf	_date,w
  3711  06EC  0641               	xorwf	doMenu@d,w
  3712  06ED                     u2545:	
  3713  06ED  1D03               	skipz
  3714  06EE  2EFF               	goto	l2704
  3715  06EF  0859               	movf	_month+1,w
  3716  06F0  0644               	xorwf	doMenu@m_311+1,w
  3717  06F1  1D03               	skipz
  3718  06F2  2EF5               	goto	u2555
  3719  06F3  0858               	movf	_month,w
  3720  06F4  0643               	xorwf	doMenu@m_311,w
  3721  06F5                     u2555:	
  3722  06F5  1D03               	skipz
  3723  06F6  2EFF               	goto	l2704
  3724  06F7  085F               	movf	_year+1,w
  3725  06F8  0646               	xorwf	doMenu@y+1,w
  3726  06F9  1D03               	skipz
  3727  06FA  2EFD               	goto	u2565
  3728  06FB  085E               	movf	_year,w
  3729  06FC  0645               	xorwf	doMenu@y,w
  3730  06FD                     u2565:	
  3731  06FD  1903               	skipnz
  3732  06FE  2FDD               	goto	l2708
  3733  06FF                     l2704:	
  3734                           
  3735                           ;LCDTime.c: 408: {
  3736                           ;LCDTime.c: 409: n = ((day / 10) << 4) + day % 10 ;
  3737  06FF  300A               	movlw	10
  3738  0700  00F0               	movwf	___awdiv@divisor
  3739  0701  3000               	movlw	0
  3740  0702  00F1               	movwf	___awdiv@divisor+1
  3741  0703  0853               	movf	_day+1,w
  3742  0704  00F3               	movwf	___awdiv@dividend+1
  3743  0705  0852               	movf	_day,w
  3744  0706  00F2               	movwf	___awdiv@dividend
  3745  0707  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3746  070C  0870               	movf	?___awdiv,w
  3747  070D  1283               	bcf	3,5	;RP0=0, select bank0
  3748  070E  1303               	bcf	3,6	;RP1=0, select bank0
  3749  070F  00B6               	movwf	??_doMenu
  3750  0710  0871               	movf	?___awdiv+1,w
  3751  0711  00B7               	movwf	??_doMenu+1
  3752  0712  0EB6               	swapf	??_doMenu,f
  3753  0713  0EB7               	swapf	??_doMenu+1,f
  3754  0714  30F0               	movlw	240
  3755  0715  05B7               	andwf	??_doMenu+1,f
  3756  0716  0836               	movf	??_doMenu,w
  3757  0717  390F               	andlw	15
  3758  0718  04B7               	iorwf	??_doMenu+1,f
  3759  0719  30F0               	movlw	240
  3760  071A  05B6               	andwf	??_doMenu,f
  3761  071B  300A               	movlw	10
  3762  071C  00F0               	movwf	___awmod@divisor
  3763  071D  3000               	movlw	0
  3764  071E  00F1               	movwf	___awmod@divisor+1
  3765  071F  0853               	movf	_day+1,w
  3766  0720  00F3               	movwf	___awmod@dividend+1
  3767  0721  0852               	movf	_day,w
  3768  0722  00F2               	movwf	___awmod@dividend
  3769  0723  120A  158A  230F  120A  118A  	fcall	___awmod
  3770  0728  0870               	movf	?___awmod,w
  3771  0729  1283               	bcf	3,5	;RP0=0, select bank0
  3772  072A  1303               	bcf	3,6	;RP1=0, select bank0
  3773  072B  0736               	addwf	??_doMenu,w
  3774  072C  00BF               	movwf	doMenu@n
  3775  072D  0871               	movf	?___awmod+1,w
  3776  072E  1803               	skipnc
  3777  072F  0A71               	incf	?___awmod+1,w
  3778  0730  0737               	addwf	??_doMenu+1,w
  3779  0731  00C0               	movwf	doMenu@n+1
  3780                           
  3781                           ;LCDTime.c: 410: d = ((date / 10) << 4) + date % 10 ;
  3782  0732  300A               	movlw	10
  3783  0733  00F0               	movwf	___awdiv@divisor
  3784  0734  3000               	movlw	0
  3785  0735  00F1               	movwf	___awdiv@divisor+1
  3786  0736  0851               	movf	_date+1,w
  3787  0737  00F3               	movwf	___awdiv@dividend+1
  3788  0738  0850               	movf	_date,w
  3789  0739  00F2               	movwf	___awdiv@dividend
  3790  073A  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3791  073F  0870               	movf	?___awdiv,w
  3792  0740  1283               	bcf	3,5	;RP0=0, select bank0
  3793  0741  1303               	bcf	3,6	;RP1=0, select bank0
  3794  0742  00B6               	movwf	??_doMenu
  3795  0743  0871               	movf	?___awdiv+1,w
  3796  0744  00B7               	movwf	??_doMenu+1
  3797  0745  0EB6               	swapf	??_doMenu,f
  3798  0746  0EB7               	swapf	??_doMenu+1,f
  3799  0747  30F0               	movlw	240
  3800  0748  05B7               	andwf	??_doMenu+1,f
  3801  0749  0836               	movf	??_doMenu,w
  3802  074A  390F               	andlw	15
  3803  074B  04B7               	iorwf	??_doMenu+1,f
  3804  074C  30F0               	movlw	240
  3805  074D  05B6               	andwf	??_doMenu,f
  3806  074E  300A               	movlw	10
  3807  074F  00F0               	movwf	___awmod@divisor
  3808  0750  3000               	movlw	0
  3809  0751  00F1               	movwf	___awmod@divisor+1
  3810  0752  0851               	movf	_date+1,w
  3811  0753  00F3               	movwf	___awmod@dividend+1
  3812  0754  0850               	movf	_date,w
  3813  0755  00F2               	movwf	___awmod@dividend
  3814  0756  120A  158A  230F  120A  118A  	fcall	___awmod
  3815  075B  0870               	movf	?___awmod,w
  3816  075C  1283               	bcf	3,5	;RP0=0, select bank0
  3817  075D  1303               	bcf	3,6	;RP1=0, select bank0
  3818  075E  0736               	addwf	??_doMenu,w
  3819  075F  00C1               	movwf	doMenu@d
  3820  0760  0871               	movf	?___awmod+1,w
  3821  0761  1803               	skipnc
  3822  0762  0A71               	incf	?___awmod+1,w
  3823  0763  0737               	addwf	??_doMenu+1,w
  3824  0764  00C2               	movwf	doMenu@d+1
  3825                           
  3826                           ;LCDTime.c: 411: m = ((month / 10) << 4) + month % 10 ;
  3827  0765  300A               	movlw	10
  3828  0766  00F0               	movwf	___awdiv@divisor
  3829  0767  3000               	movlw	0
  3830  0768  00F1               	movwf	___awdiv@divisor+1
  3831  0769  0859               	movf	_month+1,w
  3832  076A  00F3               	movwf	___awdiv@dividend+1
  3833  076B  0858               	movf	_month,w
  3834  076C  00F2               	movwf	___awdiv@dividend
  3835  076D  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3836  0772  0870               	movf	?___awdiv,w
  3837  0773  1283               	bcf	3,5	;RP0=0, select bank0
  3838  0774  1303               	bcf	3,6	;RP1=0, select bank0
  3839  0775  00B6               	movwf	??_doMenu
  3840  0776  0871               	movf	?___awdiv+1,w
  3841  0777  00B7               	movwf	??_doMenu+1
  3842  0778  0EB6               	swapf	??_doMenu,f
  3843  0779  0EB7               	swapf	??_doMenu+1,f
  3844  077A  30F0               	movlw	240
  3845  077B  05B7               	andwf	??_doMenu+1,f
  3846  077C  0836               	movf	??_doMenu,w
  3847  077D  390F               	andlw	15
  3848  077E  04B7               	iorwf	??_doMenu+1,f
  3849  077F  30F0               	movlw	240
  3850  0780  05B6               	andwf	??_doMenu,f
  3851  0781  300A               	movlw	10
  3852  0782  00F0               	movwf	___awmod@divisor
  3853  0783  3000               	movlw	0
  3854  0784  00F1               	movwf	___awmod@divisor+1
  3855  0785  0859               	movf	_month+1,w
  3856  0786  00F3               	movwf	___awmod@dividend+1
  3857  0787  0858               	movf	_month,w
  3858  0788  00F2               	movwf	___awmod@dividend
  3859  0789  120A  158A  230F  120A  118A  	fcall	___awmod
  3860  078E  0870               	movf	?___awmod,w
  3861  078F  1283               	bcf	3,5	;RP0=0, select bank0
  3862  0790  1303               	bcf	3,6	;RP1=0, select bank0
  3863  0791  0736               	addwf	??_doMenu,w
  3864  0792  00C3               	movwf	doMenu@m_311
  3865  0793  0871               	movf	?___awmod+1,w
  3866  0794  1803               	skipnc
  3867  0795  0A71               	incf	?___awmod+1,w
  3868  0796  0737               	addwf	??_doMenu+1,w
  3869  0797  00C4               	movwf	doMenu@m_311+1
  3870                           
  3871                           ;LCDTime.c: 412: y = ((year / 10) << 4) + year % 10 ;
  3872  0798  300A               	movlw	10
  3873  0799  00F0               	movwf	___awdiv@divisor
  3874  079A  3000               	movlw	0
  3875  079B  00F1               	movwf	___awdiv@divisor+1
  3876  079C  085F               	movf	_year+1,w
  3877  079D  00F3               	movwf	___awdiv@dividend+1
  3878  079E  085E               	movf	_year,w
  3879  079F  00F2               	movwf	___awdiv@dividend
  3880  07A0  120A  158A  24FC  120A  118A  	fcall	___awdiv
  3881  07A5  0870               	movf	?___awdiv,w
  3882  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  3883  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  3884  07A8  00B6               	movwf	??_doMenu
  3885  07A9  0871               	movf	?___awdiv+1,w
  3886  07AA  00B7               	movwf	??_doMenu+1
  3887  07AB  0EB6               	swapf	??_doMenu,f
  3888  07AC  0EB7               	swapf	??_doMenu+1,f
  3889  07AD  30F0               	movlw	240
  3890  07AE  05B7               	andwf	??_doMenu+1,f
  3891  07AF  0836               	movf	??_doMenu,w
  3892  07B0  390F               	andlw	15
  3893  07B1  04B7               	iorwf	??_doMenu+1,f
  3894  07B2  30F0               	movlw	240
  3895  07B3  05B6               	andwf	??_doMenu,f
  3896  07B4  300A               	movlw	10
  3897  07B5  00F0               	movwf	___awmod@divisor
  3898  07B6  3000               	movlw	0
  3899  07B7  00F1               	movwf	___awmod@divisor+1
  3900  07B8  085F               	movf	_year+1,w
  3901  07B9  00F3               	movwf	___awmod@dividend+1
  3902  07BA  085E               	movf	_year,w
  3903  07BB  00F2               	movwf	___awmod@dividend
  3904  07BC  120A  158A  230F  120A  118A  	fcall	___awmod
  3905  07C1  0870               	movf	?___awmod,w
  3906  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  3907  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  3908  07C4  0736               	addwf	??_doMenu,w
  3909  07C5  00C5               	movwf	doMenu@y
  3910  07C6  0871               	movf	?___awmod+1,w
  3911  07C7  1803               	skipnc
  3912  07C8  0A71               	incf	?___awmod+1,w
  3913  07C9  0737               	addwf	??_doMenu+1,w
  3914  07CA  00C6               	movwf	doMenu@y+1
  3915                           
  3916                           ;LCDTime.c: 414: DS1307_SetDate(n,d,m,y) ;
  3917  07CB  0841               	movf	doMenu@d,w
  3918  07CC  00B6               	movwf	??_doMenu
  3919  07CD  0836               	movf	??_doMenu,w
  3920  07CE  00F2               	movwf	DS1307_SetDate@dd
  3921  07CF  0843               	movf	doMenu@m_311,w
  3922  07D0  00B7               	movwf	??_doMenu+1
  3923  07D1  0837               	movf	??_doMenu+1,w
  3924  07D2  00F3               	movwf	DS1307_SetDate@mm
  3925  07D3  0845               	movf	doMenu@y,w
  3926  07D4  00B8               	movwf	??_doMenu+2
  3927  07D5  0838               	movf	??_doMenu+2,w
  3928  07D6  00F4               	movwf	DS1307_SetDate@yy
  3929  07D7  083F               	movf	doMenu@n,w
  3930  07D8  120A  158A  2233  120A  118A  	fcall	_DS1307_SetDate
  3931  07DD                     l2708:	
  3932                           ;LCDTime.c: 415: }
  3933                           ;LCDTime.c: 418: while(bButton)
  3934                           
  3935  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  3936  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  3937  07DF  0864               	movf	_bButton,w
  3938  07E0  1903               	btfsc	3,2
  3939  07E1  0008               	return
  3940                           
  3941                           ;LCDTime.c: 419: readInputs();
  3942  07E2  120A  118A  2005  120A  118A  	fcall	_readInputs
  3943  07E7  2FDD               	goto	l2708
  3944  07E8                     __end_of_doMenu:	
  3945                           
  3946                           	psect	text8
  3947  0AD3                     __ptext8:	
  3948 ;; *************** function _showTime *****************
  3949 ;; Defined at:
  3950 ;;		line 497 in file "LCDTime.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3964 ;;      Params:         0       0       0       0       0
  3965 ;;      Locals:         0       0       0       0       0
  3966 ;;      Temps:          0       1       0       0       0
  3967 ;;      Totals:         0       1       0       0       0
  3968 ;;Total ram usage:        1 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    4
  3971 ;; This function calls:
  3972 ;;		_LCDByte
  3973 ;;		_LCDWriteInt
  3974 ;; This function is called by:
  3975 ;;		_doMenu
  3976 ;;		_showClock
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _showTime
  3982  0AD3                     _showTime:	
  3983                           
  3984                           ;LCDTime.c: 499: LCDWriteInt(hour,2);
  3985                           
  3986                           ;incstack = 0
  3987                           ; Regs used in _showTime: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3988  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  3989  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  3990  0AD5  0855               	movf	_hour+1,w
  3991  0AD6  00A3               	movwf	LCDWriteInt@val+1
  3992  0AD7  0854               	movf	_hour,w
  3993  0AD8  00A2               	movwf	LCDWriteInt@val
  3994  0AD9  3002               	movlw	2
  3995  0ADA  00B3               	movwf	??_showTime
  3996  0ADB  0833               	movf	??_showTime,w
  3997  0ADC  00A4               	movwf	LCDWriteInt@field_length
  3998  0ADD  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  3999                           
  4000                           ;LCDTime.c: 500: (LCDByte(':',1)) ;
  4001  0AE2  01F5               	clrf	LCDByte@isdata
  4002  0AE3  0AF5               	incf	LCDByte@isdata,f
  4003  0AE4  303A               	movlw	58
  4004  0AE5  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4005                           
  4006                           ;LCDTime.c: 501: LCDWriteInt(minute,2);
  4007  0AEA  1283               	bcf	3,5	;RP0=0, select bank0
  4008  0AEB  1303               	bcf	3,6	;RP1=0, select bank0
  4009  0AEC  0857               	movf	_minute+1,w
  4010  0AED  00A3               	movwf	LCDWriteInt@val+1
  4011  0AEE  0856               	movf	_minute,w
  4012  0AEF  00A2               	movwf	LCDWriteInt@val
  4013  0AF0  3002               	movlw	2
  4014  0AF1  00B3               	movwf	??_showTime
  4015  0AF2  0833               	movf	??_showTime,w
  4016  0AF3  00A4               	movwf	LCDWriteInt@field_length
  4017  0AF4  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4018                           
  4019                           ;LCDTime.c: 502: (LCDByte(':',1)) ;
  4020  0AF9  01F5               	clrf	LCDByte@isdata
  4021  0AFA  0AF5               	incf	LCDByte@isdata,f
  4022  0AFB  303A               	movlw	58
  4023  0AFC  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4024                           
  4025                           ;LCDTime.c: 503: LCDWriteInt(seconds,2);
  4026  0B01  1283               	bcf	3,5	;RP0=0, select bank0
  4027  0B02  1303               	bcf	3,6	;RP1=0, select bank0
  4028  0B03  085D               	movf	_seconds+1,w
  4029  0B04  00A3               	movwf	LCDWriteInt@val+1
  4030  0B05  085C               	movf	_seconds,w
  4031  0B06  00A2               	movwf	LCDWriteInt@val
  4032  0B07  3002               	movlw	2
  4033  0B08  00B3               	movwf	??_showTime
  4034  0B09  0833               	movf	??_showTime,w
  4035  0B0A  00A4               	movwf	LCDWriteInt@field_length
  4036  0B0B  120A  158A  26C5   	fcall	_LCDWriteInt
  4037  0B0E  0008               	return
  4038  0B0F                     __end_of_showTime:	
  4039                           
  4040                           	psect	text9
  4041  0E13                     __ptext9:	
  4042 ;; *************** function _showDate *****************
  4043 ;; Defined at:
  4044 ;;		line 511 in file "LCDTime.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;		None
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  d               2   20[BANK0 ] int 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4058 ;;      Params:         0       0       0       0       0
  4059 ;;      Locals:         0       2       0       0       0
  4060 ;;      Temps:          0       1       0       0       0
  4061 ;;      Totals:         0       3       0       0       0
  4062 ;;Total ram usage:        3 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    4
  4065 ;; This function calls:
  4066 ;;		_LCDByte
  4067 ;;		_LCDWriteInt
  4068 ;;		___wmul
  4069 ;; This function is called by:
  4070 ;;		_doMenu
  4071 ;;		_showClock
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           
  4076                           ;psect for function _showDate
  4077  0E13                     _showDate:	
  4078                           
  4079                           ;LCDTime.c: 513: int d = (day-1) * 3 ;
  4080                           
  4081                           ;incstack = 0
  4082                           ; Regs used in _showDate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4083  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  4084  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  4085  0E15  0852               	movf	_day,w
  4086  0E16  3EFF               	addlw	255
  4087  0E17  00F9               	movwf	___wmul@multiplier
  4088  0E18  0853               	movf	_day+1,w
  4089  0E19  1803               	skipnc
  4090  0E1A  3E01               	addlw	1
  4091  0E1B  3EFF               	addlw	255
  4092  0E1C  00FA               	movwf	___wmul@multiplier+1
  4093  0E1D  3003               	movlw	3
  4094  0E1E  00FB               	movwf	___wmul@multiplicand
  4095  0E1F  3000               	movlw	0
  4096  0E20  00FC               	movwf	___wmul@multiplicand+1
  4097  0E21  120A  158A  21E4  120A  158A  	fcall	___wmul
  4098  0E26  087A               	movf	?___wmul+1,w
  4099  0E27  1283               	bcf	3,5	;RP0=0, select bank0
  4100  0E28  1303               	bcf	3,6	;RP1=0, select bank0
  4101  0E29  00B5               	movwf	showDate@d+1
  4102  0E2A  0879               	movf	?___wmul,w
  4103  0E2B  00B4               	movwf	showDate@d
  4104                           
  4105                           ;LCDTime.c: 515: LCDWriteInt(date,2);
  4106  0E2C  0851               	movf	_date+1,w
  4107  0E2D  00A3               	movwf	LCDWriteInt@val+1
  4108  0E2E  0850               	movf	_date,w
  4109  0E2F  00A2               	movwf	LCDWriteInt@val
  4110  0E30  3002               	movlw	2
  4111  0E31  00B3               	movwf	??_showDate
  4112  0E32  0833               	movf	??_showDate,w
  4113  0E33  00A4               	movwf	LCDWriteInt@field_length
  4114  0E34  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4115                           
  4116                           ;LCDTime.c: 516: (LCDByte('/',1)) ;
  4117  0E39  01F5               	clrf	LCDByte@isdata
  4118  0E3A  0AF5               	incf	LCDByte@isdata,f
  4119  0E3B  302F               	movlw	47
  4120  0E3C  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4121                           
  4122                           ;LCDTime.c: 517: LCDWriteInt(month,2);
  4123  0E41  1283               	bcf	3,5	;RP0=0, select bank0
  4124  0E42  1303               	bcf	3,6	;RP1=0, select bank0
  4125  0E43  0859               	movf	_month+1,w
  4126  0E44  00A3               	movwf	LCDWriteInt@val+1
  4127  0E45  0858               	movf	_month,w
  4128  0E46  00A2               	movwf	LCDWriteInt@val
  4129  0E47  3002               	movlw	2
  4130  0E48  00B3               	movwf	??_showDate
  4131  0E49  0833               	movf	??_showDate,w
  4132  0E4A  00A4               	movwf	LCDWriteInt@field_length
  4133  0E4B  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4134                           
  4135                           ;LCDTime.c: 518: (LCDByte('/',1)) ;
  4136  0E50  01F5               	clrf	LCDByte@isdata
  4137  0E51  0AF5               	incf	LCDByte@isdata,f
  4138  0E52  302F               	movlw	47
  4139  0E53  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4140                           
  4141                           ;LCDTime.c: 519: (LCDByte('2',1)) ;
  4142  0E58  01F5               	clrf	LCDByte@isdata
  4143  0E59  0AF5               	incf	LCDByte@isdata,f
  4144  0E5A  3032               	movlw	50
  4145  0E5B  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4146                           
  4147                           ;LCDTime.c: 520: (LCDByte('0',1)) ;
  4148  0E60  01F5               	clrf	LCDByte@isdata
  4149  0E61  0AF5               	incf	LCDByte@isdata,f
  4150  0E62  3030               	movlw	48
  4151  0E63  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4152                           
  4153                           ;LCDTime.c: 521: LCDWriteInt(year,2);
  4154  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  4155  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  4156  0E6A  085F               	movf	_year+1,w
  4157  0E6B  00A3               	movwf	LCDWriteInt@val+1
  4158  0E6C  085E               	movf	_year,w
  4159  0E6D  00A2               	movwf	LCDWriteInt@val
  4160  0E6E  3002               	movlw	2
  4161  0E6F  00B3               	movwf	??_showDate
  4162  0E70  0833               	movf	??_showDate,w
  4163  0E71  00A4               	movwf	LCDWriteInt@field_length
  4164  0E72  120A  158A  26C5  120A  158A  	fcall	_LCDWriteInt
  4165                           
  4166                           ;LCDTime.c: 522: (LCDByte(32,1)) ;
  4167  0E77  01F5               	clrf	LCDByte@isdata
  4168  0E78  0AF5               	incf	LCDByte@isdata,f
  4169  0E79  3020               	movlw	32
  4170  0E7A  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4171                           
  4172                           ;LCDTime.c: 523: (LCDByte(32,1)) ;
  4173  0E7F  01F5               	clrf	LCDByte@isdata
  4174  0E80  0AF5               	incf	LCDByte@isdata,f
  4175  0E81  3020               	movlw	32
  4176  0E82  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4177                           
  4178                           ;LCDTime.c: 524: (LCDByte(daysOfTheWeek[d++],1)) ;
  4179  0E87  01F5               	clrf	LCDByte@isdata
  4180  0E88  0AF5               	incf	LCDByte@isdata,f
  4181  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  4182  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  4183  0E8B  0834               	movf	showDate@d,w
  4184  0E8C  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4185  0E8D  0084               	movwf	4
  4186  0E8E  120A  158A  200A  120A  158A  	fcall	stringdir
  4187  0E93  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4188  0E98  3001               	movlw	1
  4189  0E99  1283               	bcf	3,5	;RP0=0, select bank0
  4190  0E9A  1303               	bcf	3,6	;RP1=0, select bank0
  4191  0E9B  07B4               	addwf	showDate@d,f
  4192  0E9C  1803               	skipnc
  4193  0E9D  0AB5               	incf	showDate@d+1,f
  4194  0E9E  3000               	movlw	0
  4195  0E9F  07B5               	addwf	showDate@d+1,f
  4196                           
  4197                           ;LCDTime.c: 525: (LCDByte(daysOfTheWeek[d++],1)) ;
  4198  0EA0  01F5               	clrf	LCDByte@isdata
  4199  0EA1  0AF5               	incf	LCDByte@isdata,f
  4200  0EA2  0834               	movf	showDate@d,w
  4201  0EA3  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4202  0EA4  0084               	movwf	4
  4203  0EA5  120A  158A  200A  120A  158A  	fcall	stringdir
  4204  0EAA  120A  158A  235A  120A  158A  	fcall	_LCDByte
  4205  0EAF  3001               	movlw	1
  4206  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  4207  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  4208  0EB2  07B4               	addwf	showDate@d,f
  4209  0EB3  1803               	skipnc
  4210  0EB4  0AB5               	incf	showDate@d+1,f
  4211  0EB5  3000               	movlw	0
  4212  0EB6  07B5               	addwf	showDate@d+1,f
  4213                           
  4214                           ;LCDTime.c: 526: (LCDByte(daysOfTheWeek[d],1)) ;
  4215  0EB7  01F5               	clrf	LCDByte@isdata
  4216  0EB8  0AF5               	incf	LCDByte@isdata,f
  4217  0EB9  0834               	movf	showDate@d,w
  4218  0EBA  3E1D               	addlw	low ((_daysOfTheWeek-__stringbase)| (0+32768))
  4219  0EBB  0084               	movwf	4
  4220  0EBC  120A  158A  200A  120A  158A  	fcall	stringdir
  4221  0EC1  120A  158A  235A   	fcall	_LCDByte
  4222  0EC4  0008               	return
  4223  0EC5                     __end_of_showDate:	
  4224                           
  4225                           	psect	text10
  4226  0EC5                     __ptext10:	
  4227 ;; *************** function _LCDWriteInt *****************
  4228 ;; Defined at:
  4229 ;;		line 235 in file "lcd_hd44780_pic16.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  val             2    2[BANK0 ] int 
  4232 ;;  field_length    1    4[BANK0 ] char 
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;  str             6   10[BANK0 ] unsigned char [6]
  4235 ;;  from            2   16[BANK0 ] int 
  4236 ;;  characters      2    8[BANK0 ] int 
  4237 ;;  c               1   18[BANK0 ] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4247 ;;      Params:         0       3       0       0       0
  4248 ;;      Locals:         0      11       0       0       0
  4249 ;;      Temps:          0       3       0       0       0
  4250 ;;      Totals:         0      17       0       0       0
  4251 ;;Total ram usage:       17 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    3
  4254 ;; This function calls:
  4255 ;;		_LCDWriteString
  4256 ;;		___awdiv
  4257 ;;		___wmul
  4258 ;; This function is called by:
  4259 ;;		_main
  4260 ;;		_showTime
  4261 ;;		_showDate
  4262 ;;		_showRunningTime
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           
  4267                           ;psect for function _LCDWriteInt
  4268  0EC5                     _LCDWriteInt:	
  4269                           
  4270                           ;lcd_hd44780_pic16.c: 237: char str[6] = { "-----\0" } ;
  4271                           
  4272                           ;incstack = 0
  4273                           ; Regs used in _LCDWriteInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4274  0EC5  302A               	movlw	LCDWriteInt@str& (0+255)
  4275  0EC6  0084               	movwf	4
  4276  0EC7  1283               	bcf	3,5	;RP0=0, select bank0
  4277  0EC8  1303               	bcf	3,6	;RP1=0, select bank0
  4278  0EC9  084A               	movf	LCDWriteInt@F1142,w
  4279  0ECA  1383               	bcf	3,7	;select IRP bank0
  4280  0ECB  0080               	movwf	0
  4281  0ECC  0A84               	incf	4,f
  4282  0ECD  084B               	movf	LCDWriteInt@F1142+1,w
  4283  0ECE  0080               	movwf	0
  4284  0ECF  0A84               	incf	4,f
  4285  0ED0  084C               	movf	LCDWriteInt@F1142+2,w
  4286  0ED1  0080               	movwf	0
  4287  0ED2  0A84               	incf	4,f
  4288  0ED3  084D               	movf	LCDWriteInt@F1142+3,w
  4289  0ED4  0080               	movwf	0
  4290  0ED5  0A84               	incf	4,f
  4291  0ED6  084E               	movf	LCDWriteInt@F1142+4,w
  4292  0ED7  0080               	movwf	0
  4293  0ED8  0A84               	incf	4,f
  4294  0ED9  084F               	movf	LCDWriteInt@F1142+5,w
  4295  0EDA  0080               	movwf	0
  4296                           
  4297                           ;lcd_hd44780_pic16.c: 238: int characters = 0 ;
  4298  0EDB  01A8               	clrf	LCDWriteInt@characters
  4299  0EDC  01A9               	clrf	LCDWriteInt@characters+1
  4300                           
  4301                           ;lcd_hd44780_pic16.c: 239: int from = 5 ;
  4302  0EDD  3005               	movlw	5
  4303  0EDE  00B0               	movwf	LCDWriteInt@from
  4304  0EDF  3000               	movlw	0
  4305  0EE0  00B1               	movwf	LCDWriteInt@from+1
  4306                           
  4307                           ;lcd_hd44780_pic16.c: 240: char c ;
  4308                           ;lcd_hd44780_pic16.c: 242: field_length = 5 - field_length ;
  4309  0EE1  0324               	decf	LCDWriteInt@field_length,w
  4310  0EE2  3AFF               	xorlw	255
  4311  0EE3  3E05               	addlw	5
  4312  0EE4  00A5               	movwf	??_LCDWriteInt
  4313  0EE5  0825               	movf	??_LCDWriteInt,w
  4314  0EE6  00A4               	movwf	LCDWriteInt@field_length
  4315                           
  4316                           ;lcd_hd44780_pic16.c: 244: c = val / 10000 ;
  4317  0EE7  3010               	movlw	16
  4318  0EE8  00F0               	movwf	___awdiv@divisor
  4319  0EE9  3027               	movlw	39
  4320  0EEA  00F1               	movwf	___awdiv@divisor+1
  4321  0EEB  0823               	movf	LCDWriteInt@val+1,w
  4322  0EEC  00F3               	movwf	___awdiv@dividend+1
  4323  0EED  0822               	movf	LCDWriteInt@val,w
  4324  0EEE  00F2               	movwf	___awdiv@dividend
  4325  0EEF  120A  158A  24FC  120A  158A  	fcall	___awdiv
  4326  0EF4  0870               	movf	?___awdiv,w
  4327  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  4328  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  4329  0EF7  00A5               	movwf	??_LCDWriteInt
  4330  0EF8  0825               	movf	??_LCDWriteInt,w
  4331  0EF9  00B2               	movwf	LCDWriteInt@c
  4332                           
  4333                           ;lcd_hd44780_pic16.c: 245: if (c)
  4334  0EFA  0832               	movf	LCDWriteInt@c,w
  4335  0EFB  1903               	btfsc	3,2
  4336  0EFC  2F17               	goto	l2036
  4337                           
  4338                           ;lcd_hd44780_pic16.c: 246: {
  4339                           ;lcd_hd44780_pic16.c: 247: val -= c * 10000 ;
  4340  0EFD  0832               	movf	LCDWriteInt@c,w
  4341  0EFE  00A5               	movwf	??_LCDWriteInt
  4342  0EFF  01A6               	clrf	??_LCDWriteInt+1
  4343  0F00  0825               	movf	??_LCDWriteInt,w
  4344  0F01  00F9               	movwf	___wmul@multiplier
  4345  0F02  0826               	movf	??_LCDWriteInt+1,w
  4346  0F03  00FA               	movwf	___wmul@multiplier+1
  4347  0F04  3010               	movlw	16
  4348  0F05  00FB               	movwf	___wmul@multiplicand
  4349  0F06  3027               	movlw	39
  4350  0F07  00FC               	movwf	___wmul@multiplicand+1
  4351  0F08  120A  158A  21E4  120A  158A  	fcall	___wmul
  4352  0F0D  0879               	movf	?___wmul,w
  4353  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  4354  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  4355  0F10  02A2               	subwf	LCDWriteInt@val,f
  4356  0F11  087A               	movf	?___wmul+1,w
  4357  0F12  1C03               	skipc
  4358  0F13  03A3               	decf	LCDWriteInt@val+1,f
  4359  0F14  02A3               	subwf	LCDWriteInt@val+1,f
  4360                           
  4361                           ;lcd_hd44780_pic16.c: 248: from = 0 ;
  4362  0F15  01B0               	clrf	LCDWriteInt@from
  4363  0F16  01B1               	clrf	LCDWriteInt@from+1
  4364  0F17                     l2036:	
  4365                           
  4366                           ;lcd_hd44780_pic16.c: 249: }
  4367                           ;lcd_hd44780_pic16.c: 250: str[0] = c + 0x30 ;
  4368  0F17  0832               	movf	LCDWriteInt@c,w
  4369  0F18  3E30               	addlw	48
  4370  0F19  00A5               	movwf	??_LCDWriteInt
  4371  0F1A  0825               	movf	??_LCDWriteInt,w
  4372  0F1B  00AA               	movwf	LCDWriteInt@str
  4373                           
  4374                           ;lcd_hd44780_pic16.c: 251: c = val / 1000 ;
  4375  0F1C  30E8               	movlw	232
  4376  0F1D  00F0               	movwf	___awdiv@divisor
  4377  0F1E  3003               	movlw	3
  4378  0F1F  00F1               	movwf	___awdiv@divisor+1
  4379  0F20  0823               	movf	LCDWriteInt@val+1,w
  4380  0F21  00F3               	movwf	___awdiv@dividend+1
  4381  0F22  0822               	movf	LCDWriteInt@val,w
  4382  0F23  00F2               	movwf	___awdiv@dividend
  4383  0F24  120A  158A  24FC  120A  158A  	fcall	___awdiv
  4384  0F29  0870               	movf	?___awdiv,w
  4385  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  4386  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  4387  0F2C  00A5               	movwf	??_LCDWriteInt
  4388  0F2D  0825               	movf	??_LCDWriteInt,w
  4389  0F2E  00B2               	movwf	LCDWriteInt@c
  4390                           
  4391                           ;lcd_hd44780_pic16.c: 252: if (c)
  4392  0F2F  0832               	movf	LCDWriteInt@c,w
  4393  0F30  1903               	btfsc	3,2
  4394  0F31  2F53               	goto	l2048
  4395                           
  4396                           ;lcd_hd44780_pic16.c: 253: {
  4397                           ;lcd_hd44780_pic16.c: 254: val -= c * 1000 ;
  4398  0F32  0832               	movf	LCDWriteInt@c,w
  4399  0F33  00A5               	movwf	??_LCDWriteInt
  4400  0F34  01A6               	clrf	??_LCDWriteInt+1
  4401  0F35  0825               	movf	??_LCDWriteInt,w
  4402  0F36  00F9               	movwf	___wmul@multiplier
  4403  0F37  0826               	movf	??_LCDWriteInt+1,w
  4404  0F38  00FA               	movwf	___wmul@multiplier+1
  4405  0F39  30E8               	movlw	232
  4406  0F3A  00FB               	movwf	___wmul@multiplicand
  4407  0F3B  3003               	movlw	3
  4408  0F3C  00FC               	movwf	___wmul@multiplicand+1
  4409  0F3D  120A  158A  21E4  120A  158A  	fcall	___wmul
  4410  0F42  0879               	movf	?___wmul,w
  4411  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  4412  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  4413  0F45  02A2               	subwf	LCDWriteInt@val,f
  4414  0F46  087A               	movf	?___wmul+1,w
  4415  0F47  1C03               	skipc
  4416  0F48  03A3               	decf	LCDWriteInt@val+1,f
  4417  0F49  02A3               	subwf	LCDWriteInt@val+1,f
  4418                           
  4419                           ;lcd_hd44780_pic16.c: 255: if (from == 5)
  4420  0F4A  3005               	movlw	5
  4421  0F4B  0630               	xorwf	LCDWriteInt@from,w
  4422  0F4C  0431               	iorwf	LCDWriteInt@from+1,w
  4423  0F4D  1D03               	btfss	3,2
  4424  0F4E  2F53               	goto	l2048
  4425                           
  4426                           ;lcd_hd44780_pic16.c: 256: from = 1 ;
  4427  0F4F  3001               	movlw	1
  4428  0F50  00B0               	movwf	LCDWriteInt@from
  4429  0F51  3000               	movlw	0
  4430  0F52  00B1               	movwf	LCDWriteInt@from+1
  4431  0F53                     l2048:	
  4432                           
  4433                           ;lcd_hd44780_pic16.c: 257: }
  4434                           ;lcd_hd44780_pic16.c: 258: str[1] = c + 0x30 ;
  4435  0F53  0832               	movf	LCDWriteInt@c,w
  4436  0F54  3E30               	addlw	48
  4437  0F55  00A5               	movwf	??_LCDWriteInt
  4438  0F56  0825               	movf	??_LCDWriteInt,w
  4439  0F57  00AB               	movwf	LCDWriteInt@str+1
  4440                           
  4441                           ;lcd_hd44780_pic16.c: 259: c = val / 100 ;
  4442  0F58  3064               	movlw	100
  4443  0F59  00F0               	movwf	___awdiv@divisor
  4444  0F5A  3000               	movlw	0
  4445  0F5B  00F1               	movwf	___awdiv@divisor+1
  4446  0F5C  0823               	movf	LCDWriteInt@val+1,w
  4447  0F5D  00F3               	movwf	___awdiv@dividend+1
  4448  0F5E  0822               	movf	LCDWriteInt@val,w
  4449  0F5F  00F2               	movwf	___awdiv@dividend
  4450  0F60  120A  158A  24FC  120A  158A  	fcall	___awdiv
  4451  0F65  0870               	movf	?___awdiv,w
  4452  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0F67  1303               	bcf	3,6	;RP1=0, select bank0
  4454  0F68  00A5               	movwf	??_LCDWriteInt
  4455  0F69  0825               	movf	??_LCDWriteInt,w
  4456  0F6A  00B2               	movwf	LCDWriteInt@c
  4457                           
  4458                           ;lcd_hd44780_pic16.c: 260: if (c)
  4459  0F6B  0832               	movf	LCDWriteInt@c,w
  4460  0F6C  1903               	btfsc	3,2
  4461  0F6D  2F8F               	goto	l2060
  4462                           
  4463                           ;lcd_hd44780_pic16.c: 261: {
  4464                           ;lcd_hd44780_pic16.c: 262: val -= c * 100 ;
  4465  0F6E  0832               	movf	LCDWriteInt@c,w
  4466  0F6F  00A5               	movwf	??_LCDWriteInt
  4467  0F70  01A6               	clrf	??_LCDWriteInt+1
  4468  0F71  0825               	movf	??_LCDWriteInt,w
  4469  0F72  00F9               	movwf	___wmul@multiplier
  4470  0F73  0826               	movf	??_LCDWriteInt+1,w
  4471  0F74  00FA               	movwf	___wmul@multiplier+1
  4472  0F75  3064               	movlw	100
  4473  0F76  00FB               	movwf	___wmul@multiplicand
  4474  0F77  3000               	movlw	0
  4475  0F78  00FC               	movwf	___wmul@multiplicand+1
  4476  0F79  120A  158A  21E4  120A  158A  	fcall	___wmul
  4477  0F7E  0879               	movf	?___wmul,w
  4478  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4479  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4480  0F81  02A2               	subwf	LCDWriteInt@val,f
  4481  0F82  087A               	movf	?___wmul+1,w
  4482  0F83  1C03               	skipc
  4483  0F84  03A3               	decf	LCDWriteInt@val+1,f
  4484  0F85  02A3               	subwf	LCDWriteInt@val+1,f
  4485                           
  4486                           ;lcd_hd44780_pic16.c: 263: if (from == 5)
  4487  0F86  3005               	movlw	5
  4488  0F87  0630               	xorwf	LCDWriteInt@from,w
  4489  0F88  0431               	iorwf	LCDWriteInt@from+1,w
  4490  0F89  1D03               	btfss	3,2
  4491  0F8A  2F8F               	goto	l2060
  4492                           
  4493                           ;lcd_hd44780_pic16.c: 264: from = 2 ;
  4494  0F8B  3002               	movlw	2
  4495  0F8C  00B0               	movwf	LCDWriteInt@from
  4496  0F8D  3000               	movlw	0
  4497  0F8E  00B1               	movwf	LCDWriteInt@from+1
  4498  0F8F                     l2060:	
  4499                           
  4500                           ;lcd_hd44780_pic16.c: 265: }
  4501                           ;lcd_hd44780_pic16.c: 266: str[2] = c + 0x30 ;
  4502  0F8F  0832               	movf	LCDWriteInt@c,w
  4503  0F90  3E30               	addlw	48
  4504  0F91  00A5               	movwf	??_LCDWriteInt
  4505  0F92  0825               	movf	??_LCDWriteInt,w
  4506  0F93  00AC               	movwf	LCDWriteInt@str+2
  4507                           
  4508                           ;lcd_hd44780_pic16.c: 267: c = val / 10 ;
  4509  0F94  300A               	movlw	10
  4510  0F95  00F0               	movwf	___awdiv@divisor
  4511  0F96  3000               	movlw	0
  4512  0F97  00F1               	movwf	___awdiv@divisor+1
  4513  0F98  0823               	movf	LCDWriteInt@val+1,w
  4514  0F99  00F3               	movwf	___awdiv@dividend+1
  4515  0F9A  0822               	movf	LCDWriteInt@val,w
  4516  0F9B  00F2               	movwf	___awdiv@dividend
  4517  0F9C  120A  158A  24FC  120A  158A  	fcall	___awdiv
  4518  0FA1  0870               	movf	?___awdiv,w
  4519  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  4520  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  4521  0FA4  00A5               	movwf	??_LCDWriteInt
  4522  0FA5  0825               	movf	??_LCDWriteInt,w
  4523  0FA6  00B2               	movwf	LCDWriteInt@c
  4524                           
  4525                           ;lcd_hd44780_pic16.c: 268: if (c)
  4526  0FA7  0832               	movf	LCDWriteInt@c,w
  4527  0FA8  1903               	btfsc	3,2
  4528  0FA9  2FCB               	goto	l2072
  4529                           
  4530                           ;lcd_hd44780_pic16.c: 269: {
  4531                           ;lcd_hd44780_pic16.c: 270: val -= c * 10 ;
  4532  0FAA  0832               	movf	LCDWriteInt@c,w
  4533  0FAB  00A5               	movwf	??_LCDWriteInt
  4534  0FAC  01A6               	clrf	??_LCDWriteInt+1
  4535  0FAD  0825               	movf	??_LCDWriteInt,w
  4536  0FAE  00F9               	movwf	___wmul@multiplier
  4537  0FAF  0826               	movf	??_LCDWriteInt+1,w
  4538  0FB0  00FA               	movwf	___wmul@multiplier+1
  4539  0FB1  300A               	movlw	10
  4540  0FB2  00FB               	movwf	___wmul@multiplicand
  4541  0FB3  3000               	movlw	0
  4542  0FB4  00FC               	movwf	___wmul@multiplicand+1
  4543  0FB5  120A  158A  21E4  120A  158A  	fcall	___wmul
  4544  0FBA  0879               	movf	?___wmul,w
  4545  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  4546  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  4547  0FBD  02A2               	subwf	LCDWriteInt@val,f
  4548  0FBE  087A               	movf	?___wmul+1,w
  4549  0FBF  1C03               	skipc
  4550  0FC0  03A3               	decf	LCDWriteInt@val+1,f
  4551  0FC1  02A3               	subwf	LCDWriteInt@val+1,f
  4552                           
  4553                           ;lcd_hd44780_pic16.c: 271: if (from == 5)
  4554  0FC2  3005               	movlw	5
  4555  0FC3  0630               	xorwf	LCDWriteInt@from,w
  4556  0FC4  0431               	iorwf	LCDWriteInt@from+1,w
  4557  0FC5  1D03               	btfss	3,2
  4558  0FC6  2FCB               	goto	l2072
  4559                           
  4560                           ;lcd_hd44780_pic16.c: 272: from = 3 ;
  4561  0FC7  3003               	movlw	3
  4562  0FC8  00B0               	movwf	LCDWriteInt@from
  4563  0FC9  3000               	movlw	0
  4564  0FCA  00B1               	movwf	LCDWriteInt@from+1
  4565  0FCB                     l2072:	
  4566                           
  4567                           ;lcd_hd44780_pic16.c: 273: }
  4568                           ;lcd_hd44780_pic16.c: 274: str[3] = c + 0x30 ;
  4569  0FCB  0832               	movf	LCDWriteInt@c,w
  4570  0FCC  3E30               	addlw	48
  4571  0FCD  00A5               	movwf	??_LCDWriteInt
  4572  0FCE  0825               	movf	??_LCDWriteInt,w
  4573  0FCF  00AD               	movwf	LCDWriteInt@str+3
  4574                           
  4575                           ;lcd_hd44780_pic16.c: 275: if (from == 5)
  4576  0FD0  3005               	movlw	5
  4577  0FD1  0630               	xorwf	LCDWriteInt@from,w
  4578  0FD2  0431               	iorwf	LCDWriteInt@from+1,w
  4579  0FD3  1D03               	btfss	3,2
  4580  0FD4  2FD9               	goto	l2078
  4581                           
  4582                           ;lcd_hd44780_pic16.c: 276: from = 4 ;
  4583  0FD5  3004               	movlw	4
  4584  0FD6  00B0               	movwf	LCDWriteInt@from
  4585  0FD7  3000               	movlw	0
  4586  0FD8  00B1               	movwf	LCDWriteInt@from+1
  4587  0FD9                     l2078:	
  4588                           
  4589                           ;lcd_hd44780_pic16.c: 277: str[4] = (char)(val + 0x30) ;
  4590  0FD9  0822               	movf	LCDWriteInt@val,w
  4591  0FDA  3E30               	addlw	48
  4592  0FDB  00A5               	movwf	??_LCDWriteInt
  4593  0FDC  0825               	movf	??_LCDWriteInt,w
  4594  0FDD  00AE               	movwf	LCDWriteInt@str+4
  4595                           
  4596                           ;lcd_hd44780_pic16.c: 279: if (from < field_length)
  4597  0FDE  0824               	movf	LCDWriteInt@field_length,w
  4598  0FDF  00A5               	movwf	??_LCDWriteInt
  4599  0FE0  01A6               	clrf	??_LCDWriteInt+1
  4600  0FE1  1BA5               	btfsc	??_LCDWriteInt,7
  4601  0FE2  03A6               	decf	??_LCDWriteInt+1,f
  4602  0FE3  0831               	movf	LCDWriteInt@from+1,w
  4603  0FE4  3A80               	xorlw	128
  4604  0FE5  00A7               	movwf	??_LCDWriteInt+2
  4605  0FE6  0826               	movf	??_LCDWriteInt+1,w
  4606  0FE7  3A80               	xorlw	128
  4607  0FE8  0227               	subwf	??_LCDWriteInt+2,w
  4608  0FE9  1D03               	skipz
  4609  0FEA  2FED               	goto	u1755
  4610  0FEB  0825               	movf	??_LCDWriteInt,w
  4611  0FEC  0230               	subwf	LCDWriteInt@from,w
  4612  0FED                     u1755:	
  4613  0FED  1803               	skipnc
  4614  0FEE  2FF5               	goto	l2084
  4615                           
  4616                           ;lcd_hd44780_pic16.c: 280: field_length = from ;
  4617  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  4618  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  4619  0FF1  0830               	movf	LCDWriteInt@from,w
  4620  0FF2  00A5               	movwf	??_LCDWriteInt
  4621  0FF3  0825               	movf	??_LCDWriteInt,w
  4622  0FF4  00A4               	movwf	LCDWriteInt@field_length
  4623  0FF5                     l2084:	
  4624                           
  4625                           ;lcd_hd44780_pic16.c: 282: LCDWriteString(&str[field_length]) ;
  4626  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  4628  0FF7  0824               	movf	LCDWriteInt@field_length,w
  4629  0FF8  3E2A               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
  4630  0FF9  00FC               	movwf	LCDWriteString@msg
  4631  0FFA  3000               	movlw	0
  4632  0FFB  00FD               	movwf	LCDWriteString@msg+1
  4633  0FFC  120A  158A  2199   	fcall	_LCDWriteString
  4634  0FFF  0008               	return
  4635  1000                     __end_of_LCDWriteInt:	
  4636                           
  4637                           	psect	text11
  4638  09E4                     __ptext11:	
  4639 ;; *************** function ___wmul *****************
  4640 ;; Defined at:
  4641 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  multiplier      2    9[COMMON] unsigned int 
  4644 ;;  multiplicand    2   11[COMMON] unsigned int 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  product         2    0[BANK0 ] unsigned int 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  2    9[COMMON] unsigned int 
  4649 ;; Registers used:
  4650 ;;		wreg, status,2, status,0
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4656 ;;      Params:         4       0       0       0       0
  4657 ;;      Locals:         0       2       0       0       0
  4658 ;;      Temps:          0       0       0       0       0
  4659 ;;      Totals:         4       2       0       0       0
  4660 ;;Total ram usage:        6 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; This function calls:
  4663 ;;		Nothing
  4664 ;; This function is called by:
  4665 ;;		_LCDWriteInt
  4666 ;;		_main
  4667 ;;		_readClock
  4668 ;;		_showDate
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function ___wmul
  4674  09E4                     ___wmul:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4678  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  4679  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  4680  09E6  01A0               	clrf	___wmul@product
  4681  09E7  01A1               	clrf	___wmul@product+1
  4682  09E8                     l1948:	
  4683  09E8  1C79               	btfss	___wmul@multiplier,0
  4684  09E9  29F2               	goto	l516
  4685  09EA  087B               	movf	___wmul@multiplicand,w
  4686  09EB  1283               	bcf	3,5	;RP0=0, select bank0
  4687  09EC  1303               	bcf	3,6	;RP1=0, select bank0
  4688  09ED  07A0               	addwf	___wmul@product,f
  4689  09EE  1803               	skipnc
  4690  09EF  0AA1               	incf	___wmul@product+1,f
  4691  09F0  087C               	movf	___wmul@multiplicand+1,w
  4692  09F1  07A1               	addwf	___wmul@product+1,f
  4693  09F2                     l516:	
  4694  09F2  3001               	movlw	1
  4695  09F3                     u1495:	
  4696  09F3  1003               	clrc
  4697  09F4  0DFB               	rlf	___wmul@multiplicand,f
  4698  09F5  0DFC               	rlf	___wmul@multiplicand+1,f
  4699  09F6  3EFF               	addlw	-1
  4700  09F7  1D03               	skipz
  4701  09F8  29F3               	goto	u1495
  4702  09F9  3001               	movlw	1
  4703  09FA                     u1505:	
  4704  09FA  1003               	clrc
  4705  09FB  0CFA               	rrf	___wmul@multiplier+1,f
  4706  09FC  0CF9               	rrf	___wmul@multiplier,f
  4707  09FD  3EFF               	addlw	-1
  4708  09FE  1D03               	skipz
  4709  09FF  29FA               	goto	u1505
  4710  0A00  0879               	movf	___wmul@multiplier,w
  4711  0A01  047A               	iorwf	___wmul@multiplier+1,w
  4712  0A02  1D03               	btfss	3,2
  4713  0A03  29E8               	goto	l1948
  4714  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  4715  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  4716  0A06  0821               	movf	___wmul@product+1,w
  4717  0A07  00FA               	movwf	?___wmul+1
  4718  0A08  0820               	movf	___wmul@product,w
  4719  0A09  00F9               	movwf	?___wmul
  4720  0A0A  0008               	return
  4721  0A0B                     __end_of___wmul:	
  4722                           
  4723                           	psect	text12
  4724  0CFC                     __ptext12:	
  4725 ;; *************** function ___awdiv *****************
  4726 ;; Defined at:
  4727 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  divisor         2    0[COMMON] int 
  4730 ;;  dividend        2    2[COMMON] int 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  quotient        2    7[COMMON] int 
  4733 ;;  sign            1    6[COMMON] unsigned char 
  4734 ;;  counter         1    5[COMMON] unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  2    0[COMMON] int 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4744 ;;      Params:         4       0       0       0       0
  4745 ;;      Locals:         4       0       0       0       0
  4746 ;;      Temps:          1       0       0       0       0
  4747 ;;      Totals:         9       0       0       0       0
  4748 ;;Total ram usage:        9 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; This function calls:
  4751 ;;		Nothing
  4752 ;; This function is called by:
  4753 ;;		_LCDWriteInt
  4754 ;;		_doMenu
  4755 ;;		_readClock
  4756 ;;		_showRunningTime
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           
  4761                           ;psect for function ___awdiv
  4762  0CFC                     ___awdiv:	
  4763                           
  4764                           ;incstack = 0
  4765                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4766  0CFC  01F6               	clrf	___awdiv@sign
  4767  0CFD  1FF1               	btfss	___awdiv@divisor+1,7
  4768  0CFE  2D06               	goto	l1968
  4769  0CFF  09F0               	comf	___awdiv@divisor,f
  4770  0D00  09F1               	comf	___awdiv@divisor+1,f
  4771  0D01  0AF0               	incf	___awdiv@divisor,f
  4772  0D02  1903               	skipnz
  4773  0D03  0AF1               	incf	___awdiv@divisor+1,f
  4774  0D04  01F6               	clrf	___awdiv@sign
  4775  0D05  0AF6               	incf	___awdiv@sign,f
  4776  0D06                     l1968:	
  4777  0D06  1FF3               	btfss	___awdiv@dividend+1,7
  4778  0D07  2D11               	goto	l1974
  4779  0D08  09F2               	comf	___awdiv@dividend,f
  4780  0D09  09F3               	comf	___awdiv@dividend+1,f
  4781  0D0A  0AF2               	incf	___awdiv@dividend,f
  4782  0D0B  1903               	skipnz
  4783  0D0C  0AF3               	incf	___awdiv@dividend+1,f
  4784  0D0D  3001               	movlw	1
  4785  0D0E  00F4               	movwf	??___awdiv
  4786  0D0F  0874               	movf	??___awdiv,w
  4787  0D10  06F6               	xorwf	___awdiv@sign,f
  4788  0D11                     l1974:	
  4789  0D11  01F7               	clrf	___awdiv@quotient
  4790  0D12  01F8               	clrf	___awdiv@quotient+1
  4791  0D13  0870               	movf	___awdiv@divisor,w
  4792  0D14  0471               	iorwf	___awdiv@divisor+1,w
  4793  0D15  1903               	btfsc	3,2
  4794  0D16  2D48               	goto	l1996
  4795  0D17  01F5               	clrf	___awdiv@counter
  4796  0D18  0AF5               	incf	___awdiv@counter,f
  4797  0D19                     l1984:	
  4798  0D19  1BF1               	btfsc	___awdiv@divisor+1,7
  4799  0D1A  2D27               	goto	l1986
  4800  0D1B  3001               	movlw	1
  4801  0D1C                     u1555:	
  4802  0D1C  1003               	clrc
  4803  0D1D  0DF0               	rlf	___awdiv@divisor,f
  4804  0D1E  0DF1               	rlf	___awdiv@divisor+1,f
  4805  0D1F  3EFF               	addlw	-1
  4806  0D20  1D03               	skipz
  4807  0D21  2D1C               	goto	u1555
  4808  0D22  3001               	movlw	1
  4809  0D23  00F4               	movwf	??___awdiv
  4810  0D24  0874               	movf	??___awdiv,w
  4811  0D25  07F5               	addwf	___awdiv@counter,f
  4812  0D26  2D19               	goto	l1984
  4813  0D27                     l1986:	
  4814  0D27  3001               	movlw	1
  4815  0D28                     u1575:	
  4816  0D28  1003               	clrc
  4817  0D29  0DF7               	rlf	___awdiv@quotient,f
  4818  0D2A  0DF8               	rlf	___awdiv@quotient+1,f
  4819  0D2B  3EFF               	addlw	-1
  4820  0D2C  1D03               	skipz
  4821  0D2D  2D28               	goto	u1575
  4822  0D2E  0871               	movf	___awdiv@divisor+1,w
  4823  0D2F  0273               	subwf	___awdiv@dividend+1,w
  4824  0D30  1D03               	skipz
  4825  0D31  2D34               	goto	u1585
  4826  0D32  0870               	movf	___awdiv@divisor,w
  4827  0D33  0272               	subwf	___awdiv@dividend,w
  4828  0D34                     u1585:	
  4829  0D34  1C03               	skipc
  4830  0D35  2D3D               	goto	l1992
  4831  0D36  0870               	movf	___awdiv@divisor,w
  4832  0D37  02F2               	subwf	___awdiv@dividend,f
  4833  0D38  0871               	movf	___awdiv@divisor+1,w
  4834  0D39  1C03               	skipc
  4835  0D3A  03F3               	decf	___awdiv@dividend+1,f
  4836  0D3B  02F3               	subwf	___awdiv@dividend+1,f
  4837  0D3C  1477               	bsf	___awdiv@quotient,0
  4838  0D3D                     l1992:	
  4839  0D3D  3001               	movlw	1
  4840  0D3E                     u1595:	
  4841  0D3E  1003               	clrc
  4842  0D3F  0CF1               	rrf	___awdiv@divisor+1,f
  4843  0D40  0CF0               	rrf	___awdiv@divisor,f
  4844  0D41  3EFF               	addlw	-1
  4845  0D42  1D03               	skipz
  4846  0D43  2D3E               	goto	u1595
  4847  0D44  3001               	movlw	1
  4848  0D45  02F5               	subwf	___awdiv@counter,f
  4849  0D46  1D03               	btfss	3,2
  4850  0D47  2D27               	goto	l1986
  4851  0D48                     l1996:	
  4852  0D48  0876               	movf	___awdiv@sign,w
  4853  0D49  1903               	btfsc	3,2
  4854  0D4A  2D50               	goto	l2000
  4855  0D4B  09F7               	comf	___awdiv@quotient,f
  4856  0D4C  09F8               	comf	___awdiv@quotient+1,f
  4857  0D4D  0AF7               	incf	___awdiv@quotient,f
  4858  0D4E  1903               	skipnz
  4859  0D4F  0AF8               	incf	___awdiv@quotient+1,f
  4860  0D50                     l2000:	
  4861  0D50  0878               	movf	___awdiv@quotient+1,w
  4862  0D51  00F1               	movwf	?___awdiv+1
  4863  0D52  0877               	movf	___awdiv@quotient,w
  4864  0D53  00F0               	movwf	?___awdiv
  4865  0D54  0008               	return
  4866  0D55                     __end_of___awdiv:	
  4867                           
  4868                           	psect	text13
  4869  0005                     __ptext13:	
  4870 ;; *************** function _readInputs *****************
  4871 ;; Defined at:
  4872 ;;		line 423 in file "LCDTime.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  pinstate        1    3[COMMON] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  1    wreg      void 
  4879 ;; Registers used:
  4880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4886 ;;      Params:         0       0       0       0       0
  4887 ;;      Locals:         1       0       0       0       0
  4888 ;;      Temps:          3       0       0       0       0
  4889 ;;      Totals:         4       0       0       0       0
  4890 ;;Total ram usage:        4 bytes
  4891 ;; Hardware stack levels used:    2
  4892 ;; This function calls:
  4893 ;;		Nothing
  4894 ;; This function is called by:
  4895 ;;		_main
  4896 ;;		_doMenu
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _readInputs
  4902  0005                     _readInputs:	
  4903                           
  4904                           ;LCDTime.c: 425: bButton = 0 ;
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in _readInputs: [wreg-fsr0h+status,2+status,0+pclath]
  4908  0005  1283               	bcf	3,5	;RP0=0, select bank0
  4909  0006  1303               	bcf	3,6	;RP1=0, select bank0
  4910  0007  01E4               	clrf	_bButton
  4911                           
  4912                           ;LCDTime.c: 427: if (RB4 == 1)
  4913  0008  1E06               	btfss	6,4	;volatile
  4914  0009  2816               	goto	l2238
  4915                           
  4916                           ;LCDTime.c: 428: {
  4917                           ;LCDTime.c: 429: _delay((unsigned long)((15)*(4000000/4000000.0))) ;
  4918  000A  3004               	movlw	4
  4919  000B  00F0               	movwf	??_readInputs
  4920  000C                     u2737:	
  4921  000C  0BF0               	decfsz	??_readInputs,f
  4922  000D  280C               	goto	u2737
  4923  000E  280F               	nop2	;nop
  4924                           
  4925                           ;LCDTime.c: 430: if (RB4 == 1)
  4926  000F  1283               	bcf	3,5	;RP0=0, select bank0
  4927  0010  1303               	bcf	3,6	;RP1=0, select bank0
  4928  0011  1E06               	btfss	6,4	;volatile
  4929  0012  2816               	goto	l2238
  4930                           
  4931                           ;LCDTime.c: 431: {
  4932                           ;LCDTime.c: 432: bButton = 1 ;
  4933  0013  01E4               	clrf	_bButton
  4934  0014  0AE4               	incf	_bButton,f
  4935                           
  4936                           ;LCDTime.c: 433: return ;
  4937  0015  0008               	return
  4938  0016                     l2238:	
  4939                           
  4940                           ;LCDTime.c: 434: }
  4941                           ;LCDTime.c: 435: }
  4942                           ;LCDTime.c: 438: unsigned char pinstate = (RB1 << 1) | RB2 ;
  4943  0016  3000               	movlw	0
  4944  0017  1886               	btfsc	6,1	;volatile
  4945  0018  3002               	movlw	2
  4946  0019  1906               	btfsc	6,2	;volatile
  4947  001A  3801               	iorlw	1
  4948  001B  00F0               	movwf	??_readInputs
  4949  001C  0870               	movf	??_readInputs,w
  4950  001D  00F3               	movwf	readInputs@pinstate
  4951                           
  4952                           ;LCDTime.c: 440: state = ttable[state & 0xf][pinstate];
  4953  001E  0865               	movf	_state,w
  4954  001F  390F               	andlw	15
  4955  0020  00F0               	movwf	??_readInputs
  4956  0021  3002               	movlw	2
  4957  0022                     u1895:	
  4958  0022  1003               	clrc
  4959  0023  0DF0               	rlf	??_readInputs,f
  4960  0024  3EFF               	addlw	-1
  4961  0025  1D03               	skipz
  4962  0026  2822               	goto	u1895
  4963  0027  3001               	movlw	(low ((_ttable-__stringbase)| (0+32768)))& (0+255)
  4964  0028  0770               	addwf	??_readInputs,w
  4965  0029  00F1               	movwf	??_readInputs+1
  4966  002A  0873               	movf	readInputs@pinstate,w
  4967  002B  0771               	addwf	??_readInputs+1,w
  4968  002C  0084               	movwf	4
  4969  002D  120A  158A  200A   	fcall	stringdir
  4970  0030  00F2               	movwf	??_readInputs+2
  4971  0031  0872               	movf	??_readInputs+2,w
  4972  0032  00E5               	movwf	_state
  4973  0033  0008               	return
  4974  0034                     __end_of_readInputs:	
  4975                           
  4976                           	psect	text14
  4977  0B0F                     __ptext14:	
  4978 ;; *************** function ___awmod *****************
  4979 ;; Defined at:
  4980 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  divisor         2    0[COMMON] int 
  4983 ;;  dividend        2    2[COMMON] int 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  sign            1    6[COMMON] unsigned char 
  4986 ;;  counter         1    5[COMMON] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  2    0[COMMON] int 
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4996 ;;      Params:         4       0       0       0       0
  4997 ;;      Locals:         2       0       0       0       0
  4998 ;;      Temps:          1       0       0       0       0
  4999 ;;      Totals:         7       0       0       0       0
  5000 ;;Total ram usage:        7 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_doMenu
  5006 ;;		_showRunningTime
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           
  5011                           ;psect for function ___awmod
  5012  0B0F                     ___awmod:	
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5016  0B0F  01F6               	clrf	___awmod@sign
  5017  0B10  1FF3               	btfss	___awmod@dividend+1,7
  5018  0B11  2B19               	goto	l2108
  5019  0B12  09F2               	comf	___awmod@dividend,f
  5020  0B13  09F3               	comf	___awmod@dividend+1,f
  5021  0B14  0AF2               	incf	___awmod@dividend,f
  5022  0B15  1903               	skipnz
  5023  0B16  0AF3               	incf	___awmod@dividend+1,f
  5024  0B17  01F6               	clrf	___awmod@sign
  5025  0B18  0AF6               	incf	___awmod@sign,f
  5026  0B19                     l2108:	
  5027  0B19  1FF1               	btfss	___awmod@divisor+1,7
  5028  0B1A  2B20               	goto	l2112
  5029  0B1B  09F0               	comf	___awmod@divisor,f
  5030  0B1C  09F1               	comf	___awmod@divisor+1,f
  5031  0B1D  0AF0               	incf	___awmod@divisor,f
  5032  0B1E  1903               	skipnz
  5033  0B1F  0AF1               	incf	___awmod@divisor+1,f
  5034  0B20                     l2112:	
  5035  0B20  0870               	movf	___awmod@divisor,w
  5036  0B21  0471               	iorwf	___awmod@divisor+1,w
  5037  0B22  1903               	btfsc	3,2
  5038  0B23  2B4D               	goto	l2130
  5039  0B24  01F5               	clrf	___awmod@counter
  5040  0B25  0AF5               	incf	___awmod@counter,f
  5041  0B26                     l2120:	
  5042  0B26  1BF1               	btfsc	___awmod@divisor+1,7
  5043  0B27  2B34               	goto	l2122
  5044  0B28  3001               	movlw	1
  5045  0B29                     u1805:	
  5046  0B29  1003               	clrc
  5047  0B2A  0DF0               	rlf	___awmod@divisor,f
  5048  0B2B  0DF1               	rlf	___awmod@divisor+1,f
  5049  0B2C  3EFF               	addlw	-1
  5050  0B2D  1D03               	skipz
  5051  0B2E  2B29               	goto	u1805
  5052  0B2F  3001               	movlw	1
  5053  0B30  00F4               	movwf	??___awmod
  5054  0B31  0874               	movf	??___awmod,w
  5055  0B32  07F5               	addwf	___awmod@counter,f
  5056  0B33  2B26               	goto	l2120
  5057  0B34                     l2122:	
  5058  0B34  0871               	movf	___awmod@divisor+1,w
  5059  0B35  0273               	subwf	___awmod@dividend+1,w
  5060  0B36  1D03               	skipz
  5061  0B37  2B3A               	goto	u1825
  5062  0B38  0870               	movf	___awmod@divisor,w
  5063  0B39  0272               	subwf	___awmod@dividend,w
  5064  0B3A                     u1825:	
  5065  0B3A  1C03               	skipc
  5066  0B3B  2B42               	goto	l2126
  5067  0B3C  0870               	movf	___awmod@divisor,w
  5068  0B3D  02F2               	subwf	___awmod@dividend,f
  5069  0B3E  0871               	movf	___awmod@divisor+1,w
  5070  0B3F  1C03               	skipc
  5071  0B40  03F3               	decf	___awmod@dividend+1,f
  5072  0B41  02F3               	subwf	___awmod@dividend+1,f
  5073  0B42                     l2126:	
  5074  0B42  3001               	movlw	1
  5075  0B43                     u1835:	
  5076  0B43  1003               	clrc
  5077  0B44  0CF1               	rrf	___awmod@divisor+1,f
  5078  0B45  0CF0               	rrf	___awmod@divisor,f
  5079  0B46  3EFF               	addlw	-1
  5080  0B47  1D03               	skipz
  5081  0B48  2B43               	goto	u1835
  5082  0B49  3001               	movlw	1
  5083  0B4A  02F5               	subwf	___awmod@counter,f
  5084  0B4B  1D03               	btfss	3,2
  5085  0B4C  2B34               	goto	l2122
  5086  0B4D                     l2130:	
  5087  0B4D  0876               	movf	___awmod@sign,w
  5088  0B4E  1903               	btfsc	3,2
  5089  0B4F  2B55               	goto	l2134
  5090  0B50  09F2               	comf	___awmod@dividend,f
  5091  0B51  09F3               	comf	___awmod@dividend+1,f
  5092  0B52  0AF2               	incf	___awmod@dividend,f
  5093  0B53  1903               	skipnz
  5094  0B54  0AF3               	incf	___awmod@dividend+1,f
  5095  0B55                     l2134:	
  5096  0B55  0873               	movf	___awmod@dividend+1,w
  5097  0B56  00F1               	movwf	?___awmod+1
  5098  0B57  0872               	movf	___awmod@dividend,w
  5099  0B58  00F0               	movwf	?___awmod
  5100  0B59  0008               	return
  5101  0B5A                     __end_of___awmod:	
  5102                           
  5103                           	psect	text15
  5104  0A0B                     __ptext15:	
  5105 ;; *************** function _DS1307_SetTime *****************
  5106 ;; Defined at:
  5107 ;;		line 45 in file "DS1307.c"
  5108 ;; Parameters:    Size  Location     Type
  5109 ;;  hh              1    wreg     unsigned char 
  5110 ;;  mm              1    2[COMMON] unsigned char 
  5111 ;;  ss              1    3[COMMON] unsigned char 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  hh              1    4[COMMON] unsigned char 
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  1    wreg      void 
  5116 ;; Registers used:
  5117 ;;		wreg, status,2, status,0, pclath, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5123 ;;      Params:         2       0       0       0       0
  5124 ;;      Locals:         1       0       0       0       0
  5125 ;;      Temps:          0       0       0       0       0
  5126 ;;      Totals:         3       0       0       0       0
  5127 ;;Total ram usage:        3 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    3
  5130 ;; This function calls:
  5131 ;;		_DS1307_Write
  5132 ;;		_I2C_Start
  5133 ;;		_I2C_Stop
  5134 ;; This function is called by:
  5135 ;;		_doMenu
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           
  5140                           ;psect for function _DS1307_SetTime
  5141  0A0B                     _DS1307_SetTime:	
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _DS1307_SetTime: [wreg+status,2+status,0+pclath+cstack]
  5145                           ;DS1307_SetTime@hh stored from wreg
  5146  0A0B  00F4               	movwf	DS1307_SetTime@hh
  5147                           
  5148                           ;DS1307.c: 47: I2C_Start();
  5149  0A0C  120A  158A  20EB  120A  158A  	fcall	_I2C_Start
  5150                           
  5151                           ;DS1307.c: 48: DS1307_Write(0xD0);
  5152  0A11  30D0               	movlw	208
  5153  0A12  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5154                           
  5155                           ;DS1307.c: 49: DS1307_Write(0x00);
  5156  0A17  3000               	movlw	0
  5157  0A18  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5158                           
  5159                           ;DS1307.c: 50: DS1307_Write(ss);
  5160  0A1D  0873               	movf	DS1307_SetTime@ss,w
  5161  0A1E  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5162                           
  5163                           ;DS1307.c: 51: DS1307_Write(mm);
  5164  0A23  0872               	movf	DS1307_SetTime@mm,w
  5165  0A24  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5166                           
  5167                           ;DS1307.c: 52: DS1307_Write(hh);
  5168  0A29  0874               	movf	DS1307_SetTime@hh,w
  5169  0A2A  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5170                           
  5171                           ;DS1307.c: 53: I2C_Stop();
  5172  0A2F  120A  158A  20F1   	fcall	_I2C_Stop
  5173  0A32  0008               	return
  5174  0A33                     __end_of_DS1307_SetTime:	
  5175                           
  5176                           	psect	text16
  5177  0A33                     __ptext16:	
  5178 ;; *************** function _DS1307_SetDate *****************
  5179 ;; Defined at:
  5180 ;;		line 56 in file "DS1307.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  nn              1    wreg     unsigned char 
  5183 ;;  dd              1    2[COMMON] unsigned char 
  5184 ;;  mm              1    3[COMMON] unsigned char 
  5185 ;;  yy              1    4[COMMON] unsigned char 
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;  nn              1    5[COMMON] unsigned char 
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, status,2, status,0, pclath, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5197 ;;      Params:         3       0       0       0       0
  5198 ;;      Locals:         1       0       0       0       0
  5199 ;;      Temps:          0       0       0       0       0
  5200 ;;      Totals:         4       0       0       0       0
  5201 ;;Total ram usage:        4 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    3
  5204 ;; This function calls:
  5205 ;;		_DS1307_Write
  5206 ;;		_I2C_Start
  5207 ;;		_I2C_Stop
  5208 ;; This function is called by:
  5209 ;;		_doMenu
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           
  5214                           ;psect for function _DS1307_SetDate
  5215  0A33                     _DS1307_SetDate:	
  5216                           
  5217                           ;incstack = 0
  5218                           ; Regs used in _DS1307_SetDate: [wreg+status,2+status,0+pclath+cstack]
  5219                           ;DS1307_SetDate@nn stored from wreg
  5220  0A33  00F5               	movwf	DS1307_SetDate@nn
  5221                           
  5222                           ;DS1307.c: 58: I2C_Start();
  5223  0A34  120A  158A  20EB  120A  158A  	fcall	_I2C_Start
  5224                           
  5225                           ;DS1307.c: 59: DS1307_Write(0xD0);
  5226  0A39  30D0               	movlw	208
  5227  0A3A  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5228                           
  5229                           ;DS1307.c: 60: DS1307_Write(0x03);
  5230  0A3F  3003               	movlw	3
  5231  0A40  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5232                           
  5233                           ;DS1307.c: 61: DS1307_Write(nn);
  5234  0A45  0875               	movf	DS1307_SetDate@nn,w
  5235  0A46  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5236                           
  5237                           ;DS1307.c: 62: DS1307_Write(dd);
  5238  0A4B  0872               	movf	DS1307_SetDate@dd,w
  5239  0A4C  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5240                           
  5241                           ;DS1307.c: 63: DS1307_Write(mm);
  5242  0A51  0873               	movf	DS1307_SetDate@mm,w
  5243  0A52  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5244                           
  5245                           ;DS1307.c: 64: DS1307_Write(yy);
  5246  0A57  0874               	movf	DS1307_SetDate@yy,w
  5247  0A58  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  5248                           
  5249                           ;DS1307.c: 65: I2C_Stop();
  5250  0A5D  120A  158A  20F1   	fcall	_I2C_Stop
  5251  0A60  0008               	return
  5252  0A61                     __end_of_DS1307_SetDate:	
  5253                           
  5254                           	psect	text17
  5255  094A                     __ptext17:	
  5256 ;; *************** function _clearPrompt *****************
  5257 ;; Defined at:
  5258 ;;		line 142 in file "LCDTime.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;		None
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;		None
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  1    wreg      void 
  5265 ;; Registers used:
  5266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5272 ;;      Params:         0       0       0       0       0
  5273 ;;      Locals:         0       0       0       0       0
  5274 ;;      Temps:          0       0       0       0       0
  5275 ;;      Totals:         0       0       0       0       0
  5276 ;;Total ram usage:        0 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    3
  5279 ;; This function calls:
  5280 ;;		_LCDGotoXY
  5281 ;;		_LCDWriteString
  5282 ;; This function is called by:
  5283 ;;		_main
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           
  5288                           ;psect for function _clearPrompt
  5289  094A                     _clearPrompt:	
  5290                           
  5291                           ;LCDTime.c: 144: next_menu_clear = 0 ;
  5292                           
  5293                           ;incstack = 0
  5294                           ; Regs used in _clearPrompt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5295  094A  1283               	bcf	3,5	;RP0=0, select bank0
  5296  094B  1303               	bcf	3,6	;RP1=0, select bank0
  5297  094C  01E2               	clrf	_next_menu_clear
  5298  094D  01E3               	clrf	_next_menu_clear+1
  5299                           
  5300                           ;LCDTime.c: 145: menuFunction = 1 ;
  5301  094E  01E1               	clrf	_menuFunction
  5302  094F  0AE1               	incf	_menuFunction,f
  5303                           
  5304                           ;LCDTime.c: 146: LCDGotoXY(9,0);
  5305  0950  01FC               	clrf	LCDGotoXY@y
  5306  0951  3009               	movlw	9
  5307  0952  120A  158A  21BE  120A  158A  	fcall	_LCDGotoXY
  5308                           
  5309                           ;LCDTime.c: 147: LCDWriteString("       ");
  5310  0957  3055               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  5311  0958  00FC               	movwf	LCDWriteString@msg
  5312  0959  3080               	movlw	128
  5313  095A  00FD               	movwf	LCDWriteString@msg+1
  5314  095B  120A  158A  2199   	fcall	_LCDWriteString
  5315  095E  0008               	return
  5316  095F                     __end_of_clearPrompt:	
  5317                           
  5318                           	psect	text18
  5319  0999                     __ptext18:	
  5320 ;; *************** function _LCDWriteString *****************
  5321 ;; Defined at:
  5322 ;;		line 183 in file "lcd_hd44780_pic16.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  msg             2   12[COMMON] PTR const unsigned char 
  5325 ;;		 -> STR_13(6), STR_12(6), STR_11(6), STR_10(5), 
  5326 ;;		 -> STR_9(8), STR_8(8), STR_7(6), setText(5), 
  5327 ;;		 -> STR_6(8), STR_5(7), STR_4(7), STR_3(2), 
  5328 ;;		 -> STR_2(4), STR_1(17), LCDWriteInt@str(6), 
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;		None
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5340 ;;      Params:         2       0       0       0       0
  5341 ;;      Locals:         0       0       0       0       0
  5342 ;;      Temps:          0       0       0       0       0
  5343 ;;      Totals:         2       0       0       0       0
  5344 ;;Total ram usage:        2 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    2
  5347 ;; This function calls:
  5348 ;;		_LCDByte
  5349 ;; This function is called by:
  5350 ;;		_LCDWriteInt
  5351 ;;		_main
  5352 ;;		_clearPrompt
  5353 ;;		_doMenu
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           
  5358                           ;psect for function _LCDWriteString
  5359  0999                     _LCDWriteString:	
  5360  0999                     l1944:	
  5361                           ;lcd_hd44780_pic16.c: 185: while(*msg!='\0')
  5362                           
  5363                           ;incstack = 0
  5364                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5365                           
  5366  0999  087D               	movf	LCDWriteString@msg+1,w
  5367  099A  1283               	bcf	3,5	;RP0=0, select bank0
  5368  099B  1303               	bcf	3,6	;RP1=0, select bank0
  5369  099C  00FF               	movwf	127
  5370  099D  087C               	movf	LCDWriteString@msg,w
  5371  099E  0084               	movwf	4
  5372  099F  120A  158A  2000  120A  158A  	fcall	stringtab
  5373  09A4  3A00               	xorlw	0
  5374  09A5  1903               	btfsc	3,2
  5375  09A6  0008               	return
  5376                           
  5377                           ;lcd_hd44780_pic16.c: 186: {
  5378                           ;lcd_hd44780_pic16.c: 187: (LCDByte(*msg,1));
  5379  09A7  01F5               	clrf	LCDByte@isdata
  5380  09A8  0AF5               	incf	LCDByte@isdata,f
  5381  09A9  087D               	movf	LCDWriteString@msg+1,w
  5382  09AA  1283               	bcf	3,5	;RP0=0, select bank0
  5383  09AB  1303               	bcf	3,6	;RP1=0, select bank0
  5384  09AC  00FF               	movwf	127
  5385  09AD  087C               	movf	LCDWriteString@msg,w
  5386  09AE  0084               	movwf	4
  5387  09AF  120A  158A  2000  120A  158A  	fcall	stringtab
  5388  09B4  120A  158A  235A  120A  158A  	fcall	_LCDByte
  5389                           
  5390                           ;lcd_hd44780_pic16.c: 188: msg++;
  5391  09B9  3001               	movlw	1
  5392  09BA  07FC               	addwf	LCDWriteString@msg,f
  5393  09BB  1803               	skipnc
  5394  09BC  0AFD               	incf	LCDWriteString@msg+1,f
  5395  09BD  2999               	goto	l1944
  5396  09BE                     __end_of_LCDWriteString:	
  5397                           
  5398                           	psect	text19
  5399  09BE                     __ptext19:	
  5400 ;; *************** function _LCDGotoXY *****************
  5401 ;; Defined at:
  5402 ;;		line 290 in file "lcd_hd44780_pic16.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;  x               1    wreg     unsigned char 
  5405 ;;  y               1   12[COMMON] unsigned char 
  5406 ;; Auto vars:     Size  Location     Type
  5407 ;;  x               1    0[BANK0 ] unsigned char 
  5408 ;; Return value:  Size  Location     Type
  5409 ;;                  1    wreg      void 
  5410 ;; Registers used:
  5411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5412 ;; Tracked objects:
  5413 ;;		On entry : 0/0
  5414 ;;		On exit  : 0/0
  5415 ;;		Unchanged: 0/0
  5416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5417 ;;      Params:         1       0       0       0       0
  5418 ;;      Locals:         0       1       0       0       0
  5419 ;;      Temps:          1       0       0       0       0
  5420 ;;      Totals:         2       1       0       0       0
  5421 ;;Total ram usage:        3 bytes
  5422 ;; Hardware stack levels used:    1
  5423 ;; Hardware stack levels required when called:    2
  5424 ;; This function calls:
  5425 ;;		_LCDByte
  5426 ;; This function is called by:
  5427 ;;		_main
  5428 ;;		_clearPrompt
  5429 ;;		_doMenu
  5430 ;;		_showClock
  5431 ;;		_showRunningTime
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           
  5436                           ;psect for function _LCDGotoXY
  5437  09BE                     _LCDGotoXY:	
  5438                           
  5439                           ;incstack = 0
  5440                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5441                           ;LCDGotoXY@x stored from wreg
  5442  09BE  1283               	bcf	3,5	;RP0=0, select bank0
  5443  09BF  1303               	bcf	3,6	;RP1=0, select bank0
  5444  09C0  00A0               	movwf	LCDGotoXY@x
  5445                           
  5446                           ;lcd_hd44780_pic16.c: 292: if(x>=20) return;
  5447  09C1  3014               	movlw	20
  5448  09C2  0220               	subwf	LCDGotoXY@x,w
  5449  09C3  1803               	btfsc	3,0
  5450  09C4  0008               	return
  5451  09C5  29CF               	goto	l2096
  5452  09C6                     l192:	
  5453                           ;lcd_hd44780_pic16.c: 300: case 1:
  5454                           
  5455                           ;lcd_hd44780_pic16.c: 299: break;
  5456                           
  5457                           ;lcd_hd44780_pic16.c: 297: {
  5458                           ;lcd_hd44780_pic16.c: 298: case 0:
  5459                           
  5460                           ;lcd_hd44780_pic16.c: 296: switch(y)
  5461                           
  5462                           
  5463                           ;lcd_hd44780_pic16.c: 301: x|=0b01000000;
  5464  09C6  1720               	bsf	LCDGotoXY@x,6
  5465                           
  5466                           ;lcd_hd44780_pic16.c: 302: break;
  5467  09C7  29DD               	goto	l191
  5468  09C8                     l2090:	
  5469                           ;lcd_hd44780_pic16.c: 303: case 2:
  5470                           
  5471                           
  5472                           ;lcd_hd44780_pic16.c: 304: x+=0x14;
  5473  09C8  3014               	movlw	20
  5474  09C9  29CB               	goto	L6
  5475  09CA                     l2092:	
  5476                           ;lcd_hd44780_pic16.c: 306: case 3:
  5477                           
  5478                           ;lcd_hd44780_pic16.c: 305: break;
  5479                           
  5480                           
  5481                           ;lcd_hd44780_pic16.c: 307: x+=0x54;
  5482  09CA  3054               	movlw	84
  5483  09CB                     L6:	
  5484  09CB  00FD               	movwf	??_LCDGotoXY
  5485  09CC  087D               	movf	??_LCDGotoXY,w
  5486  09CD  07A0               	addwf	LCDGotoXY@x,f
  5487                           
  5488                           ;lcd_hd44780_pic16.c: 309: }
  5489                           
  5490                           ;lcd_hd44780_pic16.c: 308: break;
  5491  09CE  29DD               	goto	l191
  5492  09CF                     l2096:	
  5493  09CF  087C               	movf	LCDGotoXY@y,w
  5494                           
  5495                           ; Switch size 1, requested type "space"
  5496                           ; Number of cases is 4, Range of values is 0 to 3
  5497                           ; switch strategies available:
  5498                           ; Name         Instructions Cycles
  5499                           ; simple_byte           13     7 (average)
  5500                           ; direct_byte           20     8 (fixed)
  5501                           ; jumptable            260     6 (fixed)
  5502                           ;	Chosen strategy is simple_byte
  5503  09D0  3A00               	xorlw	0	; case 0
  5504  09D1  1903               	skipnz
  5505  09D2  29DD               	goto	l191
  5506  09D3  3A01               	xorlw	1	; case 1
  5507  09D4  1903               	skipnz
  5508  09D5  29C6               	goto	l192
  5509  09D6  3A03               	xorlw	3	; case 2
  5510  09D7  1903               	skipnz
  5511  09D8  29C8               	goto	l2090
  5512  09D9  3A01               	xorlw	1	; case 3
  5513  09DA  1903               	skipnz
  5514  09DB  29CA               	goto	l2092
  5515  09DC  29DD               	goto	l191
  5516  09DD                     l191:	
  5517                           
  5518                           ;lcd_hd44780_pic16.c: 331: x|=0b10000000;
  5519  09DD  17A0               	bsf	LCDGotoXY@x,7
  5520                           
  5521                           ;lcd_hd44780_pic16.c: 332: (LCDByte(x,0));
  5522  09DE  01F5               	clrf	LCDByte@isdata
  5523  09DF  0820               	movf	LCDGotoXY@x,w
  5524  09E0  120A  158A  235A   	fcall	_LCDByte
  5525  09E3  0008               	return
  5526  09E4                     __end_of_LCDGotoXY:	
  5527                           
  5528                           	psect	text20
  5529  0A98                     __ptext20:	
  5530 ;; *************** function _LCDInit *****************
  5531 ;; Defined at:
  5532 ;;		line 125 in file "lcd_hd44780_pic16.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  style           1    wreg     unsigned char 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  style           1    0[BANK0 ] unsigned char 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  1    wreg      void 
  5539 ;; Registers used:
  5540 ;;		wreg, status,2, status,0, pclath, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5546 ;;      Params:         0       0       0       0       0
  5547 ;;      Locals:         0       1       0       0       0
  5548 ;;      Temps:          2       0       0       0       0
  5549 ;;      Totals:         2       1       0       0       0
  5550 ;;Total ram usage:        3 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    2
  5553 ;; This function calls:
  5554 ;;		_LCDBusyLoop
  5555 ;;		_LCDByte
  5556 ;; This function is called by:
  5557 ;;		_main
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function _LCDInit
  5563  0A98                     _LCDInit:	
  5564                           
  5565                           ;incstack = 0
  5566                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  5567                           ;LCDInit@style stored from wreg
  5568  0A98  1283               	bcf	3,5	;RP0=0, select bank0
  5569  0A99  1303               	bcf	3,6	;RP1=0, select bank0
  5570  0A9A  00A0               	movwf	LCDInit@style
  5571                           
  5572                           ;lcd_hd44780_pic16.c: 141: _delay((unsigned long)((30)*(4000000/4000.0)));
  5573  0A9B  3027               	movlw	39
  5574  0A9C  00FD               	movwf	??_LCDInit+1
  5575  0A9D  30F5               	movlw	245
  5576  0A9E  00FC               	movwf	??_LCDInit
  5577  0A9F                     u2747:	
  5578  0A9F  0BFC               	decfsz	??_LCDInit,f
  5579  0AA0  2A9F               	goto	u2747
  5580  0AA1  0BFD               	decfsz	??_LCDInit+1,f
  5581  0AA2  2A9F               	goto	u2747
  5582                           
  5583                           ;lcd_hd44780_pic16.c: 144: TRISD&=(~(0x0F<<4));
  5584  0AA3  300F               	movlw	15
  5585  0AA4  00FC               	movwf	??_LCDInit
  5586  0AA5  087C               	movf	??_LCDInit,w
  5587  0AA6  1683               	bsf	3,5	;RP0=1, select bank1
  5588  0AA7  1303               	bcf	3,6	;RP1=0, select bank1
  5589  0AA8  0588               	andwf	8,f	;volatile
  5590                           
  5591                           ;lcd_hd44780_pic16.c: 146: TRISBbits.TRISB5=0;
  5592  0AA9  1286               	bcf	6,5	;volatile
  5593                           
  5594                           ;lcd_hd44780_pic16.c: 147: TRISDbits.TRISD3=0;
  5595  0AAA  1188               	bcf	8,3	;volatile
  5596                           
  5597                           ;lcd_hd44780_pic16.c: 148: TRISDbits.TRISD2=0;
  5598  0AAB  1108               	bcf	8,2	;volatile
  5599                           
  5600                           ;lcd_hd44780_pic16.c: 150: PORTD&=(~(0x0F<<4));
  5601  0AAC  300F               	movlw	15
  5602  0AAD  00FC               	movwf	??_LCDInit
  5603  0AAE  087C               	movf	??_LCDInit,w
  5604  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  5605  0AB0  1303               	bcf	3,6	;RP1=0, select bank0
  5606  0AB1  0588               	andwf	8,f	;volatile
  5607                           
  5608                           ;lcd_hd44780_pic16.c: 152: (RB5=0);
  5609  0AB2  1286               	bcf	6,5	;volatile
  5610                           
  5611                           ;lcd_hd44780_pic16.c: 153: (RD2=0);
  5612  0AB3  1108               	bcf	8,2	;volatile
  5613                           
  5614                           ;lcd_hd44780_pic16.c: 154: (RD3=0);
  5615  0AB4  1188               	bcf	8,3	;volatile
  5616                           
  5617                           ;lcd_hd44780_pic16.c: 159: (RB5=1);
  5618                           
  5619                           ;lcd_hd44780_pic16.c: 157: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5620  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  5621  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  5622  0AB7  1686               	bsf	6,5	;volatile
  5623                           
  5624                           ;lcd_hd44780_pic16.c: 160: PORTD|=((0b00000010)<<4);
  5625  0AB8  1688               	bsf	8,5	;volatile
  5626                           
  5627                           ;lcd_hd44780_pic16.c: 161: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5628  0AB9  0000               	nop
  5629                           
  5630                           ;lcd_hd44780_pic16.c: 162: (RB5=0);
  5631  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  5632  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  5633  0ABC  1286               	bcf	6,5	;volatile
  5634                           
  5635                           ;lcd_hd44780_pic16.c: 163: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5636  0ABD  0000               	nop
  5637                           
  5638                           ;lcd_hd44780_pic16.c: 166: LCDBusyLoop();
  5639  0ABE  120A  158A  2555  120A  158A  	fcall	_LCDBusyLoop
  5640                           
  5641                           ;lcd_hd44780_pic16.c: 171: (LCDByte(0b00101000,0));
  5642  0AC3  01F5               	clrf	LCDByte@isdata
  5643  0AC4  3028               	movlw	40
  5644  0AC5  120A  158A  235A  120A  158A  	fcall	_LCDByte
  5645                           
  5646                           ;lcd_hd44780_pic16.c: 172: (LCDByte(0b00001100|style,0));
  5647  0ACA  01F5               	clrf	LCDByte@isdata
  5648  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  5649  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
  5650  0ACD  0820               	movf	LCDInit@style,w
  5651  0ACE  380C               	iorlw	12
  5652  0ACF  120A  158A  235A   	fcall	_LCDByte
  5653  0AD2  0008               	return
  5654  0AD3                     __end_of_LCDInit:	
  5655                           
  5656                           	psect	text21
  5657  0B5A                     __ptext21:	
  5658 ;; *************** function _LCDByte *****************
  5659 ;; Defined at:
  5660 ;;		line 12 in file "lcd_hd44780_pic16.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  c               1    wreg     unsigned char 
  5663 ;;  isdata          1    5[COMMON] unsigned char 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  c               1   10[COMMON] unsigned char 
  5666 ;;  temp            1   11[COMMON] unsigned char 
  5667 ;;  ln              1    9[COMMON] unsigned char 
  5668 ;;  hn              1    8[COMMON] unsigned char 
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  1    wreg      void 
  5671 ;; Registers used:
  5672 ;;		wreg, status,2, status,0, pclath, cstack
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5678 ;;      Params:         1       0       0       0       0
  5679 ;;      Locals:         4       0       0       0       0
  5680 ;;      Temps:          2       0       0       0       0
  5681 ;;      Totals:         7       0       0       0       0
  5682 ;;Total ram usage:        7 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    1
  5685 ;; This function calls:
  5686 ;;		_LCDBusyLoop
  5687 ;; This function is called by:
  5688 ;;		_LCDInit
  5689 ;;		_LCDWriteString
  5690 ;;		_LCDGotoXY
  5691 ;;		_main
  5692 ;;		_doMenu
  5693 ;;		_showTime
  5694 ;;		_showDate
  5695 ;;		_showRunningTime
  5696 ;; This function uses a non-reentrant model
  5697 ;;
  5698                           
  5699                           
  5700                           ;psect for function _LCDByte
  5701  0B5A                     _LCDByte:	
  5702                           
  5703                           ;incstack = 0
  5704                           ; Regs used in _LCDByte: [wreg+status,2+status,0+pclath+cstack]
  5705                           ;LCDByte@c stored from wreg
  5706  0B5A  00FA               	movwf	LCDByte@c
  5707                           
  5708                           ;lcd_hd44780_pic16.c: 21: uint8_t hn,ln;
  5709                           ;lcd_hd44780_pic16.c: 22: uint8_t temp;
  5710                           ;lcd_hd44780_pic16.c: 24: hn=c>>4;
  5711  0B5B  087A               	movf	LCDByte@c,w
  5712  0B5C  00F6               	movwf	??_LCDByte
  5713  0B5D  3004               	movlw	4
  5714  0B5E                     u1415:	
  5715  0B5E  1003               	clrc
  5716  0B5F  0CF6               	rrf	??_LCDByte,f
  5717  0B60  3EFF               	addlw	-1
  5718  0B61  1D03               	skipz
  5719  0B62  2B5E               	goto	u1415
  5720  0B63  0876               	movf	??_LCDByte,w
  5721  0B64  00F7               	movwf	??_LCDByte+1
  5722  0B65  0877               	movf	??_LCDByte+1,w
  5723  0B66  00F8               	movwf	LCDByte@hn
  5724                           
  5725                           ;lcd_hd44780_pic16.c: 25: ln=(c & 0x0F);
  5726  0B67  087A               	movf	LCDByte@c,w
  5727  0B68  390F               	andlw	15
  5728  0B69  00F6               	movwf	??_LCDByte
  5729  0B6A  0876               	movf	??_LCDByte,w
  5730  0B6B  00F9               	movwf	LCDByte@ln
  5731                           
  5732                           ;lcd_hd44780_pic16.c: 27: if(isdata==0)
  5733  0B6C  0875               	movf	LCDByte@isdata,w
  5734  0B6D  1D03               	btfss	3,2
  5735  0B6E  2B73               	goto	l154
  5736                           
  5737                           ;lcd_hd44780_pic16.c: 28: (RD3=0);
  5738  0B6F  1283               	bcf	3,5	;RP0=0, select bank0
  5739  0B70  1303               	bcf	3,6	;RP1=0, select bank0
  5740  0B71  1188               	bcf	8,3	;volatile
  5741  0B72  2B76               	goto	l155
  5742  0B73                     l154:	
  5743                           
  5744                           ;lcd_hd44780_pic16.c: 29: else
  5745                           ;lcd_hd44780_pic16.c: 30: (RD3=1);
  5746  0B73  1283               	bcf	3,5	;RP0=0, select bank0
  5747  0B74  1303               	bcf	3,6	;RP1=0, select bank0
  5748  0B75  1588               	bsf	8,3	;volatile
  5749  0B76                     l155:	
  5750                           
  5751                           ;lcd_hd44780_pic16.c: 32: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5752                           ;lcd_hd44780_pic16.c: 34: (RB5=1);
  5753  0B76  1283               	bcf	3,5	;RP0=0, select bank0
  5754  0B77  1303               	bcf	3,6	;RP1=0, select bank0
  5755  0B78  1686               	bsf	6,5	;volatile
  5756                           
  5757                           ;lcd_hd44780_pic16.c: 38: temp=(PORTD & (~(0X0F<<4)))|((hn<<4));
  5758  0B79  0878               	movf	LCDByte@hn,w
  5759  0B7A  00F6               	movwf	??_LCDByte
  5760  0B7B  3004               	movlw	4
  5761  0B7C                     u1435:	
  5762  0B7C  1003               	clrc
  5763  0B7D  0DF6               	rlf	??_LCDByte,f
  5764  0B7E  3EFF               	addlw	-1
  5765  0B7F  1D03               	skipz
  5766  0B80  2B7C               	goto	u1435
  5767  0B81  0808               	movf	8,w	;volatile
  5768  0B82  390F               	andlw	15
  5769  0B83  0476               	iorwf	??_LCDByte,w
  5770  0B84  00F7               	movwf	??_LCDByte+1
  5771  0B85  0877               	movf	??_LCDByte+1,w
  5772  0B86  00FB               	movwf	LCDByte@temp
  5773                           
  5774                           ;lcd_hd44780_pic16.c: 39: PORTD=temp;
  5775  0B87  087B               	movf	LCDByte@temp,w
  5776  0B88  0088               	movwf	8	;volatile
  5777                           
  5778                           ;lcd_hd44780_pic16.c: 41: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5779  0B89  0000               	nop
  5780                           
  5781                           ;lcd_hd44780_pic16.c: 45: (RB5=0);
  5782  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  5783  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  5784  0B8C  1286               	bcf	6,5	;volatile
  5785                           
  5786                           ;lcd_hd44780_pic16.c: 47: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5787  0B8D  0000               	nop
  5788                           
  5789                           ;lcd_hd44780_pic16.c: 50: (RB5=1);
  5790  0B8E  1283               	bcf	3,5	;RP0=0, select bank0
  5791  0B8F  1303               	bcf	3,6	;RP1=0, select bank0
  5792  0B90  1686               	bsf	6,5	;volatile
  5793                           
  5794                           ;lcd_hd44780_pic16.c: 52: temp=(PORTD & (~(0X0F<<4)))|((ln<<4));
  5795  0B91  0879               	movf	LCDByte@ln,w
  5796  0B92  00F6               	movwf	??_LCDByte
  5797  0B93  3004               	movlw	4
  5798  0B94                     u1445:	
  5799  0B94  1003               	clrc
  5800  0B95  0DF6               	rlf	??_LCDByte,f
  5801  0B96  3EFF               	addlw	-1
  5802  0B97  1D03               	skipz
  5803  0B98  2B94               	goto	u1445
  5804  0B99  0808               	movf	8,w	;volatile
  5805  0B9A  390F               	andlw	15
  5806  0B9B  0476               	iorwf	??_LCDByte,w
  5807  0B9C  00F7               	movwf	??_LCDByte+1
  5808  0B9D  0877               	movf	??_LCDByte+1,w
  5809  0B9E  00FB               	movwf	LCDByte@temp
  5810                           
  5811                           ;lcd_hd44780_pic16.c: 54: PORTD=temp;
  5812  0B9F  087B               	movf	LCDByte@temp,w
  5813  0BA0  0088               	movwf	8	;volatile
  5814                           
  5815                           ;lcd_hd44780_pic16.c: 56: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5816  0BA1  0000               	nop
  5817                           
  5818                           ;lcd_hd44780_pic16.c: 60: (RB5=0);
  5819  0BA2  1283               	bcf	3,5	;RP0=0, select bank0
  5820  0BA3  1303               	bcf	3,6	;RP1=0, select bank0
  5821  0BA4  1286               	bcf	6,5	;volatile
  5822                           
  5823                           ;lcd_hd44780_pic16.c: 62: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5824  0BA5  0000               	nop
  5825                           
  5826                           ;lcd_hd44780_pic16.c: 64: LCDBusyLoop();
  5827  0BA6  120A  158A  2555   	fcall	_LCDBusyLoop
  5828  0BA9  0008               	return
  5829  0BAA                     __end_of_LCDByte:	
  5830                           
  5831                           	psect	text22
  5832  0D55                     __ptext22:	
  5833 ;; *************** function _LCDBusyLoop *****************
  5834 ;; Defined at:
  5835 ;;		line 67 in file "lcd_hd44780_pic16.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;		None
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;  status          1    4[COMMON] unsigned char 
  5840 ;;  temp            1    3[COMMON] unsigned char 
  5841 ;;  busy            1    2[COMMON] unsigned char 
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  1    wreg      void 
  5844 ;; Registers used:
  5845 ;;		wreg, status,2, status,0
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5851 ;;      Params:         0       0       0       0       0
  5852 ;;      Locals:         3       0       0       0       0
  5853 ;;      Temps:          2       0       0       0       0
  5854 ;;      Totals:         5       0       0       0       0
  5855 ;;Total ram usage:        5 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; This function calls:
  5858 ;;		Nothing
  5859 ;; This function is called by:
  5860 ;;		_LCDByte
  5861 ;;		_LCDInit
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           
  5866                           ;psect for function _LCDBusyLoop
  5867  0D55                     _LCDBusyLoop:	
  5868                           
  5869                           ;lcd_hd44780_pic16.c: 71: uint8_t busy,status=0x00,temp;
  5870                           
  5871                           ;incstack = 0
  5872                           ; Regs used in _LCDBusyLoop: [wreg+status,2+status,0]
  5873  0D55  01F4               	clrf	LCDBusyLoop@status
  5874                           
  5875                           ;lcd_hd44780_pic16.c: 74: TRISD|=(0x0f<<4);
  5876  0D56  30F0               	movlw	240
  5877  0D57  00F0               	movwf	??_LCDBusyLoop
  5878  0D58  0870               	movf	??_LCDBusyLoop,w
  5879  0D59  1683               	bsf	3,5	;RP0=1, select bank1
  5880  0D5A  1303               	bcf	3,6	;RP1=0, select bank1
  5881  0D5B  0488               	iorwf	8,f	;volatile
  5882                           
  5883                           ;lcd_hd44780_pic16.c: 77: (RD2=1);
  5884  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  5885  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  5886  0D5E  1508               	bsf	8,2	;volatile
  5887                           
  5888                           ;lcd_hd44780_pic16.c: 78: (RD3=0);
  5889  0D5F  1188               	bcf	8,3	;volatile
  5890  0D60                     l1852:	
  5891                           ;lcd_hd44780_pic16.c: 85: do
  5892                           
  5893                           ;lcd_hd44780_pic16.c: 82: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5894                           
  5895                           
  5896                           ;lcd_hd44780_pic16.c: 86: {
  5897                           ;lcd_hd44780_pic16.c: 88: (RB5=1);
  5898  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  5899  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  5900  0D62  1686               	bsf	6,5	;volatile
  5901                           
  5902                           ;lcd_hd44780_pic16.c: 93: status=(PORTD>>4);
  5903                           
  5904                           ;lcd_hd44780_pic16.c: 91: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5905  0D63  1283               	bcf	3,5	;RP0=0, select bank0
  5906  0D64  1303               	bcf	3,6	;RP1=0, select bank0
  5907  0D65  0808               	movf	8,w	;volatile
  5908  0D66  00F0               	movwf	??_LCDBusyLoop
  5909  0D67  3004               	movlw	4
  5910  0D68                     u1355:	
  5911  0D68  1003               	clrc
  5912  0D69  0CF0               	rrf	??_LCDBusyLoop,f
  5913  0D6A  3EFF               	addlw	-1
  5914  0D6B  1D03               	skipz
  5915  0D6C  2D68               	goto	u1355
  5916  0D6D  0870               	movf	??_LCDBusyLoop,w
  5917  0D6E  00F1               	movwf	??_LCDBusyLoop+1
  5918  0D6F  0871               	movf	??_LCDBusyLoop+1,w
  5919  0D70  00F4               	movwf	LCDBusyLoop@status
  5920                           
  5921                           ;lcd_hd44780_pic16.c: 94: status=status<<4;
  5922  0D71  0874               	movf	LCDBusyLoop@status,w
  5923  0D72  00F0               	movwf	??_LCDBusyLoop
  5924  0D73  3003               	movlw	3
  5925  0D74                     u1365:	
  5926  0D74  1003               	clrc
  5927  0D75  0DF0               	rlf	??_LCDBusyLoop,f
  5928  0D76  3EFF               	addlw	-1
  5929  0D77  1D03               	skipz
  5930  0D78  2D74               	goto	u1365
  5931  0D79  1003               	clrc
  5932  0D7A  0D70               	rlf	??_LCDBusyLoop,w
  5933  0D7B  00F1               	movwf	??_LCDBusyLoop+1
  5934  0D7C  0871               	movf	??_LCDBusyLoop+1,w
  5935  0D7D  00F4               	movwf	LCDBusyLoop@status
  5936                           
  5937                           ;lcd_hd44780_pic16.c: 99: (RB5=0);
  5938                           
  5939                           ;lcd_hd44780_pic16.c: 96: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5940  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  5941  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  5942  0D80  1286               	bcf	6,5	;volatile
  5943                           
  5944                           ;lcd_hd44780_pic16.c: 100: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5945  0D81  0000               	nop
  5946                           
  5947                           ;lcd_hd44780_pic16.c: 102: (RB5=1);
  5948  0D82  1283               	bcf	3,5	;RP0=0, select bank0
  5949  0D83  1303               	bcf	3,6	;RP1=0, select bank0
  5950  0D84  1686               	bsf	6,5	;volatile
  5951                           
  5952                           ;lcd_hd44780_pic16.c: 105: temp=(PORTD>>4);
  5953                           
  5954                           ;lcd_hd44780_pic16.c: 103: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5955  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  5956  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  5957  0D87  0808               	movf	8,w	;volatile
  5958  0D88  00F0               	movwf	??_LCDBusyLoop
  5959  0D89  3004               	movlw	4
  5960  0D8A                     u1375:	
  5961  0D8A  1003               	clrc
  5962  0D8B  0CF0               	rrf	??_LCDBusyLoop,f
  5963  0D8C  3EFF               	addlw	-1
  5964  0D8D  1D03               	skipz
  5965  0D8E  2D8A               	goto	u1375
  5966  0D8F  0870               	movf	??_LCDBusyLoop,w
  5967  0D90  00F1               	movwf	??_LCDBusyLoop+1
  5968  0D91  0871               	movf	??_LCDBusyLoop+1,w
  5969  0D92  00F3               	movwf	LCDBusyLoop@temp
  5970                           
  5971                           ;lcd_hd44780_pic16.c: 106: temp&=0x0F;
  5972  0D93  300F               	movlw	15
  5973  0D94  00F0               	movwf	??_LCDBusyLoop
  5974  0D95  0870               	movf	??_LCDBusyLoop,w
  5975  0D96  05F3               	andwf	LCDBusyLoop@temp,f
  5976                           
  5977                           ;lcd_hd44780_pic16.c: 108: status=status|temp;
  5978  0D97  0874               	movf	LCDBusyLoop@status,w
  5979  0D98  0473               	iorwf	LCDBusyLoop@temp,w
  5980  0D99  00F0               	movwf	??_LCDBusyLoop
  5981  0D9A  0870               	movf	??_LCDBusyLoop,w
  5982  0D9B  00F4               	movwf	LCDBusyLoop@status
  5983                           
  5984                           ;lcd_hd44780_pic16.c: 110: busy=status & 0b10000000;
  5985  0D9C  0874               	movf	LCDBusyLoop@status,w
  5986  0D9D  3980               	andlw	128
  5987  0D9E  00F0               	movwf	??_LCDBusyLoop
  5988  0D9F  0870               	movf	??_LCDBusyLoop,w
  5989  0DA0  00F2               	movwf	LCDBusyLoop@busy
  5990                           
  5991                           ;lcd_hd44780_pic16.c: 114: (RB5=0);
  5992                           
  5993                           ;lcd_hd44780_pic16.c: 112: _delay((unsigned long)((0.5)*(4000000/4000000.0)));
  5994  0DA1  1283               	bcf	3,5	;RP0=0, select bank0
  5995  0DA2  1303               	bcf	3,6	;RP1=0, select bank0
  5996  0DA3  1286               	bcf	6,5	;volatile
  5997                           
  5998                           ;lcd_hd44780_pic16.c: 115: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5999  0DA4  0000               	nop
  6000                           
  6001                           ;lcd_hd44780_pic16.c: 116: }while(busy);
  6002  0DA5  0872               	movf	LCDBusyLoop@busy,w
  6003  0DA6  1D03               	btfss	3,2
  6004  0DA7  2D60               	goto	l1852
  6005                           
  6006                           ;lcd_hd44780_pic16.c: 118: (RD2=0);
  6007  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  6008  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  6009  0DAA  1108               	bcf	8,2	;volatile
  6010                           
  6011                           ;lcd_hd44780_pic16.c: 121: TRISD&=(~(0x0F<<4));
  6012  0DAB  300F               	movlw	15
  6013  0DAC  00F0               	movwf	??_LCDBusyLoop
  6014  0DAD  0870               	movf	??_LCDBusyLoop,w
  6015  0DAE  1683               	bsf	3,5	;RP0=1, select bank1
  6016  0DAF  1303               	bcf	3,6	;RP1=0, select bank1
  6017  0DB0  0588               	andwf	8,f	;volatile
  6018  0DB1  0008               	return
  6019  0DB2                     __end_of_LCDBusyLoop:	
  6020                           
  6021                           	psect	text23
  6022  091B                     __ptext23:	
  6023 ;; *************** function _I2C_Init *****************
  6024 ;; Defined at:
  6025 ;;		line 99 in file "i2c.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;		None
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;		None
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  1    wreg      void 
  6032 ;; Registers used:
  6033 ;;		wreg
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 0/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6039 ;;      Params:         0       0       0       0       0
  6040 ;;      Locals:         0       0       0       0       0
  6041 ;;      Temps:          0       0       0       0       0
  6042 ;;      Totals:         0       0       0       0       0
  6043 ;;Total ram usage:        0 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_main
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function _I2C_Init
  6054  091B                     _I2C_Init:	
  6055                           
  6056                           ;i2c.c: 101: TRISC3 = 1;
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _I2C_Init: [wreg]
  6060  091B  1683               	bsf	3,5	;RP0=1, select bank1
  6061  091C  1303               	bcf	3,6	;RP1=0, select bank1
  6062  091D  1587               	bsf	7,3	;volatile
  6063                           
  6064                           ;i2c.c: 102: TRISC4 = 1;
  6065  091E  1607               	bsf	7,4	;volatile
  6066                           
  6067                           ;i2c.c: 103: SSPSTAT |= 0x80;
  6068  091F  1794               	bsf	20,7	;volatile
  6069                           
  6070                           ;i2c.c: 104: SSPCON = 0x28;
  6071  0920  3028               	movlw	40
  6072  0921  1283               	bcf	3,5	;RP0=0, select bank0
  6073  0922  1303               	bcf	3,6	;RP1=0, select bank0
  6074  0923  0094               	movwf	20	;volatile
  6075                           
  6076                           ;i2c.c: 105: SSPADD = 0x28;
  6077  0924  3028               	movlw	40
  6078  0925  1683               	bsf	3,5	;RP0=1, select bank1
  6079  0926  1303               	bcf	3,6	;RP1=0, select bank1
  6080  0927  0093               	movwf	19	;volatile
  6081  0928  0008               	return
  6082  0929                     __end_of_I2C_Init:	
  6083                           
  6084                           	psect	text24
  6085  0CA3                     __ptext24:	
  6086 ;; *************** function _DS1307_readRam *****************
  6087 ;; Defined at:
  6088 ;;		line 95 in file "DS1307.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  ptr             1    wreg     PTR unsigned char 
  6091 ;;		 -> runningHours(2), runningMinutes(2), 
  6092 ;;  offset          2    2[COMMON] int 
  6093 ;;  length          2    4[COMMON] int 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  ptr             1    8[COMMON] PTR unsigned char 
  6096 ;;		 -> runningHours(2), runningMinutes(2), 
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      void 
  6099 ;; Registers used:
  6100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6106 ;;      Params:         4       0       0       0       0
  6107 ;;      Locals:         1       0       0       0       0
  6108 ;;      Temps:          2       0       0       0       0
  6109 ;;      Totals:         7       0       0       0       0
  6110 ;;Total ram usage:        7 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    3
  6113 ;; This function calls:
  6114 ;;		_DS1307_Read
  6115 ;;		_DS1307_Write
  6116 ;;		_I2C_Ack
  6117 ;;		_I2C_NoAck
  6118 ;;		_I2C_Restart
  6119 ;;		_I2C_Start
  6120 ;;		_I2C_Stop
  6121 ;; This function is called by:
  6122 ;;		_main
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           
  6127                           ;psect for function _DS1307_readRam
  6128  0CA3                     _DS1307_readRam:	
  6129                           
  6130                           ;incstack = 0
  6131                           ; Regs used in _DS1307_readRam: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6132                           ;DS1307_readRam@ptr stored from wreg
  6133  0CA3  00F8               	movwf	DS1307_readRam@ptr
  6134                           
  6135                           ;DS1307.c: 97: I2C_Start();
  6136  0CA4  120A  158A  20EB  120A  158A  	fcall	_I2C_Start
  6137                           
  6138                           ;DS1307.c: 98: DS1307_Write(0xD0);
  6139  0CA9  30D0               	movlw	208
  6140  0CAA  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  6141                           
  6142                           ;DS1307.c: 99: DS1307_Write(0x08 + offset);
  6143  0CAF  0872               	movf	DS1307_readRam@offset,w
  6144  0CB0  3E08               	addlw	8
  6145  0CB1  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  6146                           
  6147                           ;DS1307.c: 100: I2C_Restart();
  6148  0CB6  120A  158A  20E5  120A  158A  	fcall	_I2C_Restart
  6149                           
  6150                           ;DS1307.c: 101: DS1307_Write(0xD1);
  6151  0CBB  30D1               	movlw	209
  6152  0CBC  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  6153  0CC1                     l2330:	
  6154                           ;DS1307.c: 102: while(length-- > 1)
  6155                           
  6156  0CC1  0875               	movf	DS1307_readRam@length+1,w
  6157  0CC2  00F7               	movwf	??_DS1307_readRam+1
  6158  0CC3  03F4               	decf	DS1307_readRam@length,f
  6159  0CC4  0A74               	incf	DS1307_readRam@length,w
  6160  0CC5  00F6               	movwf	??_DS1307_readRam
  6161  0CC6  1903               	skipnz
  6162  0CC7  03F5               	decf	DS1307_readRam@length+1,f
  6163  0CC8  0877               	movf	??_DS1307_readRam+1,w
  6164  0CC9  3A80               	xorlw	128
  6165  0CCA  00FF               	movwf	127
  6166  0CCB  3080               	movlw	128
  6167  0CCC  027F               	subwf	127,w
  6168  0CCD  1D03               	skipz
  6169  0CCE  2CD1               	goto	u1925
  6170  0CCF  3002               	movlw	2
  6171  0CD0  0276               	subwf	??_DS1307_readRam,w
  6172  0CD1                     u1925:	
  6173  0CD1  1C03               	btfss	3,0
  6174  0CD2  2CE3               	goto	l2332
  6175                           
  6176                           ;DS1307.c: 103: *ptr++ = DS1307_Read(); I2C_Ack();
  6177  0CD3  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  6178  0CD8  00F6               	movwf	??_DS1307_readRam
  6179  0CD9  0878               	movf	DS1307_readRam@ptr,w
  6180  0CDA  0084               	movwf	4
  6181  0CDB  0876               	movf	??_DS1307_readRam,w
  6182  0CDC  1383               	bcf	3,7	;select IRP bank0
  6183  0CDD  0080               	movwf	0
  6184  0CDE  3001               	movlw	1
  6185  0CDF  00F6               	movwf	??_DS1307_readRam
  6186  0CE0  0876               	movf	??_DS1307_readRam,w
  6187  0CE1  07F8               	addwf	DS1307_readRam@ptr,f
  6188  0CE2  2CC1               	goto	l2330
  6189  0CE3                     l2332:	
  6190  0CE3  120A  158A  20FE  120A  158A  	fcall	_I2C_Ack
  6191                           
  6192                           ;DS1307.c: 104: *ptr = DS1307_Read(); I2C_NoAck();
  6193  0CE8  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  6194  0CED  00F6               	movwf	??_DS1307_readRam
  6195  0CEE  0878               	movf	DS1307_readRam@ptr,w
  6196  0CEF  0084               	movwf	4
  6197  0CF0  0876               	movf	??_DS1307_readRam,w
  6198  0CF1  1383               	bcf	3,7	;select IRP bank0
  6199  0CF2  0080               	movwf	0
  6200  0CF3  120A  158A  20F7  120A  158A  	fcall	_I2C_NoAck
  6201                           
  6202                           ;DS1307.c: 105: I2C_Stop();
  6203  0CF8  120A  158A  20F1   	fcall	_I2C_Stop
  6204  0CFB  0008               	return
  6205  0CFC                     __end_of_DS1307_readRam:	
  6206                           
  6207                           	psect	text25
  6208  08FE                     __ptext25:	
  6209 ;; *************** function _I2C_Ack *****************
  6210 ;; Defined at:
  6211 ;;		line 144 in file "i2c.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;		None
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;		None
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  1    wreg      void 
  6218 ;; Registers used:
  6219 ;;		None
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6225 ;;      Params:         0       0       0       0       0
  6226 ;;      Locals:         0       0       0       0       0
  6227 ;;      Temps:          0       0       0       0       0
  6228 ;;      Totals:         0       0       0       0       0
  6229 ;;Total ram usage:        0 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; This function calls:
  6232 ;;		Nothing
  6233 ;; This function is called by:
  6234 ;;		_DS1307_GetTime
  6235 ;;		_DS1307_GetDate
  6236 ;;		_DS1307_readRam
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           
  6241                           ;psect for function _I2C_Ack
  6242  08FE                     _I2C_Ack:	
  6243                           
  6244                           ;i2c.c: 146: ACKDT = 0;
  6245                           
  6246                           ;incstack = 0
  6247                           ; Regs used in _I2C_Ack: []
  6248  08FE  1683               	bsf	3,5	;RP0=1, select bank1
  6249  08FF  1303               	bcf	3,6	;RP1=0, select bank1
  6250  0900  1291               	bcf	17,5	;volatile
  6251                           
  6252                           ;i2c.c: 147: ACKEN = 1;
  6253  0901  1611               	bsf	17,4	;volatile
  6254  0902                     l112:	
  6255                           ;i2c.c: 149: ;
  6256                           
  6257                           ;i2c.c: 148: while(ACKEN)
  6258                           
  6259  0902  1E11               	btfss	17,4	;volatile
  6260  0903  0008               	return
  6261  0904  2902               	goto	l112
  6262  0905                     __end_of_I2C_Ack:	
  6263                           
  6264                           	psect	text26
  6265  0BAA                     __ptext26:	
  6266 ;; *************** function _DS1307_Init *****************
  6267 ;; Defined at:
  6268 ;;		line 4 in file "DS1307.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  s               1    3[COMMON] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  2   20[None  ] int 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0, pclath, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6282 ;;      Params:         0       0       0       0       0
  6283 ;;      Locals:         1       0       0       0       0
  6284 ;;      Temps:          1       0       0       0       0
  6285 ;;      Totals:         2       0       0       0       0
  6286 ;;Total ram usage:        2 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    3
  6289 ;; This function calls:
  6290 ;;		_DS1307_Read
  6291 ;;		_DS1307_Write
  6292 ;;		_I2C_NoAck
  6293 ;;		_I2C_Restart
  6294 ;;		_I2C_Start
  6295 ;;		_I2C_Stop
  6296 ;; This function is called by:
  6297 ;;		_main
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           
  6302                           ;psect for function _DS1307_Init
  6303  0BAA                     _DS1307_Init:	
  6304                           
  6305                           ;DS1307.c: 6: unsigned char s = 0 ;
  6306                           
  6307                           ;incstack = 0
  6308                           ; Regs used in _DS1307_Init: [wreg+status,2+status,0+pclath+cstack]
  6309  0BAA  01F3               	clrf	DS1307_Init@s
  6310                           
  6311                           ;DS1307.c: 12: I2C_Start();
  6312  0BAB  120A  158A  20EB  120A  158A  	fcall	_I2C_Start
  6313                           
  6314                           ;DS1307.c: 13: DS1307_Write(0xd0);
  6315  0BB0  30D0               	movlw	208
  6316  0BB1  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  6317                           
  6318                           ;DS1307.c: 14: DS1307_Write(0x00);
  6319  0BB6  3000               	movlw	0
  6320  0BB7  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  6321                           
  6322                           ;DS1307.c: 15: I2C_Restart();
  6323  0BBC  120A  158A  20E5  120A  158A  	fcall	_I2C_Restart
  6324                           
  6325                           ;DS1307.c: 16: DS1307_Write(0xd1);
  6326  0BC1  30D1               	movlw	209
  6327  0BC2  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  6328                           
  6329                           ;DS1307.c: 17: s = DS1307_Read();
  6330  0BC7  120A  158A  20DB  120A  158A  	fcall	_DS1307_Read
  6331  0BCC  00F2               	movwf	??_DS1307_Init
  6332  0BCD  0872               	movf	??_DS1307_Init,w
  6333  0BCE  00F3               	movwf	DS1307_Init@s
  6334                           
  6335                           ;DS1307.c: 18: I2C_NoAck();
  6336  0BCF  120A  158A  20F7  120A  158A  	fcall	_I2C_NoAck
  6337                           
  6338                           ;DS1307.c: 19: I2C_Stop();
  6339  0BD4  120A  158A  20F1  120A  158A  	fcall	_I2C_Stop
  6340                           
  6341                           ;DS1307.c: 21: if (s & 0x80)
  6342  0BD9  1FF3               	btfss	DS1307_Init@s,7
  6343  0BDA  0008               	return
  6344                           
  6345                           ;DS1307.c: 22: {
  6346                           ;DS1307.c: 23: s = s & 0x7f ;
  6347  0BDB  0873               	movf	DS1307_Init@s,w
  6348  0BDC  397F               	andlw	127
  6349  0BDD  00F2               	movwf	??_DS1307_Init
  6350  0BDE  0872               	movf	??_DS1307_Init,w
  6351  0BDF  00F3               	movwf	DS1307_Init@s
  6352                           
  6353                           ;DS1307.c: 24: I2C_Start();
  6354  0BE0  120A  158A  20EB  120A  158A  	fcall	_I2C_Start
  6355                           
  6356                           ;DS1307.c: 25: DS1307_Write(0xD0);
  6357  0BE5  30D0               	movlw	208
  6358  0BE6  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  6359                           
  6360                           ;DS1307.c: 26: DS1307_Write(0x00);
  6361  0BEB  3000               	movlw	0
  6362  0BEC  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  6363                           
  6364                           ;DS1307.c: 27: DS1307_Write(s);
  6365  0BF1  0873               	movf	DS1307_Init@s,w
  6366  0BF2  120A  158A  20DF  120A  158A  	fcall	_DS1307_Write
  6367                           
  6368                           ;DS1307.c: 28: I2C_Stop();
  6369  0BF7  120A  158A  20F1   	fcall	_I2C_Stop
  6370                           
  6371                           ;DS1307.c: 29: return 1 ;
  6372                           ;	Return value of _DS1307_Init is never used
  6373  0BFA  0008               	return
  6374  0BFB                     __end_of_DS1307_Init:	
  6375                           ;DS1307.c: 30: }
  6376                           ;DS1307.c: 31: return 0 ;
  6377                           ;	Return value of _DS1307_Init is never used
  6378                           
  6379                           
  6380                           	psect	text27
  6381  08F1                     __ptext27:	
  6382 ;; *************** function _I2C_Stop *****************
  6383 ;; Defined at:
  6384 ;;		line 116 in file "i2c.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;		None
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;		None
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  1    wreg      void 
  6391 ;; Registers used:
  6392 ;;		None
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6398 ;;      Params:         0       0       0       0       0
  6399 ;;      Locals:         0       0       0       0       0
  6400 ;;      Temps:          0       0       0       0       0
  6401 ;;      Totals:         0       0       0       0       0
  6402 ;;Total ram usage:        0 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; This function calls:
  6405 ;;		Nothing
  6406 ;; This function is called by:
  6407 ;;		_DS1307_Init
  6408 ;;		_DS1307_SetTime
  6409 ;;		_DS1307_SetDate
  6410 ;;		_DS1307_GetTime
  6411 ;;		_DS1307_GetDate
  6412 ;;		_DS1307_readRam
  6413 ;;		_DS1307_writeRam
  6414 ;; This function uses a non-reentrant model
  6415 ;;
  6416                           
  6417                           
  6418                           ;psect for function _I2C_Stop
  6419  08F1                     _I2C_Stop:	
  6420                           
  6421                           ;i2c.c: 118: PEN = 1;
  6422                           
  6423                           ;incstack = 0
  6424                           ; Regs used in _I2C_Stop: []
  6425  08F1  1683               	bsf	3,5	;RP0=1, select bank1
  6426  08F2  1303               	bcf	3,6	;RP1=0, select bank1
  6427  08F3  1511               	bsf	17,2	;volatile
  6428  08F4                     l94:	
  6429                           ;i2c.c: 120: ;
  6430                           
  6431                           ;i2c.c: 119: while(PEN)
  6432                           
  6433  08F4  1D11               	btfss	17,2	;volatile
  6434  08F5  0008               	return
  6435  08F6  28F4               	goto	l94
  6436  08F7                     __end_of_I2C_Stop:	
  6437                           
  6438                           	psect	text28
  6439  08EB                     __ptext28:	
  6440 ;; *************** function _I2C_Start *****************
  6441 ;; Defined at:
  6442 ;;		line 108 in file "i2c.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;		None
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;		None
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      void 
  6449 ;; Registers used:
  6450 ;;		None
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6456 ;;      Params:         0       0       0       0       0
  6457 ;;      Locals:         0       0       0       0       0
  6458 ;;      Temps:          0       0       0       0       0
  6459 ;;      Totals:         0       0       0       0       0
  6460 ;;Total ram usage:        0 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; This function calls:
  6463 ;;		Nothing
  6464 ;; This function is called by:
  6465 ;;		_DS1307_Init
  6466 ;;		_DS1307_SetTime
  6467 ;;		_DS1307_SetDate
  6468 ;;		_DS1307_GetTime
  6469 ;;		_DS1307_GetDate
  6470 ;;		_DS1307_readRam
  6471 ;;		_DS1307_writeRam
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           
  6476                           ;psect for function _I2C_Start
  6477  08EB                     _I2C_Start:	
  6478                           
  6479                           ;i2c.c: 110: SEN = 1;
  6480                           
  6481                           ;incstack = 0
  6482                           ; Regs used in _I2C_Start: []
  6483  08EB  1683               	bsf	3,5	;RP0=1, select bank1
  6484  08EC  1303               	bcf	3,6	;RP1=0, select bank1
  6485  08ED  1411               	bsf	17,0	;volatile
  6486  08EE                     l88:	
  6487                           ;i2c.c: 112: ;
  6488                           
  6489                           ;i2c.c: 111: while(SEN)
  6490                           
  6491  08EE  1C11               	btfss	17,0	;volatile
  6492  08EF  0008               	return
  6493  08F0  28EE               	goto	l88
  6494  08F1                     __end_of_I2C_Start:	
  6495                           
  6496                           	psect	text29
  6497  08E5                     __ptext29:	
  6498 ;; *************** function _I2C_Restart *****************
  6499 ;; Defined at:
  6500 ;;		line 160 in file "i2c.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;		None
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;		None
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  2    6[None  ] int 
  6507 ;; Registers used:
  6508 ;;		None
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6514 ;;      Params:         0       0       0       0       0
  6515 ;;      Locals:         0       0       0       0       0
  6516 ;;      Temps:          0       0       0       0       0
  6517 ;;      Totals:         0       0       0       0       0
  6518 ;;Total ram usage:        0 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; This function calls:
  6521 ;;		Nothing
  6522 ;; This function is called by:
  6523 ;;		_DS1307_Init
  6524 ;;		_DS1307_GetTime
  6525 ;;		_DS1307_GetDate
  6526 ;;		_DS1307_readRam
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _I2C_Restart
  6532  08E5                     _I2C_Restart:	
  6533                           
  6534                           ;i2c.c: 162: RSEN = 1;
  6535                           
  6536                           ;incstack = 0
  6537                           ; Regs used in _I2C_Restart: []
  6538  08E5  1683               	bsf	3,5	;RP0=1, select bank1
  6539  08E6  1303               	bcf	3,6	;RP1=0, select bank1
  6540  08E7  1491               	bsf	17,1	;volatile
  6541  08E8                     l124:	
  6542                           ;i2c.c: 164: ;
  6543                           
  6544                           ;i2c.c: 163: while(RSEN)
  6545                           
  6546  08E8  1C91               	btfss	17,1	;volatile
  6547  08E9  0008               	return
  6548  08EA  28E8               	goto	l124
  6549  08EB                     __end_of_I2C_Restart:	
  6550                           
  6551                           	psect	text30
  6552  08F7                     __ptext30:	
  6553 ;; *************** function _I2C_NoAck *****************
  6554 ;; Defined at:
  6555 ;;		line 152 in file "i2c.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		None
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6569 ;;      Params:         0       0       0       0       0
  6570 ;;      Locals:         0       0       0       0       0
  6571 ;;      Temps:          0       0       0       0       0
  6572 ;;      Totals:         0       0       0       0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		_DS1307_Init
  6579 ;;		_DS1307_GetTime
  6580 ;;		_DS1307_GetDate
  6581 ;;		_DS1307_readRam
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           
  6586                           ;psect for function _I2C_NoAck
  6587  08F7                     _I2C_NoAck:	
  6588                           
  6589                           ;i2c.c: 154: ACKDT = 1;
  6590                           
  6591                           ;incstack = 0
  6592                           ; Regs used in _I2C_NoAck: []
  6593  08F7  1683               	bsf	3,5	;RP0=1, select bank1
  6594  08F8  1303               	bcf	3,6	;RP1=0, select bank1
  6595  08F9  1691               	bsf	17,5	;volatile
  6596                           
  6597                           ;i2c.c: 155: ACKEN = 1;
  6598  08FA  1611               	bsf	17,4	;volatile
  6599  08FB                     l118:	
  6600                           ;i2c.c: 157: ;
  6601                           
  6602                           ;i2c.c: 156: while(ACKEN)
  6603                           
  6604  08FB  1E11               	btfss	17,4	;volatile
  6605  08FC  0008               	return
  6606  08FD  28FB               	goto	l118
  6607  08FE                     __end_of_I2C_NoAck:	
  6608                           
  6609                           	psect	text31
  6610  08DF                     __ptext31:	
  6611 ;; *************** function _DS1307_Write *****************
  6612 ;; Defined at:
  6613 ;;		line 34 in file "DS1307.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  dat             1    wreg     unsigned char 
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;  dat             1    1[COMMON] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  1    wreg      void 
  6620 ;; Registers used:
  6621 ;;		wreg, status,2, status,0, pclath, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6627 ;;      Params:         0       0       0       0       0
  6628 ;;      Locals:         1       0       0       0       0
  6629 ;;      Temps:          0       0       0       0       0
  6630 ;;      Totals:         1       0       0       0       0
  6631 ;;Total ram usage:        1 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    2
  6634 ;; This function calls:
  6635 ;;		_I2C_Write
  6636 ;; This function is called by:
  6637 ;;		_DS1307_Init
  6638 ;;		_DS1307_SetTime
  6639 ;;		_DS1307_SetDate
  6640 ;;		_DS1307_GetTime
  6641 ;;		_DS1307_GetDate
  6642 ;;		_DS1307_readRam
  6643 ;;		_DS1307_writeRam
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           
  6648                           ;psect for function _DS1307_Write
  6649  08DF                     _DS1307_Write:	
  6650                           
  6651                           ;incstack = 0
  6652                           ; Regs used in _DS1307_Write: [wreg+status,2+status,0+pclath+cstack]
  6653                           ;DS1307_Write@dat stored from wreg
  6654  08DF  00F1               	movwf	DS1307_Write@dat
  6655                           
  6656                           ;DS1307.c: 36: I2C_Write(dat);
  6657  08E0  0871               	movf	DS1307_Write@dat,w
  6658  08E1  120A  158A  210E   	fcall	_I2C_Write
  6659  08E4  0008               	return
  6660  08E5                     __end_of_DS1307_Write:	
  6661                           
  6662                           	psect	text32
  6663  090E                     __ptext32:	
  6664 ;; *************** function _I2C_Write *****************
  6665 ;; Defined at:
  6666 ;;		line 124 in file "i2c.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;  dat             1    wreg     unsigned char 
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;  dat             1    0[COMMON] unsigned char 
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  1    wreg      void 
  6673 ;; Registers used:
  6674 ;;		wreg, status,2, status,0, pclath, cstack
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6680 ;;      Params:         0       0       0       0       0
  6681 ;;      Locals:         1       0       0       0       0
  6682 ;;      Temps:          0       0       0       0       0
  6683 ;;      Totals:         1       0       0       0       0
  6684 ;;Total ram usage:        1 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    1
  6687 ;; This function calls:
  6688 ;;		_I2C_Wait
  6689 ;; This function is called by:
  6690 ;;		_DS1307_Write
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           
  6695                           ;psect for function _I2C_Write
  6696  090E                     _I2C_Write:	
  6697                           
  6698                           ;incstack = 0
  6699                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  6700                           ;I2C_Write@dat stored from wreg
  6701  090E  00F0               	movwf	I2C_Write@dat
  6702                           
  6703                           ;i2c.c: 126: SSPBUF = dat;
  6704  090F  0870               	movf	I2C_Write@dat,w
  6705  0910  1283               	bcf	3,5	;RP0=0, select bank0
  6706  0911  1303               	bcf	3,6	;RP1=0, select bank0
  6707  0912  0093               	movwf	19	;volatile
  6708  0913                     l100:	
  6709                           ;i2c.c: 128: ;
  6710                           
  6711                           ;i2c.c: 127: while(BF)
  6712                           
  6713  0913  1683               	bsf	3,5	;RP0=1, select bank1
  6714  0914  1303               	bcf	3,6	;RP1=0, select bank1
  6715  0915  1814               	btfsc	20,0	;volatile
  6716  0916  2913               	goto	l100
  6717                           
  6718                           ;i2c.c: 129: I2C_Wait();
  6719  0917  120A  158A  2105   	fcall	_I2C_Wait
  6720  091A  0008               	return
  6721  091B                     __end_of_I2C_Write:	
  6722                           
  6723                           	psect	text33
  6724  08DB                     __ptext33:	
  6725 ;; *************** function _DS1307_Read *****************
  6726 ;; Defined at:
  6727 ;;		line 40 in file "DS1307.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;		None
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;                  1    wreg      unsigned char 
  6734 ;; Registers used:
  6735 ;;		wreg, status,2, status,0, pclath, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6741 ;;      Params:         0       0       0       0       0
  6742 ;;      Locals:         0       0       0       0       0
  6743 ;;      Temps:          0       0       0       0       0
  6744 ;;      Totals:         0       0       0       0       0
  6745 ;;Total ram usage:        0 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:    2
  6748 ;; This function calls:
  6749 ;;		_I2C_Read
  6750 ;; This function is called by:
  6751 ;;		_DS1307_Init
  6752 ;;		_DS1307_GetTime
  6753 ;;		_DS1307_GetDate
  6754 ;;		_DS1307_readRam
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           
  6759                           ;psect for function _DS1307_Read
  6760  08DB                     _DS1307_Read:	
  6761                           
  6762                           ;DS1307.c: 42: return I2C_Read();
  6763                           
  6764                           ;incstack = 0
  6765                           ; Regs used in _DS1307_Read: [wreg+status,2+status,0+pclath+cstack]
  6766  08DB  120A  158A  2129   	fcall	_I2C_Read
  6767  08DE  0008               	return
  6768  08DF                     __end_of_DS1307_Read:	
  6769                           
  6770                           	psect	text34
  6771  0929                     __ptext34:	
  6772 ;; *************** function _I2C_Read *****************
  6773 ;; Defined at:
  6774 ;;		line 132 in file "i2c.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;		None
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  temp            1    1[COMMON] unsigned char 
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      unsigned char 
  6781 ;; Registers used:
  6782 ;;		wreg, status,2, status,0, pclath, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6788 ;;      Params:         0       0       0       0       0
  6789 ;;      Locals:         1       0       0       0       0
  6790 ;;      Temps:          1       0       0       0       0
  6791 ;;      Totals:         2       0       0       0       0
  6792 ;;Total ram usage:        2 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    1
  6795 ;; This function calls:
  6796 ;;		_I2C_Wait
  6797 ;; This function is called by:
  6798 ;;		_DS1307_Read
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           
  6803                           ;psect for function _I2C_Read
  6804  0929                     _I2C_Read:	
  6805                           
  6806                           ;i2c.c: 134: unsigned char temp;
  6807                           ;i2c.c: 136: RCEN = 1;
  6808                           
  6809                           ;incstack = 0
  6810                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
  6811  0929  1683               	bsf	3,5	;RP0=1, select bank1
  6812  092A  1303               	bcf	3,6	;RP1=0, select bank1
  6813  092B  1591               	bsf	17,3	;volatile
  6814  092C                     l106:	
  6815                           ;i2c.c: 138: ;
  6816                           
  6817                           ;i2c.c: 137: while(!BF)
  6818                           
  6819  092C  1C14               	btfss	20,0	;volatile
  6820  092D  292C               	goto	l106
  6821                           
  6822                           ;i2c.c: 139: temp = SSPBUF;
  6823  092E  1283               	bcf	3,5	;RP0=0, select bank0
  6824  092F  1303               	bcf	3,6	;RP1=0, select bank0
  6825  0930  0813               	movf	19,w	;volatile
  6826  0931  00F0               	movwf	??_I2C_Read
  6827  0932  0870               	movf	??_I2C_Read,w
  6828  0933  00F1               	movwf	I2C_Read@temp
  6829                           
  6830                           ;i2c.c: 140: I2C_Wait();
  6831  0934  120A  158A  2105   	fcall	_I2C_Wait
  6832                           
  6833                           ;i2c.c: 141: return temp;
  6834  0937  0871               	movf	I2C_Read@temp,w
  6835  0938  0008               	return
  6836  0939                     __end_of_I2C_Read:	
  6837                           
  6838                           	psect	text35
  6839  0905                     __ptext35:	
  6840 ;; *************** function _I2C_Wait *****************
  6841 ;; Defined at:
  6842 ;;		line 167 in file "i2c.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;		None
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;		None
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		wreg, status,2
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6856 ;;      Params:         0       0       0       0       0
  6857 ;;      Locals:         0       0       0       0       0
  6858 ;;      Temps:          0       0       0       0       0
  6859 ;;      Totals:         0       0       0       0       0
  6860 ;;Total ram usage:        0 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; This function calls:
  6863 ;;		Nothing
  6864 ;; This function is called by:
  6865 ;;		_I2C_Write
  6866 ;;		_I2C_Read
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           
  6871                           ;psect for function _I2C_Wait
  6872  0905                     _I2C_Wait:	
  6873  0905                     l1890:	
  6874                           ;i2c.c: 170: ;
  6875                           
  6876                           ;i2c.c: 169: while ((SSPCON2 & 0x1F ) || ( SSPSTAT & 0x04 ))
  6877                           
  6878                           ;incstack = 0
  6879                           ; Regs used in _I2C_Wait: [wreg+status,2]
  6880                           
  6881  0905  1683               	bsf	3,5	;RP0=1, select bank1
  6882  0906  1303               	bcf	3,6	;RP1=0, select bank1
  6883  0907  0811               	movf	17,w	;volatile
  6884  0908  391F               	andlw	31
  6885  0909  1D03               	btfss	3,2
  6886  090A  2905               	goto	l1890
  6887  090B  1D14               	btfss	20,2	;volatile
  6888  090C  0008               	return
  6889  090D  2905               	goto	l1890
  6890  090E                     __end_of_I2C_Wait:	
  6891  007E                     btemp	set	126	;btemp
  6892  007E                     wtemp	set	126
  6893  007E                     wtemp0	set	126
  6894  0080                     wtemp1	set	128
  6895  0082                     wtemp2	set	130
  6896  0084                     wtemp3	set	132
  6897  0086                     wtemp4	set	134
  6898  0088                     wtemp5	set	136
  6899  007F                     wtemp6	set	127
  6900  007E                     ttemp	set	126
  6901  007E                     ttemp0	set	126
  6902  0081                     ttemp1	set	129
  6903  0084                     ttemp2	set	132
  6904  0087                     ttemp3	set	135
  6905  007F                     ttemp4	set	127
  6906  007E                     ltemp	set	126
  6907  007E                     ltemp0	set	126
  6908  0082                     ltemp1	set	130
  6909  0086                     ltemp2	set	134
  6910  0080                     ltemp3	set	128


Data Sizes:
    Strings     90
    Constant    67
    Data        24
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     42      74
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[5]), 
		 -> STR_9(CODE[8]), STR_8(CODE[8]), STR_7(CODE[6]), setText(CODE[5]), 
		 -> STR_6(CODE[8]), STR_5(CODE[7]), STR_4(CODE[7]), STR_3(CODE[2]), 
		 -> STR_2(CODE[4]), STR_1(CODE[17]), LCDWriteInt@str(BANK0[6]), 

    DS1307_writeRam@ptr	PTR unsigned char  size(1) Largest target is 2
		 -> runningHours(BANK0[2]), runningMinutes(BANK0[2]), 

    DS1307_readRam@ptr	PTR unsigned char  size(1) Largest target is 2
		 -> runningHours(BANK0[2]), runningMinutes(BANK0[2]), 

    DS1307_GetDate@y_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 

    DS1307_GetDate@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetDate@d_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetDate@n_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@n(BANK0[1]), 

    DS1307_GetTime@h_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@a(BANK0[1]), 

    DS1307_GetTime@m_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@b(BANK0[1]), 

    DS1307_GetTime@s_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> readClock@c(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_LCDGotoXY
    _main->_LCDInit
    _main->_LCDWriteString
    _showClock->_LCDGotoXY
    _showRunningTime->_LCDGotoXY
    _readClock->___wmul
    _DS1307_writeRam->_DS1307_Write
    _DS1307_GetTime->_DS1307_Write
    _DS1307_GetDate->_DS1307_Write
    _doMenu->_LCDGotoXY
    _doMenu->_LCDWriteString
    _LCDWriteInt->_LCDWriteString
    ___wmul->___awdiv
    _DS1307_SetTime->_DS1307_Write
    _DS1307_SetDate->_DS1307_Write
    _clearPrompt->_LCDGotoXY
    _clearPrompt->_LCDWriteString
    _LCDWriteString->_LCDByte
    _LCDGotoXY->_LCDByte
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _DS1307_readRam->_DS1307_Write
    _DS1307_Init->_DS1307_Write
    _DS1307_Write->_I2C_Write
    _DS1307_Read->_I2C_Read

Critical Paths under _main in BANK0

    _main->_doMenu
    _showClock->_showDate
    _showRunningTime->_LCDWriteInt
    _readClock->___wmul
    _doMenu->_showDate
    _showTime->_LCDWriteInt
    _showDate->_LCDWriteInt
    _LCDWriteInt->___wmul
    _clearPrompt->_LCDGotoXY

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   96099
                                             39 BANK0      3     3      0
                        _DS1307_Init
                     _DS1307_readRam
                           _I2C_Init
                            _LCDByte
                          _LCDGotoXY
                            _LCDInit
                        _LCDWriteInt
                     _LCDWriteString
                             ___wmul
                        _clearPrompt
                             _doMenu
                          _readClock
                         _readInputs
                          _showClock
 ---------------------------------------------------------------------------------
 (1) _showClock                                            0     0      0   37675
                          _LCDGotoXY
                           _showDate
                    _showRunningTime
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showRunningTime                                      2     2      0   15117
                                             19 BANK0      2     2      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _readClock                                            7     7      0    5116
                                              2 BANK0      7     7      0
                     _DS1307_GetDate
                     _DS1307_GetTime
                    _DS1307_writeRam
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _DS1307_writeRam                                      7     3      4     377
                                              2 COMMON     7     3      4
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetTime                                       4     2      2     266
                                              2 COMMON     4     2      2
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_GetDate                                       5     2      3     341
                                              2 COMMON     5     2      3
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _doMenu                                              17    17      0   30590
                                             22 BANK0     17    17      0
                     _DS1307_SetDate
                     _DS1307_SetTime
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            ___awdiv
                            ___awmod
                         _readInputs
                           _showDate
                           _showTime
 ---------------------------------------------------------------------------------
 (2) _showTime                                             1     1      0    9277
                                             19 BANK0      1     1      0
                            _LCDByte
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (2) _showDate                                             3     3      0   10816
                                             19 BANK0      3     3      0
                            _LCDByte
                        _LCDWriteInt
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _LCDWriteInt                                         17    14      3    7942
                                              2 BANK0     17    14      3
                     _LCDWriteString
                            ___awdiv
                            ___awmod (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1470
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    2208
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _readInputs                                           4     4      0      23
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1144
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetTime                                       3     1      2     216
                                              2 COMMON     3     1      2
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (2) _DS1307_SetDate                                       4     1      3     291
                                              2 COMMON     4     1      3
                       _DS1307_Write
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (1) _clearPrompt                                          0     0      0    4958
                          _LCDGotoXY
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (4) _LCDWriteString                                       2     0      2    2493
                                             12 COMMON     2     0      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _LCDGotoXY                                            3     2      1    2465
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1474
                                             12 COMMON     2     2      0
                                              0 BANK0      1     1      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDByte                                              7     6      1    1335
                                              5 COMMON     7     6      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (6) _LCDBusyLoop                                          5     5      0     117
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS1307_readRam                                       7     3      4     422
                                              2 COMMON     7     3      4
                        _DS1307_Read
                       _DS1307_Write
                            _I2C_Ack
                          _I2C_NoAck
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS1307_Init                                          2     2      0     136
                                              2 COMMON     2     2      0
                        _DS1307_Read
                       _DS1307_Write
                          _I2C_NoAck
                        _I2C_Restart
                          _I2C_Start
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Restart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DS1307_Write                                         1     1      0      44
                                              1 COMMON     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            1     1      0      22
                                              0 COMMON     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _DS1307_Read                                          0     0      0      23
                           _I2C_Read
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             2     2      0      23
                                              0 COMMON     2     2      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1307_Init
     _DS1307_Read
       _I2C_Read
         _I2C_Wait
     _DS1307_Write
       _I2C_Write
         _I2C_Wait
     _I2C_NoAck
     _I2C_Restart
     _I2C_Start
     _I2C_Stop
   _DS1307_readRam
     _DS1307_Read
       _I2C_Read
         _I2C_Wait
     _DS1307_Write
       _I2C_Write
         _I2C_Wait
     _I2C_Ack
     _I2C_NoAck
     _I2C_Restart
     _I2C_Start
     _I2C_Stop
   _I2C_Init
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   ___wmul
     ___awdiv (ARG)
   _clearPrompt
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _doMenu
     _DS1307_SetDate
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Start
       _I2C_Stop
     _DS1307_SetTime
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Start
       _I2C_Stop
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     ___awdiv
     ___awmod
     _readInputs
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
   _readClock
     _DS1307_GetDate
       _DS1307_Read
         _I2C_Read
           _I2C_Wait
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Ack
       _I2C_NoAck
       _I2C_Restart
       _I2C_Start
       _I2C_Stop
     _DS1307_GetTime
       _DS1307_Read
         _I2C_Read
           _I2C_Wait
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Ack
       _I2C_NoAck
       _I2C_Restart
       _I2C_Start
       _I2C_Stop
     _DS1307_writeRam
       _DS1307_Write
         _I2C_Write
           _I2C_Wait
       _I2C_Start
       _I2C_Stop
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _readInputs
   _showClock
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _showDate
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___awdiv (ARG)
     _showRunningTime
       _LCDByte
         _LCDBusyLoop
       _LCDGotoXY
         _LCDByte
           _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___awdiv
       ___awmod
     _showTime
       _LCDByte
         _LCDBusyLoop
       _LCDWriteInt
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      58      12        0.0%
ABS                  0      0      58       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed May 25 21:27:54 2016

            ?_LCDBusyLoop 0070        __size_of_I2C_NoAck 0007                         pc 0002  
      __size_of_I2C_Start 0006               __CFG_CP$OFF 0000        __size_of_I2C_Write 000D  
                      _BF 04A0                        l94 08F4                        l88 08EE  
            ___awdiv@sign 0076                        fsr 0004       ___wmul@multiplicand 007B  
             __CFG_LVP$ON 0000                       l100 0913                       l112 0902  
                     l106 092C                       l124 08E8                       l118 08FB  
                     l154 0B73                       l155 0B76                       l340 042A  
                     l316 036D                       l191 09DD                       l431 0C88  
                     l192 09C6                       l328 03C5                       l370 05D6  
                     l516 09F2                       l382 064A                       l358 057B  
                     l289 0102                       l394 06BD                       _RB1 0031  
                     _RB2 0032                       _RB4 0034                       _RB5 0035  
                     _RD2 0042                       _RD3 0043                       _PEN 048A  
            __CFG_CPD$OFF 0000                       _SEN 0488               __CFG_WRT$ON 0000  
                     _day 0052           __end_of_I2C_Ack 0905                       fsr0 0004  
                     indf 0000              ___awmod@sign 0076              __CFG_FOSC$XT 0000  
            _DS1307_Write 08DF      __size_of_I2C_Restart 0006   LCDWriteInt@field_length 0024  
         __end_of_LCDByte 0BAA           __end_of_LCDInit 0AD3              ?_LCDWriteInt 0022  
             LCDByte@temp 007B                      l2000 0D50                      l2120 0B26  
                    l2112 0B20                      l2122 0B34                      l2130 0B4D  
                    l2108 0B19                      l2060 0F8F                      l2036 0F17  
                    l2134 0B55                      l2126 0B42                      l2072 0FCB  
                    l2048 0F53                      l2224 0A74                      l2330 0CC1  
                    l2090 09C8                      l2226 0A94                      l2402 02C4  
                    l2332 0CE3                      l2092 09CA                      l2084 0FF5  
                    l2238 0016                      l2078 0FD9                      l2430 0307  
                    l2414 02FB                      l2096 09CF                      l2504 03A3  
                    l2432 0312                      l2530 0434                      l2506 03E5  
                    l2620 05E6                      l2540 044A                      l2532 0436  
                    l2508 03EA                      l2436 0319                      l2630 05FF  
                    l2462 0377                      l2470 034B                      l2704 06FF  
                    l2552 050F                      l2472 0380                      l2464 0379  
                    l2626 05B3                      l2546 0462                      l2538 0408  
                    l2474 0385                      l2554 051A                      l1852 0D60  
                    l2708 07DD                      l2660 061D                      l2628 05FA  
                    l2662 0677                      l2654 0663                      l2558 0521  
                    l1944 0999                      l2664 067C                      l2592 0557  
                    l2496 03CF                      l2760 00F5                      l1890 0905  
                    l2594 0590                      l2586 0589                      l2498 03D1  
                    l2770 010D                      l1948 09E8                      l2596 0595  
                    l2780 0145                      l2756 00EF                      l2748 0154  
                    l1974 0D11                      l2694 069A                      l1992 0D3D  
                    l1984 0D19                      l1968 0D06                      l2696 06DF  
                    l2688 06CB                      l2784 0197                      l1986 0D27  
                    l1996 0D48                      STR_1 0853                      STR_2 08A7  
                    STR_3 08AB                      STR_4 087C                      STR_5 0883  
                    STR_6 0864                      STR_7 089C                      STR_8 0874  
                    STR_9 086C                      u2015 0368                      u2205 0450  
                    u1415 0B5E                      u2215 0458                      u1505 09FA  
                    u2225 0460                      u1355 0D68                      u1435 0B7C  
                    u2155 0425                      u1365 0D74                      u1445 0B94  
                    u2085 03C0                      u1375 0D8A                      u2415 0642  
                    u2345 05D0                      u1555 0D1C                      u2275 0574  
                    u1805 0B29                      u1575 0D28                      u1495 09F3  
                    u2535 06E5                      u1825 0B3A                      u1585 0D34  
                    u2545 06ED                      u1905 0C5E                      u1835 0B43  
                    u1595 0D3E                      u1755 0FED                      u2555 06F5  
                    u2707 00BA                      u1925 0CD1                      u2565 06FD  
                    u2485 06B7                      u2717 00C9                      u1935 022D  
                    u2727 00D8                      u2737 000C                      u1865 0A84  
                    u1945 02CA                      u2747 0A9F                      u1955 02DF  
                    u2685 0195                      u1895 0022                      u2697 00AB  
                    _RCEN 048B                      _RSEN 0489                      _date 0050  
                    _main 0034                      _hour 0054        __size_of_LCDGotoXY 0026  
        __end_of_I2C_Init 0929          __end_of_I2C_Read 0939                      _year 005E  
                    btemp 007E          __end_of_I2C_Wait 090E          __end_of_I2C_Stop 08F7  
                    ltemp 007E                      start 0000                      ttemp 007E  
                    wtemp 007E          DS1307_SetDate@dd 0072          DS1307_SetDate@mm 0073  
        DS1307_SetDate@nn 0075          DS1307_SetDate@yy 0074         ??_DS1307_writeRam 0076  
                   ?_main 0070                     _ACKEN 048C                     _ACKDT 048D  
         __end_of___awdiv 0D55                     STR_10 08A2                     STR_11 0896  
                   STR_12 0890                     STR_13 088A             __CFG_WDTE$OFF 0000  
         __end_of___awmod 0B5A              LCDInit@style 0020           ___awdiv@divisor 0070  
         ___awdiv@counter 0075                     _PORTD 0008                     _TRISD 0088  
           __CFG_PWRTE$ON 0000          DS1307_SetTime@hh 0074          DS1307_SetTime@mm 0072  
        DS1307_SetTime@ss 0073            _DS1307_GetDate 0DB2            _DS1307_GetTime 0BFB  
       __end_of_I2C_NoAck 08FE                     _month 0058                     _state 0065  
            _runningHours 0066         __end_of_I2C_Start 08F1           __end_of_setText 0853  
       __end_of_I2C_Write 091B            __CFG_BOREN$OFF 0000                     pclath 000A  
                   ltemp0 007E                     ltemp1 0082                     ltemp2 0086  
                   ltemp3 0080            _DS1307_SetDate 0A33            _DS1307_SetTime 0A0B  
                   ttemp0 007E                     ttemp1 0081                     ttemp2 0084  
                   ttemp3 0087                     ttemp4 007F                     status 0003  
                   wtemp0 007E                     wtemp1 0080                     wtemp2 0082  
                   wtemp3 0084                     wtemp4 0086                     wtemp5 0088  
                   wtemp6 007F           __initialization 07E8      __size_of_clearPrompt 0015  
            __end_of_main 019D  __size_of_showRunningTime 0057            _DS1307_readRam 0CA3  
               ??_I2C_Ack 0070                    ??_main 0047         __end_of_LCDGotoXY 09E4  
           LCDByte@isdata 0075                 ??_LCDByte 0076                 ??_LCDInit 007C  
  __end_of_DS1307_GetDate 0E13    __end_of_DS1307_GetTime 0C4C    __end_of_DS1307_SetDate 0A61  
        ___awdiv@dividend 0072    __end_of_DS1307_SetTime 0A33                    _SSPADD 0093  
                  _TRISC3 043B                    _TRISC4 043C                    _SSPCON 0014  
                  _SSPBUF 0013              DS1307_Init@s 0073      DS1307_readRam@length 0074  
    DS1307_readRam@offset 0072            _LCDWriteString 0999    __end_of_DS1307_readRam 0CFC  
                  ___wmul 09E4                 ??___awdiv 0074                    _doMenu 0307  
               ??___awmod 0074      __size_of_LCDBusyLoop 005D          ___awdiv@quotient 0077  
                  _minute 0056           ___awmod@divisor 0070     __end_of_daysOfTheWeek 0842  
         ___awmod@counter 0075                    _ttable 0810             _runningMinute 005A  
               ?_I2C_Init 0070                 ?_I2C_Read 0070                 ?_I2C_Wait 0070  
        __end_of_showDate 0EC5           ?_DS1307_GetDate 0072                 ?_I2C_Stop 0070  
            LCDWriteInt@c 0032          __end_of_showTime 0B0F           ?_DS1307_GetTime 0072  
         ?_DS1307_SetDate 0072           ?_DS1307_SetTime 0072      __size_of_LCDWriteInt 013B  
 __end_of__initialization 07FC    __end_of_LCDWriteString 09BE                 LCDByte@hn 0078  
               LCDByte@ln 0079            __pcstackCOMMON 0070           ?_DS1307_readRam 0072  
            __pidataBANK0 095F         ??_showRunningTime 007E                ??_I2C_Init 0070  
              ??_I2C_Read 0070                ??_I2C_Wait 0070                ??_I2C_Stop 0070  
           ??_DS1307_Init 0072             ??_DS1307_Read 0072                __pbssBANK0 0062  
      __size_of_readClock 016A           ?_LCDWriteString 007C           _DS1307_writeRam 0A61  
              __pmaintext 0034              I2C_Read@temp 0071                   ?___wmul 0079  
                 ?_doMenu 0070                   _I2C_Ack 08FE        __size_of_showClock 0022  
           ??_I2C_Restart 0070                   _LCDByte 0B5A                   _LCDInit 0A98  
                 _SSPCON2 0091                   _SSPSTAT 0094                __stringtab 0800  
               _I2C_NoAck 08F7                 _I2C_Start 08EB                 _I2C_Write 090E  
     __end_of_DS1307_Init 0BFB       __end_of_DS1307_Read 08DF                   _bButton 0064  
         _next_menu_clear 0062                 ?_showDate 0070                 ?_showTime 0070  
            I2C_Write@dat 0070                   ___awdiv 0CFC                   ___awmod 0B0F  
         __size_of___wmul 0027                _readInputs 0005           __size_of_doMenu 04E1  
                 __ptext1 0977                   __ptext2 0C4C                   __ptext3 019D  
                 __ptext4 0A61                   __ptext5 0BFB                   __ptext6 0DB2  
                 __ptext7 0307                   __ptext8 0AD3                   __ptext9 0E13  
       __end_of_readClock 0307                   doMenu@d 0041                   doMenu@h 0039  
                 doMenu@m 003B                   doMenu@n 003F                   doMenu@s 003D  
                 doMenu@y 0045          ___awmod@dividend 0072                   _seconds 005C  
                 _setText 084E                 _LCDGotoXY 09BE       __end_of_I2C_Restart 08EB  
 __end_of_DS1307_writeRam 0A98      end_of_initialization 07FC            _runningMinutes 0068  
       __end_of_monthDays 084E                ?_I2C_NoAck 0070                ?_I2C_Start 0070  
       __end_of_showClock 0999             ??_clearPrompt 007E                ?_I2C_Write 0070  
              ??_showDate 0033                ??_showTime 0033     LCDWriteInt@characters 0028  
        ??_DS1307_GetDate 0075          ??_DS1307_GetTime 0074         LCDWriteString@msg 007C  
        ??_DS1307_SetDate 0075          ??_DS1307_SetTime 0074                 _TRISBbits 0086  
               _TRISDbits 0088                ?_LCDGotoXY 007C         __size_of_I2C_Init 000E  
       __size_of_I2C_Read 0010         __size_of_I2C_Wait 0009         __size_of_I2C_Stop 0006  
             _DS1307_Init 0BAA               _DS1307_Read 08DB       _showRunningTime$739 0033  
              LCDGotoXY@x 0020                LCDGotoXY@y 007C          ??_DS1307_readRam 0076  
         _showRunningTime 0C4C             ??_LCDBusyLoop 0070               ?_readInputs 0070  
     __end_of_clearPrompt 095F            __end_of___wmul 0A0B            __end_of_doMenu 07E8  
          __end_of_ttable 082C               _I2C_Restart 08E5       start_initialization 07E8  
           ?_DS1307_Write 0070             ??_LCDWriteInt 0025          ??_LCDWriteString 007E  
        ?_DS1307_writeRam 0072               ??_I2C_NoAck 0070                readClock@a 0026  
              readClock@b 0027                readClock@c 0028                readClock@n 0025  
             ??_I2C_Start 0070               ??_I2C_Write 0070           DS1307_Write@dat 0071  
                ??___wmul 007D                  ??_doMenu 0036                init_fetch0 0939  
             __pdataBANK0 004A                  ?_I2C_Ack 0070       __end_of_LCDBusyLoop 0DB2  
                ?_LCDByte 0075                  ?_LCDInit 0070            ??_DS1307_Write 0071  
                LCDByte@c 007A                 ___latbits 0002             __pcstackBANK0 0020  
             ??_LCDGotoXY 007D              _menuFunction 0061       __size_of_readInputs 002F  
       DS1307_readRam@ptr 0078   __end_of_showRunningTime 0CA3          LCDWriteInt@F1142 004A  
     __end_of_LCDWriteInt 1000               _clearPrompt 094A                  ?___awdiv 0070  
                ?___awmod 0070         __size_of_showDate 00B2         __size_of_showTime 003C  
               __pstrings 0800             _daysOfTheWeek 082C                  _I2C_Init 091B  
                _I2C_Read 0929                  _I2C_Wait 0905                  _I2C_Stop 08F1  
               _readClock 019D           LCDBusyLoop@busy 0072           LCDBusyLoop@temp 0073  
               _last_hour 0060            ___wmul@product 0020                 _monthDays 0842  
               _showClock 0977               _LCDBusyLoop 0D55          __size_of_I2C_Ack 0007  
             __stringbase 080F         ___wmul@multiplier 0079          __size_of_LCDByte 0050  
        __size_of_LCDInit 003B                ?_readClock 0070               _LCDWriteInt 0EC5  
   DS1307_writeRam@length 0074     DS1307_writeRam@offset 0072              ?_DS1307_Init 0070  
            ?_DS1307_Read 0070               doMenu@m_311 0043          ?_showRunningTime 0070  
    __end_of_DS1307_Write 08E5                ?_showClock 0070              ??_readInputs 0070  
        __size_of___awdiv 0059          __size_of___awmod 004B         LCDBusyLoop@status 0074  
      __end_of__stringtab 0810              ?_I2C_Restart 0070       DS1307_GetDate@d_ptr 0072  
     DS1307_GetDate@m_ptr 0073       DS1307_GetDate@n_ptr 0076       DS1307_GetDate@y_ptr 0074  
         LCDWriteInt@from 0030                  __ptext10 0EC5                  __ptext11 09E4  
                __ptext20 0A98                  __ptext12 0CFC                  __ptext21 0B5A  
                __ptext13 0005                  __ptext30 08F7                  __ptext22 0D55  
                __ptext14 0B0F                  __ptext31 08DF                  __ptext23 091B  
                __ptext15 0A0B                  __ptext32 090E                  __ptext24 0CA3  
                __ptext16 0A33                  __ptext33 08DB                  __ptext25 08FE  
                __ptext17 094A                  __ptext34 0929                  __ptext26 0BAA  
                __ptext18 0999                  __ptext35 0905                  __ptext27 08F1  
                __ptext19 09BE                  __ptext28 08EB                  __ptext29 08E5  
      DS1307_writeRam@ptr 0078        __end_of_readInputs 0034             __size_of_main 0169  
               showDate@d 0034                  _showDate 0E13                  _showTime 0AD3  
             ??_readClock 0022                  init_ram0 093D   __size_of_DS1307_GetDate 0061  
 __size_of_DS1307_GetTime 0051   __size_of_DS1307_SetDate 002E            LCDWriteInt@val 0022  
          LCDWriteInt@str 002A   __size_of_DS1307_SetTime 0028              ?_clearPrompt 0070  
               stringcode 080A  __size_of_DS1307_writeRam 0037               ??_showClock 007E  
 __size_of_DS1307_readRam 0059                  stringdir 080A                  stringtab 0800  
   __size_of_DS1307_Write 0006       DS1307_GetTime@h_ptr 0075       DS1307_GetTime@m_ptr 0072  
     DS1307_GetTime@s_ptr 0073      __size_of_DS1307_Init 0051      __size_of_DS1307_Read 0004  
      readInputs@pinstate 0073   __size_of_LCDWriteString 0025  
